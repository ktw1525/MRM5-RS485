
MRM5-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004918  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080049d0  080049d0  000059d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a94  08004a94  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a9c  08004a9c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00005a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004aa4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000068  08004b0c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08004b0c  000062e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df67  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e2  00000000  00000000  00013ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000161e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000916  00000000  00000000  00016dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c65  00000000  00000000  000176d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddef  00000000  00000000  0003033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c1ea  00000000  00000000  0003e12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003150  00000000  00000000  000da358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000dd4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080049b8 	.word	0x080049b8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	080049b8 	.word	0x080049b8

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	@ (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	@ (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	@ (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <_write>:
static void MX_ADC1_Init(void);
static void MX_DAC1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, len);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	b29a      	uxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <_write+0x24>)
 8000642:	f002 fbed 	bl	8002e20 <HAL_UART_Transmit>
  return len;
 8000646:	687b      	ldr	r3, [r7, #4]
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b004      	add	sp, #16
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000fc 	.word	0x200000fc

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fbd3 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f82d 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f967 	bl	8000934 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000666:	f000 f871 	bl	800074c <MX_ADC1_Init>
  MX_DAC1_Init();
 800066a:	f000 f8d9 	bl	8000820 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 800066e:	f000 f913 	bl	8000898 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  int i = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f000 fc4a 	bl	8000f10 <HAL_Delay>
	  i = (i + 1) % 4096;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <main+0x58>)
 8000682:	4013      	ands	r3, r2
 8000684:	d503      	bpl.n	800068e <main+0x3a>
 8000686:	3b01      	subs	r3, #1
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <main+0x5c>)
 800068a:	4313      	orrs	r3, r2
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <main+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	f001 fa09 	bl	8001aae <HAL_DAC_SetValue>
	  printf("%d\r\n",i);
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <main+0x64>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f003 faea 	bl	8003c7c <iprintf>
	  HAL_Delay(1);
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	e7e4      	b.n	8000676 <main+0x22>
 80006ac:	80000fff 	.word	0x80000fff
 80006b0:	fffff000 	.word	0xfffff000
 80006b4:	200000e8 	.word	0x200000e8
 80006b8:	080049d0 	.word	0x080049d0

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b093      	sub	sp, #76	@ 0x4c
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	2410      	movs	r4, #16
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2338      	movs	r3, #56	@ 0x38
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 fb31 	bl	8003d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	2310      	movs	r3, #16
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f003 fb2a 	bl	8003d34 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fc9d 	bl	8002024 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2202      	movs	r2, #2
 80006ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	0052      	lsls	r2, r2, #1
 80006f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2240      	movs	r2, #64	@ 0x40
 8000702:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	193b      	adds	r3, r7, r4
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fcd5 	bl	80020bc <HAL_RCC_OscConfig>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000716:	f000 f999 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	003b      	movs	r3, r7
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	003b      	movs	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000732:	003b      	movs	r3, r7
 8000734:	2100      	movs	r1, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f001 ffda 	bl	80026f0 <HAL_RCC_ClockConfig>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000740:	f000 f984 	bl	8000a4c <Error_Handler>
  }
}
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b013      	add	sp, #76	@ 0x4c
 800074a:	bd90      	pop	{r4, r7, pc}

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	0018      	movs	r0, r3
 8000756:	230c      	movs	r3, #12
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f003 faea 	bl	8003d34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000760:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <MX_ADC1_Init+0xcc>)
 8000762:	4a2e      	ldr	r2, [pc, #184]	@ (800081c <MX_ADC1_Init+0xd0>)
 8000764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000766:	4b2c      	ldr	r3, [pc, #176]	@ (8000818 <MX_ADC1_Init+0xcc>)
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	05d2      	lsls	r2, r2, #23
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076e:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <MX_ADC1_Init+0xcc>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <MX_ADC1_Init+0xcc>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077a:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_ADC1_Init+0xcc>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <MX_ADC1_Init+0xcc>)
 8000782:	2204      	movs	r2, #4
 8000784:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_ADC1_Init+0xcc>)
 8000788:	2200      	movs	r2, #0
 800078a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_ADC1_Init+0xcc>)
 800078e:	2200      	movs	r2, #0
 8000790:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_ADC1_Init+0xcc>)
 8000794:	2200      	movs	r2, #0
 8000796:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_ADC1_Init+0xcc>)
 800079a:	2201      	movs	r2, #1
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007a0:	2220      	movs	r2, #32
 80007a2:	2100      	movs	r1, #0
 80007a4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007b4:	222c      	movs	r2, #44	@ 0x2c
 80007b6:	2100      	movs	r1, #0
 80007b8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007c0:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007ce:	223c      	movs	r2, #60	@ 0x3c
 80007d0:	2100      	movs	r1, #0
 80007d2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_ADC1_Init+0xcc>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fcb9 	bl	8001154 <HAL_ADC_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007e6:	f000 f931 	bl	8000a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_ADC1_Init+0xcc>)
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fe4e 	bl	80014a4 <HAL_ADC_ConfigChannel>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800080c:	f000 f91e 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b004      	add	sp, #16
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000084 	.word	0x20000084
 800081c:	40012400 	.word	0x40012400

08000820 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	0018      	movs	r0, r3
 800082a:	2324      	movs	r3, #36	@ 0x24
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f003 fa80 	bl	8003d34 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_DAC1_Init+0x70>)
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <MX_DAC1_Init+0x74>)
 8000838:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_DAC1_Init+0x70>)
 800083c:	0018      	movs	r0, r3
 800083e:	f001 f8bd 	bl	80019bc <HAL_DAC_Init>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8000846:	f000 f901 	bl	8000a4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000868:	1d39      	adds	r1, r7, #4
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_DAC1_Init+0x70>)
 800086c:	2200      	movs	r2, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f001 f944 	bl	8001afc <HAL_DAC_ConfigChannel>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000878:	f000 f8e8 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800087c:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <MX_DAC1_Init+0x70>)
 800087e:	2100      	movs	r1, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f001 f8be 	bl	8001a02 <HAL_DAC_Start>
  /* USER CODE END DAC1_Init 2 */

}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b00a      	add	sp, #40	@ 0x28
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	200000e8 	.word	0x200000e8
 8000894:	40007400 	.word	0x40007400

08000898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089c:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_USART1_UART_Init+0x94>)
 800089e:	4a24      	ldr	r2, [pc, #144]	@ (8000930 <MX_USART1_UART_Init+0x98>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008a4:	22e1      	movs	r2, #225	@ 0xe1
 80008a6:	0252      	lsls	r2, r2, #9
 80008a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fa46 	bl	8002d74 <HAL_UART_Init>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f8ae 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 f81d 	bl	8003934 <HAL_UARTEx_SetTxFifoThreshold>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008fe:	f000 f8a5 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_USART1_UART_Init+0x94>)
 8000904:	2100      	movs	r1, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f003 f854 	bl	80039b4 <HAL_UARTEx_SetRxFifoThreshold>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000910:	f000 f89c 	bl	8000a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <MX_USART1_UART_Init+0x94>)
 8000916:	0018      	movs	r0, r3
 8000918:	f002 ffd2 	bl	80038c0 <HAL_UARTEx_DisableFifoMode>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 f894 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	200000fc 	.word	0x200000fc
 8000930:	40013800 	.word	0x40013800

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b08b      	sub	sp, #44	@ 0x2c
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	2414      	movs	r4, #20
 800093c:	193b      	adds	r3, r7, r4
 800093e:	0018      	movs	r0, r3
 8000940:	2314      	movs	r3, #20
 8000942:	001a      	movs	r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	f003 f9f5 	bl	8003d34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a3c <MX_GPIO_Init+0x108>)
 800094c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000950:	2102      	movs	r1, #2
 8000952:	430a      	orrs	r2, r1
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
 8000956:	4b39      	ldr	r3, [pc, #228]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095a:	2202      	movs	r2, #2
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b36      	ldr	r3, [pc, #216]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000966:	4b35      	ldr	r3, [pc, #212]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000968:	2104      	movs	r1, #4
 800096a:	430a      	orrs	r2, r1
 800096c:	635a      	str	r2, [r3, #52]	@ 0x34
 800096e:	4b33      	ldr	r3, [pc, #204]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000972:	2204      	movs	r2, #4
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097a:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <MX_GPIO_Init+0x108>)
 800097c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000980:	2120      	movs	r1, #32
 8000982:	430a      	orrs	r2, r1
 8000984:	635a      	str	r2, [r3, #52]	@ 0x34
 8000986:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800098a:	2220      	movs	r2, #32
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b2a      	ldr	r3, [pc, #168]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000996:	4b29      	ldr	r3, [pc, #164]	@ (8000a3c <MX_GPIO_Init+0x108>)
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	635a      	str	r2, [r3, #52]	@ 0x34
 800099e:	4b27      	ldr	r3, [pc, #156]	@ (8000a3c <MX_GPIO_Init+0x108>)
 80009a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	01d2      	lsls	r2, r2, #7
 80009b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2288      	movs	r2, #136	@ 0x88
 80009b6:	0352      	lsls	r2, r2, #13
 80009b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <MX_GPIO_Init+0x10c>)
 80009c4:	0019      	movs	r1, r3
 80009c6:	0010      	movs	r0, r2
 80009c8:	f001 f9c8 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_NRST_Pin */
  GPIO_InitStruct.Pin = MCU_NRST_Pin;
 80009cc:	0021      	movs	r1, r4
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2204      	movs	r2, #4
 80009d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2288      	movs	r2, #136	@ 0x88
 80009d8:	0352      	lsls	r2, r2, #13
 80009da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	000c      	movs	r4, r1
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MCU_NRST_GPIO_Port, &GPIO_InitStruct);
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	4a17      	ldr	r2, [pc, #92]	@ (8000a44 <MX_GPIO_Init+0x110>)
 80009e8:	0019      	movs	r1, r3
 80009ea:	0010      	movs	r0, r2
 80009ec:	f001 f9b6 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_INT_Pin IFLAG_Z_Pin TFLAG_Z_Pin IFLAG_1V6_Pin */
  GPIO_InitStruct.Pin = SYNC_INT_Pin|IFLAG_Z_Pin|TFLAG_Z_Pin|IFLAG_1V6_Pin;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	22e8      	movs	r2, #232	@ 0xe8
 80009f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2288      	movs	r2, #136	@ 0x88
 80009fa:	0352      	lsls	r2, r2, #13
 80009fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	193a      	adds	r2, r7, r4
 8000a06:	23a0      	movs	r3, #160	@ 0xa0
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 f9a5 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : TFLAG_1V6_Pin */
  GPIO_InitStruct.Pin = TFLAG_1V6_Pin;
 8000a12:	0021      	movs	r1, r4
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2288      	movs	r2, #136	@ 0x88
 8000a1e:	0352      	lsls	r2, r2, #13
 8000a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TFLAG_1V6_GPIO_Port, &GPIO_InitStruct);
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <MX_GPIO_Init+0x114>)
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	0010      	movs	r0, r2
 8000a30:	f001 f994 	bl	8001d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b00b      	add	sp, #44	@ 0x2c
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	50000800 	.word	0x50000800
 8000a44:	50001400 	.word	0x50001400
 8000a48:	50000400 	.word	0x50000400

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	0549      	lsls	r1, r1, #21
 8000a80:	430a      	orrs	r2, r1
 8000a82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	055b      	lsls	r3, r3, #21
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b08b      	sub	sp, #44	@ 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	2414      	movs	r4, #20
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f003 f93e 	bl	8003d34 <memset>
  if(hadc->Instance==ADC1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a18      	ldr	r2, [pc, #96]	@ (8000b20 <HAL_ADC_MspInit+0x80>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d129      	bne.n	8000b16 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <HAL_ADC_MspInit+0x84>)
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <HAL_ADC_MspInit+0x84>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	0349      	lsls	r1, r1, #13
 8000acc:	430a      	orrs	r2, r1
 8000ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <HAL_ADC_MspInit+0x84>)
 8000ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	035b      	lsls	r3, r3, #13
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_ADC_MspInit+0x84>)
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_ADC_MspInit+0x84>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_ADC_MspInit+0x84>)
 8000aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_V_Pin|ADC_1V6_Pin|ADC_Zf_Pin;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2203      	movs	r2, #3
 8000b00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	193a      	adds	r2, r7, r4
 8000b0a:	23a0      	movs	r3, #160	@ 0xa0
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f001 f923 	bl	8001d5c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b00b      	add	sp, #44	@ 0x2c
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	40012400 	.word	0x40012400
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b08b      	sub	sp, #44	@ 0x2c
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	2414      	movs	r4, #20
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	0018      	movs	r0, r3
 8000b36:	2314      	movs	r3, #20
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f003 f8fa 	bl	8003d34 <memset>
  if(hdac->Instance==DAC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a18      	ldr	r2, [pc, #96]	@ (8000ba8 <HAL_DAC_MspInit+0x80>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d129      	bne.n	8000b9e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <HAL_DAC_MspInit+0x84>)
 8000b4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <HAL_DAC_MspInit+0x84>)
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	0589      	lsls	r1, r1, #22
 8000b54:	430a      	orrs	r2, r1
 8000b56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <HAL_DAC_MspInit+0x84>)
 8000b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	059b      	lsls	r3, r3, #22
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <HAL_DAC_MspInit+0x84>)
 8000b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <HAL_DAC_MspInit+0x84>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <HAL_DAC_MspInit+0x84>)
 8000b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b76:	2201      	movs	r2, #1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Z_Pin;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2210      	movs	r2, #16
 8000b82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2203      	movs	r2, #3
 8000b88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(DAC_Z_GPIO_Port, &GPIO_InitStruct);
 8000b90:	193a      	adds	r2, r7, r4
 8000b92:	23a0      	movs	r3, #160	@ 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 f8df 	bl	8001d5c <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b00b      	add	sp, #44	@ 0x2c
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	40007400 	.word	0x40007400
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b095      	sub	sp, #84	@ 0x54
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	233c      	movs	r3, #60	@ 0x3c
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f003 f8b6 	bl	8003d34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	2410      	movs	r4, #16
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	232c      	movs	r3, #44	@ 0x2c
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f003 f8ae 	bl	8003d34 <memset>
  if(huart->Instance==USART1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a22      	ldr	r2, [pc, #136]	@ (8000c68 <HAL_UART_MspInit+0xb8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13d      	bne.n	8000c5e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 ff27 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bfa:	f7ff ff27 	bl	8000a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <HAL_UART_MspInit+0xbc>)
 8000c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <HAL_UART_MspInit+0xbc>)
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	01c9      	lsls	r1, r1, #7
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c0c:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <HAL_UART_MspInit+0xbc>)
 8000c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	01db      	lsls	r3, r3, #7
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <HAL_UART_MspInit+0xbc>)
 8000c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c1e:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <HAL_UART_MspInit+0xbc>)
 8000c20:	2102      	movs	r1, #2
 8000c22:	430a      	orrs	r2, r1
 8000c24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_UART_MspInit+0xbc>)
 8000c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000c32:	213c      	movs	r1, #60	@ 0x3c
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	22c0      	movs	r2, #192	@ 0xc0
 8000c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <HAL_UART_MspInit+0xc0>)
 8000c56:	0019      	movs	r1, r3
 8000c58:	0010      	movs	r0, r2
 8000c5a:	f001 f87f 	bl	8001d5c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b015      	add	sp, #84	@ 0x54
 8000c64:	bd90      	pop	{r4, r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	50000400 	.word	0x50000400

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f91c 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e00a      	b.n	8000cce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb8:	e000      	b.n	8000cbc <_read+0x16>
 8000cba:	bf00      	nop
 8000cbc:	0001      	movs	r1, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	60ba      	str	r2, [r7, #8]
 8000cc4:	b2ca      	uxtb	r2, r1
 8000cc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	dbf0      	blt.n	8000cb8 <_read+0x12>
  }

  return len;
 8000cd6:	687b      	ldr	r3, [r7, #4]
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b006      	add	sp, #24
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	425b      	negs	r3, r3
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2280      	movs	r2, #128	@ 0x80
 8000d02:	0192      	lsls	r2, r2, #6
 8000d04:	605a      	str	r2, [r3, #4]
  return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_isatty>:

int _isatty(int file)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d18:	2301      	movs	r3, #1
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b004      	add	sp, #16
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f003 f83a 	bl	8003de0 <__errno>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	425b      	negs	r3, r3
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	18d2      	adds	r2, r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b006      	add	sp, #24
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20004800 	.word	0x20004800
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	20000190 	.word	0x20000190
 8000da0:	200002e8 	.word	0x200002e8

08000da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db4:	f7ff fff6 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dde:	f003 f805 	bl	8003dec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000de2:	f7ff fc37 	bl	8000654 <main>

08000de6 <LoopForever>:

LoopForever:
  b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000df4:	08004aa4 	.word	0x08004aa4
  ldr r2, =_sbss
 8000df8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dfc:	200002e4 	.word	0x200002e4

08000e00 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_COMP_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_Init+0x3c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_Init+0x3c>)
 8000e16:	2180      	movs	r1, #128	@ 0x80
 8000e18:	0049      	lsls	r1, r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 f810 	bl	8000e44 <HAL_InitTick>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e001      	b.n	8000e34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fe12 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <HAL_InitTick+0x88>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d02b      	beq.n	8000eb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_InitTick+0x8c>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <HAL_InitTick+0x88>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	0019      	movs	r1, r3
 8000e66:	23fa      	movs	r3, #250	@ 0xfa
 8000e68:	0098      	lsls	r0, r3, #2
 8000e6a:	f7ff f953 	bl	8000114 <__udivsi3>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	0019      	movs	r1, r3
 8000e72:	0020      	movs	r0, r4
 8000e74:	f7ff f94e 	bl	8000114 <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 fd91 	bl	80019a2 <HAL_SYSTICK_Config>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d112      	bne.n	8000eaa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d80a      	bhi.n	8000ea0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fd70 	bl	8001978 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <HAL_InitTick+0x90>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e00d      	b.n	8000ebc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e008      	b.n	8000ebc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e003      	b.n	8000ebc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b005      	add	sp, #20
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	18d2      	adds	r2, r2, r3
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000194 	.word	0x20000194

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b02      	ldr	r3, [pc, #8]	@ (8000f0c <HAL_GetTick+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	20000194 	.word	0x20000194

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff fff0 	bl	8000efc <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	001a      	movs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	189b      	adds	r3, r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	f7ff ffe0 	bl	8000efc <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	20000008 	.word	0x20000008

08000f58 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f68:	401a      	ands	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	fe3fffff 	.word	0xfe3fffff

08000f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	23e0      	movs	r3, #224	@ 0xe0
 8000f8e:	045b      	lsls	r3, r3, #17
 8000f90:	4013      	ands	r3, r2
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	2104      	movs	r1, #4
 8000fae:	400a      	ands	r2, r1
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	4091      	lsls	r1, r2
 8000fb4:	000a      	movs	r2, r1
 8000fb6:	43d2      	mvns	r2, r2
 8000fb8:	401a      	ands	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4099      	lsls	r1, r3
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	2107      	movs	r1, #7
 8000fea:	4091      	lsls	r1, r2
 8000fec:	000a      	movs	r2, r1
 8000fee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ff6:	40da      	lsrs	r2, r3
 8000ff8:	0013      	movs	r3, r2
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}

08001002 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	211f      	movs	r1, #31
 8001016:	400a      	ands	r2, r1
 8001018:	210f      	movs	r1, #15
 800101a:	4091      	lsls	r1, r2
 800101c:	000a      	movs	r2, r1
 800101e:	43d2      	mvns	r2, r2
 8001020:	401a      	ands	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0e9b      	lsrs	r3, r3, #26
 8001026:	210f      	movs	r1, #15
 8001028:	4019      	ands	r1, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	201f      	movs	r0, #31
 800102e:	4003      	ands	r3, r0
 8001030:	4099      	lsls	r1, r3
 8001032:	000b      	movs	r3, r1
 8001034:	431a      	orrs	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	035b      	lsls	r3, r3, #13
 8001054:	0b5b      	lsrs	r3, r3, #13
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}

08001064 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	0352      	lsls	r2, r2, #13
 8001076:	0b52      	lsrs	r2, r2, #13
 8001078:	43d2      	mvns	r2, r2
 800107a:	401a      	ands	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}

08001088 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	0212      	lsls	r2, r2, #8
 800109c:	43d2      	mvns	r2, r2
 800109e:	401a      	ands	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	400b      	ands	r3, r1
 80010a8:	4904      	ldr	r1, [pc, #16]	@ (80010bc <LL_ADC_SetChannelSamplingTime+0x34>)
 80010aa:	400b      	ands	r3, r1
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	07ffff00 	.word	0x07ffff00

080010c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	2280      	movs	r2, #128	@ 0x80
 80010d2:	0552      	lsls	r2, r2, #21
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	6fffffe8 	.word	0x6fffffe8

080010e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	055b      	lsls	r3, r3, #21
 80010f8:	401a      	ands	r2, r3
 80010fa:	2380      	movs	r3, #128	@ 0x80
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	429a      	cmp	r2, r3
 8001100:	d101      	bne.n	8001106 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001106:	2300      	movs	r3, #0
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2201      	movs	r2, #1
 800111e:	4013      	ands	r3, r2
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <LL_ADC_IsEnabled+0x18>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <LL_ADC_IsEnabled+0x1a>
 8001128:	2300      	movs	r3, #0
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}

08001132 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2204      	movs	r2, #4
 8001140:	4013      	ands	r3, r2
 8001142:	2b04      	cmp	r3, #4
 8001144:	d101      	bne.n	800114a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800114a:	2300      	movs	r3, #0
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	231f      	movs	r3, #31
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e17f      	b.n	800147a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10a      	bne.n	8001198 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff fc8b 	bl	8000aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2254      	movs	r2, #84	@ 0x54
 8001194:	2100      	movs	r1, #0
 8001196:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff ffa3 	bl	80010e8 <LL_ADC_IsInternalRegulatorEnabled>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d115      	bne.n	80011d2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff ff88 	bl	80010c0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011b0:	4bb4      	ldr	r3, [pc, #720]	@ (8001484 <HAL_ADC_Init+0x330>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	49b4      	ldr	r1, [pc, #720]	@ (8001488 <HAL_ADC_Init+0x334>)
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7fe ffac 	bl	8000114 <__udivsi3>
 80011bc:	0003      	movs	r3, r0
 80011be:	3301      	adds	r3, #1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011c4:	e002      	b.n	80011cc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff ff86 	bl	80010e8 <LL_ADC_IsInternalRegulatorEnabled>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d10f      	bne.n	8001200 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e4:	2210      	movs	r2, #16
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f0:	2201      	movs	r2, #1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80011f8:	231f      	movs	r3, #31
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ff94 	bl	8001132 <LL_ADC_REG_IsConversionOngoing>
 800120a:	0003      	movs	r3, r0
 800120c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	2210      	movs	r2, #16
 8001214:	4013      	ands	r3, r2
 8001216:	d000      	beq.n	800121a <HAL_ADC_Init+0xc6>
 8001218:	e122      	b.n	8001460 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d000      	beq.n	8001222 <HAL_ADC_Init+0xce>
 8001220:	e11e      	b.n	8001460 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001226:	4a99      	ldr	r2, [pc, #612]	@ (800148c <HAL_ADC_Init+0x338>)
 8001228:	4013      	ands	r3, r2
 800122a:	2202      	movs	r2, #2
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	0018      	movs	r0, r3
 8001238:	f7ff ff6a 	bl	8001110 <LL_ADC_IsEnabled>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d000      	beq.n	8001242 <HAL_ADC_Init+0xee>
 8001240:	e0ad      	b.n	800139e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7e1b      	ldrb	r3, [r3, #24]
 800124a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800124c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7e5b      	ldrb	r3, [r3, #25]
 8001252:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001254:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7e9b      	ldrb	r3, [r3, #26]
 800125a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800125c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <HAL_ADC_Init+0x118>
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	015b      	lsls	r3, r3, #5
 800126a:	e000      	b.n	800126e <HAL_ADC_Init+0x11a>
 800126c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800126e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001274:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	da04      	bge.n	8001288 <HAL_ADC_Init+0x134>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	085b      	lsrs	r3, r3, #1
 8001286:	e001      	b.n	800128c <HAL_ADC_Init+0x138>
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800128c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	212c      	movs	r1, #44	@ 0x2c
 8001292:	5c5b      	ldrb	r3, [r3, r1]
 8001294:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001296:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2220      	movs	r2, #32
 80012a2:	5c9b      	ldrb	r3, [r3, r2]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d115      	bne.n	80012d4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e9b      	ldrb	r3, [r3, #26]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d105      	bne.n	80012bc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2280      	movs	r2, #128	@ 0x80
 80012b4:	0252      	lsls	r2, r2, #9
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	e00b      	b.n	80012d4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c0:	2220      	movs	r2, #32
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012cc:	2201      	movs	r2, #1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00a      	beq.n	80012f2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e0:	23e0      	movs	r3, #224	@ 0xe0
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012ea:	4313      	orrs	r3, r2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a65      	ldr	r2, [pc, #404]	@ (8001490 <HAL_ADC_Init+0x33c>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	0019      	movs	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	430a      	orrs	r2, r1
 8001306:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	0f9b      	lsrs	r3, r3, #30
 800130e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001314:	4313      	orrs	r3, r2
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	223c      	movs	r2, #60	@ 0x3c
 8001320:	5c9b      	ldrb	r3, [r3, r2]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d111      	bne.n	800134a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	0f9b      	lsrs	r3, r3, #30
 800132c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001332:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001338:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800133e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4313      	orrs	r3, r2
 8001344:	2201      	movs	r2, #1
 8001346:	4313      	orrs	r3, r2
 8001348:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	4a50      	ldr	r2, [pc, #320]	@ (8001494 <HAL_ADC_Init+0x340>)
 8001352:	4013      	ands	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	430a      	orrs	r2, r1
 800135e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	23c0      	movs	r3, #192	@ 0xc0
 8001366:	061b      	lsls	r3, r3, #24
 8001368:	429a      	cmp	r2, r3
 800136a:	d018      	beq.n	800139e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	05db      	lsls	r3, r3, #23
 8001374:	429a      	cmp	r2, r3
 8001376:	d012      	beq.n	800139e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	061b      	lsls	r3, r3, #24
 8001380:	429a      	cmp	r2, r3
 8001382:	d00c      	beq.n	800139e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001384:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <HAL_ADC_Init+0x344>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a44      	ldr	r2, [pc, #272]	@ (800149c <HAL_ADC_Init+0x348>)
 800138a:	4013      	ands	r3, r2
 800138c:	0019      	movs	r1, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	23f0      	movs	r3, #240	@ 0xf0
 8001394:	039b      	lsls	r3, r3, #14
 8001396:	401a      	ands	r2, r3
 8001398:	4b3f      	ldr	r3, [pc, #252]	@ (8001498 <HAL_ADC_Init+0x344>)
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a6:	001a      	movs	r2, r3
 80013a8:	2100      	movs	r1, #0
 80013aa:	f7ff fdf6 	bl	8000f9a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b6:	493a      	ldr	r1, [pc, #232]	@ (80014a0 <HAL_ADC_Init+0x34c>)
 80013b8:	001a      	movs	r2, r3
 80013ba:	f7ff fdee 	bl	8000f9a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2110      	movs	r1, #16
 80013d2:	4249      	negs	r1, r1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80013d8:	e018      	b.n	800140c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	039b      	lsls	r3, r3, #14
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d112      	bne.n	800140c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	221c      	movs	r2, #28
 80013f6:	4013      	ands	r3, r2
 80013f8:	2210      	movs	r2, #16
 80013fa:	4252      	negs	r2, r2
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0011      	movs	r1, r2
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2100      	movs	r1, #0
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff fdde 	bl	8000fd4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001418:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800141e:	429a      	cmp	r2, r3
 8001420:	d10b      	bne.n	800143a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142c:	2203      	movs	r2, #3
 800142e:	4393      	bics	r3, r2
 8001430:	2201      	movs	r2, #1
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001438:	e01c      	b.n	8001474 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	2212      	movs	r2, #18
 8001440:	4393      	bics	r3, r2
 8001442:	2210      	movs	r2, #16
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	2201      	movs	r2, #1
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001456:	231f      	movs	r3, #31
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800145e:	e009      	b.n	8001474 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	2210      	movs	r2, #16
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800146c:	231f      	movs	r3, #31
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001474:	231f      	movs	r3, #31
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	781b      	ldrb	r3, [r3, #0]
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b008      	add	sp, #32
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	20000000 	.word	0x20000000
 8001488:	00030d40 	.word	0x00030d40
 800148c:	fffffefd 	.word	0xfffffefd
 8001490:	ffde0201 	.word	0xffde0201
 8001494:	1ffffc02 	.word	0x1ffffc02
 8001498:	40012708 	.word	0x40012708
 800149c:	ffc3ffff 	.word	0xffc3ffff
 80014a0:	07ffff04 	.word	0x07ffff04

080014a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ae:	2317      	movs	r3, #23
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2254      	movs	r2, #84	@ 0x54
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x24>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e1c0      	b.n	800184a <HAL_ADC_ConfigChannel+0x3a6>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2254      	movs	r2, #84	@ 0x54
 80014cc:	2101      	movs	r1, #1
 80014ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fe2c 	bl	8001132 <LL_ADC_REG_IsConversionOngoing>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d000      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x3c>
 80014de:	e1a3      	b.n	8001828 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d100      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x46>
 80014e8:	e143      	b.n	8001772 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	2380      	movs	r3, #128	@ 0x80
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d004      	beq.n	8001500 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014fa:	4ac1      	ldr	r2, [pc, #772]	@ (8001800 <HAL_ADC_ConfigChannel+0x35c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d108      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0019      	movs	r1, r3
 800150a:	0010      	movs	r0, r2
 800150c:	f7ff fd99 	bl	8001042 <LL_ADC_REG_SetSequencerChAdd>
 8001510:	e0c9      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	211f      	movs	r1, #31
 800151c:	400b      	ands	r3, r1
 800151e:	210f      	movs	r1, #15
 8001520:	4099      	lsls	r1, r3
 8001522:	000b      	movs	r3, r1
 8001524:	43db      	mvns	r3, r3
 8001526:	4013      	ands	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	035b      	lsls	r3, r3, #13
 8001530:	0b5b      	lsrs	r3, r3, #13
 8001532:	d105      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x9c>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0e9b      	lsrs	r3, r3, #26
 800153a:	221f      	movs	r2, #31
 800153c:	4013      	ands	r3, r2
 800153e:	e098      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	d000      	beq.n	800154c <HAL_ADC_ConfigChannel+0xa8>
 800154a:	e091      	b.n	8001670 <HAL_ADC_ConfigChannel+0x1cc>
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2202      	movs	r2, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d000      	beq.n	8001558 <HAL_ADC_ConfigChannel+0xb4>
 8001556:	e089      	b.n	800166c <HAL_ADC_ConfigChannel+0x1c8>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2204      	movs	r2, #4
 800155e:	4013      	ands	r3, r2
 8001560:	d000      	beq.n	8001564 <HAL_ADC_ConfigChannel+0xc0>
 8001562:	e081      	b.n	8001668 <HAL_ADC_ConfigChannel+0x1c4>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2208      	movs	r2, #8
 800156a:	4013      	ands	r3, r2
 800156c:	d000      	beq.n	8001570 <HAL_ADC_ConfigChannel+0xcc>
 800156e:	e079      	b.n	8001664 <HAL_ADC_ConfigChannel+0x1c0>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2210      	movs	r2, #16
 8001576:	4013      	ands	r3, r2
 8001578:	d000      	beq.n	800157c <HAL_ADC_ConfigChannel+0xd8>
 800157a:	e071      	b.n	8001660 <HAL_ADC_ConfigChannel+0x1bc>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2220      	movs	r2, #32
 8001582:	4013      	ands	r3, r2
 8001584:	d000      	beq.n	8001588 <HAL_ADC_ConfigChannel+0xe4>
 8001586:	e069      	b.n	800165c <HAL_ADC_ConfigChannel+0x1b8>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2240      	movs	r2, #64	@ 0x40
 800158e:	4013      	ands	r3, r2
 8001590:	d000      	beq.n	8001594 <HAL_ADC_ConfigChannel+0xf0>
 8001592:	e061      	b.n	8001658 <HAL_ADC_ConfigChannel+0x1b4>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2280      	movs	r2, #128	@ 0x80
 800159a:	4013      	ands	r3, r2
 800159c:	d000      	beq.n	80015a0 <HAL_ADC_ConfigChannel+0xfc>
 800159e:	e059      	b.n	8001654 <HAL_ADC_ConfigChannel+0x1b0>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	d151      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1ac>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d149      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1a8>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4013      	ands	r3, r2
 80015c2:	d141      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1a4>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	4013      	ands	r3, r2
 80015ce:	d139      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1a0>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	4013      	ands	r3, r2
 80015da:	d131      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x19c>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	019b      	lsls	r3, r3, #6
 80015e4:	4013      	ands	r3, r2
 80015e6:	d129      	bne.n	800163c <HAL_ADC_ConfigChannel+0x198>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	01db      	lsls	r3, r3, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	d121      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x194>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	4013      	ands	r3, r2
 80015fe:	d119      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x190>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	4013      	ands	r3, r2
 800160a:	d111      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x18c>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	4013      	ands	r3, r2
 8001616:	d109      	bne.n	800162c <HAL_ADC_ConfigChannel+0x188>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	02db      	lsls	r3, r3, #11
 8001620:	4013      	ands	r3, r2
 8001622:	d001      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x184>
 8001624:	2312      	movs	r3, #18
 8001626:	e024      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001628:	2300      	movs	r3, #0
 800162a:	e022      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 800162c:	2311      	movs	r3, #17
 800162e:	e020      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001630:	2310      	movs	r3, #16
 8001632:	e01e      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001634:	230f      	movs	r3, #15
 8001636:	e01c      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001638:	230e      	movs	r3, #14
 800163a:	e01a      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 800163c:	230d      	movs	r3, #13
 800163e:	e018      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001640:	230c      	movs	r3, #12
 8001642:	e016      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001644:	230b      	movs	r3, #11
 8001646:	e014      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001648:	230a      	movs	r3, #10
 800164a:	e012      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 800164c:	2309      	movs	r3, #9
 800164e:	e010      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001650:	2308      	movs	r3, #8
 8001652:	e00e      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001654:	2307      	movs	r3, #7
 8001656:	e00c      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001658:	2306      	movs	r3, #6
 800165a:	e00a      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 800165c:	2305      	movs	r3, #5
 800165e:	e008      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001660:	2304      	movs	r3, #4
 8001662:	e006      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001664:	2303      	movs	r3, #3
 8001666:	e004      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001668:	2302      	movs	r3, #2
 800166a:	e002      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_ADC_ConfigChannel+0x1ce>
 8001670:	2300      	movs	r3, #0
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	6852      	ldr	r2, [r2, #4]
 8001676:	201f      	movs	r0, #31
 8001678:	4002      	ands	r2, r0
 800167a:	4093      	lsls	r3, r2
 800167c:	000a      	movs	r2, r1
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	429a      	cmp	r2, r3
 8001692:	d808      	bhi.n	80016a6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	001a      	movs	r2, r3
 80016a2:	f7ff fcae 	bl	8001002 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	001a      	movs	r2, r3
 80016b4:	f7ff fce8 	bl	8001088 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db00      	blt.n	80016c2 <HAL_ADC_ConfigChannel+0x21e>
 80016c0:	e0bc      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016c2:	4b50      	ldr	r3, [pc, #320]	@ (8001804 <HAL_ADC_ConfigChannel+0x360>)
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff fc5b 	bl	8000f80 <LL_ADC_GetCommonPathInternalCh>
 80016ca:	0003      	movs	r3, r0
 80016cc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001808 <HAL_ADC_ConfigChannel+0x364>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d122      	bne.n	800171e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016e0:	d11d      	bne.n	800171e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	0412      	lsls	r2, r2, #16
 80016e8:	4313      	orrs	r3, r2
 80016ea:	4a46      	ldr	r2, [pc, #280]	@ (8001804 <HAL_ADC_ConfigChannel+0x360>)
 80016ec:	0019      	movs	r1, r3
 80016ee:	0010      	movs	r0, r2
 80016f0:	f7ff fc32 	bl	8000f58 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016f4:	4b45      	ldr	r3, [pc, #276]	@ (800180c <HAL_ADC_ConfigChannel+0x368>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4945      	ldr	r1, [pc, #276]	@ (8001810 <HAL_ADC_ConfigChannel+0x36c>)
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7fe fd0a 	bl	8000114 <__udivsi3>
 8001700:	0003      	movs	r3, r0
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	0013      	movs	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	189b      	adds	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800170e:	e002      	b.n	8001716 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3b01      	subs	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f9      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800171c:	e08e      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a3c      	ldr	r2, [pc, #240]	@ (8001814 <HAL_ADC_ConfigChannel+0x370>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10e      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	2380      	movs	r3, #128	@ 0x80
 800172c:	045b      	lsls	r3, r3, #17
 800172e:	4013      	ands	r3, r2
 8001730:	d109      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	0452      	lsls	r2, r2, #17
 8001738:	4313      	orrs	r3, r2
 800173a:	4a32      	ldr	r2, [pc, #200]	@ (8001804 <HAL_ADC_ConfigChannel+0x360>)
 800173c:	0019      	movs	r1, r3
 800173e:	0010      	movs	r0, r2
 8001740:	f7ff fc0a 	bl	8000f58 <LL_ADC_SetCommonPathInternalCh>
 8001744:	e07a      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a33      	ldr	r2, [pc, #204]	@ (8001818 <HAL_ADC_ConfigChannel+0x374>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d000      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x2ae>
 8001750:	e074      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	2380      	movs	r3, #128	@ 0x80
 8001756:	03db      	lsls	r3, r3, #15
 8001758:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800175a:	d000      	beq.n	800175e <HAL_ADC_ConfigChannel+0x2ba>
 800175c:	e06e      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2280      	movs	r2, #128	@ 0x80
 8001762:	03d2      	lsls	r2, r2, #15
 8001764:	4313      	orrs	r3, r2
 8001766:	4a27      	ldr	r2, [pc, #156]	@ (8001804 <HAL_ADC_ConfigChannel+0x360>)
 8001768:	0019      	movs	r1, r3
 800176a:	0010      	movs	r0, r2
 800176c:	f7ff fbf4 	bl	8000f58 <LL_ADC_SetCommonPathInternalCh>
 8001770:	e064      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	2380      	movs	r3, #128	@ 0x80
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	429a      	cmp	r2, r3
 800177c:	d004      	beq.n	8001788 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001782:	4a1f      	ldr	r2, [pc, #124]	@ (8001800 <HAL_ADC_ConfigChannel+0x35c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d107      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0019      	movs	r1, r3
 8001792:	0010      	movs	r0, r2
 8001794:	f7ff fc66 	bl	8001064 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da4d      	bge.n	800183c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017a0:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <HAL_ADC_ConfigChannel+0x360>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff fbec 	bl	8000f80 <LL_ADC_GetCommonPathInternalCh>
 80017a8:	0003      	movs	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a15      	ldr	r2, [pc, #84]	@ (8001808 <HAL_ADC_ConfigChannel+0x364>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d108      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4a18      	ldr	r2, [pc, #96]	@ (800181c <HAL_ADC_ConfigChannel+0x378>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <HAL_ADC_ConfigChannel+0x360>)
 80017be:	0019      	movs	r1, r3
 80017c0:	0010      	movs	r0, r2
 80017c2:	f7ff fbc9 	bl	8000f58 <LL_ADC_SetCommonPathInternalCh>
 80017c6:	e039      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <HAL_ADC_ConfigChannel+0x370>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d108      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <HAL_ADC_ConfigChannel+0x37c>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <HAL_ADC_ConfigChannel+0x360>)
 80017da:	0019      	movs	r1, r3
 80017dc:	0010      	movs	r0, r2
 80017de:	f7ff fbbb 	bl	8000f58 <LL_ADC_SetCommonPathInternalCh>
 80017e2:	e02b      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_ADC_ConfigChannel+0x374>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d126      	bne.n	800183c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <HAL_ADC_ConfigChannel+0x380>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	4a03      	ldr	r2, [pc, #12]	@ (8001804 <HAL_ADC_ConfigChannel+0x360>)
 80017f6:	0019      	movs	r1, r3
 80017f8:	0010      	movs	r0, r2
 80017fa:	f7ff fbad 	bl	8000f58 <LL_ADC_SetCommonPathInternalCh>
 80017fe:	e01d      	b.n	800183c <HAL_ADC_ConfigChannel+0x398>
 8001800:	80000004 	.word	0x80000004
 8001804:	40012708 	.word	0x40012708
 8001808:	b0001000 	.word	0xb0001000
 800180c:	20000000 	.word	0x20000000
 8001810:	00030d40 	.word	0x00030d40
 8001814:	b8004000 	.word	0xb8004000
 8001818:	b4002000 	.word	0xb4002000
 800181c:	ff7fffff 	.word	0xff7fffff
 8001820:	feffffff 	.word	0xfeffffff
 8001824:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	2220      	movs	r2, #32
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001834:	2317      	movs	r3, #23
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2254      	movs	r2, #84	@ 0x54
 8001840:	2100      	movs	r1, #0
 8001842:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001844:	2317      	movs	r3, #23
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	781b      	ldrb	r3, [r3, #0]
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b006      	add	sp, #24
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			@ (mov r8, r8)

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	0002      	movs	r2, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b7f      	cmp	r3, #127	@ 0x7f
 8001868:	d828      	bhi.n	80018bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800186a:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <__NVIC_SetPriority+0xd4>)
 800186c:	1dfb      	adds	r3, r7, #7
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	33c0      	adds	r3, #192	@ 0xc0
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	589b      	ldr	r3, [r3, r2]
 800187a:	1dfa      	adds	r2, r7, #7
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	0011      	movs	r1, r2
 8001880:	2203      	movs	r2, #3
 8001882:	400a      	ands	r2, r1
 8001884:	00d2      	lsls	r2, r2, #3
 8001886:	21ff      	movs	r1, #255	@ 0xff
 8001888:	4091      	lsls	r1, r2
 800188a:	000a      	movs	r2, r1
 800188c:	43d2      	mvns	r2, r2
 800188e:	401a      	ands	r2, r3
 8001890:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	22ff      	movs	r2, #255	@ 0xff
 8001898:	401a      	ands	r2, r3
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	0018      	movs	r0, r3
 80018a0:	2303      	movs	r3, #3
 80018a2:	4003      	ands	r3, r0
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018a8:	481f      	ldr	r0, [pc, #124]	@ (8001928 <__NVIC_SetPriority+0xd4>)
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	430a      	orrs	r2, r1
 80018b4:	33c0      	adds	r3, #192	@ 0xc0
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ba:	e031      	b.n	8001920 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018bc:	4a1b      	ldr	r2, [pc, #108]	@ (800192c <__NVIC_SetPriority+0xd8>)
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	0019      	movs	r1, r3
 80018c4:	230f      	movs	r3, #15
 80018c6:	400b      	ands	r3, r1
 80018c8:	3b08      	subs	r3, #8
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3306      	adds	r3, #6
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	3304      	adds	r3, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1dfa      	adds	r2, r7, #7
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	0011      	movs	r1, r2
 80018dc:	2203      	movs	r2, #3
 80018de:	400a      	ands	r2, r1
 80018e0:	00d2      	lsls	r2, r2, #3
 80018e2:	21ff      	movs	r1, #255	@ 0xff
 80018e4:	4091      	lsls	r1, r2
 80018e6:	000a      	movs	r2, r1
 80018e8:	43d2      	mvns	r2, r2
 80018ea:	401a      	ands	r2, r3
 80018ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	22ff      	movs	r2, #255	@ 0xff
 80018f4:	401a      	ands	r2, r3
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	0018      	movs	r0, r3
 80018fc:	2303      	movs	r3, #3
 80018fe:	4003      	ands	r3, r0
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <__NVIC_SetPriority+0xd8>)
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	001c      	movs	r4, r3
 800190c:	230f      	movs	r3, #15
 800190e:	4023      	ands	r3, r4
 8001910:	3b08      	subs	r3, #8
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	430a      	orrs	r2, r1
 8001916:	3306      	adds	r3, #6
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	18c3      	adds	r3, r0, r3
 800191c:	3304      	adds	r3, #4
 800191e:	601a      	str	r2, [r3, #0]
}
 8001920:	46c0      	nop			@ (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	b003      	add	sp, #12
 8001926:	bd90      	pop	{r4, r7, pc}
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	045b      	lsls	r3, r3, #17
 8001940:	429a      	cmp	r2, r3
 8001942:	d301      	bcc.n	8001948 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001944:	2301      	movs	r3, #1
 8001946:	e010      	b.n	800196a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <SysTick_Config+0x44>)
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	3a01      	subs	r2, #1
 800194e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001950:	2301      	movs	r3, #1
 8001952:	425b      	negs	r3, r3
 8001954:	2103      	movs	r1, #3
 8001956:	0018      	movs	r0, r3
 8001958:	f7ff ff7c 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <SysTick_Config+0x44>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <SysTick_Config+0x44>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	210f      	movs	r1, #15
 8001984:	187b      	adds	r3, r7, r1
 8001986:	1c02      	adds	r2, r0, #0
 8001988:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	187b      	adds	r3, r7, r1
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b25b      	sxtb	r3, r3
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff ff5d 	bl	8001854 <__NVIC_SetPriority>
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff ffbf 	bl	8001930 <SysTick_Config>
 80019b2:	0003      	movs	r3, r0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e015      	b.n	80019fa <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	791b      	ldrb	r3, [r3, #4]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d106      	bne.n	80019e6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff f8a1 	bl	8000b28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b002      	add	sp, #8
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e047      	b.n	8001aa6 <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	795b      	ldrb	r3, [r3, #5]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_DAC_Start+0x20>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e041      	b.n	8001aa6 <HAL_DAC_Start+0xa4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6819      	ldr	r1, [r3, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2210      	movs	r2, #16
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10f      	bne.n	8001a6c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	223e      	movs	r2, #62	@ 0x3e
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d11e      	bne.n	8001a98 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	e015      	b.n	8001a98 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	23f8      	movs	r3, #248	@ 0xf8
 8001a74:	039b      	lsls	r3, r3, #14
 8001a76:	401a      	ands	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4099      	lsls	r1, r3
 8001a82:	000b      	movs	r3, r1
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d107      	bne.n	8001a98 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2102      	movs	r1, #2
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e014      	b.n	8001af4 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	18d3      	adds	r3, r2, r3
 8001adc:	3308      	adds	r3, #8
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e004      	b.n	8001aec <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	3314      	adds	r3, #20
 8001aea:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b006      	add	sp, #24
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	231f      	movs	r3, #31
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_DAC_ConfigChannel+0x20>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e115      	b.n	8001d4c <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	795b      	ldrb	r3, [r3, #5]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_DAC_ConfigChannel+0x30>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e10f      	b.n	8001d4c <HAL_DAC_ConfigChannel+0x250>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2202      	movs	r2, #2
 8001b36:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d000      	beq.n	8001b42 <HAL_DAC_ConfigChannel+0x46>
 8001b40:	e07a      	b.n	8001c38 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b42:	f7ff f9db 	bl	8000efc <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d13d      	bne.n	8001bcc <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b50:	e018      	b.n	8001b84 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b52:	f7ff f9d3 	bl	8000efc <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d911      	bls.n	8001b84 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d00a      	beq.n	8001b84 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2208      	movs	r2, #8
 8001b74:	431a      	orrs	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0e3      	b.n	8001d4c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d1df      	bne.n	8001b52 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	6992      	ldr	r2, [r2, #24]
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b9c:	e020      	b.n	8001be0 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b9e:	f7ff f9ad 	bl	8000efc <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d90f      	bls.n	8001bcc <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da0a      	bge.n	8001bcc <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e0bf      	b.n	8001d4c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	dbe3      	blt.n	8001b9e <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	6992      	ldr	r2, [r2, #24]
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	2110      	movs	r1, #16
 8001bea:	400a      	ands	r2, r1
 8001bec:	4959      	ldr	r1, [pc, #356]	@ (8001d54 <HAL_DAC_ConfigChannel+0x258>)
 8001bee:	4091      	lsls	r1, r2
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	43d2      	mvns	r2, r2
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2010      	movs	r0, #16
 8001c00:	4003      	ands	r3, r0
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	2110      	movs	r1, #16
 8001c16:	400a      	ands	r2, r1
 8001c18:	21ff      	movs	r1, #255	@ 0xff
 8001c1a:	4091      	lsls	r1, r2
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	43d2      	mvns	r2, r2
 8001c20:	401a      	ands	r2, r3
 8001c22:	0011      	movs	r1, r2
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2010      	movs	r0, #16
 8001c2c:	4003      	ands	r3, r0
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d11d      	bne.n	8001c7c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c46:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	221f      	movs	r2, #31
 8001c50:	409a      	lsls	r2, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	43da      	mvns	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2210      	movs	r2, #16
 8001c66:	4013      	ands	r3, r2
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c82:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2210      	movs	r2, #16
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	0013      	movs	r3, r2
 8001c90:	43da      	mvns	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2210      	movs	r2, #16
 8001cae:	4013      	ands	r3, r2
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2110      	movs	r1, #16
 8001cce:	400b      	ands	r3, r1
 8001cd0:	2180      	movs	r1, #128	@ 0x80
 8001cd2:	01c9      	lsls	r1, r1, #7
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	000b      	movs	r3, r1
 8001cd8:	43d9      	mvns	r1, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	400a      	ands	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2210      	movs	r2, #16
 8001cee:	4013      	ands	r3, r2
 8001cf0:	4a19      	ldr	r2, [pc, #100]	@ (8001d58 <HAL_DAC_ConfigChannel+0x25c>)
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2210      	movs	r2, #16
 8001d08:	4013      	ands	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	0013      	movs	r3, r2
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2110      	movs	r1, #16
 8001d28:	400b      	ands	r3, r1
 8001d2a:	21c0      	movs	r1, #192	@ 0xc0
 8001d2c:	4099      	lsls	r1, r3
 8001d2e:	000b      	movs	r3, r1
 8001d30:	43d9      	mvns	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001d46:	231f      	movs	r3, #31
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b008      	add	sp, #32
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	000003ff 	.word	0x000003ff
 8001d58:	00000ffe 	.word	0x00000ffe

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6a:	e147      	b.n	8001ffc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4091      	lsls	r1, r2
 8001d76:	000a      	movs	r2, r1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d100      	bne.n	8001d84 <HAL_GPIO_Init+0x28>
 8001d82:	e138      	b.n	8001ff6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d005      	beq.n	8001d9c <HAL_GPIO_Init+0x40>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2203      	movs	r2, #3
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d130      	bne.n	8001dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	409a      	lsls	r2, r3
 8001daa:	0013      	movs	r3, r2
 8001dac:	43da      	mvns	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	0013      	movs	r3, r2
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	2201      	movs	r2, #1
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d017      	beq.n	8001e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	409a      	lsls	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d123      	bne.n	8001e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	58d3      	ldr	r3, [r2, r3]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2207      	movs	r2, #7
 8001e58:	4013      	ands	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	0013      	movs	r3, r2
 8001e62:	43da      	mvns	r2, r3
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2107      	movs	r1, #7
 8001e72:	400b      	ands	r3, r1
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	409a      	lsls	r2, r3
 8001e78:	0013      	movs	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	6939      	ldr	r1, [r7, #16]
 8001e8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	401a      	ands	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	23c0      	movs	r3, #192	@ 0xc0
 8001ec8:	029b      	lsls	r3, r3, #10
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d100      	bne.n	8001ed0 <HAL_GPIO_Init+0x174>
 8001ece:	e092      	b.n	8001ff6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ed0:	4a50      	ldr	r2, [pc, #320]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3318      	adds	r3, #24
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	589b      	ldr	r3, [r3, r2]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	0013      	movs	r3, r2
 8001eec:	43da      	mvns	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	23a0      	movs	r3, #160	@ 0xa0
 8001ef8:	05db      	lsls	r3, r3, #23
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d013      	beq.n	8001f26 <HAL_GPIO_Init+0x1ca>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a45      	ldr	r2, [pc, #276]	@ (8002018 <HAL_GPIO_Init+0x2bc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00d      	beq.n	8001f22 <HAL_GPIO_Init+0x1c6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a44      	ldr	r2, [pc, #272]	@ (800201c <HAL_GPIO_Init+0x2c0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x1c2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a43      	ldr	r2, [pc, #268]	@ (8002020 <HAL_GPIO_Init+0x2c4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_GPIO_Init+0x1be>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x1cc>
 8001f1a:	2305      	movs	r3, #5
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x1cc>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x1cc>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x1cc>
 8001f26:	2300      	movs	r3, #0
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	00d2      	lsls	r2, r2, #3
 8001f30:	4093      	lsls	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f38:	4936      	ldr	r1, [pc, #216]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3318      	adds	r3, #24
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f46:	4b33      	ldr	r3, [pc, #204]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	035b      	lsls	r3, r3, #13
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f70:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	039b      	lsls	r3, r3, #14
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f94:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001f9c:	2384      	movs	r3, #132	@ 0x84
 8001f9e:	58d3      	ldr	r3, [r2, r3]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc0:	4914      	ldr	r1, [pc, #80]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	2284      	movs	r2, #132	@ 0x84
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fc8:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	58d3      	ldr	r3, [r2, r3]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	025b      	lsls	r3, r3, #9
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fee:	4909      	ldr	r1, [pc, #36]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	40da      	lsrs	r2, r3
 8002004:	1e13      	subs	r3, r2, #0
 8002006:	d000      	beq.n	800200a <HAL_GPIO_Init+0x2ae>
 8002008:	e6b0      	b.n	8001d6c <HAL_GPIO_Init+0x10>
  }
}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b006      	add	sp, #24
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021800 	.word	0x40021800
 8002018:	50000400 	.word	0x50000400
 800201c:	50000800 	.word	0x50000800
 8002020:	50000c00 	.word	0x50000c00

08002024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a19      	ldr	r2, [pc, #100]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002032:	4013      	ands	r3, r2
 8002034:	0019      	movs	r1, r3
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d11f      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002048:	4b14      	ldr	r3, [pc, #80]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	0013      	movs	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	189b      	adds	r3, r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4912      	ldr	r1, [pc, #72]	@ (80020a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002056:	0018      	movs	r0, r3
 8002058:	f7fe f85c 	bl	8000114 <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	3301      	adds	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002062:	e008      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3b01      	subs	r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e001      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e009      	b.n	800208a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	401a      	ands	r2, r3
 8002080:	2380      	movs	r3, #128	@ 0x80
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	429a      	cmp	r2, r3
 8002086:	d0ed      	beq.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b004      	add	sp, #16
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	40007000 	.word	0x40007000
 8002098:	fffff9ff 	.word	0xfffff9ff
 800209c:	20000000 	.word	0x20000000
 80020a0:	000f4240 	.word	0x000f4240

080020a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80020a8:	4b03      	ldr	r3, [pc, #12]	@ (80020b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	23e0      	movs	r3, #224	@ 0xe0
 80020ae:	01db      	lsls	r3, r3, #7
 80020b0:	4013      	ands	r3, r2
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e2fe      	b.n	80026cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d100      	bne.n	80020da <HAL_RCC_OscConfig+0x1e>
 80020d8:	e07c      	b.n	80021d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	4bc3      	ldr	r3, [pc, #780]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2238      	movs	r2, #56	@ 0x38
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	4bc0      	ldr	r3, [pc, #768]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2203      	movs	r2, #3
 80020ea:	4013      	ands	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_OscConfig+0x3e>
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d10b      	bne.n	8002118 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	4bb9      	ldr	r3, [pc, #740]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	4013      	ands	r3, r2
 800210a:	d062      	beq.n	80021d2 <HAL_RCC_OscConfig+0x116>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d15e      	bne.n	80021d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e2d9      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	025b      	lsls	r3, r3, #9
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x78>
 8002124:	4bb0      	ldr	r3, [pc, #704]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4baf      	ldr	r3, [pc, #700]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800212a:	2180      	movs	r1, #128	@ 0x80
 800212c:	0249      	lsls	r1, r1, #9
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e020      	b.n	8002176 <HAL_RCC_OscConfig+0xba>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	23a0      	movs	r3, #160	@ 0xa0
 800213a:	02db      	lsls	r3, r3, #11
 800213c:	429a      	cmp	r2, r3
 800213e:	d10e      	bne.n	800215e <HAL_RCC_OscConfig+0xa2>
 8002140:	4ba9      	ldr	r3, [pc, #676]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4ba8      	ldr	r3, [pc, #672]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002146:	2180      	movs	r1, #128	@ 0x80
 8002148:	02c9      	lsls	r1, r1, #11
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	4ba6      	ldr	r3, [pc, #664]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4ba5      	ldr	r3, [pc, #660]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002154:	2180      	movs	r1, #128	@ 0x80
 8002156:	0249      	lsls	r1, r1, #9
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0xba>
 800215e:	4ba2      	ldr	r3, [pc, #648]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4ba1      	ldr	r3, [pc, #644]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002164:	49a1      	ldr	r1, [pc, #644]	@ (80023ec <HAL_RCC_OscConfig+0x330>)
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	4b9f      	ldr	r3, [pc, #636]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b9e      	ldr	r3, [pc, #632]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002170:	499f      	ldr	r1, [pc, #636]	@ (80023f0 <HAL_RCC_OscConfig+0x334>)
 8002172:	400a      	ands	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d014      	beq.n	80021a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe febd 	bl	8000efc <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe feb8 	bl	8000efc <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	@ 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e298      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219a:	4b93      	ldr	r3, [pc, #588]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	029b      	lsls	r3, r3, #10
 80021a2:	4013      	ands	r3, r2
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0xcc>
 80021a6:	e015      	b.n	80021d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fea8 	bl	8000efc <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b2:	f7fe fea3 	bl	8000efc <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b64      	cmp	r3, #100	@ 0x64
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e283      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c4:	4b88      	ldr	r3, [pc, #544]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2380      	movs	r3, #128	@ 0x80
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	4013      	ands	r3, r2
 80021ce:	d1f0      	bne.n	80021b2 <HAL_RCC_OscConfig+0xf6>
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2202      	movs	r2, #2
 80021da:	4013      	ands	r3, r2
 80021dc:	d100      	bne.n	80021e0 <HAL_RCC_OscConfig+0x124>
 80021de:	e099      	b.n	8002314 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e0:	4b81      	ldr	r3, [pc, #516]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2238      	movs	r2, #56	@ 0x38
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ea:	4b7f      	ldr	r3, [pc, #508]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2203      	movs	r2, #3
 80021f0:	4013      	ands	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x144>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d002      	beq.n	8002206 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d135      	bne.n	8002272 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002206:	4b78      	ldr	r3, [pc, #480]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4013      	ands	r3, r2
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x162>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e256      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a74      	ldr	r2, [pc, #464]	@ (80023f4 <HAL_RCC_OscConfig+0x338>)
 8002224:	4013      	ands	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	021a      	lsls	r2, r3, #8
 800222e:	4b6e      	ldr	r3, [pc, #440]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002230:	430a      	orrs	r2, r1
 8002232:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d112      	bne.n	8002260 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800223a:	4b6b      	ldr	r3, [pc, #428]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6e      	ldr	r2, [pc, #440]	@ (80023f8 <HAL_RCC_OscConfig+0x33c>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	4b67      	ldr	r3, [pc, #412]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800224e:	4b66      	ldr	r3, [pc, #408]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0adb      	lsrs	r3, r3, #11
 8002254:	2207      	movs	r2, #7
 8002256:	4013      	ands	r3, r2
 8002258:	4a68      	ldr	r2, [pc, #416]	@ (80023fc <HAL_RCC_OscConfig+0x340>)
 800225a:	40da      	lsrs	r2, r3
 800225c:	4b68      	ldr	r3, [pc, #416]	@ (8002400 <HAL_RCC_OscConfig+0x344>)
 800225e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002260:	4b68      	ldr	r3, [pc, #416]	@ (8002404 <HAL_RCC_OscConfig+0x348>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0018      	movs	r0, r3
 8002266:	f7fe fded 	bl	8000e44 <HAL_InitTick>
 800226a:	1e03      	subs	r3, r0, #0
 800226c:	d051      	beq.n	8002312 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e22c      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d030      	beq.n	80022dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800227a:	4b5b      	ldr	r3, [pc, #364]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5e      	ldr	r2, [pc, #376]	@ (80023f8 <HAL_RCC_OscConfig+0x33c>)
 8002280:	4013      	ands	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	4b57      	ldr	r3, [pc, #348]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800228e:	4b56      	ldr	r3, [pc, #344]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b55      	ldr	r3, [pc, #340]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002294:	2180      	movs	r1, #128	@ 0x80
 8002296:	0049      	lsls	r1, r1, #1
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fe2e 	bl	8000efc <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a6:	f7fe fe29 	bl	8000efc <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e209      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b8:	4b4b      	ldr	r3, [pc, #300]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	@ 0x80
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b48      	ldr	r3, [pc, #288]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a4a      	ldr	r2, [pc, #296]	@ (80023f4 <HAL_RCC_OscConfig+0x338>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	021a      	lsls	r2, r3, #8
 80022d4:	4b44      	ldr	r3, [pc, #272]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	e01b      	b.n	8002314 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80022dc:	4b42      	ldr	r3, [pc, #264]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b41      	ldr	r3, [pc, #260]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	4949      	ldr	r1, [pc, #292]	@ (8002408 <HAL_RCC_OscConfig+0x34c>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fe08 	bl	8000efc <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f2:	f7fe fe03 	bl	8000efc <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1e3      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002304:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4013      	ands	r3, r2
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x236>
 8002310:	e000      	b.n	8002314 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002312:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2208      	movs	r2, #8
 800231a:	4013      	ands	r3, r2
 800231c:	d047      	beq.n	80023ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800231e:	4b32      	ldr	r3, [pc, #200]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2238      	movs	r2, #56	@ 0x38
 8002324:	4013      	ands	r3, r2
 8002326:	2b18      	cmp	r3, #24
 8002328:	d10a      	bne.n	8002340 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800232a:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800232c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d03c      	beq.n	80023ae <HAL_RCC_OscConfig+0x2f2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d138      	bne.n	80023ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e1c5      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d019      	beq.n	800237c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002348:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800234a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800234c:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800234e:	2101      	movs	r1, #1
 8002350:	430a      	orrs	r2, r1
 8002352:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fdd2 	bl	8000efc <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235e:	f7fe fdcd 	bl	8000efc <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1ad      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002370:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d0f1      	beq.n	800235e <HAL_RCC_OscConfig+0x2a2>
 800237a:	e018      	b.n	80023ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 800237e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002380:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 8002382:	2101      	movs	r1, #1
 8002384:	438a      	bics	r2, r1
 8002386:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fdb8 	bl	8000efc <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002392:	f7fe fdb3 	bl	8000efc <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e193      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a4:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a8:	2202      	movs	r2, #2
 80023aa:	4013      	ands	r3, r2
 80023ac:	d1f1      	bne.n	8002392 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2204      	movs	r2, #4
 80023b4:	4013      	ands	r3, r2
 80023b6:	d100      	bne.n	80023ba <HAL_RCC_OscConfig+0x2fe>
 80023b8:	e0c6      	b.n	8002548 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	231f      	movs	r3, #31
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2238      	movs	r2, #56	@ 0x38
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d11e      	bne.n	800240c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_RCC_OscConfig+0x32c>)
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d100      	bne.n	80023da <HAL_RCC_OscConfig+0x31e>
 80023d8:	e0b6      	b.n	8002548 <HAL_RCC_OscConfig+0x48c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d000      	beq.n	80023e4 <HAL_RCC_OscConfig+0x328>
 80023e2:	e0b1      	b.n	8002548 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e171      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	fffeffff 	.word	0xfffeffff
 80023f0:	fffbffff 	.word	0xfffbffff
 80023f4:	ffff80ff 	.word	0xffff80ff
 80023f8:	ffffc7ff 	.word	0xffffc7ff
 80023fc:	00f42400 	.word	0x00f42400
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004
 8002408:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800240c:	4bb1      	ldr	r3, [pc, #708]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800240e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	055b      	lsls	r3, r3, #21
 8002414:	4013      	ands	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_RCC_OscConfig+0x360>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x362>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d011      	beq.n	8002446 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4bac      	ldr	r3, [pc, #688]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002424:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002426:	4bab      	ldr	r3, [pc, #684]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	0549      	lsls	r1, r1, #21
 800242c:	430a      	orrs	r2, r1
 800242e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002430:	4ba8      	ldr	r3, [pc, #672]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800243e:	231f      	movs	r3, #31
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002446:	4ba4      	ldr	r3, [pc, #656]	@ (80026d8 <HAL_RCC_OscConfig+0x61c>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d11a      	bne.n	8002488 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002452:	4ba1      	ldr	r3, [pc, #644]	@ (80026d8 <HAL_RCC_OscConfig+0x61c>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4ba0      	ldr	r3, [pc, #640]	@ (80026d8 <HAL_RCC_OscConfig+0x61c>)
 8002458:	2180      	movs	r1, #128	@ 0x80
 800245a:	0049      	lsls	r1, r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002460:	f7fe fd4c 	bl	8000efc <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246a:	f7fe fd47 	bl	8000efc <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e127      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4b96      	ldr	r3, [pc, #600]	@ (80026d8 <HAL_RCC_OscConfig+0x61c>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4013      	ands	r3, r2
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x3e2>
 8002490:	4b90      	ldr	r3, [pc, #576]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002492:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002494:	4b8f      	ldr	r3, [pc, #572]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800249c:	e01c      	b.n	80024d8 <HAL_RCC_OscConfig+0x41c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x404>
 80024a6:	4b8b      	ldr	r3, [pc, #556]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80024a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024aa:	4b8a      	ldr	r3, [pc, #552]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80024ac:	2104      	movs	r1, #4
 80024ae:	430a      	orrs	r2, r1
 80024b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024b2:	4b88      	ldr	r3, [pc, #544]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80024b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024b6:	4b87      	ldr	r3, [pc, #540]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x41c>
 80024c0:	4b84      	ldr	r3, [pc, #528]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80024c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024c4:	4b83      	ldr	r3, [pc, #524]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024cc:	4b81      	ldr	r3, [pc, #516]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80024ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024d0:	4b80      	ldr	r3, [pc, #512]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80024d2:	2104      	movs	r1, #4
 80024d4:	438a      	bics	r2, r1
 80024d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d014      	beq.n	800250a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd0c 	bl	8000efc <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e8:	e009      	b.n	80024fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fd07 	bl	8000efc <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4a79      	ldr	r2, [pc, #484]	@ (80026dc <HAL_RCC_OscConfig+0x620>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0e6      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fe:	4b75      	ldr	r3, [pc, #468]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x42e>
 8002508:	e013      	b.n	8002532 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fcf7 	bl	8000efc <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002512:	e009      	b.n	8002528 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fcf2 	bl	8000efc <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	4a6f      	ldr	r2, [pc, #444]	@ (80026dc <HAL_RCC_OscConfig+0x620>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0d1      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002528:	4b6a      	ldr	r3, [pc, #424]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	2202      	movs	r2, #2
 800252e:	4013      	ands	r3, r2
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b65      	ldr	r3, [pc, #404]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800253e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002540:	4b64      	ldr	r3, [pc, #400]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002542:	4967      	ldr	r1, [pc, #412]	@ (80026e0 <HAL_RCC_OscConfig+0x624>)
 8002544:	400a      	ands	r2, r1
 8002546:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d100      	bne.n	8002552 <HAL_RCC_OscConfig+0x496>
 8002550:	e0bb      	b.n	80026ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002552:	4b60      	ldr	r3, [pc, #384]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2238      	movs	r2, #56	@ 0x38
 8002558:	4013      	ands	r3, r2
 800255a:	2b10      	cmp	r3, #16
 800255c:	d100      	bne.n	8002560 <HAL_RCC_OscConfig+0x4a4>
 800255e:	e07b      	b.n	8002658 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d156      	bne.n	8002616 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	4b5a      	ldr	r3, [pc, #360]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b59      	ldr	r3, [pc, #356]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800256e:	495d      	ldr	r1, [pc, #372]	@ (80026e4 <HAL_RCC_OscConfig+0x628>)
 8002570:	400a      	ands	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fcc2 	bl	8000efc <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7fe fcbd 	bl	8000efc <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e09d      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002590:	4b50      	ldr	r3, [pc, #320]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	049b      	lsls	r3, r3, #18
 8002598:	4013      	ands	r3, r2
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259c:	4b4d      	ldr	r3, [pc, #308]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a51      	ldr	r2, [pc, #324]	@ (80026e8 <HAL_RCC_OscConfig+0x62c>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c8:	431a      	orrs	r2, r3
 80025ca:	4b42      	ldr	r3, [pc, #264]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d0:	4b40      	ldr	r3, [pc, #256]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b3f      	ldr	r3, [pc, #252]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80025d6:	2180      	movs	r1, #128	@ 0x80
 80025d8:	0449      	lsls	r1, r1, #17
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80025de:	4b3d      	ldr	r3, [pc, #244]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	4b3c      	ldr	r3, [pc, #240]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 80025e4:	2180      	movs	r1, #128	@ 0x80
 80025e6:	0549      	lsls	r1, r1, #21
 80025e8:	430a      	orrs	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fc86 	bl	8000efc <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fc81 	bl	8000efc <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e061      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002608:	4b32      	ldr	r3, [pc, #200]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	049b      	lsls	r3, r3, #18
 8002610:	4013      	ands	r3, r2
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x53a>
 8002614:	e059      	b.n	80026ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b2f      	ldr	r3, [pc, #188]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b2e      	ldr	r3, [pc, #184]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800261c:	4931      	ldr	r1, [pc, #196]	@ (80026e4 <HAL_RCC_OscConfig+0x628>)
 800261e:	400a      	ands	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fc6b 	bl	8000efc <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fc66 	bl	8000efc <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e046      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263e:	4b25      	ldr	r3, [pc, #148]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	049b      	lsls	r3, r3, #18
 8002646:	4013      	ands	r3, r2
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800264a:	4b22      	ldr	r3, [pc, #136]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002650:	4926      	ldr	r1, [pc, #152]	@ (80026ec <HAL_RCC_OscConfig+0x630>)
 8002652:	400a      	ands	r2, r1
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	e038      	b.n	80026ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e033      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002664:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <HAL_RCC_OscConfig+0x618>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2203      	movs	r2, #3
 800266e:	401a      	ands	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	429a      	cmp	r2, r3
 8002676:	d126      	bne.n	80026c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2270      	movs	r2, #112	@ 0x70
 800267c:	401a      	ands	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11f      	bne.n	80026c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	23fe      	movs	r3, #254	@ 0xfe
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	401a      	ands	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	23f8      	movs	r3, #248	@ 0xf8
 800269c:	039b      	lsls	r3, r3, #14
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10e      	bne.n	80026c6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	23e0      	movs	r3, #224	@ 0xe0
 80026ac:	051b      	lsls	r3, r3, #20
 80026ae:	401a      	ands	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	0f5b      	lsrs	r3, r3, #29
 80026bc:	075a      	lsls	r2, r3, #29
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b008      	add	sp, #32
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
 80026dc:	00001388 	.word	0x00001388
 80026e0:	efffffff 	.word	0xefffffff
 80026e4:	feffffff 	.word	0xfeffffff
 80026e8:	11c1808c 	.word	0x11c1808c
 80026ec:	eefefffc 	.word	0xeefefffc

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0e9      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b76      	ldr	r3, [pc, #472]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2207      	movs	r2, #7
 800270a:	4013      	ands	r3, r2
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d91e      	bls.n	8002750 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b73      	ldr	r3, [pc, #460]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2207      	movs	r2, #7
 8002718:	4393      	bics	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	4b70      	ldr	r3, [pc, #448]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002724:	f7fe fbea 	bl	8000efc <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272c:	e009      	b.n	8002742 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272e:	f7fe fbe5 	bl	8000efc <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	4a6a      	ldr	r2, [pc, #424]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0ca      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002742:	4b67      	ldr	r3, [pc, #412]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2207      	movs	r2, #7
 8002748:	4013      	ands	r3, r2
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d1ee      	bne.n	800272e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2202      	movs	r2, #2
 8002756:	4013      	ands	r3, r2
 8002758:	d015      	beq.n	8002786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2204      	movs	r2, #4
 8002760:	4013      	ands	r3, r2
 8002762:	d006      	beq.n	8002772 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002764:	4b60      	ldr	r3, [pc, #384]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b5f      	ldr	r3, [pc, #380]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 800276a:	21e0      	movs	r1, #224	@ 0xe0
 800276c:	01c9      	lsls	r1, r1, #7
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002772:	4b5d      	ldr	r3, [pc, #372]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a5d      	ldr	r2, [pc, #372]	@ (80028ec <HAL_RCC_ClockConfig+0x1fc>)
 8002778:	4013      	ands	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	4b59      	ldr	r3, [pc, #356]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2201      	movs	r2, #1
 800278c:	4013      	ands	r3, r2
 800278e:	d057      	beq.n	8002840 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002798:	4b53      	ldr	r3, [pc, #332]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	d12b      	bne.n	80027fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e097      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b0:	4b4d      	ldr	r3, [pc, #308]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	049b      	lsls	r3, r3, #18
 80027b8:	4013      	ands	r3, r2
 80027ba:	d11f      	bne.n	80027fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e08b      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c8:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4013      	ands	r3, r2
 80027d2:	d113      	bne.n	80027fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e07f      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d106      	bne.n	80027ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e0:	4b41      	ldr	r3, [pc, #260]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 80027e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e074      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ee:	4b3e      	ldr	r3, [pc, #248]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e06d      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027fc:	4b3a      	ldr	r3, [pc, #232]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2207      	movs	r2, #7
 8002802:	4393      	bics	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 800280c:	430a      	orrs	r2, r1
 800280e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fe fb74 	bl	8000efc <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002818:	e009      	b.n	800282e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281a:	f7fe fb6f 	bl	8000efc <HAL_GetTick>
 800281e:	0002      	movs	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	4a2f      	ldr	r2, [pc, #188]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e054      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2238      	movs	r2, #56	@ 0x38
 8002834:	401a      	ands	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	429a      	cmp	r2, r3
 800283e:	d1ec      	bne.n	800281a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b27      	ldr	r3, [pc, #156]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2207      	movs	r2, #7
 8002846:	4013      	ands	r3, r2
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d21e      	bcs.n	800288c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2207      	movs	r2, #7
 8002854:	4393      	bics	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002860:	f7fe fb4c 	bl	8000efc <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002868:	e009      	b.n	800287e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286a:	f7fe fb47 	bl	8000efc <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	4a1b      	ldr	r2, [pc, #108]	@ (80028e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e02c      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800287e:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2207      	movs	r2, #7
 8002884:	4013      	ands	r3, r2
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002896:	4b14      	ldr	r3, [pc, #80]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4a15      	ldr	r2, [pc, #84]	@ (80028f0 <HAL_RCC_ClockConfig+0x200>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028aa:	f000 f829 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028ae:	0001      	movs	r1, r0
 80028b0:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	220f      	movs	r2, #15
 80028b8:	401a      	ands	r2, r3
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <HAL_RCC_ClockConfig+0x204>)
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	58d3      	ldr	r3, [r2, r3]
 80028c0:	221f      	movs	r2, #31
 80028c2:	4013      	ands	r3, r2
 80028c4:	000a      	movs	r2, r1
 80028c6:	40da      	lsrs	r2, r3
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_ClockConfig+0x208>)
 80028ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_RCC_ClockConfig+0x20c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fe fab7 	bl	8000e44 <HAL_InitTick>
 80028d6:	0003      	movs	r3, r0
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b004      	add	sp, #16
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40022000 	.word	0x40022000
 80028e4:	00001388 	.word	0x00001388
 80028e8:	40021000 	.word	0x40021000
 80028ec:	fffff0ff 	.word	0xfffff0ff
 80028f0:	ffff8fff 	.word	0xffff8fff
 80028f4:	080049d8 	.word	0x080049d8
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000004 	.word	0x20000004

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002906:	4b3c      	ldr	r3, [pc, #240]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2238      	movs	r2, #56	@ 0x38
 800290c:	4013      	ands	r3, r2
 800290e:	d10f      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002910:	4b39      	ldr	r3, [pc, #228]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0adb      	lsrs	r3, r3, #11
 8002916:	2207      	movs	r2, #7
 8002918:	4013      	ands	r3, r2
 800291a:	2201      	movs	r2, #1
 800291c:	409a      	lsls	r2, r3
 800291e:	0013      	movs	r3, r2
 8002920:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	4835      	ldr	r0, [pc, #212]	@ (80029fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002926:	f7fd fbf5 	bl	8000114 <__udivsi3>
 800292a:	0003      	movs	r3, r0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	e05d      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002930:	4b31      	ldr	r3, [pc, #196]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2238      	movs	r2, #56	@ 0x38
 8002936:	4013      	ands	r3, r2
 8002938:	2b08      	cmp	r3, #8
 800293a:	d102      	bne.n	8002942 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800293c:	4b30      	ldr	r3, [pc, #192]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x100>)
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	e054      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002942:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2238      	movs	r2, #56	@ 0x38
 8002948:	4013      	ands	r3, r2
 800294a:	2b10      	cmp	r3, #16
 800294c:	d138      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800294e:	4b2a      	ldr	r3, [pc, #168]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2203      	movs	r2, #3
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002958:	4b27      	ldr	r3, [pc, #156]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	2207      	movs	r2, #7
 8002960:	4013      	ands	r3, r2
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d10d      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	4824      	ldr	r0, [pc, #144]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x100>)
 8002970:	f7fd fbd0 	bl	8000114 <__udivsi3>
 8002974:	0003      	movs	r3, r0
 8002976:	0019      	movs	r1, r3
 8002978:	4b1f      	ldr	r3, [pc, #124]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	227f      	movs	r2, #127	@ 0x7f
 8002980:	4013      	ands	r3, r2
 8002982:	434b      	muls	r3, r1
 8002984:	617b      	str	r3, [r7, #20]
        break;
 8002986:	e00d      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	481c      	ldr	r0, [pc, #112]	@ (80029fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800298c:	f7fd fbc2 	bl	8000114 <__udivsi3>
 8002990:	0003      	movs	r3, r0
 8002992:	0019      	movs	r1, r3
 8002994:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	227f      	movs	r2, #127	@ 0x7f
 800299c:	4013      	ands	r3, r2
 800299e:	434b      	muls	r3, r1
 80029a0:	617b      	str	r3, [r7, #20]
        break;
 80029a2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0f5b      	lsrs	r3, r3, #29
 80029aa:	2207      	movs	r2, #7
 80029ac:	4013      	ands	r3, r2
 80029ae:	3301      	adds	r3, #1
 80029b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	6978      	ldr	r0, [r7, #20]
 80029b6:	f7fd fbad 	bl	8000114 <__udivsi3>
 80029ba:	0003      	movs	r3, r0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	e015      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2238      	movs	r2, #56	@ 0x38
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d103      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029d4:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2238      	movs	r2, #56	@ 0x38
 80029da:	4013      	ands	r3, r2
 80029dc:	2b18      	cmp	r3, #24
 80029de:	d103      	bne.n	80029e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029e0:	23fa      	movs	r3, #250	@ 0xfa
 80029e2:	01db      	lsls	r3, r3, #7
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	e001      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029ec:	693b      	ldr	r3, [r7, #16]
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b006      	add	sp, #24
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	40021000 	.word	0x40021000
 80029fc:	00f42400 	.word	0x00f42400
 8002a00:	007a1200 	.word	0x007a1200

08002a04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b02      	ldr	r3, [pc, #8]	@ (8002a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	20000000 	.word	0x20000000

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b5b0      	push	{r4, r5, r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a1c:	f7ff fff2 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a20:	0004      	movs	r4, r0
 8002a22:	f7ff fb3f 	bl	80020a4 <LL_RCC_GetAPB1Prescaler>
 8002a26:	0003      	movs	r3, r0
 8002a28:	0b1a      	lsrs	r2, r3, #12
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	58d3      	ldr	r3, [r2, r3]
 8002a30:	221f      	movs	r2, #31
 8002a32:	4013      	ands	r3, r2
 8002a34:	40dc      	lsrs	r4, r3
 8002a36:	0023      	movs	r3, r4
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	08004a18 	.word	0x08004a18

08002a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a4c:	2313      	movs	r3, #19
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a54:	2312      	movs	r3, #18
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	029b      	lsls	r3, r3, #10
 8002a64:	4013      	ands	r3, r2
 8002a66:	d100      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a68:	e0a3      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2011      	movs	r0, #17
 8002a6c:	183b      	adds	r3, r7, r0
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4bb3      	ldr	r3, [pc, #716]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	055b      	lsls	r3, r3, #21
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d110      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	4bb0      	ldr	r3, [pc, #704]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a82:	4baf      	ldr	r3, [pc, #700]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a84:	2180      	movs	r1, #128	@ 0x80
 8002a86:	0549      	lsls	r1, r1, #21
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a8c:	4bac      	ldr	r3, [pc, #688]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	055b      	lsls	r3, r3, #21
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa0:	4ba8      	ldr	r3, [pc, #672]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4ba7      	ldr	r3, [pc, #668]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002aa6:	2180      	movs	r1, #128	@ 0x80
 8002aa8:	0049      	lsls	r1, r1, #1
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aae:	f7fe fa25 	bl	8000efc <HAL_GetTick>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab8:	f7fe fa20 	bl	8000efc <HAL_GetTick>
 8002abc:	0002      	movs	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d904      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002ac6:	2313      	movs	r3, #19
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2203      	movs	r2, #3
 8002acc:	701a      	strb	r2, [r3, #0]
        break;
 8002ace:	e005      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d0ed      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002adc:	2313      	movs	r3, #19
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d154      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ae6:	4b96      	ldr	r3, [pc, #600]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ae8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aea:	23c0      	movs	r3, #192	@ 0xc0
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d019      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d014      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b02:	4b8f      	ldr	r3, [pc, #572]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b06:	4a90      	ldr	r2, [pc, #576]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b10:	4b8b      	ldr	r3, [pc, #556]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b12:	2180      	movs	r1, #128	@ 0x80
 8002b14:	0249      	lsls	r1, r1, #9
 8002b16:	430a      	orrs	r2, r1
 8002b18:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1a:	4b89      	ldr	r3, [pc, #548]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b1e:	4b88      	ldr	r3, [pc, #544]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b20:	498a      	ldr	r1, [pc, #552]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b22:	400a      	ands	r2, r1
 8002b24:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b26:	4b86      	ldr	r3, [pc, #536]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	d016      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe f9e2 	bl	8000efc <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3c:	e00c      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe f9dd 	bl	8000efc <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	4a81      	ldr	r2, [pc, #516]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d904      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b4e:	2313      	movs	r3, #19
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	2203      	movs	r2, #3
 8002b54:	701a      	strb	r2, [r3, #0]
            break;
 8002b56:	e004      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b58:	4b79      	ldr	r3, [pc, #484]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d0ed      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002b62:	2313      	movs	r3, #19
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b6c:	4b74      	ldr	r3, [pc, #464]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	4a75      	ldr	r2, [pc, #468]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b7a:	4b71      	ldr	r3, [pc, #452]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b80:	e00c      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b82:	2312      	movs	r3, #18
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2213      	movs	r2, #19
 8002b88:	18ba      	adds	r2, r7, r2
 8002b8a:	7812      	ldrb	r2, [r2, #0]
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e005      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b90:	2312      	movs	r3, #18
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2213      	movs	r2, #19
 8002b96:	18ba      	adds	r2, r7, r2
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b9c:	2311      	movs	r3, #17
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b66      	ldr	r3, [pc, #408]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ba8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002baa:	4b65      	ldr	r3, [pc, #404]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bac:	4969      	ldr	r1, [pc, #420]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bbc:	4b60      	ldr	r3, [pc, #384]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4b5d      	ldr	r3, [pc, #372]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bda:	4b59      	ldr	r3, [pc, #356]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bde:	4a5e      	ldr	r2, [pc, #376]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	4b55      	ldr	r3, [pc, #340]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bfa:	4b51      	ldr	r3, [pc, #324]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	4a57      	ldr	r2, [pc, #348]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	4b4d      	ldr	r3, [pc, #308]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	2380      	movs	r3, #128	@ 0x80
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4013      	ands	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c1a:	4b49      	ldr	r3, [pc, #292]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1e:	4a50      	ldr	r2, [pc, #320]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699a      	ldr	r2, [r3, #24]
 8002c28:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c38:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3c:	4a49      	ldr	r2, [pc, #292]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	4b3e      	ldr	r3, [pc, #248]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	01db      	lsls	r3, r3, #7
 8002c54:	4013      	ands	r3, r2
 8002c56:	d015      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c58:	4b39      	ldr	r3, [pc, #228]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	0899      	lsrs	r1, r3, #2
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c66:	430a      	orrs	r2, r1
 8002c68:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d106      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c76:	4b32      	ldr	r3, [pc, #200]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c7c:	2180      	movs	r1, #128	@ 0x80
 8002c7e:	0249      	lsls	r1, r1, #9
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	@ 0x80
 8002c8a:	039b      	lsls	r3, r3, #14
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d016      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c90:	4b2b      	ldr	r3, [pc, #172]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	4a34      	ldr	r2, [pc, #208]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	4b28      	ldr	r3, [pc, #160]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	03db      	lsls	r3, r3, #15
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d106      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cb0:	4b23      	ldr	r3, [pc, #140]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	0449      	lsls	r1, r1, #17
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	03db      	lsls	r3, r3, #15
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002cca:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cce:	4a27      	ldr	r2, [pc, #156]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd8:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce2:	2380      	movs	r3, #128	@ 0x80
 8002ce4:	045b      	lsls	r3, r3, #17
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cf0:	2180      	movs	r1, #128	@ 0x80
 8002cf2:	0449      	lsls	r1, r1, #17
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4013      	ands	r3, r2
 8002d02:	d016      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d04:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d08:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d14:	430a      	orrs	r2, r1
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	01db      	lsls	r3, r3, #7
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d106      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d2a:	2180      	movs	r1, #128	@ 0x80
 8002d2c:	0249      	lsls	r1, r1, #9
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d32:	2312      	movs	r3, #18
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	781b      	ldrb	r3, [r3, #0]
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b006      	add	sp, #24
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
 8002d48:	fffffcff 	.word	0xfffffcff
 8002d4c:	fffeffff 	.word	0xfffeffff
 8002d50:	00001388 	.word	0x00001388
 8002d54:	efffffff 	.word	0xefffffff
 8002d58:	fffff3ff 	.word	0xfffff3ff
 8002d5c:	fff3ffff 	.word	0xfff3ffff
 8002d60:	ffcfffff 	.word	0xffcfffff
 8002d64:	ffffcfff 	.word	0xffffcfff
 8002d68:	ffbfffff 	.word	0xffbfffff
 8002d6c:	feffffff 	.word	0xfeffffff
 8002d70:	ffff3fff 	.word	0xffff3fff

08002d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e046      	b.n	8002e14 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2288      	movs	r2, #136	@ 0x88
 8002d8a:	589b      	ldr	r3, [r3, r2]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2284      	movs	r2, #132	@ 0x84
 8002d94:	2100      	movs	r1, #0
 8002d96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f7fd ff08 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2288      	movs	r2, #136	@ 0x88
 8002da4:	2124      	movs	r1, #36	@ 0x24
 8002da6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	438a      	bics	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 fb48 	bl	8003458 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 f8cc 	bl	8002f68 <UART_SetConfig>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e01c      	b.n	8002e14 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	490d      	ldr	r1, [pc, #52]	@ (8002e1c <HAL_UART_Init+0xa8>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	212a      	movs	r1, #42	@ 0x2a
 8002df6:	438a      	bics	r2, r1
 8002df8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fbd7 	bl	80035c0 <UART_CheckIdleState>
 8002e12:	0003      	movs	r3, r0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	ffffb7ff 	.word	0xffffb7ff

08002e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	@ 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	1dbb      	adds	r3, r7, #6
 8002e2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2288      	movs	r2, #136	@ 0x88
 8002e34:	589b      	ldr	r3, [r3, r2]
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d000      	beq.n	8002e3c <HAL_UART_Transmit+0x1c>
 8002e3a:	e090      	b.n	8002f5e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_UART_Transmit+0x2a>
 8002e42:	1dbb      	adds	r3, r7, #6
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e088      	b.n	8002f60 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	015b      	lsls	r3, r3, #5
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d109      	bne.n	8002e6e <HAL_UART_Transmit+0x4e>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2201      	movs	r2, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	d001      	beq.n	8002e6e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e078      	b.n	8002f60 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2290      	movs	r2, #144	@ 0x90
 8002e72:	2100      	movs	r1, #0
 8002e74:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2288      	movs	r2, #136	@ 0x88
 8002e7a:	2121      	movs	r1, #33	@ 0x21
 8002e7c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e7e:	f7fe f83d 	bl	8000efc <HAL_GetTick>
 8002e82:	0003      	movs	r3, r0
 8002e84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1dba      	adds	r2, r7, #6
 8002e8a:	2154      	movs	r1, #84	@ 0x54
 8002e8c:	8812      	ldrh	r2, [r2, #0]
 8002e8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1dba      	adds	r2, r7, #6
 8002e94:	2156      	movs	r1, #86	@ 0x56
 8002e96:	8812      	ldrh	r2, [r2, #0]
 8002e98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	015b      	lsls	r3, r3, #5
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d108      	bne.n	8002eb8 <HAL_UART_Transmit+0x98>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	e003      	b.n	8002ec0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ec0:	e030      	b.n	8002f24 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	0013      	movs	r3, r2
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	f000 fc20 	bl	8003714 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2288      	movs	r2, #136	@ 0x88
 8002edc:	2120      	movs	r1, #32
 8002ede:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e03d      	b.n	8002f60 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	001a      	movs	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	05d2      	lsls	r2, r2, #23
 8002ef6:	0dd2      	lsrs	r2, r2, #23
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	3302      	adds	r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e007      	b.n	8002f12 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2256      	movs	r2, #86	@ 0x56
 8002f16:	5a9b      	ldrh	r3, [r3, r2]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b299      	uxth	r1, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2256      	movs	r2, #86	@ 0x56
 8002f22:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2256      	movs	r2, #86	@ 0x56
 8002f28:	5a9b      	ldrh	r3, [r3, r2]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1c8      	bne.n	8002ec2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	0013      	movs	r3, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2140      	movs	r1, #64	@ 0x40
 8002f3e:	f000 fbe9 	bl	8003714 <UART_WaitOnFlagUntilTimeout>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2288      	movs	r2, #136	@ 0x88
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e006      	b.n	8002f60 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2288      	movs	r2, #136	@ 0x88
 8002f56:	2120      	movs	r1, #32
 8002f58:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b008      	add	sp, #32
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f68:	b5b0      	push	{r4, r5, r7, lr}
 8002f6a:	b090      	sub	sp, #64	@ 0x40
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f70:	231a      	movs	r3, #26
 8002f72:	2220      	movs	r2, #32
 8002f74:	189b      	adds	r3, r3, r2
 8002f76:	19db      	adds	r3, r3, r7
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4ac4      	ldr	r2, [pc, #784]	@ (80032ac <UART_SetConfig+0x344>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4abf      	ldr	r2, [pc, #764]	@ (80032b0 <UART_SetConfig+0x348>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	68d9      	ldr	r1, [r3, #12]
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4ab9      	ldr	r2, [pc, #740]	@ (80032b4 <UART_SetConfig+0x34c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4ab4      	ldr	r2, [pc, #720]	@ (80032b8 <UART_SetConfig+0x350>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	0018      	movs	r0, r3
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	0003      	movs	r3, r0
 800300a:	430b      	orrs	r3, r1
 800300c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4aaa      	ldr	r2, [pc, #680]	@ (80032bc <UART_SetConfig+0x354>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d131      	bne.n	800307c <UART_SetConfig+0x114>
 8003018:	4ba9      	ldr	r3, [pc, #676]	@ (80032c0 <UART_SetConfig+0x358>)
 800301a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301c:	2203      	movs	r2, #3
 800301e:	4013      	ands	r3, r2
 8003020:	2b03      	cmp	r3, #3
 8003022:	d01d      	beq.n	8003060 <UART_SetConfig+0xf8>
 8003024:	d823      	bhi.n	800306e <UART_SetConfig+0x106>
 8003026:	2b02      	cmp	r3, #2
 8003028:	d00c      	beq.n	8003044 <UART_SetConfig+0xdc>
 800302a:	d820      	bhi.n	800306e <UART_SetConfig+0x106>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <UART_SetConfig+0xce>
 8003030:	2b01      	cmp	r3, #1
 8003032:	d00e      	beq.n	8003052 <UART_SetConfig+0xea>
 8003034:	e01b      	b.n	800306e <UART_SetConfig+0x106>
 8003036:	231b      	movs	r3, #27
 8003038:	2220      	movs	r2, #32
 800303a:	189b      	adds	r3, r3, r2
 800303c:	19db      	adds	r3, r3, r7
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e071      	b.n	8003128 <UART_SetConfig+0x1c0>
 8003044:	231b      	movs	r3, #27
 8003046:	2220      	movs	r2, #32
 8003048:	189b      	adds	r3, r3, r2
 800304a:	19db      	adds	r3, r3, r7
 800304c:	2202      	movs	r2, #2
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e06a      	b.n	8003128 <UART_SetConfig+0x1c0>
 8003052:	231b      	movs	r3, #27
 8003054:	2220      	movs	r2, #32
 8003056:	189b      	adds	r3, r3, r2
 8003058:	19db      	adds	r3, r3, r7
 800305a:	2204      	movs	r2, #4
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e063      	b.n	8003128 <UART_SetConfig+0x1c0>
 8003060:	231b      	movs	r3, #27
 8003062:	2220      	movs	r2, #32
 8003064:	189b      	adds	r3, r3, r2
 8003066:	19db      	adds	r3, r3, r7
 8003068:	2208      	movs	r2, #8
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e05c      	b.n	8003128 <UART_SetConfig+0x1c0>
 800306e:	231b      	movs	r3, #27
 8003070:	2220      	movs	r2, #32
 8003072:	189b      	adds	r3, r3, r2
 8003074:	19db      	adds	r3, r3, r7
 8003076:	2210      	movs	r2, #16
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e055      	b.n	8003128 <UART_SetConfig+0x1c0>
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a90      	ldr	r2, [pc, #576]	@ (80032c4 <UART_SetConfig+0x35c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d106      	bne.n	8003094 <UART_SetConfig+0x12c>
 8003086:	231b      	movs	r3, #27
 8003088:	2220      	movs	r2, #32
 800308a:	189b      	adds	r3, r3, r2
 800308c:	19db      	adds	r3, r3, r7
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e049      	b.n	8003128 <UART_SetConfig+0x1c0>
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a86      	ldr	r2, [pc, #536]	@ (80032b4 <UART_SetConfig+0x34c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d13e      	bne.n	800311c <UART_SetConfig+0x1b4>
 800309e:	4b88      	ldr	r3, [pc, #544]	@ (80032c0 <UART_SetConfig+0x358>)
 80030a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030a2:	23c0      	movs	r3, #192	@ 0xc0
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	4013      	ands	r3, r2
 80030a8:	22c0      	movs	r2, #192	@ 0xc0
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d027      	beq.n	8003100 <UART_SetConfig+0x198>
 80030b0:	22c0      	movs	r2, #192	@ 0xc0
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d82a      	bhi.n	800310e <UART_SetConfig+0x1a6>
 80030b8:	2280      	movs	r2, #128	@ 0x80
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	4293      	cmp	r3, r2
 80030be:	d011      	beq.n	80030e4 <UART_SetConfig+0x17c>
 80030c0:	2280      	movs	r2, #128	@ 0x80
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d822      	bhi.n	800310e <UART_SetConfig+0x1a6>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <UART_SetConfig+0x16e>
 80030cc:	2280      	movs	r2, #128	@ 0x80
 80030ce:	00d2      	lsls	r2, r2, #3
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <UART_SetConfig+0x18a>
 80030d4:	e01b      	b.n	800310e <UART_SetConfig+0x1a6>
 80030d6:	231b      	movs	r3, #27
 80030d8:	2220      	movs	r2, #32
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	19db      	adds	r3, r3, r7
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e021      	b.n	8003128 <UART_SetConfig+0x1c0>
 80030e4:	231b      	movs	r3, #27
 80030e6:	2220      	movs	r2, #32
 80030e8:	189b      	adds	r3, r3, r2
 80030ea:	19db      	adds	r3, r3, r7
 80030ec:	2202      	movs	r2, #2
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e01a      	b.n	8003128 <UART_SetConfig+0x1c0>
 80030f2:	231b      	movs	r3, #27
 80030f4:	2220      	movs	r2, #32
 80030f6:	189b      	adds	r3, r3, r2
 80030f8:	19db      	adds	r3, r3, r7
 80030fa:	2204      	movs	r2, #4
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e013      	b.n	8003128 <UART_SetConfig+0x1c0>
 8003100:	231b      	movs	r3, #27
 8003102:	2220      	movs	r2, #32
 8003104:	189b      	adds	r3, r3, r2
 8003106:	19db      	adds	r3, r3, r7
 8003108:	2208      	movs	r2, #8
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e00c      	b.n	8003128 <UART_SetConfig+0x1c0>
 800310e:	231b      	movs	r3, #27
 8003110:	2220      	movs	r2, #32
 8003112:	189b      	adds	r3, r3, r2
 8003114:	19db      	adds	r3, r3, r7
 8003116:	2210      	movs	r2, #16
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e005      	b.n	8003128 <UART_SetConfig+0x1c0>
 800311c:	231b      	movs	r3, #27
 800311e:	2220      	movs	r2, #32
 8003120:	189b      	adds	r3, r3, r2
 8003122:	19db      	adds	r3, r3, r7
 8003124:	2210      	movs	r2, #16
 8003126:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a61      	ldr	r2, [pc, #388]	@ (80032b4 <UART_SetConfig+0x34c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d000      	beq.n	8003134 <UART_SetConfig+0x1cc>
 8003132:	e092      	b.n	800325a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003134:	231b      	movs	r3, #27
 8003136:	2220      	movs	r2, #32
 8003138:	189b      	adds	r3, r3, r2
 800313a:	19db      	adds	r3, r3, r7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d015      	beq.n	800316e <UART_SetConfig+0x206>
 8003142:	dc18      	bgt.n	8003176 <UART_SetConfig+0x20e>
 8003144:	2b04      	cmp	r3, #4
 8003146:	d00d      	beq.n	8003164 <UART_SetConfig+0x1fc>
 8003148:	dc15      	bgt.n	8003176 <UART_SetConfig+0x20e>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <UART_SetConfig+0x1ec>
 800314e:	2b02      	cmp	r3, #2
 8003150:	d005      	beq.n	800315e <UART_SetConfig+0x1f6>
 8003152:	e010      	b.n	8003176 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003154:	f7ff fc60 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003158:	0003      	movs	r3, r0
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800315c:	e014      	b.n	8003188 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800315e:	4b5a      	ldr	r3, [pc, #360]	@ (80032c8 <UART_SetConfig+0x360>)
 8003160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003162:	e011      	b.n	8003188 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003164:	f7ff fbcc 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003168:	0003      	movs	r3, r0
 800316a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800316c:	e00c      	b.n	8003188 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003174:	e008      	b.n	8003188 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800317a:	231a      	movs	r3, #26
 800317c:	2220      	movs	r2, #32
 800317e:	189b      	adds	r3, r3, r2
 8003180:	19db      	adds	r3, r3, r7
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
        break;
 8003186:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318a:	2b00      	cmp	r3, #0
 800318c:	d100      	bne.n	8003190 <UART_SetConfig+0x228>
 800318e:	e147      	b.n	8003420 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003194:	4b4d      	ldr	r3, [pc, #308]	@ (80032cc <UART_SetConfig+0x364>)
 8003196:	0052      	lsls	r2, r2, #1
 8003198:	5ad3      	ldrh	r3, [r2, r3]
 800319a:	0019      	movs	r1, r3
 800319c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800319e:	f7fc ffb9 	bl	8000114 <__udivsi3>
 80031a2:	0003      	movs	r3, r0
 80031a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	0013      	movs	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d305      	bcc.n	80031c2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031be:	429a      	cmp	r2, r3
 80031c0:	d906      	bls.n	80031d0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80031c2:	231a      	movs	r3, #26
 80031c4:	2220      	movs	r2, #32
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	19db      	adds	r3, r3, r7
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e127      	b.n	8003420 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031dc:	4b3b      	ldr	r3, [pc, #236]	@ (80032cc <UART_SetConfig+0x364>)
 80031de:	0052      	lsls	r2, r2, #1
 80031e0:	5ad3      	ldrh	r3, [r2, r3]
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	69b8      	ldr	r0, [r7, #24]
 80031ee:	69f9      	ldr	r1, [r7, #28]
 80031f0:	f7fd f906 	bl	8000400 <__aeabi_uldivmod>
 80031f4:	0002      	movs	r2, r0
 80031f6:	000b      	movs	r3, r1
 80031f8:	0e11      	lsrs	r1, r2, #24
 80031fa:	021d      	lsls	r5, r3, #8
 80031fc:	430d      	orrs	r5, r1
 80031fe:	0214      	lsls	r4, r2, #8
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68b8      	ldr	r0, [r7, #8]
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	1900      	adds	r0, r0, r4
 8003212:	4169      	adcs	r1, r5
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f7fd f8ed 	bl	8000400 <__aeabi_uldivmod>
 8003226:	0002      	movs	r2, r0
 8003228:	000b      	movs	r3, r1
 800322a:	0013      	movs	r3, r2
 800322c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800322e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003230:	23c0      	movs	r3, #192	@ 0xc0
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d309      	bcc.n	800324c <UART_SetConfig+0x2e4>
 8003238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323a:	2380      	movs	r3, #128	@ 0x80
 800323c:	035b      	lsls	r3, r3, #13
 800323e:	429a      	cmp	r2, r3
 8003240:	d204      	bcs.n	800324c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	e0e9      	b.n	8003420 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800324c:	231a      	movs	r3, #26
 800324e:	2220      	movs	r2, #32
 8003250:	189b      	adds	r3, r3, r2
 8003252:	19db      	adds	r3, r3, r7
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e0e2      	b.n	8003420 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	429a      	cmp	r2, r3
 8003264:	d000      	beq.n	8003268 <UART_SetConfig+0x300>
 8003266:	e083      	b.n	8003370 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003268:	231b      	movs	r3, #27
 800326a:	2220      	movs	r2, #32
 800326c:	189b      	adds	r3, r3, r2
 800326e:	19db      	adds	r3, r3, r7
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b08      	cmp	r3, #8
 8003274:	d015      	beq.n	80032a2 <UART_SetConfig+0x33a>
 8003276:	dc2b      	bgt.n	80032d0 <UART_SetConfig+0x368>
 8003278:	2b04      	cmp	r3, #4
 800327a:	d00d      	beq.n	8003298 <UART_SetConfig+0x330>
 800327c:	dc28      	bgt.n	80032d0 <UART_SetConfig+0x368>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <UART_SetConfig+0x320>
 8003282:	2b02      	cmp	r3, #2
 8003284:	d005      	beq.n	8003292 <UART_SetConfig+0x32a>
 8003286:	e023      	b.n	80032d0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7ff fbc6 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800328c:	0003      	movs	r3, r0
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003290:	e027      	b.n	80032e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <UART_SetConfig+0x360>)
 8003294:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003296:	e024      	b.n	80032e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003298:	f7ff fb32 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 800329c:	0003      	movs	r3, r0
 800329e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032a0:	e01f      	b.n	80032e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032a8:	e01b      	b.n	80032e2 <UART_SetConfig+0x37a>
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	cfff69f3 	.word	0xcfff69f3
 80032b0:	ffffcfff 	.word	0xffffcfff
 80032b4:	40008000 	.word	0x40008000
 80032b8:	11fff4ff 	.word	0x11fff4ff
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	08004a38 	.word	0x08004a38
      default:
        pclk = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80032d4:	231a      	movs	r3, #26
 80032d6:	2220      	movs	r2, #32
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	19db      	adds	r3, r3, r7
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
        break;
 80032e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d100      	bne.n	80032ea <UART_SetConfig+0x382>
 80032e8:	e09a      	b.n	8003420 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ee:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <UART_SetConfig+0x4e8>)
 80032f0:	0052      	lsls	r2, r2, #1
 80032f2:	5ad3      	ldrh	r3, [r2, r3]
 80032f4:	0019      	movs	r1, r3
 80032f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032f8:	f7fc ff0c 	bl	8000114 <__udivsi3>
 80032fc:	0003      	movs	r3, r0
 80032fe:	005a      	lsls	r2, r3, #1
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	18d2      	adds	r2, r2, r3
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	0019      	movs	r1, r3
 800330e:	0010      	movs	r0, r2
 8003310:	f7fc ff00 	bl	8000114 <__udivsi3>
 8003314:	0003      	movs	r3, r0
 8003316:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	2b0f      	cmp	r3, #15
 800331c:	d921      	bls.n	8003362 <UART_SetConfig+0x3fa>
 800331e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	025b      	lsls	r3, r3, #9
 8003324:	429a      	cmp	r2, r3
 8003326:	d21c      	bcs.n	8003362 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	b29a      	uxth	r2, r3
 800332c:	200e      	movs	r0, #14
 800332e:	2420      	movs	r4, #32
 8003330:	1903      	adds	r3, r0, r4
 8003332:	19db      	adds	r3, r3, r7
 8003334:	210f      	movs	r1, #15
 8003336:	438a      	bics	r2, r1
 8003338:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	b29b      	uxth	r3, r3
 8003340:	2207      	movs	r2, #7
 8003342:	4013      	ands	r3, r2
 8003344:	b299      	uxth	r1, r3
 8003346:	1903      	adds	r3, r0, r4
 8003348:	19db      	adds	r3, r3, r7
 800334a:	1902      	adds	r2, r0, r4
 800334c:	19d2      	adds	r2, r2, r7
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	1902      	adds	r2, r0, r4
 800335a:	19d2      	adds	r2, r2, r7
 800335c:	8812      	ldrh	r2, [r2, #0]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	e05e      	b.n	8003420 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003362:	231a      	movs	r3, #26
 8003364:	2220      	movs	r2, #32
 8003366:	189b      	adds	r3, r3, r2
 8003368:	19db      	adds	r3, r3, r7
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e057      	b.n	8003420 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003370:	231b      	movs	r3, #27
 8003372:	2220      	movs	r2, #32
 8003374:	189b      	adds	r3, r3, r2
 8003376:	19db      	adds	r3, r3, r7
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d015      	beq.n	80033aa <UART_SetConfig+0x442>
 800337e:	dc18      	bgt.n	80033b2 <UART_SetConfig+0x44a>
 8003380:	2b04      	cmp	r3, #4
 8003382:	d00d      	beq.n	80033a0 <UART_SetConfig+0x438>
 8003384:	dc15      	bgt.n	80033b2 <UART_SetConfig+0x44a>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <UART_SetConfig+0x428>
 800338a:	2b02      	cmp	r3, #2
 800338c:	d005      	beq.n	800339a <UART_SetConfig+0x432>
 800338e:	e010      	b.n	80033b2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7ff fb42 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8003394:	0003      	movs	r3, r0
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003398:	e014      	b.n	80033c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800339a:	4b2e      	ldr	r3, [pc, #184]	@ (8003454 <UART_SetConfig+0x4ec>)
 800339c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800339e:	e011      	b.n	80033c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a0:	f7ff faae 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80033a4:	0003      	movs	r3, r0
 80033a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033a8:	e00c      	b.n	80033c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033b0:	e008      	b.n	80033c4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80033b6:	231a      	movs	r3, #26
 80033b8:	2220      	movs	r2, #32
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	19db      	adds	r3, r3, r7
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
        break;
 80033c2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80033c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d02a      	beq.n	8003420 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ce:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <UART_SetConfig+0x4e8>)
 80033d0:	0052      	lsls	r2, r2, #1
 80033d2:	5ad3      	ldrh	r3, [r2, r3]
 80033d4:	0019      	movs	r1, r3
 80033d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80033d8:	f7fc fe9c 	bl	8000114 <__udivsi3>
 80033dc:	0003      	movs	r3, r0
 80033de:	001a      	movs	r2, r3
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	18d2      	adds	r2, r2, r3
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0019      	movs	r1, r3
 80033ee:	0010      	movs	r0, r2
 80033f0:	f7fc fe90 	bl	8000114 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d90a      	bls.n	8003414 <UART_SetConfig+0x4ac>
 80033fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	025b      	lsls	r3, r3, #9
 8003404:	429a      	cmp	r2, r3
 8003406:	d205      	bcs.n	8003414 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340a:	b29a      	uxth	r2, r3
 800340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	e005      	b.n	8003420 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003414:	231a      	movs	r3, #26
 8003416:	2220      	movs	r2, #32
 8003418:	189b      	adds	r3, r3, r2
 800341a:	19db      	adds	r3, r3, r7
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	226a      	movs	r2, #106	@ 0x6a
 8003424:	2101      	movs	r1, #1
 8003426:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	2268      	movs	r2, #104	@ 0x68
 800342c:	2101      	movs	r1, #1
 800342e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	2200      	movs	r2, #0
 8003434:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	2200      	movs	r2, #0
 800343a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800343c:	231a      	movs	r3, #26
 800343e:	2220      	movs	r2, #32
 8003440:	189b      	adds	r3, r3, r2
 8003442:	19db      	adds	r3, r3, r7
 8003444:	781b      	ldrb	r3, [r3, #0]
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b010      	add	sp, #64	@ 0x40
 800344c:	bdb0      	pop	{r4, r5, r7, pc}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	08004a38 	.word	0x08004a38
 8003454:	00f42400 	.word	0x00f42400

08003458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	2208      	movs	r2, #8
 8003466:	4013      	ands	r3, r2
 8003468:	d00b      	beq.n	8003482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a4a      	ldr	r2, [pc, #296]	@ (800359c <UART_AdvFeatureConfig+0x144>)
 8003472:	4013      	ands	r3, r2
 8003474:	0019      	movs	r1, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003486:	2201      	movs	r2, #1
 8003488:	4013      	ands	r3, r2
 800348a:	d00b      	beq.n	80034a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4a43      	ldr	r2, [pc, #268]	@ (80035a0 <UART_AdvFeatureConfig+0x148>)
 8003494:	4013      	ands	r3, r2
 8003496:	0019      	movs	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	2202      	movs	r2, #2
 80034aa:	4013      	ands	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a3b      	ldr	r2, [pc, #236]	@ (80035a4 <UART_AdvFeatureConfig+0x14c>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	2204      	movs	r2, #4
 80034cc:	4013      	ands	r3, r2
 80034ce:	d00b      	beq.n	80034e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4a34      	ldr	r2, [pc, #208]	@ (80035a8 <UART_AdvFeatureConfig+0x150>)
 80034d8:	4013      	ands	r3, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	2210      	movs	r2, #16
 80034ee:	4013      	ands	r3, r2
 80034f0:	d00b      	beq.n	800350a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	@ (80035ac <UART_AdvFeatureConfig+0x154>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350e:	2220      	movs	r2, #32
 8003510:	4013      	ands	r3, r2
 8003512:	d00b      	beq.n	800352c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a25      	ldr	r2, [pc, #148]	@ (80035b0 <UART_AdvFeatureConfig+0x158>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	2240      	movs	r2, #64	@ 0x40
 8003532:	4013      	ands	r3, r2
 8003534:	d01d      	beq.n	8003572 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a1d      	ldr	r2, [pc, #116]	@ (80035b4 <UART_AdvFeatureConfig+0x15c>)
 800353e:	4013      	ands	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	035b      	lsls	r3, r3, #13
 8003556:	429a      	cmp	r2, r3
 8003558:	d10b      	bne.n	8003572 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a15      	ldr	r2, [pc, #84]	@ (80035b8 <UART_AdvFeatureConfig+0x160>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003576:	2280      	movs	r2, #128	@ 0x80
 8003578:	4013      	ands	r3, r2
 800357a:	d00b      	beq.n	8003594 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4a0e      	ldr	r2, [pc, #56]	@ (80035bc <UART_AdvFeatureConfig+0x164>)
 8003584:	4013      	ands	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	605a      	str	r2, [r3, #4]
  }
}
 8003594:	46c0      	nop			@ (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}
 800359c:	ffff7fff 	.word	0xffff7fff
 80035a0:	fffdffff 	.word	0xfffdffff
 80035a4:	fffeffff 	.word	0xfffeffff
 80035a8:	fffbffff 	.word	0xfffbffff
 80035ac:	ffffefff 	.word	0xffffefff
 80035b0:	ffffdfff 	.word	0xffffdfff
 80035b4:	ffefffff 	.word	0xffefffff
 80035b8:	ff9fffff 	.word	0xff9fffff
 80035bc:	fff7ffff 	.word	0xfff7ffff

080035c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b092      	sub	sp, #72	@ 0x48
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2290      	movs	r2, #144	@ 0x90
 80035cc:	2100      	movs	r1, #0
 80035ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035d0:	f7fd fc94 	bl	8000efc <HAL_GetTick>
 80035d4:	0003      	movs	r3, r0
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2208      	movs	r2, #8
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d12d      	bne.n	8003642 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	2280      	movs	r2, #128	@ 0x80
 80035ea:	0391      	lsls	r1, r2, #14
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4a47      	ldr	r2, [pc, #284]	@ (800370c <UART_CheckIdleState+0x14c>)
 80035f0:	9200      	str	r2, [sp, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f000 f88e 	bl	8003714 <UART_WaitOnFlagUntilTimeout>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d022      	beq.n	8003642 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003606:	2301      	movs	r3, #1
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	f383 8810 	msr	PRIMASK, r3
}
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2180      	movs	r1, #128	@ 0x80
 800361e:	438a      	bics	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003628:	f383 8810 	msr	PRIMASK, r3
}
 800362c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2288      	movs	r2, #136	@ 0x88
 8003632:	2120      	movs	r1, #32
 8003634:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2284      	movs	r2, #132	@ 0x84
 800363a:	2100      	movs	r1, #0
 800363c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e060      	b.n	8003704 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2204      	movs	r2, #4
 800364a:	4013      	ands	r3, r2
 800364c:	2b04      	cmp	r3, #4
 800364e:	d146      	bne.n	80036de <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	03d1      	lsls	r1, r2, #15
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4a2c      	ldr	r2, [pc, #176]	@ (800370c <UART_CheckIdleState+0x14c>)
 800365a:	9200      	str	r2, [sp, #0]
 800365c:	2200      	movs	r2, #0
 800365e:	f000 f859 	bl	8003714 <UART_WaitOnFlagUntilTimeout>
 8003662:	1e03      	subs	r3, r0, #0
 8003664:	d03b      	beq.n	80036de <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003666:	f3ef 8310 	mrs	r3, PRIMASK
 800366a:	60fb      	str	r3, [r7, #12]
  return(result);
 800366c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800366e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003670:	2301      	movs	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f383 8810 	msr	PRIMASK, r3
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4922      	ldr	r1, [pc, #136]	@ (8003710 <UART_CheckIdleState+0x150>)
 8003688:	400a      	ands	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	61bb      	str	r3, [r7, #24]
  return(result);
 800369e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036a2:	2301      	movs	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	438a      	bics	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
 80036be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f383 8810 	msr	PRIMASK, r3
}
 80036c8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	228c      	movs	r2, #140	@ 0x8c
 80036ce:	2120      	movs	r1, #32
 80036d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2284      	movs	r2, #132	@ 0x84
 80036d6:	2100      	movs	r1, #0
 80036d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e012      	b.n	8003704 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2288      	movs	r2, #136	@ 0x88
 80036e2:	2120      	movs	r1, #32
 80036e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	228c      	movs	r2, #140	@ 0x8c
 80036ea:	2120      	movs	r1, #32
 80036ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2284      	movs	r2, #132	@ 0x84
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b010      	add	sp, #64	@ 0x40
 800370a:	bd80      	pop	{r7, pc}
 800370c:	01ffffff 	.word	0x01ffffff
 8003710:	fffffedf 	.word	0xfffffedf

08003714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003724:	e051      	b.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	3301      	adds	r3, #1
 800372a:	d04e      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fd fbe6 	bl	8000efc <HAL_GetTick>
 8003730:	0002      	movs	r2, r0
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <UART_WaitOnFlagUntilTimeout+0x2e>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e051      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2204      	movs	r2, #4
 800374e:	4013      	ands	r3, r2
 8003750:	d03b      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b80      	cmp	r3, #128	@ 0x80
 8003756:	d038      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b40      	cmp	r3, #64	@ 0x40
 800375c:	d035      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2208      	movs	r2, #8
 8003766:	4013      	ands	r3, r2
 8003768:	2b08      	cmp	r3, #8
 800376a:	d111      	bne.n	8003790 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2208      	movs	r2, #8
 8003772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	0018      	movs	r0, r3
 8003778:	f000 f83c 	bl	80037f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2290      	movs	r2, #144	@ 0x90
 8003780:	2108      	movs	r1, #8
 8003782:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2284      	movs	r2, #132	@ 0x84
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e02c      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	401a      	ands	r2, r3
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d112      	bne.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f81f 	bl	80037f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2290      	movs	r2, #144	@ 0x90
 80037ba:	2120      	movs	r1, #32
 80037bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2284      	movs	r2, #132	@ 0x84
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e00f      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4013      	ands	r3, r2
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	425a      	negs	r2, r3
 80037da:	4153      	adcs	r3, r2
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	001a      	movs	r2, r3
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d09e      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	@ 0x38
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003800:	617b      	str	r3, [r7, #20]
  return(result);
 8003802:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003804:	637b      	str	r3, [r7, #52]	@ 0x34
 8003806:	2301      	movs	r3, #1
 8003808:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			@ (mov r8, r8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4926      	ldr	r1, [pc, #152]	@ (80038b8 <UART_EndRxTransfer+0xc4>)
 800381e:	400a      	ands	r2, r1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003824:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f383 8810 	msr	PRIMASK, r3
}
 800382c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382e:	f3ef 8310 	mrs	r3, PRIMASK
 8003832:	623b      	str	r3, [r7, #32]
  return(result);
 8003834:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003836:	633b      	str	r3, [r7, #48]	@ 0x30
 8003838:	2301      	movs	r3, #1
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	f383 8810 	msr	PRIMASK, r3
}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	491b      	ldr	r1, [pc, #108]	@ (80038bc <UART_EndRxTransfer+0xc8>)
 8003850:	400a      	ands	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d118      	bne.n	800389a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003868:	f3ef 8310 	mrs	r3, PRIMASK
 800386c:	60bb      	str	r3, [r7, #8]
  return(result);
 800386e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003872:	2301      	movs	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f383 8810 	msr	PRIMASK, r3
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2110      	movs	r1, #16
 800388a:	438a      	bics	r2, r1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003890:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	228c      	movs	r2, #140	@ 0x8c
 800389e:	2120      	movs	r1, #32
 80038a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b00e      	add	sp, #56	@ 0x38
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	fffffedf 	.word	0xfffffedf
 80038bc:	effffffe 	.word	0xeffffffe

080038c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2284      	movs	r2, #132	@ 0x84
 80038cc:	5c9b      	ldrb	r3, [r3, r2]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e027      	b.n	8003926 <HAL_UARTEx_DisableFifoMode+0x66>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2284      	movs	r2, #132	@ 0x84
 80038da:	2101      	movs	r1, #1
 80038dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2288      	movs	r2, #136	@ 0x88
 80038e2:	2124      	movs	r1, #36	@ 0x24
 80038e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	438a      	bics	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a0b      	ldr	r2, [pc, #44]	@ (8003930 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003902:	4013      	ands	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2288      	movs	r2, #136	@ 0x88
 8003918:	2120      	movs	r1, #32
 800391a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2284      	movs	r2, #132	@ 0x84
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b004      	add	sp, #16
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	dfffffff 	.word	0xdfffffff

08003934 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2284      	movs	r2, #132	@ 0x84
 8003942:	5c9b      	ldrb	r3, [r3, r2]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003948:	2302      	movs	r3, #2
 800394a:	e02e      	b.n	80039aa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2284      	movs	r2, #132	@ 0x84
 8003950:	2101      	movs	r1, #1
 8003952:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2288      	movs	r2, #136	@ 0x88
 8003958:	2124      	movs	r1, #36	@ 0x24
 800395a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2101      	movs	r1, #1
 8003970:	438a      	bics	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	08d9      	lsrs	r1, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0018      	movs	r0, r3
 800398c:	f000 f854 	bl	8003a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2288      	movs	r2, #136	@ 0x88
 800399c:	2120      	movs	r1, #32
 800399e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2284      	movs	r2, #132	@ 0x84
 80039a4:	2100      	movs	r1, #0
 80039a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2284      	movs	r2, #132	@ 0x84
 80039c2:	5c9b      	ldrb	r3, [r3, r2]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e02f      	b.n	8003a2c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2284      	movs	r2, #132	@ 0x84
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2288      	movs	r2, #136	@ 0x88
 80039d8:	2124      	movs	r1, #36	@ 0x24
 80039da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	438a      	bics	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003a34 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	0019      	movs	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f813 	bl	8003a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2288      	movs	r2, #136	@ 0x88
 8003a1e:	2120      	movs	r1, #32
 8003a20:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2284      	movs	r2, #132	@ 0x84
 8003a26:	2100      	movs	r1, #0
 8003a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b004      	add	sp, #16
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	f1ffffff 	.word	0xf1ffffff

08003a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d108      	bne.n	8003a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	226a      	movs	r2, #106	@ 0x6a
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2268      	movs	r2, #104	@ 0x68
 8003a54:	2101      	movs	r1, #1
 8003a56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a58:	e043      	b.n	8003ae2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a5a:	260f      	movs	r6, #15
 8003a5c:	19bb      	adds	r3, r7, r6
 8003a5e:	2208      	movs	r2, #8
 8003a60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a62:	200e      	movs	r0, #14
 8003a64:	183b      	adds	r3, r7, r0
 8003a66:	2208      	movs	r2, #8
 8003a68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	0e5b      	lsrs	r3, r3, #25
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	240d      	movs	r4, #13
 8003a76:	193b      	adds	r3, r7, r4
 8003a78:	2107      	movs	r1, #7
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	0f5b      	lsrs	r3, r3, #29
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	250c      	movs	r5, #12
 8003a8a:	197b      	adds	r3, r7, r5
 8003a8c:	2107      	movs	r1, #7
 8003a8e:	400a      	ands	r2, r1
 8003a90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a92:	183b      	adds	r3, r7, r0
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	197a      	adds	r2, r7, r5
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	4914      	ldr	r1, [pc, #80]	@ (8003aec <UARTEx_SetNbDataToProcess+0xb4>)
 8003a9c:	5c8a      	ldrb	r2, [r1, r2]
 8003a9e:	435a      	muls	r2, r3
 8003aa0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aa2:	197b      	adds	r3, r7, r5
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	4a12      	ldr	r2, [pc, #72]	@ (8003af0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003aaa:	0019      	movs	r1, r3
 8003aac:	f7fc fbbc 	bl	8000228 <__divsi3>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	b299      	uxth	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	226a      	movs	r2, #106	@ 0x6a
 8003ab8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aba:	19bb      	adds	r3, r7, r6
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	193a      	adds	r2, r7, r4
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	490a      	ldr	r1, [pc, #40]	@ (8003aec <UARTEx_SetNbDataToProcess+0xb4>)
 8003ac4:	5c8a      	ldrb	r2, [r1, r2]
 8003ac6:	435a      	muls	r2, r3
 8003ac8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	4a08      	ldr	r2, [pc, #32]	@ (8003af0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ad0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	f7fc fba8 	bl	8000228 <__divsi3>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	b299      	uxth	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2268      	movs	r2, #104	@ 0x68
 8003ae0:	5299      	strh	r1, [r3, r2]
}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b005      	add	sp, #20
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	08004a50 	.word	0x08004a50
 8003af0:	08004a58 	.word	0x08004a58

08003af4 <std>:
 8003af4:	2300      	movs	r3, #0
 8003af6:	b510      	push	{r4, lr}
 8003af8:	0004      	movs	r4, r0
 8003afa:	6003      	str	r3, [r0, #0]
 8003afc:	6043      	str	r3, [r0, #4]
 8003afe:	6083      	str	r3, [r0, #8]
 8003b00:	8181      	strh	r1, [r0, #12]
 8003b02:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b04:	81c2      	strh	r2, [r0, #14]
 8003b06:	6103      	str	r3, [r0, #16]
 8003b08:	6143      	str	r3, [r0, #20]
 8003b0a:	6183      	str	r3, [r0, #24]
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	2208      	movs	r2, #8
 8003b10:	305c      	adds	r0, #92	@ 0x5c
 8003b12:	f000 f90f 	bl	8003d34 <memset>
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <std+0x50>)
 8003b18:	6224      	str	r4, [r4, #32]
 8003b1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <std+0x54>)
 8003b1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <std+0x58>)
 8003b22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b24:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <std+0x5c>)
 8003b26:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b28:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <std+0x60>)
 8003b2a:	429c      	cmp	r4, r3
 8003b2c:	d005      	beq.n	8003b3a <std+0x46>
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <std+0x64>)
 8003b30:	429c      	cmp	r4, r3
 8003b32:	d002      	beq.n	8003b3a <std+0x46>
 8003b34:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <std+0x68>)
 8003b36:	429c      	cmp	r4, r3
 8003b38:	d103      	bne.n	8003b42 <std+0x4e>
 8003b3a:	0020      	movs	r0, r4
 8003b3c:	3058      	adds	r0, #88	@ 0x58
 8003b3e:	f000 f979 	bl	8003e34 <__retarget_lock_init_recursive>
 8003b42:	bd10      	pop	{r4, pc}
 8003b44:	08003c9d 	.word	0x08003c9d
 8003b48:	08003cc5 	.word	0x08003cc5
 8003b4c:	08003cfd 	.word	0x08003cfd
 8003b50:	08003d29 	.word	0x08003d29
 8003b54:	20000198 	.word	0x20000198
 8003b58:	20000200 	.word	0x20000200
 8003b5c:	20000268 	.word	0x20000268

08003b60 <stdio_exit_handler>:
 8003b60:	b510      	push	{r4, lr}
 8003b62:	4a03      	ldr	r2, [pc, #12]	@ (8003b70 <stdio_exit_handler+0x10>)
 8003b64:	4903      	ldr	r1, [pc, #12]	@ (8003b74 <stdio_exit_handler+0x14>)
 8003b66:	4804      	ldr	r0, [pc, #16]	@ (8003b78 <stdio_exit_handler+0x18>)
 8003b68:	f000 f86c 	bl	8003c44 <_fwalk_sglue>
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000000c 	.word	0x2000000c
 8003b74:	080046c5 	.word	0x080046c5
 8003b78:	2000001c 	.word	0x2000001c

08003b7c <cleanup_stdio>:
 8003b7c:	6841      	ldr	r1, [r0, #4]
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <cleanup_stdio+0x30>)
 8003b80:	b510      	push	{r4, lr}
 8003b82:	0004      	movs	r4, r0
 8003b84:	4299      	cmp	r1, r3
 8003b86:	d001      	beq.n	8003b8c <cleanup_stdio+0x10>
 8003b88:	f000 fd9c 	bl	80046c4 <_fflush_r>
 8003b8c:	68a1      	ldr	r1, [r4, #8]
 8003b8e:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <cleanup_stdio+0x34>)
 8003b90:	4299      	cmp	r1, r3
 8003b92:	d002      	beq.n	8003b9a <cleanup_stdio+0x1e>
 8003b94:	0020      	movs	r0, r4
 8003b96:	f000 fd95 	bl	80046c4 <_fflush_r>
 8003b9a:	68e1      	ldr	r1, [r4, #12]
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <cleanup_stdio+0x38>)
 8003b9e:	4299      	cmp	r1, r3
 8003ba0:	d002      	beq.n	8003ba8 <cleanup_stdio+0x2c>
 8003ba2:	0020      	movs	r0, r4
 8003ba4:	f000 fd8e 	bl	80046c4 <_fflush_r>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	20000198 	.word	0x20000198
 8003bb0:	20000200 	.word	0x20000200
 8003bb4:	20000268 	.word	0x20000268

08003bb8 <global_stdio_init.part.0>:
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <global_stdio_init.part.0+0x28>)
 8003bbc:	4a09      	ldr	r2, [pc, #36]	@ (8003be4 <global_stdio_init.part.0+0x2c>)
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	4809      	ldr	r0, [pc, #36]	@ (8003be8 <global_stdio_init.part.0+0x30>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f7ff ff95 	bl	8003af4 <std>
 8003bca:	2201      	movs	r2, #1
 8003bcc:	2109      	movs	r1, #9
 8003bce:	4807      	ldr	r0, [pc, #28]	@ (8003bec <global_stdio_init.part.0+0x34>)
 8003bd0:	f7ff ff90 	bl	8003af4 <std>
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	2112      	movs	r1, #18
 8003bd8:	4805      	ldr	r0, [pc, #20]	@ (8003bf0 <global_stdio_init.part.0+0x38>)
 8003bda:	f7ff ff8b 	bl	8003af4 <std>
 8003bde:	bd10      	pop	{r4, pc}
 8003be0:	200002d0 	.word	0x200002d0
 8003be4:	08003b61 	.word	0x08003b61
 8003be8:	20000198 	.word	0x20000198
 8003bec:	20000200 	.word	0x20000200
 8003bf0:	20000268 	.word	0x20000268

08003bf4 <__sfp_lock_acquire>:
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	4802      	ldr	r0, [pc, #8]	@ (8003c00 <__sfp_lock_acquire+0xc>)
 8003bf8:	f000 f91d 	bl	8003e36 <__retarget_lock_acquire_recursive>
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	200002d9 	.word	0x200002d9

08003c04 <__sfp_lock_release>:
 8003c04:	b510      	push	{r4, lr}
 8003c06:	4802      	ldr	r0, [pc, #8]	@ (8003c10 <__sfp_lock_release+0xc>)
 8003c08:	f000 f916 	bl	8003e38 <__retarget_lock_release_recursive>
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	200002d9 	.word	0x200002d9

08003c14 <__sinit>:
 8003c14:	b510      	push	{r4, lr}
 8003c16:	0004      	movs	r4, r0
 8003c18:	f7ff ffec 	bl	8003bf4 <__sfp_lock_acquire>
 8003c1c:	6a23      	ldr	r3, [r4, #32]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <__sinit+0x14>
 8003c22:	f7ff ffef 	bl	8003c04 <__sfp_lock_release>
 8003c26:	bd10      	pop	{r4, pc}
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <__sinit+0x28>)
 8003c2a:	6223      	str	r3, [r4, #32]
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <__sinit+0x2c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f6      	bne.n	8003c22 <__sinit+0xe>
 8003c34:	f7ff ffc0 	bl	8003bb8 <global_stdio_init.part.0>
 8003c38:	e7f3      	b.n	8003c22 <__sinit+0xe>
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	08003b7d 	.word	0x08003b7d
 8003c40:	200002d0 	.word	0x200002d0

08003c44 <_fwalk_sglue>:
 8003c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c46:	0014      	movs	r4, r2
 8003c48:	2600      	movs	r6, #0
 8003c4a:	9000      	str	r0, [sp, #0]
 8003c4c:	9101      	str	r1, [sp, #4]
 8003c4e:	68a5      	ldr	r5, [r4, #8]
 8003c50:	6867      	ldr	r7, [r4, #4]
 8003c52:	3f01      	subs	r7, #1
 8003c54:	d504      	bpl.n	8003c60 <_fwalk_sglue+0x1c>
 8003c56:	6824      	ldr	r4, [r4, #0]
 8003c58:	2c00      	cmp	r4, #0
 8003c5a:	d1f8      	bne.n	8003c4e <_fwalk_sglue+0xa>
 8003c5c:	0030      	movs	r0, r6
 8003c5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c60:	89ab      	ldrh	r3, [r5, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d908      	bls.n	8003c78 <_fwalk_sglue+0x34>
 8003c66:	220e      	movs	r2, #14
 8003c68:	5eab      	ldrsh	r3, [r5, r2]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	d004      	beq.n	8003c78 <_fwalk_sglue+0x34>
 8003c6e:	0029      	movs	r1, r5
 8003c70:	9800      	ldr	r0, [sp, #0]
 8003c72:	9b01      	ldr	r3, [sp, #4]
 8003c74:	4798      	blx	r3
 8003c76:	4306      	orrs	r6, r0
 8003c78:	3568      	adds	r5, #104	@ 0x68
 8003c7a:	e7ea      	b.n	8003c52 <_fwalk_sglue+0xe>

08003c7c <iprintf>:
 8003c7c:	b40f      	push	{r0, r1, r2, r3}
 8003c7e:	b507      	push	{r0, r1, r2, lr}
 8003c80:	4905      	ldr	r1, [pc, #20]	@ (8003c98 <iprintf+0x1c>)
 8003c82:	ab04      	add	r3, sp, #16
 8003c84:	6808      	ldr	r0, [r1, #0]
 8003c86:	cb04      	ldmia	r3!, {r2}
 8003c88:	6881      	ldr	r1, [r0, #8]
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	f000 f9fa 	bl	8004084 <_vfiprintf_r>
 8003c90:	b003      	add	sp, #12
 8003c92:	bc08      	pop	{r3}
 8003c94:	b004      	add	sp, #16
 8003c96:	4718      	bx	r3
 8003c98:	20000018 	.word	0x20000018

08003c9c <__sread>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	000c      	movs	r4, r1
 8003ca0:	250e      	movs	r5, #14
 8003ca2:	5f49      	ldrsh	r1, [r1, r5]
 8003ca4:	f000 f874 	bl	8003d90 <_read_r>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	db03      	blt.n	8003cb4 <__sread+0x18>
 8003cac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003cae:	181b      	adds	r3, r3, r0
 8003cb0:	6563      	str	r3, [r4, #84]	@ 0x54
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	4a02      	ldr	r2, [pc, #8]	@ (8003cc0 <__sread+0x24>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	81a3      	strh	r3, [r4, #12]
 8003cbc:	e7f9      	b.n	8003cb2 <__sread+0x16>
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	ffffefff 	.word	0xffffefff

08003cc4 <__swrite>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	001f      	movs	r7, r3
 8003cc8:	898b      	ldrh	r3, [r1, #12]
 8003cca:	0005      	movs	r5, r0
 8003ccc:	000c      	movs	r4, r1
 8003cce:	0016      	movs	r6, r2
 8003cd0:	05db      	lsls	r3, r3, #23
 8003cd2:	d505      	bpl.n	8003ce0 <__swrite+0x1c>
 8003cd4:	230e      	movs	r3, #14
 8003cd6:	5ec9      	ldrsh	r1, [r1, r3]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f000 f844 	bl	8003d68 <_lseek_r>
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	4a05      	ldr	r2, [pc, #20]	@ (8003cf8 <__swrite+0x34>)
 8003ce4:	0028      	movs	r0, r5
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	0032      	movs	r2, r6
 8003cec:	230e      	movs	r3, #14
 8003cee:	5ee1      	ldrsh	r1, [r4, r3]
 8003cf0:	003b      	movs	r3, r7
 8003cf2:	f000 f861 	bl	8003db8 <_write_r>
 8003cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf8:	ffffefff 	.word	0xffffefff

08003cfc <__sseek>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	000c      	movs	r4, r1
 8003d00:	250e      	movs	r5, #14
 8003d02:	5f49      	ldrsh	r1, [r1, r5]
 8003d04:	f000 f830 	bl	8003d68 <_lseek_r>
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	1c42      	adds	r2, r0, #1
 8003d0c:	d103      	bne.n	8003d16 <__sseek+0x1a>
 8003d0e:	4a05      	ldr	r2, [pc, #20]	@ (8003d24 <__sseek+0x28>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	81a3      	strh	r3, [r4, #12]
 8003d14:	bd70      	pop	{r4, r5, r6, pc}
 8003d16:	2280      	movs	r2, #128	@ 0x80
 8003d18:	0152      	lsls	r2, r2, #5
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	81a3      	strh	r3, [r4, #12]
 8003d1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d20:	e7f8      	b.n	8003d14 <__sseek+0x18>
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	ffffefff 	.word	0xffffefff

08003d28 <__sclose>:
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	230e      	movs	r3, #14
 8003d2c:	5ec9      	ldrsh	r1, [r1, r3]
 8003d2e:	f000 f809 	bl	8003d44 <_close_r>
 8003d32:	bd10      	pop	{r4, pc}

08003d34 <memset>:
 8003d34:	0003      	movs	r3, r0
 8003d36:	1882      	adds	r2, r0, r2
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <memset+0xa>
 8003d3c:	4770      	bx	lr
 8003d3e:	7019      	strb	r1, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	e7f9      	b.n	8003d38 <memset+0x4>

08003d44 <_close_r>:
 8003d44:	2300      	movs	r3, #0
 8003d46:	b570      	push	{r4, r5, r6, lr}
 8003d48:	4d06      	ldr	r5, [pc, #24]	@ (8003d64 <_close_r+0x20>)
 8003d4a:	0004      	movs	r4, r0
 8003d4c:	0008      	movs	r0, r1
 8003d4e:	602b      	str	r3, [r5, #0]
 8003d50:	f7fc ffc6 	bl	8000ce0 <_close>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d103      	bne.n	8003d60 <_close_r+0x1c>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d000      	beq.n	8003d60 <_close_r+0x1c>
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	200002d4 	.word	0x200002d4

08003d68 <_lseek_r>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	0004      	movs	r4, r0
 8003d6c:	0008      	movs	r0, r1
 8003d6e:	0011      	movs	r1, r2
 8003d70:	001a      	movs	r2, r3
 8003d72:	2300      	movs	r3, #0
 8003d74:	4d05      	ldr	r5, [pc, #20]	@ (8003d8c <_lseek_r+0x24>)
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	f7fc ffd3 	bl	8000d22 <_lseek>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d103      	bne.n	8003d88 <_lseek_r+0x20>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d000      	beq.n	8003d88 <_lseek_r+0x20>
 8003d86:	6023      	str	r3, [r4, #0]
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	200002d4 	.word	0x200002d4

08003d90 <_read_r>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	0004      	movs	r4, r0
 8003d94:	0008      	movs	r0, r1
 8003d96:	0011      	movs	r1, r2
 8003d98:	001a      	movs	r2, r3
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	4d05      	ldr	r5, [pc, #20]	@ (8003db4 <_read_r+0x24>)
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fc ff81 	bl	8000ca6 <_read>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d103      	bne.n	8003db0 <_read_r+0x20>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d000      	beq.n	8003db0 <_read_r+0x20>
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	200002d4 	.word	0x200002d4

08003db8 <_write_r>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	0004      	movs	r4, r0
 8003dbc:	0008      	movs	r0, r1
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	4d05      	ldr	r5, [pc, #20]	@ (8003ddc <_write_r+0x24>)
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	f7fc fc30 	bl	800062c <_write>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d103      	bne.n	8003dd8 <_write_r+0x20>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d000      	beq.n	8003dd8 <_write_r+0x20>
 8003dd6:	6023      	str	r3, [r4, #0]
 8003dd8:	bd70      	pop	{r4, r5, r6, pc}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	200002d4 	.word	0x200002d4

08003de0 <__errno>:
 8003de0:	4b01      	ldr	r3, [pc, #4]	@ (8003de8 <__errno+0x8>)
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	4770      	bx	lr
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	20000018 	.word	0x20000018

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	2600      	movs	r6, #0
 8003df0:	4c0c      	ldr	r4, [pc, #48]	@ (8003e24 <__libc_init_array+0x38>)
 8003df2:	4d0d      	ldr	r5, [pc, #52]	@ (8003e28 <__libc_init_array+0x3c>)
 8003df4:	1b64      	subs	r4, r4, r5
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	f000 fddb 	bl	80049b8 <_init>
 8003e02:	4c0a      	ldr	r4, [pc, #40]	@ (8003e2c <__libc_init_array+0x40>)
 8003e04:	4d0a      	ldr	r5, [pc, #40]	@ (8003e30 <__libc_init_array+0x44>)
 8003e06:	1b64      	subs	r4, r4, r5
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	00b3      	lsls	r3, r6, #2
 8003e12:	58eb      	ldr	r3, [r5, r3]
 8003e14:	4798      	blx	r3
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	00b3      	lsls	r3, r6, #2
 8003e1c:	58eb      	ldr	r3, [r5, r3]
 8003e1e:	4798      	blx	r3
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	08004a9c 	.word	0x08004a9c
 8003e28:	08004a9c 	.word	0x08004a9c
 8003e2c:	08004aa0 	.word	0x08004aa0
 8003e30:	08004a9c 	.word	0x08004a9c

08003e34 <__retarget_lock_init_recursive>:
 8003e34:	4770      	bx	lr

08003e36 <__retarget_lock_acquire_recursive>:
 8003e36:	4770      	bx	lr

08003e38 <__retarget_lock_release_recursive>:
 8003e38:	4770      	bx	lr
	...

08003e3c <_free_r>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	0005      	movs	r5, r0
 8003e40:	1e0c      	subs	r4, r1, #0
 8003e42:	d010      	beq.n	8003e66 <_free_r+0x2a>
 8003e44:	3c04      	subs	r4, #4
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da00      	bge.n	8003e4e <_free_r+0x12>
 8003e4c:	18e4      	adds	r4, r4, r3
 8003e4e:	0028      	movs	r0, r5
 8003e50:	f000 f8e0 	bl	8004014 <__malloc_lock>
 8003e54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <_free_r+0x90>)
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <_free_r+0x2c>
 8003e5c:	6063      	str	r3, [r4, #4]
 8003e5e:	6014      	str	r4, [r2, #0]
 8003e60:	0028      	movs	r0, r5
 8003e62:	f000 f8df 	bl	8004024 <__malloc_unlock>
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d908      	bls.n	8003e7e <_free_r+0x42>
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	1821      	adds	r1, r4, r0
 8003e70:	428b      	cmp	r3, r1
 8003e72:	d1f3      	bne.n	8003e5c <_free_r+0x20>
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	1809      	adds	r1, r1, r0
 8003e7a:	6021      	str	r1, [r4, #0]
 8003e7c:	e7ee      	b.n	8003e5c <_free_r+0x20>
 8003e7e:	001a      	movs	r2, r3
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <_free_r+0x4e>
 8003e86:	42a3      	cmp	r3, r4
 8003e88:	d9f9      	bls.n	8003e7e <_free_r+0x42>
 8003e8a:	6811      	ldr	r1, [r2, #0]
 8003e8c:	1850      	adds	r0, r2, r1
 8003e8e:	42a0      	cmp	r0, r4
 8003e90:	d10b      	bne.n	8003eaa <_free_r+0x6e>
 8003e92:	6820      	ldr	r0, [r4, #0]
 8003e94:	1809      	adds	r1, r1, r0
 8003e96:	1850      	adds	r0, r2, r1
 8003e98:	6011      	str	r1, [r2, #0]
 8003e9a:	4283      	cmp	r3, r0
 8003e9c:	d1e0      	bne.n	8003e60 <_free_r+0x24>
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	1841      	adds	r1, r0, r1
 8003ea4:	6011      	str	r1, [r2, #0]
 8003ea6:	6053      	str	r3, [r2, #4]
 8003ea8:	e7da      	b.n	8003e60 <_free_r+0x24>
 8003eaa:	42a0      	cmp	r0, r4
 8003eac:	d902      	bls.n	8003eb4 <_free_r+0x78>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	e7d5      	b.n	8003e60 <_free_r+0x24>
 8003eb4:	6820      	ldr	r0, [r4, #0]
 8003eb6:	1821      	adds	r1, r4, r0
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	d103      	bne.n	8003ec4 <_free_r+0x88>
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	1809      	adds	r1, r1, r0
 8003ec2:	6021      	str	r1, [r4, #0]
 8003ec4:	6063      	str	r3, [r4, #4]
 8003ec6:	6054      	str	r4, [r2, #4]
 8003ec8:	e7ca      	b.n	8003e60 <_free_r+0x24>
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	200002e0 	.word	0x200002e0

08003ed0 <sbrk_aligned>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8003f10 <sbrk_aligned+0x40>)
 8003ed4:	000d      	movs	r5, r1
 8003ed6:	6831      	ldr	r1, [r6, #0]
 8003ed8:	0004      	movs	r4, r0
 8003eda:	2900      	cmp	r1, #0
 8003edc:	d102      	bne.n	8003ee4 <sbrk_aligned+0x14>
 8003ede:	f000 fcbd 	bl	800485c <_sbrk_r>
 8003ee2:	6030      	str	r0, [r6, #0]
 8003ee4:	0029      	movs	r1, r5
 8003ee6:	0020      	movs	r0, r4
 8003ee8:	f000 fcb8 	bl	800485c <_sbrk_r>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d103      	bne.n	8003ef8 <sbrk_aligned+0x28>
 8003ef0:	2501      	movs	r5, #1
 8003ef2:	426d      	negs	r5, r5
 8003ef4:	0028      	movs	r0, r5
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	2303      	movs	r3, #3
 8003efa:	1cc5      	adds	r5, r0, #3
 8003efc:	439d      	bics	r5, r3
 8003efe:	42a8      	cmp	r0, r5
 8003f00:	d0f8      	beq.n	8003ef4 <sbrk_aligned+0x24>
 8003f02:	1a29      	subs	r1, r5, r0
 8003f04:	0020      	movs	r0, r4
 8003f06:	f000 fca9 	bl	800485c <_sbrk_r>
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d1f2      	bne.n	8003ef4 <sbrk_aligned+0x24>
 8003f0e:	e7ef      	b.n	8003ef0 <sbrk_aligned+0x20>
 8003f10:	200002dc 	.word	0x200002dc

08003f14 <_malloc_r>:
 8003f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f16:	2203      	movs	r2, #3
 8003f18:	1ccb      	adds	r3, r1, #3
 8003f1a:	4393      	bics	r3, r2
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	0005      	movs	r5, r0
 8003f20:	001f      	movs	r7, r3
 8003f22:	2b0c      	cmp	r3, #12
 8003f24:	d234      	bcs.n	8003f90 <_malloc_r+0x7c>
 8003f26:	270c      	movs	r7, #12
 8003f28:	42b9      	cmp	r1, r7
 8003f2a:	d833      	bhi.n	8003f94 <_malloc_r+0x80>
 8003f2c:	0028      	movs	r0, r5
 8003f2e:	f000 f871 	bl	8004014 <__malloc_lock>
 8003f32:	4e37      	ldr	r6, [pc, #220]	@ (8004010 <_malloc_r+0xfc>)
 8003f34:	6833      	ldr	r3, [r6, #0]
 8003f36:	001c      	movs	r4, r3
 8003f38:	2c00      	cmp	r4, #0
 8003f3a:	d12f      	bne.n	8003f9c <_malloc_r+0x88>
 8003f3c:	0039      	movs	r1, r7
 8003f3e:	0028      	movs	r0, r5
 8003f40:	f7ff ffc6 	bl	8003ed0 <sbrk_aligned>
 8003f44:	0004      	movs	r4, r0
 8003f46:	1c43      	adds	r3, r0, #1
 8003f48:	d15f      	bne.n	800400a <_malloc_r+0xf6>
 8003f4a:	6834      	ldr	r4, [r6, #0]
 8003f4c:	9400      	str	r4, [sp, #0]
 8003f4e:	9b00      	ldr	r3, [sp, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d14a      	bne.n	8003fea <_malloc_r+0xd6>
 8003f54:	2c00      	cmp	r4, #0
 8003f56:	d052      	beq.n	8003ffe <_malloc_r+0xea>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	0028      	movs	r0, r5
 8003f5c:	18e3      	adds	r3, r4, r3
 8003f5e:	9900      	ldr	r1, [sp, #0]
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	f000 fc7b 	bl	800485c <_sbrk_r>
 8003f66:	9b01      	ldr	r3, [sp, #4]
 8003f68:	4283      	cmp	r3, r0
 8003f6a:	d148      	bne.n	8003ffe <_malloc_r+0xea>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	0028      	movs	r0, r5
 8003f70:	1aff      	subs	r7, r7, r3
 8003f72:	0039      	movs	r1, r7
 8003f74:	f7ff ffac 	bl	8003ed0 <sbrk_aligned>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d040      	beq.n	8003ffe <_malloc_r+0xea>
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	6833      	ldr	r3, [r6, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	d133      	bne.n	8003ff2 <_malloc_r+0xde>
 8003f8a:	9b00      	ldr	r3, [sp, #0]
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	e019      	b.n	8003fc4 <_malloc_r+0xb0>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dac9      	bge.n	8003f28 <_malloc_r+0x14>
 8003f94:	230c      	movs	r3, #12
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	2000      	movs	r0, #0
 8003f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f9c:	6821      	ldr	r1, [r4, #0]
 8003f9e:	1bc9      	subs	r1, r1, r7
 8003fa0:	d420      	bmi.n	8003fe4 <_malloc_r+0xd0>
 8003fa2:	290b      	cmp	r1, #11
 8003fa4:	d90a      	bls.n	8003fbc <_malloc_r+0xa8>
 8003fa6:	19e2      	adds	r2, r4, r7
 8003fa8:	6027      	str	r7, [r4, #0]
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	d104      	bne.n	8003fb8 <_malloc_r+0xa4>
 8003fae:	6032      	str	r2, [r6, #0]
 8003fb0:	6863      	ldr	r3, [r4, #4]
 8003fb2:	6011      	str	r1, [r2, #0]
 8003fb4:	6053      	str	r3, [r2, #4]
 8003fb6:	e005      	b.n	8003fc4 <_malloc_r+0xb0>
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e7f9      	b.n	8003fb0 <_malloc_r+0x9c>
 8003fbc:	6862      	ldr	r2, [r4, #4]
 8003fbe:	42a3      	cmp	r3, r4
 8003fc0:	d10e      	bne.n	8003fe0 <_malloc_r+0xcc>
 8003fc2:	6032      	str	r2, [r6, #0]
 8003fc4:	0028      	movs	r0, r5
 8003fc6:	f000 f82d 	bl	8004024 <__malloc_unlock>
 8003fca:	0020      	movs	r0, r4
 8003fcc:	2207      	movs	r2, #7
 8003fce:	300b      	adds	r0, #11
 8003fd0:	1d23      	adds	r3, r4, #4
 8003fd2:	4390      	bics	r0, r2
 8003fd4:	1ac2      	subs	r2, r0, r3
 8003fd6:	4298      	cmp	r0, r3
 8003fd8:	d0df      	beq.n	8003f9a <_malloc_r+0x86>
 8003fda:	1a1b      	subs	r3, r3, r0
 8003fdc:	50a3      	str	r3, [r4, r2]
 8003fde:	e7dc      	b.n	8003f9a <_malloc_r+0x86>
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	e7ef      	b.n	8003fc4 <_malloc_r+0xb0>
 8003fe4:	0023      	movs	r3, r4
 8003fe6:	6864      	ldr	r4, [r4, #4]
 8003fe8:	e7a6      	b.n	8003f38 <_malloc_r+0x24>
 8003fea:	9c00      	ldr	r4, [sp, #0]
 8003fec:	6863      	ldr	r3, [r4, #4]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	e7ad      	b.n	8003f4e <_malloc_r+0x3a>
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	42a3      	cmp	r3, r4
 8003ff8:	d1fb      	bne.n	8003ff2 <_malloc_r+0xde>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e7da      	b.n	8003fb4 <_malloc_r+0xa0>
 8003ffe:	230c      	movs	r3, #12
 8004000:	0028      	movs	r0, r5
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	f000 f80e 	bl	8004024 <__malloc_unlock>
 8004008:	e7c6      	b.n	8003f98 <_malloc_r+0x84>
 800400a:	6007      	str	r7, [r0, #0]
 800400c:	e7da      	b.n	8003fc4 <_malloc_r+0xb0>
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	200002e0 	.word	0x200002e0

08004014 <__malloc_lock>:
 8004014:	b510      	push	{r4, lr}
 8004016:	4802      	ldr	r0, [pc, #8]	@ (8004020 <__malloc_lock+0xc>)
 8004018:	f7ff ff0d 	bl	8003e36 <__retarget_lock_acquire_recursive>
 800401c:	bd10      	pop	{r4, pc}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	200002d8 	.word	0x200002d8

08004024 <__malloc_unlock>:
 8004024:	b510      	push	{r4, lr}
 8004026:	4802      	ldr	r0, [pc, #8]	@ (8004030 <__malloc_unlock+0xc>)
 8004028:	f7ff ff06 	bl	8003e38 <__retarget_lock_release_recursive>
 800402c:	bd10      	pop	{r4, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	200002d8 	.word	0x200002d8

08004034 <__sfputc_r>:
 8004034:	6893      	ldr	r3, [r2, #8]
 8004036:	b510      	push	{r4, lr}
 8004038:	3b01      	subs	r3, #1
 800403a:	6093      	str	r3, [r2, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	da04      	bge.n	800404a <__sfputc_r+0x16>
 8004040:	6994      	ldr	r4, [r2, #24]
 8004042:	42a3      	cmp	r3, r4
 8004044:	db07      	blt.n	8004056 <__sfputc_r+0x22>
 8004046:	290a      	cmp	r1, #10
 8004048:	d005      	beq.n	8004056 <__sfputc_r+0x22>
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	1c58      	adds	r0, r3, #1
 800404e:	6010      	str	r0, [r2, #0]
 8004050:	7019      	strb	r1, [r3, #0]
 8004052:	0008      	movs	r0, r1
 8004054:	bd10      	pop	{r4, pc}
 8004056:	f000 fb60 	bl	800471a <__swbuf_r>
 800405a:	0001      	movs	r1, r0
 800405c:	e7f9      	b.n	8004052 <__sfputc_r+0x1e>

0800405e <__sfputs_r>:
 800405e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004060:	0006      	movs	r6, r0
 8004062:	000f      	movs	r7, r1
 8004064:	0014      	movs	r4, r2
 8004066:	18d5      	adds	r5, r2, r3
 8004068:	42ac      	cmp	r4, r5
 800406a:	d101      	bne.n	8004070 <__sfputs_r+0x12>
 800406c:	2000      	movs	r0, #0
 800406e:	e007      	b.n	8004080 <__sfputs_r+0x22>
 8004070:	7821      	ldrb	r1, [r4, #0]
 8004072:	003a      	movs	r2, r7
 8004074:	0030      	movs	r0, r6
 8004076:	f7ff ffdd 	bl	8004034 <__sfputc_r>
 800407a:	3401      	adds	r4, #1
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d1f3      	bne.n	8004068 <__sfputs_r+0xa>
 8004080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004084 <_vfiprintf_r>:
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	b0a1      	sub	sp, #132	@ 0x84
 8004088:	000f      	movs	r7, r1
 800408a:	0015      	movs	r5, r2
 800408c:	001e      	movs	r6, r3
 800408e:	9003      	str	r0, [sp, #12]
 8004090:	2800      	cmp	r0, #0
 8004092:	d004      	beq.n	800409e <_vfiprintf_r+0x1a>
 8004094:	6a03      	ldr	r3, [r0, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <_vfiprintf_r+0x1a>
 800409a:	f7ff fdbb 	bl	8003c14 <__sinit>
 800409e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040a0:	07db      	lsls	r3, r3, #31
 80040a2:	d405      	bmi.n	80040b0 <_vfiprintf_r+0x2c>
 80040a4:	89bb      	ldrh	r3, [r7, #12]
 80040a6:	059b      	lsls	r3, r3, #22
 80040a8:	d402      	bmi.n	80040b0 <_vfiprintf_r+0x2c>
 80040aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80040ac:	f7ff fec3 	bl	8003e36 <__retarget_lock_acquire_recursive>
 80040b0:	89bb      	ldrh	r3, [r7, #12]
 80040b2:	071b      	lsls	r3, r3, #28
 80040b4:	d502      	bpl.n	80040bc <_vfiprintf_r+0x38>
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d113      	bne.n	80040e4 <_vfiprintf_r+0x60>
 80040bc:	0039      	movs	r1, r7
 80040be:	9803      	ldr	r0, [sp, #12]
 80040c0:	f000 fb6e 	bl	80047a0 <__swsetup_r>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d00d      	beq.n	80040e4 <_vfiprintf_r+0x60>
 80040c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040ca:	07db      	lsls	r3, r3, #31
 80040cc:	d503      	bpl.n	80040d6 <_vfiprintf_r+0x52>
 80040ce:	2001      	movs	r0, #1
 80040d0:	4240      	negs	r0, r0
 80040d2:	b021      	add	sp, #132	@ 0x84
 80040d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d6:	89bb      	ldrh	r3, [r7, #12]
 80040d8:	059b      	lsls	r3, r3, #22
 80040da:	d4f8      	bmi.n	80040ce <_vfiprintf_r+0x4a>
 80040dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80040de:	f7ff feab 	bl	8003e38 <__retarget_lock_release_recursive>
 80040e2:	e7f4      	b.n	80040ce <_vfiprintf_r+0x4a>
 80040e4:	2300      	movs	r3, #0
 80040e6:	ac08      	add	r4, sp, #32
 80040e8:	6163      	str	r3, [r4, #20]
 80040ea:	3320      	adds	r3, #32
 80040ec:	7663      	strb	r3, [r4, #25]
 80040ee:	3310      	adds	r3, #16
 80040f0:	76a3      	strb	r3, [r4, #26]
 80040f2:	9607      	str	r6, [sp, #28]
 80040f4:	002e      	movs	r6, r5
 80040f6:	7833      	ldrb	r3, [r6, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <_vfiprintf_r+0x7c>
 80040fc:	2b25      	cmp	r3, #37	@ 0x25
 80040fe:	d148      	bne.n	8004192 <_vfiprintf_r+0x10e>
 8004100:	1b73      	subs	r3, r6, r5
 8004102:	9305      	str	r3, [sp, #20]
 8004104:	42ae      	cmp	r6, r5
 8004106:	d00b      	beq.n	8004120 <_vfiprintf_r+0x9c>
 8004108:	002a      	movs	r2, r5
 800410a:	0039      	movs	r1, r7
 800410c:	9803      	ldr	r0, [sp, #12]
 800410e:	f7ff ffa6 	bl	800405e <__sfputs_r>
 8004112:	3001      	adds	r0, #1
 8004114:	d100      	bne.n	8004118 <_vfiprintf_r+0x94>
 8004116:	e0ae      	b.n	8004276 <_vfiprintf_r+0x1f2>
 8004118:	6963      	ldr	r3, [r4, #20]
 800411a:	9a05      	ldr	r2, [sp, #20]
 800411c:	189b      	adds	r3, r3, r2
 800411e:	6163      	str	r3, [r4, #20]
 8004120:	7833      	ldrb	r3, [r6, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d100      	bne.n	8004128 <_vfiprintf_r+0xa4>
 8004126:	e0a6      	b.n	8004276 <_vfiprintf_r+0x1f2>
 8004128:	2201      	movs	r2, #1
 800412a:	2300      	movs	r3, #0
 800412c:	4252      	negs	r2, r2
 800412e:	6062      	str	r2, [r4, #4]
 8004130:	a904      	add	r1, sp, #16
 8004132:	3254      	adds	r2, #84	@ 0x54
 8004134:	1852      	adds	r2, r2, r1
 8004136:	1c75      	adds	r5, r6, #1
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	60e3      	str	r3, [r4, #12]
 800413c:	60a3      	str	r3, [r4, #8]
 800413e:	7013      	strb	r3, [r2, #0]
 8004140:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004142:	4b59      	ldr	r3, [pc, #356]	@ (80042a8 <_vfiprintf_r+0x224>)
 8004144:	2205      	movs	r2, #5
 8004146:	0018      	movs	r0, r3
 8004148:	7829      	ldrb	r1, [r5, #0]
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	f000 fb98 	bl	8004880 <memchr>
 8004150:	1c6e      	adds	r6, r5, #1
 8004152:	2800      	cmp	r0, #0
 8004154:	d11f      	bne.n	8004196 <_vfiprintf_r+0x112>
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	06d3      	lsls	r3, r2, #27
 800415a:	d504      	bpl.n	8004166 <_vfiprintf_r+0xe2>
 800415c:	2353      	movs	r3, #83	@ 0x53
 800415e:	a904      	add	r1, sp, #16
 8004160:	185b      	adds	r3, r3, r1
 8004162:	2120      	movs	r1, #32
 8004164:	7019      	strb	r1, [r3, #0]
 8004166:	0713      	lsls	r3, r2, #28
 8004168:	d504      	bpl.n	8004174 <_vfiprintf_r+0xf0>
 800416a:	2353      	movs	r3, #83	@ 0x53
 800416c:	a904      	add	r1, sp, #16
 800416e:	185b      	adds	r3, r3, r1
 8004170:	212b      	movs	r1, #43	@ 0x2b
 8004172:	7019      	strb	r1, [r3, #0]
 8004174:	782b      	ldrb	r3, [r5, #0]
 8004176:	2b2a      	cmp	r3, #42	@ 0x2a
 8004178:	d016      	beq.n	80041a8 <_vfiprintf_r+0x124>
 800417a:	002e      	movs	r6, r5
 800417c:	2100      	movs	r1, #0
 800417e:	200a      	movs	r0, #10
 8004180:	68e3      	ldr	r3, [r4, #12]
 8004182:	7832      	ldrb	r2, [r6, #0]
 8004184:	1c75      	adds	r5, r6, #1
 8004186:	3a30      	subs	r2, #48	@ 0x30
 8004188:	2a09      	cmp	r2, #9
 800418a:	d950      	bls.n	800422e <_vfiprintf_r+0x1aa>
 800418c:	2900      	cmp	r1, #0
 800418e:	d111      	bne.n	80041b4 <_vfiprintf_r+0x130>
 8004190:	e017      	b.n	80041c2 <_vfiprintf_r+0x13e>
 8004192:	3601      	adds	r6, #1
 8004194:	e7af      	b.n	80040f6 <_vfiprintf_r+0x72>
 8004196:	9b05      	ldr	r3, [sp, #20]
 8004198:	6822      	ldr	r2, [r4, #0]
 800419a:	1ac0      	subs	r0, r0, r3
 800419c:	2301      	movs	r3, #1
 800419e:	4083      	lsls	r3, r0
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0035      	movs	r5, r6
 80041a4:	6023      	str	r3, [r4, #0]
 80041a6:	e7cc      	b.n	8004142 <_vfiprintf_r+0xbe>
 80041a8:	9b07      	ldr	r3, [sp, #28]
 80041aa:	1d19      	adds	r1, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	9107      	str	r1, [sp, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db01      	blt.n	80041b8 <_vfiprintf_r+0x134>
 80041b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041b6:	e004      	b.n	80041c2 <_vfiprintf_r+0x13e>
 80041b8:	425b      	negs	r3, r3
 80041ba:	60e3      	str	r3, [r4, #12]
 80041bc:	2302      	movs	r3, #2
 80041be:	4313      	orrs	r3, r2
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	7833      	ldrb	r3, [r6, #0]
 80041c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80041c6:	d10c      	bne.n	80041e2 <_vfiprintf_r+0x15e>
 80041c8:	7873      	ldrb	r3, [r6, #1]
 80041ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80041cc:	d134      	bne.n	8004238 <_vfiprintf_r+0x1b4>
 80041ce:	9b07      	ldr	r3, [sp, #28]
 80041d0:	3602      	adds	r6, #2
 80041d2:	1d1a      	adds	r2, r3, #4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	9207      	str	r2, [sp, #28]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da01      	bge.n	80041e0 <_vfiprintf_r+0x15c>
 80041dc:	2301      	movs	r3, #1
 80041de:	425b      	negs	r3, r3
 80041e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80041e2:	4d32      	ldr	r5, [pc, #200]	@ (80042ac <_vfiprintf_r+0x228>)
 80041e4:	2203      	movs	r2, #3
 80041e6:	0028      	movs	r0, r5
 80041e8:	7831      	ldrb	r1, [r6, #0]
 80041ea:	f000 fb49 	bl	8004880 <memchr>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d006      	beq.n	8004200 <_vfiprintf_r+0x17c>
 80041f2:	2340      	movs	r3, #64	@ 0x40
 80041f4:	1b40      	subs	r0, r0, r5
 80041f6:	4083      	lsls	r3, r0
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	3601      	adds	r6, #1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	7831      	ldrb	r1, [r6, #0]
 8004202:	2206      	movs	r2, #6
 8004204:	482a      	ldr	r0, [pc, #168]	@ (80042b0 <_vfiprintf_r+0x22c>)
 8004206:	1c75      	adds	r5, r6, #1
 8004208:	7621      	strb	r1, [r4, #24]
 800420a:	f000 fb39 	bl	8004880 <memchr>
 800420e:	2800      	cmp	r0, #0
 8004210:	d040      	beq.n	8004294 <_vfiprintf_r+0x210>
 8004212:	4b28      	ldr	r3, [pc, #160]	@ (80042b4 <_vfiprintf_r+0x230>)
 8004214:	2b00      	cmp	r3, #0
 8004216:	d122      	bne.n	800425e <_vfiprintf_r+0x1da>
 8004218:	2207      	movs	r2, #7
 800421a:	9b07      	ldr	r3, [sp, #28]
 800421c:	3307      	adds	r3, #7
 800421e:	4393      	bics	r3, r2
 8004220:	3308      	adds	r3, #8
 8004222:	9307      	str	r3, [sp, #28]
 8004224:	6963      	ldr	r3, [r4, #20]
 8004226:	9a04      	ldr	r2, [sp, #16]
 8004228:	189b      	adds	r3, r3, r2
 800422a:	6163      	str	r3, [r4, #20]
 800422c:	e762      	b.n	80040f4 <_vfiprintf_r+0x70>
 800422e:	4343      	muls	r3, r0
 8004230:	002e      	movs	r6, r5
 8004232:	2101      	movs	r1, #1
 8004234:	189b      	adds	r3, r3, r2
 8004236:	e7a4      	b.n	8004182 <_vfiprintf_r+0xfe>
 8004238:	2300      	movs	r3, #0
 800423a:	200a      	movs	r0, #10
 800423c:	0019      	movs	r1, r3
 800423e:	3601      	adds	r6, #1
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	7832      	ldrb	r2, [r6, #0]
 8004244:	1c75      	adds	r5, r6, #1
 8004246:	3a30      	subs	r2, #48	@ 0x30
 8004248:	2a09      	cmp	r2, #9
 800424a:	d903      	bls.n	8004254 <_vfiprintf_r+0x1d0>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0c8      	beq.n	80041e2 <_vfiprintf_r+0x15e>
 8004250:	9109      	str	r1, [sp, #36]	@ 0x24
 8004252:	e7c6      	b.n	80041e2 <_vfiprintf_r+0x15e>
 8004254:	4341      	muls	r1, r0
 8004256:	002e      	movs	r6, r5
 8004258:	2301      	movs	r3, #1
 800425a:	1889      	adds	r1, r1, r2
 800425c:	e7f1      	b.n	8004242 <_vfiprintf_r+0x1be>
 800425e:	aa07      	add	r2, sp, #28
 8004260:	9200      	str	r2, [sp, #0]
 8004262:	0021      	movs	r1, r4
 8004264:	003a      	movs	r2, r7
 8004266:	4b14      	ldr	r3, [pc, #80]	@ (80042b8 <_vfiprintf_r+0x234>)
 8004268:	9803      	ldr	r0, [sp, #12]
 800426a:	e000      	b.n	800426e <_vfiprintf_r+0x1ea>
 800426c:	bf00      	nop
 800426e:	9004      	str	r0, [sp, #16]
 8004270:	9b04      	ldr	r3, [sp, #16]
 8004272:	3301      	adds	r3, #1
 8004274:	d1d6      	bne.n	8004224 <_vfiprintf_r+0x1a0>
 8004276:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004278:	07db      	lsls	r3, r3, #31
 800427a:	d405      	bmi.n	8004288 <_vfiprintf_r+0x204>
 800427c:	89bb      	ldrh	r3, [r7, #12]
 800427e:	059b      	lsls	r3, r3, #22
 8004280:	d402      	bmi.n	8004288 <_vfiprintf_r+0x204>
 8004282:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004284:	f7ff fdd8 	bl	8003e38 <__retarget_lock_release_recursive>
 8004288:	89bb      	ldrh	r3, [r7, #12]
 800428a:	065b      	lsls	r3, r3, #25
 800428c:	d500      	bpl.n	8004290 <_vfiprintf_r+0x20c>
 800428e:	e71e      	b.n	80040ce <_vfiprintf_r+0x4a>
 8004290:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004292:	e71e      	b.n	80040d2 <_vfiprintf_r+0x4e>
 8004294:	aa07      	add	r2, sp, #28
 8004296:	9200      	str	r2, [sp, #0]
 8004298:	0021      	movs	r1, r4
 800429a:	003a      	movs	r2, r7
 800429c:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <_vfiprintf_r+0x234>)
 800429e:	9803      	ldr	r0, [sp, #12]
 80042a0:	f000 f87c 	bl	800439c <_printf_i>
 80042a4:	e7e3      	b.n	800426e <_vfiprintf_r+0x1ea>
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	08004a60 	.word	0x08004a60
 80042ac:	08004a66 	.word	0x08004a66
 80042b0:	08004a6a 	.word	0x08004a6a
 80042b4:	00000000 	.word	0x00000000
 80042b8:	0800405f 	.word	0x0800405f

080042bc <_printf_common>:
 80042bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042be:	0016      	movs	r6, r2
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	688a      	ldr	r2, [r1, #8]
 80042c4:	690b      	ldr	r3, [r1, #16]
 80042c6:	000c      	movs	r4, r1
 80042c8:	9000      	str	r0, [sp, #0]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	da00      	bge.n	80042d0 <_printf_common+0x14>
 80042ce:	0013      	movs	r3, r2
 80042d0:	0022      	movs	r2, r4
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	3243      	adds	r2, #67	@ 0x43
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	2a00      	cmp	r2, #0
 80042da:	d001      	beq.n	80042e0 <_printf_common+0x24>
 80042dc:	3301      	adds	r3, #1
 80042de:	6033      	str	r3, [r6, #0]
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	069b      	lsls	r3, r3, #26
 80042e4:	d502      	bpl.n	80042ec <_printf_common+0x30>
 80042e6:	6833      	ldr	r3, [r6, #0]
 80042e8:	3302      	adds	r3, #2
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	2306      	movs	r3, #6
 80042f0:	0015      	movs	r5, r2
 80042f2:	401d      	ands	r5, r3
 80042f4:	421a      	tst	r2, r3
 80042f6:	d027      	beq.n	8004348 <_printf_common+0x8c>
 80042f8:	0023      	movs	r3, r4
 80042fa:	3343      	adds	r3, #67	@ 0x43
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	1e5a      	subs	r2, r3, #1
 8004300:	4193      	sbcs	r3, r2
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	0692      	lsls	r2, r2, #26
 8004306:	d430      	bmi.n	800436a <_printf_common+0xae>
 8004308:	0022      	movs	r2, r4
 800430a:	9901      	ldr	r1, [sp, #4]
 800430c:	9800      	ldr	r0, [sp, #0]
 800430e:	9d08      	ldr	r5, [sp, #32]
 8004310:	3243      	adds	r2, #67	@ 0x43
 8004312:	47a8      	blx	r5
 8004314:	3001      	adds	r0, #1
 8004316:	d025      	beq.n	8004364 <_printf_common+0xa8>
 8004318:	2206      	movs	r2, #6
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	2500      	movs	r5, #0
 800431e:	4013      	ands	r3, r2
 8004320:	2b04      	cmp	r3, #4
 8004322:	d105      	bne.n	8004330 <_printf_common+0x74>
 8004324:	6833      	ldr	r3, [r6, #0]
 8004326:	68e5      	ldr	r5, [r4, #12]
 8004328:	1aed      	subs	r5, r5, r3
 800432a:	43eb      	mvns	r3, r5
 800432c:	17db      	asrs	r3, r3, #31
 800432e:	401d      	ands	r5, r3
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	6922      	ldr	r2, [r4, #16]
 8004334:	4293      	cmp	r3, r2
 8004336:	dd01      	ble.n	800433c <_printf_common+0x80>
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	18ed      	adds	r5, r5, r3
 800433c:	2600      	movs	r6, #0
 800433e:	42b5      	cmp	r5, r6
 8004340:	d120      	bne.n	8004384 <_printf_common+0xc8>
 8004342:	2000      	movs	r0, #0
 8004344:	e010      	b.n	8004368 <_printf_common+0xac>
 8004346:	3501      	adds	r5, #1
 8004348:	68e3      	ldr	r3, [r4, #12]
 800434a:	6832      	ldr	r2, [r6, #0]
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	42ab      	cmp	r3, r5
 8004350:	ddd2      	ble.n	80042f8 <_printf_common+0x3c>
 8004352:	0022      	movs	r2, r4
 8004354:	2301      	movs	r3, #1
 8004356:	9901      	ldr	r1, [sp, #4]
 8004358:	9800      	ldr	r0, [sp, #0]
 800435a:	9f08      	ldr	r7, [sp, #32]
 800435c:	3219      	adds	r2, #25
 800435e:	47b8      	blx	r7
 8004360:	3001      	adds	r0, #1
 8004362:	d1f0      	bne.n	8004346 <_printf_common+0x8a>
 8004364:	2001      	movs	r0, #1
 8004366:	4240      	negs	r0, r0
 8004368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800436a:	2030      	movs	r0, #48	@ 0x30
 800436c:	18e1      	adds	r1, r4, r3
 800436e:	3143      	adds	r1, #67	@ 0x43
 8004370:	7008      	strb	r0, [r1, #0]
 8004372:	0021      	movs	r1, r4
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	3145      	adds	r1, #69	@ 0x45
 8004378:	7809      	ldrb	r1, [r1, #0]
 800437a:	18a2      	adds	r2, r4, r2
 800437c:	3243      	adds	r2, #67	@ 0x43
 800437e:	3302      	adds	r3, #2
 8004380:	7011      	strb	r1, [r2, #0]
 8004382:	e7c1      	b.n	8004308 <_printf_common+0x4c>
 8004384:	0022      	movs	r2, r4
 8004386:	2301      	movs	r3, #1
 8004388:	9901      	ldr	r1, [sp, #4]
 800438a:	9800      	ldr	r0, [sp, #0]
 800438c:	9f08      	ldr	r7, [sp, #32]
 800438e:	321a      	adds	r2, #26
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	d0e6      	beq.n	8004364 <_printf_common+0xa8>
 8004396:	3601      	adds	r6, #1
 8004398:	e7d1      	b.n	800433e <_printf_common+0x82>
	...

0800439c <_printf_i>:
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b08b      	sub	sp, #44	@ 0x2c
 80043a0:	9206      	str	r2, [sp, #24]
 80043a2:	000a      	movs	r2, r1
 80043a4:	3243      	adds	r2, #67	@ 0x43
 80043a6:	9307      	str	r3, [sp, #28]
 80043a8:	9005      	str	r0, [sp, #20]
 80043aa:	9203      	str	r2, [sp, #12]
 80043ac:	7e0a      	ldrb	r2, [r1, #24]
 80043ae:	000c      	movs	r4, r1
 80043b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80043b2:	2a78      	cmp	r2, #120	@ 0x78
 80043b4:	d809      	bhi.n	80043ca <_printf_i+0x2e>
 80043b6:	2a62      	cmp	r2, #98	@ 0x62
 80043b8:	d80b      	bhi.n	80043d2 <_printf_i+0x36>
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	d100      	bne.n	80043c0 <_printf_i+0x24>
 80043be:	e0bc      	b.n	800453a <_printf_i+0x19e>
 80043c0:	497b      	ldr	r1, [pc, #492]	@ (80045b0 <_printf_i+0x214>)
 80043c2:	9104      	str	r1, [sp, #16]
 80043c4:	2a58      	cmp	r2, #88	@ 0x58
 80043c6:	d100      	bne.n	80043ca <_printf_i+0x2e>
 80043c8:	e090      	b.n	80044ec <_printf_i+0x150>
 80043ca:	0025      	movs	r5, r4
 80043cc:	3542      	adds	r5, #66	@ 0x42
 80043ce:	702a      	strb	r2, [r5, #0]
 80043d0:	e022      	b.n	8004418 <_printf_i+0x7c>
 80043d2:	0010      	movs	r0, r2
 80043d4:	3863      	subs	r0, #99	@ 0x63
 80043d6:	2815      	cmp	r0, #21
 80043d8:	d8f7      	bhi.n	80043ca <_printf_i+0x2e>
 80043da:	f7fb fe91 	bl	8000100 <__gnu_thumb1_case_shi>
 80043de:	0016      	.short	0x0016
 80043e0:	fff6001f 	.word	0xfff6001f
 80043e4:	fff6fff6 	.word	0xfff6fff6
 80043e8:	001ffff6 	.word	0x001ffff6
 80043ec:	fff6fff6 	.word	0xfff6fff6
 80043f0:	fff6fff6 	.word	0xfff6fff6
 80043f4:	003600a1 	.word	0x003600a1
 80043f8:	fff60080 	.word	0xfff60080
 80043fc:	00b2fff6 	.word	0x00b2fff6
 8004400:	0036fff6 	.word	0x0036fff6
 8004404:	fff6fff6 	.word	0xfff6fff6
 8004408:	0084      	.short	0x0084
 800440a:	0025      	movs	r5, r4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	3542      	adds	r5, #66	@ 0x42
 8004410:	1d11      	adds	r1, r2, #4
 8004412:	6019      	str	r1, [r3, #0]
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	702b      	strb	r3, [r5, #0]
 8004418:	2301      	movs	r3, #1
 800441a:	e0a0      	b.n	800455e <_printf_i+0x1c2>
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	6809      	ldr	r1, [r1, #0]
 8004420:	1d02      	adds	r2, r0, #4
 8004422:	060d      	lsls	r5, r1, #24
 8004424:	d50b      	bpl.n	800443e <_printf_i+0xa2>
 8004426:	6806      	ldr	r6, [r0, #0]
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	2e00      	cmp	r6, #0
 800442c:	da03      	bge.n	8004436 <_printf_i+0x9a>
 800442e:	232d      	movs	r3, #45	@ 0x2d
 8004430:	9a03      	ldr	r2, [sp, #12]
 8004432:	4276      	negs	r6, r6
 8004434:	7013      	strb	r3, [r2, #0]
 8004436:	4b5e      	ldr	r3, [pc, #376]	@ (80045b0 <_printf_i+0x214>)
 8004438:	270a      	movs	r7, #10
 800443a:	9304      	str	r3, [sp, #16]
 800443c:	e018      	b.n	8004470 <_printf_i+0xd4>
 800443e:	6806      	ldr	r6, [r0, #0]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	0649      	lsls	r1, r1, #25
 8004444:	d5f1      	bpl.n	800442a <_printf_i+0x8e>
 8004446:	b236      	sxth	r6, r6
 8004448:	e7ef      	b.n	800442a <_printf_i+0x8e>
 800444a:	6808      	ldr	r0, [r1, #0]
 800444c:	6819      	ldr	r1, [r3, #0]
 800444e:	c940      	ldmia	r1!, {r6}
 8004450:	0605      	lsls	r5, r0, #24
 8004452:	d402      	bmi.n	800445a <_printf_i+0xbe>
 8004454:	0640      	lsls	r0, r0, #25
 8004456:	d500      	bpl.n	800445a <_printf_i+0xbe>
 8004458:	b2b6      	uxth	r6, r6
 800445a:	6019      	str	r1, [r3, #0]
 800445c:	4b54      	ldr	r3, [pc, #336]	@ (80045b0 <_printf_i+0x214>)
 800445e:	270a      	movs	r7, #10
 8004460:	9304      	str	r3, [sp, #16]
 8004462:	2a6f      	cmp	r2, #111	@ 0x6f
 8004464:	d100      	bne.n	8004468 <_printf_i+0xcc>
 8004466:	3f02      	subs	r7, #2
 8004468:	0023      	movs	r3, r4
 800446a:	2200      	movs	r2, #0
 800446c:	3343      	adds	r3, #67	@ 0x43
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	60a3      	str	r3, [r4, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	db03      	blt.n	8004480 <_printf_i+0xe4>
 8004478:	2104      	movs	r1, #4
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	438a      	bics	r2, r1
 800447e:	6022      	str	r2, [r4, #0]
 8004480:	2e00      	cmp	r6, #0
 8004482:	d102      	bne.n	800448a <_printf_i+0xee>
 8004484:	9d03      	ldr	r5, [sp, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <_printf_i+0x108>
 800448a:	9d03      	ldr	r5, [sp, #12]
 800448c:	0030      	movs	r0, r6
 800448e:	0039      	movs	r1, r7
 8004490:	f7fb fec6 	bl	8000220 <__aeabi_uidivmod>
 8004494:	9b04      	ldr	r3, [sp, #16]
 8004496:	3d01      	subs	r5, #1
 8004498:	5c5b      	ldrb	r3, [r3, r1]
 800449a:	702b      	strb	r3, [r5, #0]
 800449c:	0033      	movs	r3, r6
 800449e:	0006      	movs	r6, r0
 80044a0:	429f      	cmp	r7, r3
 80044a2:	d9f3      	bls.n	800448c <_printf_i+0xf0>
 80044a4:	2f08      	cmp	r7, #8
 80044a6:	d109      	bne.n	80044bc <_printf_i+0x120>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	07db      	lsls	r3, r3, #31
 80044ac:	d506      	bpl.n	80044bc <_printf_i+0x120>
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	6923      	ldr	r3, [r4, #16]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dc02      	bgt.n	80044bc <_printf_i+0x120>
 80044b6:	2330      	movs	r3, #48	@ 0x30
 80044b8:	3d01      	subs	r5, #1
 80044ba:	702b      	strb	r3, [r5, #0]
 80044bc:	9b03      	ldr	r3, [sp, #12]
 80044be:	1b5b      	subs	r3, r3, r5
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	9b07      	ldr	r3, [sp, #28]
 80044c4:	0021      	movs	r1, r4
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	9805      	ldr	r0, [sp, #20]
 80044ca:	9b06      	ldr	r3, [sp, #24]
 80044cc:	aa09      	add	r2, sp, #36	@ 0x24
 80044ce:	f7ff fef5 	bl	80042bc <_printf_common>
 80044d2:	3001      	adds	r0, #1
 80044d4:	d148      	bne.n	8004568 <_printf_i+0x1cc>
 80044d6:	2001      	movs	r0, #1
 80044d8:	4240      	negs	r0, r0
 80044da:	b00b      	add	sp, #44	@ 0x2c
 80044dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044de:	2220      	movs	r2, #32
 80044e0:	6809      	ldr	r1, [r1, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	6022      	str	r2, [r4, #0]
 80044e6:	2278      	movs	r2, #120	@ 0x78
 80044e8:	4932      	ldr	r1, [pc, #200]	@ (80045b4 <_printf_i+0x218>)
 80044ea:	9104      	str	r1, [sp, #16]
 80044ec:	0021      	movs	r1, r4
 80044ee:	3145      	adds	r1, #69	@ 0x45
 80044f0:	700a      	strb	r2, [r1, #0]
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	c940      	ldmia	r1!, {r6}
 80044f8:	0610      	lsls	r0, r2, #24
 80044fa:	d402      	bmi.n	8004502 <_printf_i+0x166>
 80044fc:	0650      	lsls	r0, r2, #25
 80044fe:	d500      	bpl.n	8004502 <_printf_i+0x166>
 8004500:	b2b6      	uxth	r6, r6
 8004502:	6019      	str	r1, [r3, #0]
 8004504:	07d3      	lsls	r3, r2, #31
 8004506:	d502      	bpl.n	800450e <_printf_i+0x172>
 8004508:	2320      	movs	r3, #32
 800450a:	4313      	orrs	r3, r2
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	2e00      	cmp	r6, #0
 8004510:	d001      	beq.n	8004516 <_printf_i+0x17a>
 8004512:	2710      	movs	r7, #16
 8004514:	e7a8      	b.n	8004468 <_printf_i+0xcc>
 8004516:	2220      	movs	r2, #32
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	4393      	bics	r3, r2
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	e7f8      	b.n	8004512 <_printf_i+0x176>
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	680d      	ldr	r5, [r1, #0]
 8004524:	1d10      	adds	r0, r2, #4
 8004526:	6949      	ldr	r1, [r1, #20]
 8004528:	6018      	str	r0, [r3, #0]
 800452a:	6813      	ldr	r3, [r2, #0]
 800452c:	062e      	lsls	r6, r5, #24
 800452e:	d501      	bpl.n	8004534 <_printf_i+0x198>
 8004530:	6019      	str	r1, [r3, #0]
 8004532:	e002      	b.n	800453a <_printf_i+0x19e>
 8004534:	066d      	lsls	r5, r5, #25
 8004536:	d5fb      	bpl.n	8004530 <_printf_i+0x194>
 8004538:	8019      	strh	r1, [r3, #0]
 800453a:	2300      	movs	r3, #0
 800453c:	9d03      	ldr	r5, [sp, #12]
 800453e:	6123      	str	r3, [r4, #16]
 8004540:	e7bf      	b.n	80044c2 <_printf_i+0x126>
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	1d11      	adds	r1, r2, #4
 8004546:	6019      	str	r1, [r3, #0]
 8004548:	6815      	ldr	r5, [r2, #0]
 800454a:	2100      	movs	r1, #0
 800454c:	0028      	movs	r0, r5
 800454e:	6862      	ldr	r2, [r4, #4]
 8004550:	f000 f996 	bl	8004880 <memchr>
 8004554:	2800      	cmp	r0, #0
 8004556:	d001      	beq.n	800455c <_printf_i+0x1c0>
 8004558:	1b40      	subs	r0, r0, r5
 800455a:	6060      	str	r0, [r4, #4]
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	2300      	movs	r3, #0
 8004562:	9a03      	ldr	r2, [sp, #12]
 8004564:	7013      	strb	r3, [r2, #0]
 8004566:	e7ac      	b.n	80044c2 <_printf_i+0x126>
 8004568:	002a      	movs	r2, r5
 800456a:	6923      	ldr	r3, [r4, #16]
 800456c:	9906      	ldr	r1, [sp, #24]
 800456e:	9805      	ldr	r0, [sp, #20]
 8004570:	9d07      	ldr	r5, [sp, #28]
 8004572:	47a8      	blx	r5
 8004574:	3001      	adds	r0, #1
 8004576:	d0ae      	beq.n	80044d6 <_printf_i+0x13a>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	079b      	lsls	r3, r3, #30
 800457c:	d415      	bmi.n	80045aa <_printf_i+0x20e>
 800457e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004580:	68e0      	ldr	r0, [r4, #12]
 8004582:	4298      	cmp	r0, r3
 8004584:	daa9      	bge.n	80044da <_printf_i+0x13e>
 8004586:	0018      	movs	r0, r3
 8004588:	e7a7      	b.n	80044da <_printf_i+0x13e>
 800458a:	0022      	movs	r2, r4
 800458c:	2301      	movs	r3, #1
 800458e:	9906      	ldr	r1, [sp, #24]
 8004590:	9805      	ldr	r0, [sp, #20]
 8004592:	9e07      	ldr	r6, [sp, #28]
 8004594:	3219      	adds	r2, #25
 8004596:	47b0      	blx	r6
 8004598:	3001      	adds	r0, #1
 800459a:	d09c      	beq.n	80044d6 <_printf_i+0x13a>
 800459c:	3501      	adds	r5, #1
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dcf0      	bgt.n	800458a <_printf_i+0x1ee>
 80045a8:	e7e9      	b.n	800457e <_printf_i+0x1e2>
 80045aa:	2500      	movs	r5, #0
 80045ac:	e7f7      	b.n	800459e <_printf_i+0x202>
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	08004a71 	.word	0x08004a71
 80045b4:	08004a82 	.word	0x08004a82

080045b8 <__sflush_r>:
 80045b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ba:	220c      	movs	r2, #12
 80045bc:	5e8b      	ldrsh	r3, [r1, r2]
 80045be:	0005      	movs	r5, r0
 80045c0:	000c      	movs	r4, r1
 80045c2:	071a      	lsls	r2, r3, #28
 80045c4:	d456      	bmi.n	8004674 <__sflush_r+0xbc>
 80045c6:	684a      	ldr	r2, [r1, #4]
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	dc02      	bgt.n	80045d2 <__sflush_r+0x1a>
 80045cc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80045ce:	2a00      	cmp	r2, #0
 80045d0:	dd4e      	ble.n	8004670 <__sflush_r+0xb8>
 80045d2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80045d4:	2f00      	cmp	r7, #0
 80045d6:	d04b      	beq.n	8004670 <__sflush_r+0xb8>
 80045d8:	2200      	movs	r2, #0
 80045da:	2080      	movs	r0, #128	@ 0x80
 80045dc:	682e      	ldr	r6, [r5, #0]
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	001a      	movs	r2, r3
 80045e2:	0140      	lsls	r0, r0, #5
 80045e4:	6a21      	ldr	r1, [r4, #32]
 80045e6:	4002      	ands	r2, r0
 80045e8:	4203      	tst	r3, r0
 80045ea:	d033      	beq.n	8004654 <__sflush_r+0x9c>
 80045ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	075b      	lsls	r3, r3, #29
 80045f2:	d506      	bpl.n	8004602 <__sflush_r+0x4a>
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <__sflush_r+0x4a>
 80045fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004600:	1ad2      	subs	r2, r2, r3
 8004602:	2300      	movs	r3, #0
 8004604:	0028      	movs	r0, r5
 8004606:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004608:	6a21      	ldr	r1, [r4, #32]
 800460a:	47b8      	blx	r7
 800460c:	89a2      	ldrh	r2, [r4, #12]
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	d106      	bne.n	8004620 <__sflush_r+0x68>
 8004612:	6829      	ldr	r1, [r5, #0]
 8004614:	291d      	cmp	r1, #29
 8004616:	d846      	bhi.n	80046a6 <__sflush_r+0xee>
 8004618:	4b29      	ldr	r3, [pc, #164]	@ (80046c0 <__sflush_r+0x108>)
 800461a:	410b      	asrs	r3, r1
 800461c:	07db      	lsls	r3, r3, #31
 800461e:	d442      	bmi.n	80046a6 <__sflush_r+0xee>
 8004620:	2300      	movs	r3, #0
 8004622:	6063      	str	r3, [r4, #4]
 8004624:	6923      	ldr	r3, [r4, #16]
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	04d2      	lsls	r2, r2, #19
 800462a:	d505      	bpl.n	8004638 <__sflush_r+0x80>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <__sflush_r+0x7e>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d100      	bne.n	8004638 <__sflush_r+0x80>
 8004636:	6560      	str	r0, [r4, #84]	@ 0x54
 8004638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800463a:	602e      	str	r6, [r5, #0]
 800463c:	2900      	cmp	r1, #0
 800463e:	d017      	beq.n	8004670 <__sflush_r+0xb8>
 8004640:	0023      	movs	r3, r4
 8004642:	3344      	adds	r3, #68	@ 0x44
 8004644:	4299      	cmp	r1, r3
 8004646:	d002      	beq.n	800464e <__sflush_r+0x96>
 8004648:	0028      	movs	r0, r5
 800464a:	f7ff fbf7 	bl	8003e3c <_free_r>
 800464e:	2300      	movs	r3, #0
 8004650:	6363      	str	r3, [r4, #52]	@ 0x34
 8004652:	e00d      	b.n	8004670 <__sflush_r+0xb8>
 8004654:	2301      	movs	r3, #1
 8004656:	0028      	movs	r0, r5
 8004658:	47b8      	blx	r7
 800465a:	0002      	movs	r2, r0
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d1c6      	bne.n	80045ee <__sflush_r+0x36>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0c3      	beq.n	80045ee <__sflush_r+0x36>
 8004666:	2b1d      	cmp	r3, #29
 8004668:	d001      	beq.n	800466e <__sflush_r+0xb6>
 800466a:	2b16      	cmp	r3, #22
 800466c:	d11a      	bne.n	80046a4 <__sflush_r+0xec>
 800466e:	602e      	str	r6, [r5, #0]
 8004670:	2000      	movs	r0, #0
 8004672:	e01e      	b.n	80046b2 <__sflush_r+0xfa>
 8004674:	690e      	ldr	r6, [r1, #16]
 8004676:	2e00      	cmp	r6, #0
 8004678:	d0fa      	beq.n	8004670 <__sflush_r+0xb8>
 800467a:	680f      	ldr	r7, [r1, #0]
 800467c:	600e      	str	r6, [r1, #0]
 800467e:	1bba      	subs	r2, r7, r6
 8004680:	9201      	str	r2, [sp, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	d100      	bne.n	800468a <__sflush_r+0xd2>
 8004688:	694a      	ldr	r2, [r1, #20]
 800468a:	60a2      	str	r2, [r4, #8]
 800468c:	9b01      	ldr	r3, [sp, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	ddee      	ble.n	8004670 <__sflush_r+0xb8>
 8004692:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004694:	0032      	movs	r2, r6
 8004696:	001f      	movs	r7, r3
 8004698:	0028      	movs	r0, r5
 800469a:	9b01      	ldr	r3, [sp, #4]
 800469c:	6a21      	ldr	r1, [r4, #32]
 800469e:	47b8      	blx	r7
 80046a0:	2800      	cmp	r0, #0
 80046a2:	dc07      	bgt.n	80046b4 <__sflush_r+0xfc>
 80046a4:	89a2      	ldrh	r2, [r4, #12]
 80046a6:	2340      	movs	r3, #64	@ 0x40
 80046a8:	2001      	movs	r0, #1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	b21b      	sxth	r3, r3
 80046ae:	81a3      	strh	r3, [r4, #12]
 80046b0:	4240      	negs	r0, r0
 80046b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046b4:	9b01      	ldr	r3, [sp, #4]
 80046b6:	1836      	adds	r6, r6, r0
 80046b8:	1a1b      	subs	r3, r3, r0
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	e7e6      	b.n	800468c <__sflush_r+0xd4>
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	dfbffffe 	.word	0xdfbffffe

080046c4 <_fflush_r>:
 80046c4:	690b      	ldr	r3, [r1, #16]
 80046c6:	b570      	push	{r4, r5, r6, lr}
 80046c8:	0005      	movs	r5, r0
 80046ca:	000c      	movs	r4, r1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <_fflush_r+0x12>
 80046d0:	2500      	movs	r5, #0
 80046d2:	0028      	movs	r0, r5
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d004      	beq.n	80046e4 <_fflush_r+0x20>
 80046da:	6a03      	ldr	r3, [r0, #32]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <_fflush_r+0x20>
 80046e0:	f7ff fa98 	bl	8003c14 <__sinit>
 80046e4:	220c      	movs	r2, #12
 80046e6:	5ea3      	ldrsh	r3, [r4, r2]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f1      	beq.n	80046d0 <_fflush_r+0xc>
 80046ec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046ee:	07d2      	lsls	r2, r2, #31
 80046f0:	d404      	bmi.n	80046fc <_fflush_r+0x38>
 80046f2:	059b      	lsls	r3, r3, #22
 80046f4:	d402      	bmi.n	80046fc <_fflush_r+0x38>
 80046f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046f8:	f7ff fb9d 	bl	8003e36 <__retarget_lock_acquire_recursive>
 80046fc:	0028      	movs	r0, r5
 80046fe:	0021      	movs	r1, r4
 8004700:	f7ff ff5a 	bl	80045b8 <__sflush_r>
 8004704:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004706:	0005      	movs	r5, r0
 8004708:	07db      	lsls	r3, r3, #31
 800470a:	d4e2      	bmi.n	80046d2 <_fflush_r+0xe>
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	059b      	lsls	r3, r3, #22
 8004710:	d4df      	bmi.n	80046d2 <_fflush_r+0xe>
 8004712:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004714:	f7ff fb90 	bl	8003e38 <__retarget_lock_release_recursive>
 8004718:	e7db      	b.n	80046d2 <_fflush_r+0xe>

0800471a <__swbuf_r>:
 800471a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471c:	0006      	movs	r6, r0
 800471e:	000d      	movs	r5, r1
 8004720:	0014      	movs	r4, r2
 8004722:	2800      	cmp	r0, #0
 8004724:	d004      	beq.n	8004730 <__swbuf_r+0x16>
 8004726:	6a03      	ldr	r3, [r0, #32]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <__swbuf_r+0x16>
 800472c:	f7ff fa72 	bl	8003c14 <__sinit>
 8004730:	69a3      	ldr	r3, [r4, #24]
 8004732:	60a3      	str	r3, [r4, #8]
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	071b      	lsls	r3, r3, #28
 8004738:	d502      	bpl.n	8004740 <__swbuf_r+0x26>
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <__swbuf_r+0x3a>
 8004740:	0021      	movs	r1, r4
 8004742:	0030      	movs	r0, r6
 8004744:	f000 f82c 	bl	80047a0 <__swsetup_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	d003      	beq.n	8004754 <__swbuf_r+0x3a>
 800474c:	2501      	movs	r5, #1
 800474e:	426d      	negs	r5, r5
 8004750:	0028      	movs	r0, r5
 8004752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	b2ef      	uxtb	r7, r5
 800475a:	1ac0      	subs	r0, r0, r3
 800475c:	6963      	ldr	r3, [r4, #20]
 800475e:	b2ed      	uxtb	r5, r5
 8004760:	4283      	cmp	r3, r0
 8004762:	dc05      	bgt.n	8004770 <__swbuf_r+0x56>
 8004764:	0021      	movs	r1, r4
 8004766:	0030      	movs	r0, r6
 8004768:	f7ff ffac 	bl	80046c4 <_fflush_r>
 800476c:	2800      	cmp	r0, #0
 800476e:	d1ed      	bne.n	800474c <__swbuf_r+0x32>
 8004770:	68a3      	ldr	r3, [r4, #8]
 8004772:	3001      	adds	r0, #1
 8004774:	3b01      	subs	r3, #1
 8004776:	60a3      	str	r3, [r4, #8]
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	6022      	str	r2, [r4, #0]
 800477e:	701f      	strb	r7, [r3, #0]
 8004780:	6963      	ldr	r3, [r4, #20]
 8004782:	4283      	cmp	r3, r0
 8004784:	d004      	beq.n	8004790 <__swbuf_r+0x76>
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	07db      	lsls	r3, r3, #31
 800478a:	d5e1      	bpl.n	8004750 <__swbuf_r+0x36>
 800478c:	2d0a      	cmp	r5, #10
 800478e:	d1df      	bne.n	8004750 <__swbuf_r+0x36>
 8004790:	0021      	movs	r1, r4
 8004792:	0030      	movs	r0, r6
 8004794:	f7ff ff96 	bl	80046c4 <_fflush_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	d0d9      	beq.n	8004750 <__swbuf_r+0x36>
 800479c:	e7d6      	b.n	800474c <__swbuf_r+0x32>
	...

080047a0 <__swsetup_r>:
 80047a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004858 <__swsetup_r+0xb8>)
 80047a2:	b570      	push	{r4, r5, r6, lr}
 80047a4:	0005      	movs	r5, r0
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	000c      	movs	r4, r1
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d004      	beq.n	80047b8 <__swsetup_r+0x18>
 80047ae:	6a03      	ldr	r3, [r0, #32]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <__swsetup_r+0x18>
 80047b4:	f7ff fa2e 	bl	8003c14 <__sinit>
 80047b8:	230c      	movs	r3, #12
 80047ba:	5ee2      	ldrsh	r2, [r4, r3]
 80047bc:	0713      	lsls	r3, r2, #28
 80047be:	d423      	bmi.n	8004808 <__swsetup_r+0x68>
 80047c0:	06d3      	lsls	r3, r2, #27
 80047c2:	d407      	bmi.n	80047d4 <__swsetup_r+0x34>
 80047c4:	2309      	movs	r3, #9
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	2340      	movs	r3, #64	@ 0x40
 80047ca:	2001      	movs	r0, #1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	4240      	negs	r0, r0
 80047d2:	e03a      	b.n	800484a <__swsetup_r+0xaa>
 80047d4:	0752      	lsls	r2, r2, #29
 80047d6:	d513      	bpl.n	8004800 <__swsetup_r+0x60>
 80047d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047da:	2900      	cmp	r1, #0
 80047dc:	d008      	beq.n	80047f0 <__swsetup_r+0x50>
 80047de:	0023      	movs	r3, r4
 80047e0:	3344      	adds	r3, #68	@ 0x44
 80047e2:	4299      	cmp	r1, r3
 80047e4:	d002      	beq.n	80047ec <__swsetup_r+0x4c>
 80047e6:	0028      	movs	r0, r5
 80047e8:	f7ff fb28 	bl	8003e3c <_free_r>
 80047ec:	2300      	movs	r3, #0
 80047ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80047f0:	2224      	movs	r2, #36	@ 0x24
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	4393      	bics	r3, r2
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	2300      	movs	r3, #0
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	6923      	ldr	r3, [r4, #16]
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	2308      	movs	r3, #8
 8004802:	89a2      	ldrh	r2, [r4, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	81a3      	strh	r3, [r4, #12]
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <__swsetup_r+0x86>
 800480e:	21a0      	movs	r1, #160	@ 0xa0
 8004810:	2280      	movs	r2, #128	@ 0x80
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	0089      	lsls	r1, r1, #2
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	400b      	ands	r3, r1
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <__swsetup_r+0x86>
 800481e:	0021      	movs	r1, r4
 8004820:	0028      	movs	r0, r5
 8004822:	f000 f863 	bl	80048ec <__smakebuf_r>
 8004826:	230c      	movs	r3, #12
 8004828:	5ee2      	ldrsh	r2, [r4, r3]
 800482a:	2101      	movs	r1, #1
 800482c:	0013      	movs	r3, r2
 800482e:	400b      	ands	r3, r1
 8004830:	420a      	tst	r2, r1
 8004832:	d00b      	beq.n	800484c <__swsetup_r+0xac>
 8004834:	2300      	movs	r3, #0
 8004836:	60a3      	str	r3, [r4, #8]
 8004838:	6963      	ldr	r3, [r4, #20]
 800483a:	425b      	negs	r3, r3
 800483c:	61a3      	str	r3, [r4, #24]
 800483e:	2000      	movs	r0, #0
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	4283      	cmp	r3, r0
 8004844:	d101      	bne.n	800484a <__swsetup_r+0xaa>
 8004846:	0613      	lsls	r3, r2, #24
 8004848:	d4be      	bmi.n	80047c8 <__swsetup_r+0x28>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	0791      	lsls	r1, r2, #30
 800484e:	d400      	bmi.n	8004852 <__swsetup_r+0xb2>
 8004850:	6963      	ldr	r3, [r4, #20]
 8004852:	60a3      	str	r3, [r4, #8]
 8004854:	e7f3      	b.n	800483e <__swsetup_r+0x9e>
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	20000018 	.word	0x20000018

0800485c <_sbrk_r>:
 800485c:	2300      	movs	r3, #0
 800485e:	b570      	push	{r4, r5, r6, lr}
 8004860:	4d06      	ldr	r5, [pc, #24]	@ (800487c <_sbrk_r+0x20>)
 8004862:	0004      	movs	r4, r0
 8004864:	0008      	movs	r0, r1
 8004866:	602b      	str	r3, [r5, #0]
 8004868:	f7fc fa66 	bl	8000d38 <_sbrk>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d103      	bne.n	8004878 <_sbrk_r+0x1c>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d000      	beq.n	8004878 <_sbrk_r+0x1c>
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	bd70      	pop	{r4, r5, r6, pc}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	200002d4 	.word	0x200002d4

08004880 <memchr>:
 8004880:	b2c9      	uxtb	r1, r1
 8004882:	1882      	adds	r2, r0, r2
 8004884:	4290      	cmp	r0, r2
 8004886:	d101      	bne.n	800488c <memchr+0xc>
 8004888:	2000      	movs	r0, #0
 800488a:	4770      	bx	lr
 800488c:	7803      	ldrb	r3, [r0, #0]
 800488e:	428b      	cmp	r3, r1
 8004890:	d0fb      	beq.n	800488a <memchr+0xa>
 8004892:	3001      	adds	r0, #1
 8004894:	e7f6      	b.n	8004884 <memchr+0x4>
	...

08004898 <__swhatbuf_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	000e      	movs	r6, r1
 800489c:	001d      	movs	r5, r3
 800489e:	230e      	movs	r3, #14
 80048a0:	5ec9      	ldrsh	r1, [r1, r3]
 80048a2:	0014      	movs	r4, r2
 80048a4:	b096      	sub	sp, #88	@ 0x58
 80048a6:	2900      	cmp	r1, #0
 80048a8:	da0c      	bge.n	80048c4 <__swhatbuf_r+0x2c>
 80048aa:	89b2      	ldrh	r2, [r6, #12]
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	0011      	movs	r1, r2
 80048b0:	4019      	ands	r1, r3
 80048b2:	421a      	tst	r2, r3
 80048b4:	d114      	bne.n	80048e0 <__swhatbuf_r+0x48>
 80048b6:	2380      	movs	r3, #128	@ 0x80
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	2000      	movs	r0, #0
 80048bc:	6029      	str	r1, [r5, #0]
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	b016      	add	sp, #88	@ 0x58
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	466a      	mov	r2, sp
 80048c6:	f000 f853 	bl	8004970 <_fstat_r>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	dbed      	blt.n	80048aa <__swhatbuf_r+0x12>
 80048ce:	23f0      	movs	r3, #240	@ 0xf0
 80048d0:	9901      	ldr	r1, [sp, #4]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	4019      	ands	r1, r3
 80048d6:	4b04      	ldr	r3, [pc, #16]	@ (80048e8 <__swhatbuf_r+0x50>)
 80048d8:	18c9      	adds	r1, r1, r3
 80048da:	424b      	negs	r3, r1
 80048dc:	4159      	adcs	r1, r3
 80048de:	e7ea      	b.n	80048b6 <__swhatbuf_r+0x1e>
 80048e0:	2100      	movs	r1, #0
 80048e2:	2340      	movs	r3, #64	@ 0x40
 80048e4:	e7e9      	b.n	80048ba <__swhatbuf_r+0x22>
 80048e6:	46c0      	nop			@ (mov r8, r8)
 80048e8:	ffffe000 	.word	0xffffe000

080048ec <__smakebuf_r>:
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	2602      	movs	r6, #2
 80048f0:	898b      	ldrh	r3, [r1, #12]
 80048f2:	0005      	movs	r5, r0
 80048f4:	000c      	movs	r4, r1
 80048f6:	b085      	sub	sp, #20
 80048f8:	4233      	tst	r3, r6
 80048fa:	d007      	beq.n	800490c <__smakebuf_r+0x20>
 80048fc:	0023      	movs	r3, r4
 80048fe:	3347      	adds	r3, #71	@ 0x47
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	6123      	str	r3, [r4, #16]
 8004904:	2301      	movs	r3, #1
 8004906:	6163      	str	r3, [r4, #20]
 8004908:	b005      	add	sp, #20
 800490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800490c:	ab03      	add	r3, sp, #12
 800490e:	aa02      	add	r2, sp, #8
 8004910:	f7ff ffc2 	bl	8004898 <__swhatbuf_r>
 8004914:	9f02      	ldr	r7, [sp, #8]
 8004916:	9001      	str	r0, [sp, #4]
 8004918:	0039      	movs	r1, r7
 800491a:	0028      	movs	r0, r5
 800491c:	f7ff fafa 	bl	8003f14 <_malloc_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	d108      	bne.n	8004936 <__smakebuf_r+0x4a>
 8004924:	220c      	movs	r2, #12
 8004926:	5ea3      	ldrsh	r3, [r4, r2]
 8004928:	059a      	lsls	r2, r3, #22
 800492a:	d4ed      	bmi.n	8004908 <__smakebuf_r+0x1c>
 800492c:	2203      	movs	r2, #3
 800492e:	4393      	bics	r3, r2
 8004930:	431e      	orrs	r6, r3
 8004932:	81a6      	strh	r6, [r4, #12]
 8004934:	e7e2      	b.n	80048fc <__smakebuf_r+0x10>
 8004936:	2380      	movs	r3, #128	@ 0x80
 8004938:	89a2      	ldrh	r2, [r4, #12]
 800493a:	6020      	str	r0, [r4, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	81a3      	strh	r3, [r4, #12]
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	6120      	str	r0, [r4, #16]
 8004944:	6167      	str	r7, [r4, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <__smakebuf_r+0x78>
 800494a:	0028      	movs	r0, r5
 800494c:	230e      	movs	r3, #14
 800494e:	5ee1      	ldrsh	r1, [r4, r3]
 8004950:	f000 f820 	bl	8004994 <_isatty_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	d005      	beq.n	8004964 <__smakebuf_r+0x78>
 8004958:	2303      	movs	r3, #3
 800495a:	89a2      	ldrh	r2, [r4, #12]
 800495c:	439a      	bics	r2, r3
 800495e:	3b02      	subs	r3, #2
 8004960:	4313      	orrs	r3, r2
 8004962:	81a3      	strh	r3, [r4, #12]
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	9a01      	ldr	r2, [sp, #4]
 8004968:	4313      	orrs	r3, r2
 800496a:	81a3      	strh	r3, [r4, #12]
 800496c:	e7cc      	b.n	8004908 <__smakebuf_r+0x1c>
	...

08004970 <_fstat_r>:
 8004970:	2300      	movs	r3, #0
 8004972:	b570      	push	{r4, r5, r6, lr}
 8004974:	4d06      	ldr	r5, [pc, #24]	@ (8004990 <_fstat_r+0x20>)
 8004976:	0004      	movs	r4, r0
 8004978:	0008      	movs	r0, r1
 800497a:	0011      	movs	r1, r2
 800497c:	602b      	str	r3, [r5, #0]
 800497e:	f7fc f9b9 	bl	8000cf4 <_fstat>
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	d103      	bne.n	800498e <_fstat_r+0x1e>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d000      	beq.n	800498e <_fstat_r+0x1e>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	200002d4 	.word	0x200002d4

08004994 <_isatty_r>:
 8004994:	2300      	movs	r3, #0
 8004996:	b570      	push	{r4, r5, r6, lr}
 8004998:	4d06      	ldr	r5, [pc, #24]	@ (80049b4 <_isatty_r+0x20>)
 800499a:	0004      	movs	r4, r0
 800499c:	0008      	movs	r0, r1
 800499e:	602b      	str	r3, [r5, #0]
 80049a0:	f7fc f9b6 	bl	8000d10 <_isatty>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d103      	bne.n	80049b0 <_isatty_r+0x1c>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d000      	beq.n	80049b0 <_isatty_r+0x1c>
 80049ae:	6023      	str	r3, [r4, #0]
 80049b0:	bd70      	pop	{r4, r5, r6, pc}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	200002d4 	.word	0x200002d4

080049b8 <_init>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr

080049c4 <_fini>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr
