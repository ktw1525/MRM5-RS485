
MRM5-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08009578  08009578  0000a578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b8  080099b8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080099b8  080099b8  0000a9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c0  080099c0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c0  080099c0  0000a9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099c4  080099c4  0000a9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080099c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d8  08009ba0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08009ba0  0000b4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc98  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002794  00000000  00000000  0001ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001d630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a21  00000000  00000000  0001e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001907f  00000000  00000000  0001ed91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103e1  00000000  00000000  00037e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c6ab  00000000  00000000  000481f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e489c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f60  00000000  00000000  000e48e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e8840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d8 	.word	0x200001d8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009560 	.word	0x08009560

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001dc 	.word	0x200001dc
 80000fc:	08009560 	.word	0x08009560

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fa3b 	bl	80018b0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f97b 	bl	8001740 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fa2d 	bl	80018b0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa23 	bl	80018b0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f9a5 	bl	80017c8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f99b 	bl	80017c8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_uldivmod>:
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d111      	bne.n	80004c8 <__aeabi_uldivmod+0x28>
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d10f      	bne.n	80004c8 <__aeabi_uldivmod+0x28>
 80004a8:	2900      	cmp	r1, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_uldivmod+0xe>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d002      	beq.n	80004b6 <__aeabi_uldivmod+0x16>
 80004b0:	2100      	movs	r1, #0
 80004b2:	43c9      	mvns	r1, r1
 80004b4:	0008      	movs	r0, r1
 80004b6:	b407      	push	{r0, r1, r2}
 80004b8:	4802      	ldr	r0, [pc, #8]	@ (80004c4 <__aeabi_uldivmod+0x24>)
 80004ba:	a102      	add	r1, pc, #8	@ (adr r1, 80004c4 <__aeabi_uldivmod+0x24>)
 80004bc:	1840      	adds	r0, r0, r1
 80004be:	9002      	str	r0, [sp, #8]
 80004c0:	bd03      	pop	{r0, r1, pc}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	ffffff5d 	.word	0xffffff5d
 80004c8:	b403      	push	{r0, r1}
 80004ca:	4668      	mov	r0, sp
 80004cc:	b501      	push	{r0, lr}
 80004ce:	9802      	ldr	r0, [sp, #8]
 80004d0:	f000 f806 	bl	80004e0 <__udivmoddi4>
 80004d4:	9b01      	ldr	r3, [sp, #4]
 80004d6:	469e      	mov	lr, r3
 80004d8:	b002      	add	sp, #8
 80004da:	bc0c      	pop	{r2, r3}
 80004dc:	4770      	bx	lr
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__udivmoddi4>:
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	4657      	mov	r7, sl
 80004e4:	464e      	mov	r6, r9
 80004e6:	4645      	mov	r5, r8
 80004e8:	46de      	mov	lr, fp
 80004ea:	b5e0      	push	{r5, r6, r7, lr}
 80004ec:	0004      	movs	r4, r0
 80004ee:	000d      	movs	r5, r1
 80004f0:	4692      	mov	sl, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	b083      	sub	sp, #12
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d830      	bhi.n	800055c <__udivmoddi4+0x7c>
 80004fa:	d02d      	beq.n	8000558 <__udivmoddi4+0x78>
 80004fc:	4649      	mov	r1, r9
 80004fe:	4650      	mov	r0, sl
 8000500:	f002 f97a 	bl	80027f8 <__clzdi2>
 8000504:	0029      	movs	r1, r5
 8000506:	0006      	movs	r6, r0
 8000508:	0020      	movs	r0, r4
 800050a:	f002 f975 	bl	80027f8 <__clzdi2>
 800050e:	1a33      	subs	r3, r6, r0
 8000510:	4698      	mov	r8, r3
 8000512:	3b20      	subs	r3, #32
 8000514:	d434      	bmi.n	8000580 <__udivmoddi4+0xa0>
 8000516:	469b      	mov	fp, r3
 8000518:	4653      	mov	r3, sl
 800051a:	465a      	mov	r2, fp
 800051c:	4093      	lsls	r3, r2
 800051e:	4642      	mov	r2, r8
 8000520:	001f      	movs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d83b      	bhi.n	80005a4 <__udivmoddi4+0xc4>
 800052c:	42af      	cmp	r7, r5
 800052e:	d100      	bne.n	8000532 <__udivmoddi4+0x52>
 8000530:	e079      	b.n	8000626 <__udivmoddi4+0x146>
 8000532:	465b      	mov	r3, fp
 8000534:	1ba4      	subs	r4, r4, r6
 8000536:	41bd      	sbcs	r5, r7
 8000538:	2b00      	cmp	r3, #0
 800053a:	da00      	bge.n	800053e <__udivmoddi4+0x5e>
 800053c:	e076      	b.n	800062c <__udivmoddi4+0x14c>
 800053e:	2200      	movs	r2, #0
 8000540:	2300      	movs	r3, #0
 8000542:	9200      	str	r2, [sp, #0]
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	465a      	mov	r2, fp
 800054a:	4093      	lsls	r3, r2
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	4642      	mov	r2, r8
 8000552:	4093      	lsls	r3, r2
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	e029      	b.n	80005ac <__udivmoddi4+0xcc>
 8000558:	4282      	cmp	r2, r0
 800055a:	d9cf      	bls.n	80004fc <__udivmoddi4+0x1c>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <__udivmoddi4+0x8e>
 800056a:	601c      	str	r4, [r3, #0]
 800056c:	605d      	str	r5, [r3, #4]
 800056e:	9800      	ldr	r0, [sp, #0]
 8000570:	9901      	ldr	r1, [sp, #4]
 8000572:	b003      	add	sp, #12
 8000574:	bcf0      	pop	{r4, r5, r6, r7}
 8000576:	46bb      	mov	fp, r7
 8000578:	46b2      	mov	sl, r6
 800057a:	46a9      	mov	r9, r5
 800057c:	46a0      	mov	r8, r4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	4642      	mov	r2, r8
 8000582:	469b      	mov	fp, r3
 8000584:	2320      	movs	r3, #32
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	4652      	mov	r2, sl
 800058a:	40da      	lsrs	r2, r3
 800058c:	4641      	mov	r1, r8
 800058e:	0013      	movs	r3, r2
 8000590:	464a      	mov	r2, r9
 8000592:	408a      	lsls	r2, r1
 8000594:	0017      	movs	r7, r2
 8000596:	4642      	mov	r2, r8
 8000598:	431f      	orrs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d9c3      	bls.n	800052c <__udivmoddi4+0x4c>
 80005a4:	2200      	movs	r2, #0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	4643      	mov	r3, r8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0d8      	beq.n	8000564 <__udivmoddi4+0x84>
 80005b2:	07fb      	lsls	r3, r7, #31
 80005b4:	0872      	lsrs	r2, r6, #1
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4646      	mov	r6, r8
 80005ba:	087b      	lsrs	r3, r7, #1
 80005bc:	e00e      	b.n	80005dc <__udivmoddi4+0xfc>
 80005be:	42ab      	cmp	r3, r5
 80005c0:	d101      	bne.n	80005c6 <__udivmoddi4+0xe6>
 80005c2:	42a2      	cmp	r2, r4
 80005c4:	d80c      	bhi.n	80005e0 <__udivmoddi4+0x100>
 80005c6:	1aa4      	subs	r4, r4, r2
 80005c8:	419d      	sbcs	r5, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	1924      	adds	r4, r4, r4
 80005ce:	416d      	adcs	r5, r5
 80005d0:	2100      	movs	r1, #0
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1824      	adds	r4, r4, r0
 80005d6:	414d      	adcs	r5, r1
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d006      	beq.n	80005ea <__udivmoddi4+0x10a>
 80005dc:	42ab      	cmp	r3, r5
 80005de:	d9ee      	bls.n	80005be <__udivmoddi4+0xde>
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1924      	adds	r4, r4, r4
 80005e4:	416d      	adcs	r5, r5
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d1f8      	bne.n	80005dc <__udivmoddi4+0xfc>
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	465b      	mov	r3, fp
 80005f0:	1900      	adds	r0, r0, r4
 80005f2:	4169      	adcs	r1, r5
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db24      	blt.n	8000642 <__udivmoddi4+0x162>
 80005f8:	002b      	movs	r3, r5
 80005fa:	465a      	mov	r2, fp
 80005fc:	4644      	mov	r4, r8
 80005fe:	40d3      	lsrs	r3, r2
 8000600:	002a      	movs	r2, r5
 8000602:	40e2      	lsrs	r2, r4
 8000604:	001c      	movs	r4, r3
 8000606:	465b      	mov	r3, fp
 8000608:	0015      	movs	r5, r2
 800060a:	2b00      	cmp	r3, #0
 800060c:	db2a      	blt.n	8000664 <__udivmoddi4+0x184>
 800060e:	0026      	movs	r6, r4
 8000610:	409e      	lsls	r6, r3
 8000612:	0033      	movs	r3, r6
 8000614:	0026      	movs	r6, r4
 8000616:	4647      	mov	r7, r8
 8000618:	40be      	lsls	r6, r7
 800061a:	0032      	movs	r2, r6
 800061c:	1a80      	subs	r0, r0, r2
 800061e:	4199      	sbcs	r1, r3
 8000620:	9000      	str	r0, [sp, #0]
 8000622:	9101      	str	r1, [sp, #4]
 8000624:	e79e      	b.n	8000564 <__udivmoddi4+0x84>
 8000626:	42a3      	cmp	r3, r4
 8000628:	d8bc      	bhi.n	80005a4 <__udivmoddi4+0xc4>
 800062a:	e782      	b.n	8000532 <__udivmoddi4+0x52>
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	2100      	movs	r1, #0
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	2200      	movs	r2, #0
 8000636:	9100      	str	r1, [sp, #0]
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	2201      	movs	r2, #1
 800063c:	40da      	lsrs	r2, r3
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	e785      	b.n	800054e <__udivmoddi4+0x6e>
 8000642:	4642      	mov	r2, r8
 8000644:	2320      	movs	r3, #32
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	4646      	mov	r6, r8
 800064c:	409a      	lsls	r2, r3
 800064e:	0023      	movs	r3, r4
 8000650:	40f3      	lsrs	r3, r6
 8000652:	4644      	mov	r4, r8
 8000654:	4313      	orrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	dad4      	bge.n	800060e <__udivmoddi4+0x12e>
 8000664:	4642      	mov	r2, r8
 8000666:	002f      	movs	r7, r5
 8000668:	2320      	movs	r3, #32
 800066a:	0026      	movs	r6, r4
 800066c:	4097      	lsls	r7, r2
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	40de      	lsrs	r6, r3
 8000672:	003b      	movs	r3, r7
 8000674:	4333      	orrs	r3, r6
 8000676:	e7cd      	b.n	8000614 <__udivmoddi4+0x134>

08000678 <__aeabi_fsub>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	4647      	mov	r7, r8
 800067c:	46ce      	mov	lr, r9
 800067e:	024e      	lsls	r6, r1, #9
 8000680:	0243      	lsls	r3, r0, #9
 8000682:	0045      	lsls	r5, r0, #1
 8000684:	0a72      	lsrs	r2, r6, #9
 8000686:	0fc4      	lsrs	r4, r0, #31
 8000688:	0048      	lsls	r0, r1, #1
 800068a:	b580      	push	{r7, lr}
 800068c:	4694      	mov	ip, r2
 800068e:	0a5f      	lsrs	r7, r3, #9
 8000690:	0e2d      	lsrs	r5, r5, #24
 8000692:	099b      	lsrs	r3, r3, #6
 8000694:	0e00      	lsrs	r0, r0, #24
 8000696:	0fc9      	lsrs	r1, r1, #31
 8000698:	09b6      	lsrs	r6, r6, #6
 800069a:	28ff      	cmp	r0, #255	@ 0xff
 800069c:	d024      	beq.n	80006e8 <__aeabi_fsub+0x70>
 800069e:	2201      	movs	r2, #1
 80006a0:	4051      	eors	r1, r2
 80006a2:	1a2a      	subs	r2, r5, r0
 80006a4:	428c      	cmp	r4, r1
 80006a6:	d00f      	beq.n	80006c8 <__aeabi_fsub+0x50>
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	dc00      	bgt.n	80006ae <__aeabi_fsub+0x36>
 80006ac:	e16a      	b.n	8000984 <__aeabi_fsub+0x30c>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d135      	bne.n	800071e <__aeabi_fsub+0xa6>
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fsub+0x40>
 80006b6:	e0a2      	b.n	80007fe <__aeabi_fsub+0x186>
 80006b8:	1e51      	subs	r1, r2, #1
 80006ba:	2a01      	cmp	r2, #1
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fsub+0x48>
 80006be:	e124      	b.n	800090a <__aeabi_fsub+0x292>
 80006c0:	2aff      	cmp	r2, #255	@ 0xff
 80006c2:	d021      	beq.n	8000708 <__aeabi_fsub+0x90>
 80006c4:	000a      	movs	r2, r1
 80006c6:	e02f      	b.n	8000728 <__aeabi_fsub+0xb0>
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	dc00      	bgt.n	80006ce <__aeabi_fsub+0x56>
 80006cc:	e167      	b.n	800099e <__aeabi_fsub+0x326>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d05e      	beq.n	8000790 <__aeabi_fsub+0x118>
 80006d2:	2dff      	cmp	r5, #255	@ 0xff
 80006d4:	d018      	beq.n	8000708 <__aeabi_fsub+0x90>
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	04c9      	lsls	r1, r1, #19
 80006da:	430e      	orrs	r6, r1
 80006dc:	2a1b      	cmp	r2, #27
 80006de:	dc00      	bgt.n	80006e2 <__aeabi_fsub+0x6a>
 80006e0:	e076      	b.n	80007d0 <__aeabi_fsub+0x158>
 80006e2:	002a      	movs	r2, r5
 80006e4:	3301      	adds	r3, #1
 80006e6:	e032      	b.n	800074e <__aeabi_fsub+0xd6>
 80006e8:	002a      	movs	r2, r5
 80006ea:	3aff      	subs	r2, #255	@ 0xff
 80006ec:	4691      	mov	r9, r2
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d042      	beq.n	8000778 <__aeabi_fsub+0x100>
 80006f2:	428c      	cmp	r4, r1
 80006f4:	d055      	beq.n	80007a2 <__aeabi_fsub+0x12a>
 80006f6:	464a      	mov	r2, r9
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fsub+0x86>
 80006fc:	e09c      	b.n	8000838 <__aeabi_fsub+0x1c0>
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_fsub+0x8c>
 8000702:	e077      	b.n	80007f4 <__aeabi_fsub+0x17c>
 8000704:	000c      	movs	r4, r1
 8000706:	0033      	movs	r3, r6
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fsub+0x98>
 800070e:	e06e      	b.n	80007ee <__aeabi_fsub+0x176>
 8000710:	2280      	movs	r2, #128	@ 0x80
 8000712:	03d2      	lsls	r2, r2, #15
 8000714:	4313      	orrs	r3, r2
 8000716:	025b      	lsls	r3, r3, #9
 8000718:	20ff      	movs	r0, #255	@ 0xff
 800071a:	0a5b      	lsrs	r3, r3, #9
 800071c:	e024      	b.n	8000768 <__aeabi_fsub+0xf0>
 800071e:	2dff      	cmp	r5, #255	@ 0xff
 8000720:	d0f2      	beq.n	8000708 <__aeabi_fsub+0x90>
 8000722:	2180      	movs	r1, #128	@ 0x80
 8000724:	04c9      	lsls	r1, r1, #19
 8000726:	430e      	orrs	r6, r1
 8000728:	2101      	movs	r1, #1
 800072a:	2a1b      	cmp	r2, #27
 800072c:	dc08      	bgt.n	8000740 <__aeabi_fsub+0xc8>
 800072e:	0031      	movs	r1, r6
 8000730:	2020      	movs	r0, #32
 8000732:	40d1      	lsrs	r1, r2
 8000734:	1a82      	subs	r2, r0, r2
 8000736:	4096      	lsls	r6, r2
 8000738:	0032      	movs	r2, r6
 800073a:	1e50      	subs	r0, r2, #1
 800073c:	4182      	sbcs	r2, r0
 800073e:	4311      	orrs	r1, r2
 8000740:	1a5b      	subs	r3, r3, r1
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	d460      	bmi.n	8000808 <__aeabi_fsub+0x190>
 8000746:	2107      	movs	r1, #7
 8000748:	002a      	movs	r2, r5
 800074a:	4019      	ands	r1, r3
 800074c:	d057      	beq.n	80007fe <__aeabi_fsub+0x186>
 800074e:	210f      	movs	r1, #15
 8000750:	4019      	ands	r1, r3
 8000752:	2904      	cmp	r1, #4
 8000754:	d000      	beq.n	8000758 <__aeabi_fsub+0xe0>
 8000756:	3304      	adds	r3, #4
 8000758:	0159      	lsls	r1, r3, #5
 800075a:	d550      	bpl.n	80007fe <__aeabi_fsub+0x186>
 800075c:	1c50      	adds	r0, r2, #1
 800075e:	2afe      	cmp	r2, #254	@ 0xfe
 8000760:	d045      	beq.n	80007ee <__aeabi_fsub+0x176>
 8000762:	019b      	lsls	r3, r3, #6
 8000764:	b2c0      	uxtb	r0, r0
 8000766:	0a5b      	lsrs	r3, r3, #9
 8000768:	05c0      	lsls	r0, r0, #23
 800076a:	4318      	orrs	r0, r3
 800076c:	07e4      	lsls	r4, r4, #31
 800076e:	4320      	orrs	r0, r4
 8000770:	bcc0      	pop	{r6, r7}
 8000772:	46b9      	mov	r9, r7
 8000774:	46b0      	mov	r8, r6
 8000776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000778:	2201      	movs	r2, #1
 800077a:	4051      	eors	r1, r2
 800077c:	428c      	cmp	r4, r1
 800077e:	d1ba      	bne.n	80006f6 <__aeabi_fsub+0x7e>
 8000780:	464a      	mov	r2, r9
 8000782:	2a00      	cmp	r2, #0
 8000784:	d010      	beq.n	80007a8 <__aeabi_fsub+0x130>
 8000786:	2d00      	cmp	r5, #0
 8000788:	d100      	bne.n	800078c <__aeabi_fsub+0x114>
 800078a:	e098      	b.n	80008be <__aeabi_fsub+0x246>
 800078c:	2300      	movs	r3, #0
 800078e:	e7bb      	b.n	8000708 <__aeabi_fsub+0x90>
 8000790:	2e00      	cmp	r6, #0
 8000792:	d034      	beq.n	80007fe <__aeabi_fsub+0x186>
 8000794:	1e51      	subs	r1, r2, #1
 8000796:	2a01      	cmp	r2, #1
 8000798:	d06e      	beq.n	8000878 <__aeabi_fsub+0x200>
 800079a:	2aff      	cmp	r2, #255	@ 0xff
 800079c:	d0b4      	beq.n	8000708 <__aeabi_fsub+0x90>
 800079e:	000a      	movs	r2, r1
 80007a0:	e79c      	b.n	80006dc <__aeabi_fsub+0x64>
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d000      	beq.n	80007a8 <__aeabi_fsub+0x130>
 80007a6:	e088      	b.n	80008ba <__aeabi_fsub+0x242>
 80007a8:	20fe      	movs	r0, #254	@ 0xfe
 80007aa:	1c6a      	adds	r2, r5, #1
 80007ac:	4210      	tst	r0, r2
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fsub+0x13a>
 80007b0:	e092      	b.n	80008d8 <__aeabi_fsub+0x260>
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fsub+0x140>
 80007b6:	e0a4      	b.n	8000902 <__aeabi_fsub+0x28a>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d100      	bne.n	80007be <__aeabi_fsub+0x146>
 80007bc:	e0cb      	b.n	8000956 <__aeabi_fsub+0x2de>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fsub+0x14c>
 80007c2:	e0ca      	b.n	800095a <__aeabi_fsub+0x2e2>
 80007c4:	2200      	movs	r2, #0
 80007c6:	08db      	lsrs	r3, r3, #3
 80007c8:	025b      	lsls	r3, r3, #9
 80007ca:	0a5b      	lsrs	r3, r3, #9
 80007cc:	b2d0      	uxtb	r0, r2
 80007ce:	e7cb      	b.n	8000768 <__aeabi_fsub+0xf0>
 80007d0:	0031      	movs	r1, r6
 80007d2:	2020      	movs	r0, #32
 80007d4:	40d1      	lsrs	r1, r2
 80007d6:	1a82      	subs	r2, r0, r2
 80007d8:	4096      	lsls	r6, r2
 80007da:	0032      	movs	r2, r6
 80007dc:	1e50      	subs	r0, r2, #1
 80007de:	4182      	sbcs	r2, r0
 80007e0:	430a      	orrs	r2, r1
 80007e2:	189b      	adds	r3, r3, r2
 80007e4:	015a      	lsls	r2, r3, #5
 80007e6:	d5ae      	bpl.n	8000746 <__aeabi_fsub+0xce>
 80007e8:	1c6a      	adds	r2, r5, #1
 80007ea:	2dfe      	cmp	r5, #254	@ 0xfe
 80007ec:	d14a      	bne.n	8000884 <__aeabi_fsub+0x20c>
 80007ee:	20ff      	movs	r0, #255	@ 0xff
 80007f0:	2300      	movs	r3, #0
 80007f2:	e7b9      	b.n	8000768 <__aeabi_fsub+0xf0>
 80007f4:	22ff      	movs	r2, #255	@ 0xff
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d14b      	bne.n	8000892 <__aeabi_fsub+0x21a>
 80007fa:	000c      	movs	r4, r1
 80007fc:	0033      	movs	r3, r6
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	2aff      	cmp	r2, #255	@ 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fsub+0x18e>
 8000804:	e781      	b.n	800070a <__aeabi_fsub+0x92>
 8000806:	e7df      	b.n	80007c8 <__aeabi_fsub+0x150>
 8000808:	019f      	lsls	r7, r3, #6
 800080a:	09bf      	lsrs	r7, r7, #6
 800080c:	0038      	movs	r0, r7
 800080e:	f001 ffd5 	bl	80027bc <__clzsi2>
 8000812:	3805      	subs	r0, #5
 8000814:	4087      	lsls	r7, r0
 8000816:	4285      	cmp	r5, r0
 8000818:	dc21      	bgt.n	800085e <__aeabi_fsub+0x1e6>
 800081a:	003b      	movs	r3, r7
 800081c:	2120      	movs	r1, #32
 800081e:	1b42      	subs	r2, r0, r5
 8000820:	3201      	adds	r2, #1
 8000822:	40d3      	lsrs	r3, r2
 8000824:	1a8a      	subs	r2, r1, r2
 8000826:	4097      	lsls	r7, r2
 8000828:	1e7a      	subs	r2, r7, #1
 800082a:	4197      	sbcs	r7, r2
 800082c:	2200      	movs	r2, #0
 800082e:	433b      	orrs	r3, r7
 8000830:	0759      	lsls	r1, r3, #29
 8000832:	d000      	beq.n	8000836 <__aeabi_fsub+0x1be>
 8000834:	e78b      	b.n	800074e <__aeabi_fsub+0xd6>
 8000836:	e78f      	b.n	8000758 <__aeabi_fsub+0xe0>
 8000838:	20fe      	movs	r0, #254	@ 0xfe
 800083a:	1c6a      	adds	r2, r5, #1
 800083c:	4210      	tst	r0, r2
 800083e:	d112      	bne.n	8000866 <__aeabi_fsub+0x1ee>
 8000840:	2d00      	cmp	r5, #0
 8000842:	d152      	bne.n	80008ea <__aeabi_fsub+0x272>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d07c      	beq.n	8000942 <__aeabi_fsub+0x2ca>
 8000848:	2e00      	cmp	r6, #0
 800084a:	d0bb      	beq.n	80007c4 <__aeabi_fsub+0x14c>
 800084c:	1b9a      	subs	r2, r3, r6
 800084e:	0150      	lsls	r0, r2, #5
 8000850:	d400      	bmi.n	8000854 <__aeabi_fsub+0x1dc>
 8000852:	e08b      	b.n	800096c <__aeabi_fsub+0x2f4>
 8000854:	2401      	movs	r4, #1
 8000856:	2200      	movs	r2, #0
 8000858:	1af3      	subs	r3, r6, r3
 800085a:	400c      	ands	r4, r1
 800085c:	e7e8      	b.n	8000830 <__aeabi_fsub+0x1b8>
 800085e:	4b56      	ldr	r3, [pc, #344]	@ (80009b8 <__aeabi_fsub+0x340>)
 8000860:	1a2a      	subs	r2, r5, r0
 8000862:	403b      	ands	r3, r7
 8000864:	e7e4      	b.n	8000830 <__aeabi_fsub+0x1b8>
 8000866:	1b9f      	subs	r7, r3, r6
 8000868:	017a      	lsls	r2, r7, #5
 800086a:	d446      	bmi.n	80008fa <__aeabi_fsub+0x282>
 800086c:	2f00      	cmp	r7, #0
 800086e:	d1cd      	bne.n	800080c <__aeabi_fsub+0x194>
 8000870:	2400      	movs	r4, #0
 8000872:	2000      	movs	r0, #0
 8000874:	2300      	movs	r3, #0
 8000876:	e777      	b.n	8000768 <__aeabi_fsub+0xf0>
 8000878:	199b      	adds	r3, r3, r6
 800087a:	2501      	movs	r5, #1
 800087c:	3201      	adds	r2, #1
 800087e:	0159      	lsls	r1, r3, #5
 8000880:	d400      	bmi.n	8000884 <__aeabi_fsub+0x20c>
 8000882:	e760      	b.n	8000746 <__aeabi_fsub+0xce>
 8000884:	2101      	movs	r1, #1
 8000886:	484d      	ldr	r0, [pc, #308]	@ (80009bc <__aeabi_fsub+0x344>)
 8000888:	4019      	ands	r1, r3
 800088a:	085b      	lsrs	r3, r3, #1
 800088c:	4003      	ands	r3, r0
 800088e:	430b      	orrs	r3, r1
 8000890:	e7ce      	b.n	8000830 <__aeabi_fsub+0x1b8>
 8000892:	1e57      	subs	r7, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d05a      	beq.n	800094e <__aeabi_fsub+0x2d6>
 8000898:	000c      	movs	r4, r1
 800089a:	2aff      	cmp	r2, #255	@ 0xff
 800089c:	d033      	beq.n	8000906 <__aeabi_fsub+0x28e>
 800089e:	2201      	movs	r2, #1
 80008a0:	2f1b      	cmp	r7, #27
 80008a2:	dc07      	bgt.n	80008b4 <__aeabi_fsub+0x23c>
 80008a4:	2120      	movs	r1, #32
 80008a6:	1bc9      	subs	r1, r1, r7
 80008a8:	001a      	movs	r2, r3
 80008aa:	408b      	lsls	r3, r1
 80008ac:	40fa      	lsrs	r2, r7
 80008ae:	1e59      	subs	r1, r3, #1
 80008b0:	418b      	sbcs	r3, r1
 80008b2:	431a      	orrs	r2, r3
 80008b4:	0005      	movs	r5, r0
 80008b6:	1ab3      	subs	r3, r6, r2
 80008b8:	e743      	b.n	8000742 <__aeabi_fsub+0xca>
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d123      	bne.n	8000906 <__aeabi_fsub+0x28e>
 80008be:	22ff      	movs	r2, #255	@ 0xff
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d09b      	beq.n	80007fc <__aeabi_fsub+0x184>
 80008c4:	1e51      	subs	r1, r2, #1
 80008c6:	2a01      	cmp	r2, #1
 80008c8:	d0d6      	beq.n	8000878 <__aeabi_fsub+0x200>
 80008ca:	2aff      	cmp	r2, #255	@ 0xff
 80008cc:	d01b      	beq.n	8000906 <__aeabi_fsub+0x28e>
 80008ce:	291b      	cmp	r1, #27
 80008d0:	dd2c      	ble.n	800092c <__aeabi_fsub+0x2b4>
 80008d2:	0002      	movs	r2, r0
 80008d4:	1c73      	adds	r3, r6, #1
 80008d6:	e73a      	b.n	800074e <__aeabi_fsub+0xd6>
 80008d8:	2aff      	cmp	r2, #255	@ 0xff
 80008da:	d088      	beq.n	80007ee <__aeabi_fsub+0x176>
 80008dc:	199b      	adds	r3, r3, r6
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	0759      	lsls	r1, r3, #29
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fsub+0x26e>
 80008e4:	e733      	b.n	800074e <__aeabi_fsub+0xd6>
 80008e6:	08db      	lsrs	r3, r3, #3
 80008e8:	e76e      	b.n	80007c8 <__aeabi_fsub+0x150>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d110      	bne.n	8000910 <__aeabi_fsub+0x298>
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d043      	beq.n	800097a <__aeabi_fsub+0x302>
 80008f2:	2401      	movs	r4, #1
 80008f4:	0033      	movs	r3, r6
 80008f6:	400c      	ands	r4, r1
 80008f8:	e706      	b.n	8000708 <__aeabi_fsub+0x90>
 80008fa:	2401      	movs	r4, #1
 80008fc:	1af7      	subs	r7, r6, r3
 80008fe:	400c      	ands	r4, r1
 8000900:	e784      	b.n	800080c <__aeabi_fsub+0x194>
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <__aeabi_fsub+0x298>
 8000906:	0033      	movs	r3, r6
 8000908:	e6fe      	b.n	8000708 <__aeabi_fsub+0x90>
 800090a:	2501      	movs	r5, #1
 800090c:	1b9b      	subs	r3, r3, r6
 800090e:	e718      	b.n	8000742 <__aeabi_fsub+0xca>
 8000910:	2e00      	cmp	r6, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fsub+0x29e>
 8000914:	e6f8      	b.n	8000708 <__aeabi_fsub+0x90>
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	03d2      	lsls	r2, r2, #15
 800091a:	4297      	cmp	r7, r2
 800091c:	d304      	bcc.n	8000928 <__aeabi_fsub+0x2b0>
 800091e:	4594      	cmp	ip, r2
 8000920:	d202      	bcs.n	8000928 <__aeabi_fsub+0x2b0>
 8000922:	2401      	movs	r4, #1
 8000924:	0033      	movs	r3, r6
 8000926:	400c      	ands	r4, r1
 8000928:	08db      	lsrs	r3, r3, #3
 800092a:	e6f1      	b.n	8000710 <__aeabi_fsub+0x98>
 800092c:	001a      	movs	r2, r3
 800092e:	2520      	movs	r5, #32
 8000930:	40ca      	lsrs	r2, r1
 8000932:	1a69      	subs	r1, r5, r1
 8000934:	408b      	lsls	r3, r1
 8000936:	1e59      	subs	r1, r3, #1
 8000938:	418b      	sbcs	r3, r1
 800093a:	4313      	orrs	r3, r2
 800093c:	0005      	movs	r5, r0
 800093e:	199b      	adds	r3, r3, r6
 8000940:	e750      	b.n	80007e4 <__aeabi_fsub+0x16c>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d094      	beq.n	8000870 <__aeabi_fsub+0x1f8>
 8000946:	2401      	movs	r4, #1
 8000948:	0033      	movs	r3, r6
 800094a:	400c      	ands	r4, r1
 800094c:	e73a      	b.n	80007c4 <__aeabi_fsub+0x14c>
 800094e:	000c      	movs	r4, r1
 8000950:	2501      	movs	r5, #1
 8000952:	1af3      	subs	r3, r6, r3
 8000954:	e6f5      	b.n	8000742 <__aeabi_fsub+0xca>
 8000956:	0033      	movs	r3, r6
 8000958:	e734      	b.n	80007c4 <__aeabi_fsub+0x14c>
 800095a:	199b      	adds	r3, r3, r6
 800095c:	2200      	movs	r2, #0
 800095e:	0159      	lsls	r1, r3, #5
 8000960:	d5c1      	bpl.n	80008e6 <__aeabi_fsub+0x26e>
 8000962:	4a15      	ldr	r2, [pc, #84]	@ (80009b8 <__aeabi_fsub+0x340>)
 8000964:	4013      	ands	r3, r2
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	2201      	movs	r2, #1
 800096a:	e72d      	b.n	80007c8 <__aeabi_fsub+0x150>
 800096c:	2a00      	cmp	r2, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x2fa>
 8000970:	e77e      	b.n	8000870 <__aeabi_fsub+0x1f8>
 8000972:	0013      	movs	r3, r2
 8000974:	2200      	movs	r2, #0
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	e726      	b.n	80007c8 <__aeabi_fsub+0x150>
 800097a:	2380      	movs	r3, #128	@ 0x80
 800097c:	2400      	movs	r4, #0
 800097e:	20ff      	movs	r0, #255	@ 0xff
 8000980:	03db      	lsls	r3, r3, #15
 8000982:	e6f1      	b.n	8000768 <__aeabi_fsub+0xf0>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d100      	bne.n	800098a <__aeabi_fsub+0x312>
 8000988:	e756      	b.n	8000838 <__aeabi_fsub+0x1c0>
 800098a:	1b47      	subs	r7, r0, r5
 800098c:	003a      	movs	r2, r7
 800098e:	2d00      	cmp	r5, #0
 8000990:	d100      	bne.n	8000994 <__aeabi_fsub+0x31c>
 8000992:	e730      	b.n	80007f6 <__aeabi_fsub+0x17e>
 8000994:	2280      	movs	r2, #128	@ 0x80
 8000996:	04d2      	lsls	r2, r2, #19
 8000998:	000c      	movs	r4, r1
 800099a:	4313      	orrs	r3, r2
 800099c:	e77f      	b.n	800089e <__aeabi_fsub+0x226>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fsub+0x32c>
 80009a2:	e701      	b.n	80007a8 <__aeabi_fsub+0x130>
 80009a4:	1b41      	subs	r1, r0, r5
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d101      	bne.n	80009ae <__aeabi_fsub+0x336>
 80009aa:	000a      	movs	r2, r1
 80009ac:	e788      	b.n	80008c0 <__aeabi_fsub+0x248>
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	04d2      	lsls	r2, r2, #19
 80009b2:	4313      	orrs	r3, r2
 80009b4:	e78b      	b.n	80008ce <__aeabi_fsub+0x256>
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	fbffffff 	.word	0xfbffffff
 80009bc:	7dffffff 	.word	0x7dffffff

080009c0 <__aeabi_ui2f>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	1e04      	subs	r4, r0, #0
 80009c4:	d00e      	beq.n	80009e4 <__aeabi_ui2f+0x24>
 80009c6:	f001 fef9 	bl	80027bc <__clzsi2>
 80009ca:	239e      	movs	r3, #158	@ 0x9e
 80009cc:	0001      	movs	r1, r0
 80009ce:	1a1b      	subs	r3, r3, r0
 80009d0:	2b96      	cmp	r3, #150	@ 0x96
 80009d2:	dc0c      	bgt.n	80009ee <__aeabi_ui2f+0x2e>
 80009d4:	2808      	cmp	r0, #8
 80009d6:	d02f      	beq.n	8000a38 <__aeabi_ui2f+0x78>
 80009d8:	3908      	subs	r1, #8
 80009da:	408c      	lsls	r4, r1
 80009dc:	0264      	lsls	r4, r4, #9
 80009de:	0a64      	lsrs	r4, r4, #9
 80009e0:	b2d8      	uxtb	r0, r3
 80009e2:	e001      	b.n	80009e8 <__aeabi_ui2f+0x28>
 80009e4:	2000      	movs	r0, #0
 80009e6:	2400      	movs	r4, #0
 80009e8:	05c0      	lsls	r0, r0, #23
 80009ea:	4320      	orrs	r0, r4
 80009ec:	bd70      	pop	{r4, r5, r6, pc}
 80009ee:	2b99      	cmp	r3, #153	@ 0x99
 80009f0:	dc16      	bgt.n	8000a20 <__aeabi_ui2f+0x60>
 80009f2:	1f42      	subs	r2, r0, #5
 80009f4:	2805      	cmp	r0, #5
 80009f6:	d000      	beq.n	80009fa <__aeabi_ui2f+0x3a>
 80009f8:	4094      	lsls	r4, r2
 80009fa:	0022      	movs	r2, r4
 80009fc:	4810      	ldr	r0, [pc, #64]	@ (8000a40 <__aeabi_ui2f+0x80>)
 80009fe:	4002      	ands	r2, r0
 8000a00:	0765      	lsls	r5, r4, #29
 8000a02:	d009      	beq.n	8000a18 <__aeabi_ui2f+0x58>
 8000a04:	250f      	movs	r5, #15
 8000a06:	402c      	ands	r4, r5
 8000a08:	2c04      	cmp	r4, #4
 8000a0a:	d005      	beq.n	8000a18 <__aeabi_ui2f+0x58>
 8000a0c:	3204      	adds	r2, #4
 8000a0e:	0154      	lsls	r4, r2, #5
 8000a10:	d502      	bpl.n	8000a18 <__aeabi_ui2f+0x58>
 8000a12:	239f      	movs	r3, #159	@ 0x9f
 8000a14:	4002      	ands	r2, r0
 8000a16:	1a5b      	subs	r3, r3, r1
 8000a18:	0192      	lsls	r2, r2, #6
 8000a1a:	0a54      	lsrs	r4, r2, #9
 8000a1c:	b2d8      	uxtb	r0, r3
 8000a1e:	e7e3      	b.n	80009e8 <__aeabi_ui2f+0x28>
 8000a20:	0002      	movs	r2, r0
 8000a22:	0020      	movs	r0, r4
 8000a24:	321b      	adds	r2, #27
 8000a26:	4090      	lsls	r0, r2
 8000a28:	0002      	movs	r2, r0
 8000a2a:	1e50      	subs	r0, r2, #1
 8000a2c:	4182      	sbcs	r2, r0
 8000a2e:	2005      	movs	r0, #5
 8000a30:	1a40      	subs	r0, r0, r1
 8000a32:	40c4      	lsrs	r4, r0
 8000a34:	4314      	orrs	r4, r2
 8000a36:	e7e0      	b.n	80009fa <__aeabi_ui2f+0x3a>
 8000a38:	0264      	lsls	r4, r4, #9
 8000a3a:	2096      	movs	r0, #150	@ 0x96
 8000a3c:	0a64      	lsrs	r4, r4, #9
 8000a3e:	e7d3      	b.n	80009e8 <__aeabi_ui2f+0x28>
 8000a40:	fbffffff 	.word	0xfbffffff

08000a44 <__aeabi_dadd>:
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	4657      	mov	r7, sl
 8000a48:	464e      	mov	r6, r9
 8000a4a:	4645      	mov	r5, r8
 8000a4c:	46de      	mov	lr, fp
 8000a4e:	b5e0      	push	{r5, r6, r7, lr}
 8000a50:	b083      	sub	sp, #12
 8000a52:	9000      	str	r0, [sp, #0]
 8000a54:	9101      	str	r1, [sp, #4]
 8000a56:	030c      	lsls	r4, r1, #12
 8000a58:	004f      	lsls	r7, r1, #1
 8000a5a:	0fce      	lsrs	r6, r1, #31
 8000a5c:	0a61      	lsrs	r1, r4, #9
 8000a5e:	9c00      	ldr	r4, [sp, #0]
 8000a60:	031d      	lsls	r5, r3, #12
 8000a62:	0f64      	lsrs	r4, r4, #29
 8000a64:	430c      	orrs	r4, r1
 8000a66:	9900      	ldr	r1, [sp, #0]
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	00c8      	lsls	r0, r1, #3
 8000a6e:	0059      	lsls	r1, r3, #1
 8000a70:	0d4b      	lsrs	r3, r1, #21
 8000a72:	4699      	mov	r9, r3
 8000a74:	9a00      	ldr	r2, [sp, #0]
 8000a76:	9b01      	ldr	r3, [sp, #4]
 8000a78:	0a6d      	lsrs	r5, r5, #9
 8000a7a:	0fd9      	lsrs	r1, r3, #31
 8000a7c:	0f53      	lsrs	r3, r2, #29
 8000a7e:	432b      	orrs	r3, r5
 8000a80:	469a      	mov	sl, r3
 8000a82:	9b00      	ldr	r3, [sp, #0]
 8000a84:	0d7f      	lsrs	r7, r7, #21
 8000a86:	00da      	lsls	r2, r3, #3
 8000a88:	4694      	mov	ip, r2
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	46b0      	mov	r8, r6
 8000a8e:	1aba      	subs	r2, r7, r2
 8000a90:	428e      	cmp	r6, r1
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dadd+0x52>
 8000a94:	e0b0      	b.n	8000bf8 <__aeabi_dadd+0x1b4>
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	dc00      	bgt.n	8000a9c <__aeabi_dadd+0x58>
 8000a9a:	e078      	b.n	8000b8e <__aeabi_dadd+0x14a>
 8000a9c:	4649      	mov	r1, r9
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x60>
 8000aa2:	e0e9      	b.n	8000c78 <__aeabi_dadd+0x234>
 8000aa4:	49c9      	ldr	r1, [pc, #804]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000aa6:	428f      	cmp	r7, r1
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dadd+0x68>
 8000aaa:	e195      	b.n	8000dd8 <__aeabi_dadd+0x394>
 8000aac:	2501      	movs	r5, #1
 8000aae:	2a38      	cmp	r2, #56	@ 0x38
 8000ab0:	dc16      	bgt.n	8000ae0 <__aeabi_dadd+0x9c>
 8000ab2:	2180      	movs	r1, #128	@ 0x80
 8000ab4:	4653      	mov	r3, sl
 8000ab6:	0409      	lsls	r1, r1, #16
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	469a      	mov	sl, r3
 8000abc:	2a1f      	cmp	r2, #31
 8000abe:	dd00      	ble.n	8000ac2 <__aeabi_dadd+0x7e>
 8000ac0:	e1e7      	b.n	8000e92 <__aeabi_dadd+0x44e>
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4655      	mov	r5, sl
 8000ac6:	1a8b      	subs	r3, r1, r2
 8000ac8:	4661      	mov	r1, ip
 8000aca:	409d      	lsls	r5, r3
 8000acc:	40d1      	lsrs	r1, r2
 8000ace:	430d      	orrs	r5, r1
 8000ad0:	4661      	mov	r1, ip
 8000ad2:	4099      	lsls	r1, r3
 8000ad4:	1e4b      	subs	r3, r1, #1
 8000ad6:	4199      	sbcs	r1, r3
 8000ad8:	4653      	mov	r3, sl
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	430d      	orrs	r5, r1
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	1b45      	subs	r5, r0, r5
 8000ae2:	42a8      	cmp	r0, r5
 8000ae4:	4180      	sbcs	r0, r0
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	1a24      	subs	r4, r4, r0
 8000aea:	0223      	lsls	r3, r4, #8
 8000aec:	d400      	bmi.n	8000af0 <__aeabi_dadd+0xac>
 8000aee:	e10f      	b.n	8000d10 <__aeabi_dadd+0x2cc>
 8000af0:	0264      	lsls	r4, r4, #9
 8000af2:	0a64      	lsrs	r4, r4, #9
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_dadd+0xb6>
 8000af8:	e139      	b.n	8000d6e <__aeabi_dadd+0x32a>
 8000afa:	0020      	movs	r0, r4
 8000afc:	f001 fe5e 	bl	80027bc <__clzsi2>
 8000b00:	0003      	movs	r3, r0
 8000b02:	3b08      	subs	r3, #8
 8000b04:	2120      	movs	r1, #32
 8000b06:	0028      	movs	r0, r5
 8000b08:	1aca      	subs	r2, r1, r3
 8000b0a:	40d0      	lsrs	r0, r2
 8000b0c:	409c      	lsls	r4, r3
 8000b0e:	0002      	movs	r2, r0
 8000b10:	409d      	lsls	r5, r3
 8000b12:	4322      	orrs	r2, r4
 8000b14:	429f      	cmp	r7, r3
 8000b16:	dd00      	ble.n	8000b1a <__aeabi_dadd+0xd6>
 8000b18:	e173      	b.n	8000e02 <__aeabi_dadd+0x3be>
 8000b1a:	1bd8      	subs	r0, r3, r7
 8000b1c:	3001      	adds	r0, #1
 8000b1e:	1a09      	subs	r1, r1, r0
 8000b20:	002c      	movs	r4, r5
 8000b22:	408d      	lsls	r5, r1
 8000b24:	40c4      	lsrs	r4, r0
 8000b26:	1e6b      	subs	r3, r5, #1
 8000b28:	419d      	sbcs	r5, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	40c2      	lsrs	r2, r0
 8000b2e:	408b      	lsls	r3, r1
 8000b30:	4325      	orrs	r5, r4
 8000b32:	2700      	movs	r7, #0
 8000b34:	0014      	movs	r4, r2
 8000b36:	431d      	orrs	r5, r3
 8000b38:	076b      	lsls	r3, r5, #29
 8000b3a:	d009      	beq.n	8000b50 <__aeabi_dadd+0x10c>
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	402b      	ands	r3, r5
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	d005      	beq.n	8000b50 <__aeabi_dadd+0x10c>
 8000b44:	1d2b      	adds	r3, r5, #4
 8000b46:	42ab      	cmp	r3, r5
 8000b48:	41ad      	sbcs	r5, r5
 8000b4a:	426d      	negs	r5, r5
 8000b4c:	1964      	adds	r4, r4, r5
 8000b4e:	001d      	movs	r5, r3
 8000b50:	0223      	lsls	r3, r4, #8
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_dadd+0x112>
 8000b54:	e12d      	b.n	8000db2 <__aeabi_dadd+0x36e>
 8000b56:	4a9d      	ldr	r2, [pc, #628]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000b58:	3701      	adds	r7, #1
 8000b5a:	4297      	cmp	r7, r2
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_dadd+0x11c>
 8000b5e:	e0d3      	b.n	8000d08 <__aeabi_dadd+0x2c4>
 8000b60:	4646      	mov	r6, r8
 8000b62:	499b      	ldr	r1, [pc, #620]	@ (8000dd0 <__aeabi_dadd+0x38c>)
 8000b64:	08ed      	lsrs	r5, r5, #3
 8000b66:	4021      	ands	r1, r4
 8000b68:	074a      	lsls	r2, r1, #29
 8000b6a:	432a      	orrs	r2, r5
 8000b6c:	057c      	lsls	r4, r7, #21
 8000b6e:	024d      	lsls	r5, r1, #9
 8000b70:	0b2d      	lsrs	r5, r5, #12
 8000b72:	0d64      	lsrs	r4, r4, #21
 8000b74:	0524      	lsls	r4, r4, #20
 8000b76:	432c      	orrs	r4, r5
 8000b78:	07f6      	lsls	r6, r6, #31
 8000b7a:	4334      	orrs	r4, r6
 8000b7c:	0010      	movs	r0, r2
 8000b7e:	0021      	movs	r1, r4
 8000b80:	b003      	add	sp, #12
 8000b82:	bcf0      	pop	{r4, r5, r6, r7}
 8000b84:	46bb      	mov	fp, r7
 8000b86:	46b2      	mov	sl, r6
 8000b88:	46a9      	mov	r9, r5
 8000b8a:	46a0      	mov	r8, r4
 8000b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x150>
 8000b92:	e084      	b.n	8000c9e <__aeabi_dadd+0x25a>
 8000b94:	464a      	mov	r2, r9
 8000b96:	1bd2      	subs	r2, r2, r7
 8000b98:	2f00      	cmp	r7, #0
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dadd+0x15a>
 8000b9c:	e16d      	b.n	8000e7a <__aeabi_dadd+0x436>
 8000b9e:	0025      	movs	r5, r4
 8000ba0:	4305      	orrs	r5, r0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x162>
 8000ba4:	e127      	b.n	8000df6 <__aeabi_dadd+0x3b2>
 8000ba6:	1e56      	subs	r6, r2, #1
 8000ba8:	2a01      	cmp	r2, #1
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x16a>
 8000bac:	e23b      	b.n	8001026 <__aeabi_dadd+0x5e2>
 8000bae:	4d87      	ldr	r5, [pc, #540]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000bb0:	42aa      	cmp	r2, r5
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dadd+0x172>
 8000bb4:	e26a      	b.n	800108c <__aeabi_dadd+0x648>
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	2e38      	cmp	r6, #56	@ 0x38
 8000bba:	dc12      	bgt.n	8000be2 <__aeabi_dadd+0x19e>
 8000bbc:	0032      	movs	r2, r6
 8000bbe:	2a1f      	cmp	r2, #31
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_dadd+0x180>
 8000bc2:	e1f8      	b.n	8000fb6 <__aeabi_dadd+0x572>
 8000bc4:	2620      	movs	r6, #32
 8000bc6:	0025      	movs	r5, r4
 8000bc8:	1ab6      	subs	r6, r6, r2
 8000bca:	0007      	movs	r7, r0
 8000bcc:	4653      	mov	r3, sl
 8000bce:	40b0      	lsls	r0, r6
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	40b5      	lsls	r5, r6
 8000bd4:	40d7      	lsrs	r7, r2
 8000bd6:	1e46      	subs	r6, r0, #1
 8000bd8:	41b0      	sbcs	r0, r6
 8000bda:	1b1b      	subs	r3, r3, r4
 8000bdc:	469a      	mov	sl, r3
 8000bde:	433d      	orrs	r5, r7
 8000be0:	4305      	orrs	r5, r0
 8000be2:	4662      	mov	r2, ip
 8000be4:	1b55      	subs	r5, r2, r5
 8000be6:	45ac      	cmp	ip, r5
 8000be8:	4192      	sbcs	r2, r2
 8000bea:	4653      	mov	r3, sl
 8000bec:	4252      	negs	r2, r2
 8000bee:	000e      	movs	r6, r1
 8000bf0:	464f      	mov	r7, r9
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	1a9c      	subs	r4, r3, r2
 8000bf6:	e778      	b.n	8000aea <__aeabi_dadd+0xa6>
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	dc00      	bgt.n	8000bfe <__aeabi_dadd+0x1ba>
 8000bfc:	e08e      	b.n	8000d1c <__aeabi_dadd+0x2d8>
 8000bfe:	4649      	mov	r1, r9
 8000c00:	2900      	cmp	r1, #0
 8000c02:	d175      	bne.n	8000cf0 <__aeabi_dadd+0x2ac>
 8000c04:	4661      	mov	r1, ip
 8000c06:	4653      	mov	r3, sl
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dadd+0x1ca>
 8000c0c:	e0f6      	b.n	8000dfc <__aeabi_dadd+0x3b8>
 8000c0e:	1e51      	subs	r1, r2, #1
 8000c10:	2a01      	cmp	r2, #1
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dadd+0x1d2>
 8000c14:	e191      	b.n	8000f3a <__aeabi_dadd+0x4f6>
 8000c16:	4d6d      	ldr	r5, [pc, #436]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000c18:	42aa      	cmp	r2, r5
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x1da>
 8000c1c:	e0dc      	b.n	8000dd8 <__aeabi_dadd+0x394>
 8000c1e:	2501      	movs	r5, #1
 8000c20:	2938      	cmp	r1, #56	@ 0x38
 8000c22:	dc14      	bgt.n	8000c4e <__aeabi_dadd+0x20a>
 8000c24:	000a      	movs	r2, r1
 8000c26:	2a1f      	cmp	r2, #31
 8000c28:	dd00      	ble.n	8000c2c <__aeabi_dadd+0x1e8>
 8000c2a:	e1a2      	b.n	8000f72 <__aeabi_dadd+0x52e>
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4653      	mov	r3, sl
 8000c30:	1a89      	subs	r1, r1, r2
 8000c32:	408b      	lsls	r3, r1
 8000c34:	001d      	movs	r5, r3
 8000c36:	4663      	mov	r3, ip
 8000c38:	40d3      	lsrs	r3, r2
 8000c3a:	431d      	orrs	r5, r3
 8000c3c:	4663      	mov	r3, ip
 8000c3e:	408b      	lsls	r3, r1
 8000c40:	0019      	movs	r1, r3
 8000c42:	1e4b      	subs	r3, r1, #1
 8000c44:	4199      	sbcs	r1, r3
 8000c46:	4653      	mov	r3, sl
 8000c48:	40d3      	lsrs	r3, r2
 8000c4a:	430d      	orrs	r5, r1
 8000c4c:	18e4      	adds	r4, r4, r3
 8000c4e:	182d      	adds	r5, r5, r0
 8000c50:	4285      	cmp	r5, r0
 8000c52:	4180      	sbcs	r0, r0
 8000c54:	4240      	negs	r0, r0
 8000c56:	1824      	adds	r4, r4, r0
 8000c58:	0223      	lsls	r3, r4, #8
 8000c5a:	d559      	bpl.n	8000d10 <__aeabi_dadd+0x2cc>
 8000c5c:	4b5b      	ldr	r3, [pc, #364]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000c5e:	3701      	adds	r7, #1
 8000c60:	429f      	cmp	r7, r3
 8000c62:	d051      	beq.n	8000d08 <__aeabi_dadd+0x2c4>
 8000c64:	2101      	movs	r1, #1
 8000c66:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd0 <__aeabi_dadd+0x38c>)
 8000c68:	086a      	lsrs	r2, r5, #1
 8000c6a:	401c      	ands	r4, r3
 8000c6c:	4029      	ands	r1, r5
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	07e5      	lsls	r5, r4, #31
 8000c72:	4315      	orrs	r5, r2
 8000c74:	0864      	lsrs	r4, r4, #1
 8000c76:	e75f      	b.n	8000b38 <__aeabi_dadd+0xf4>
 8000c78:	4661      	mov	r1, ip
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x23e>
 8000c80:	e0bc      	b.n	8000dfc <__aeabi_dadd+0x3b8>
 8000c82:	1e51      	subs	r1, r2, #1
 8000c84:	2a01      	cmp	r2, #1
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x246>
 8000c88:	e164      	b.n	8000f54 <__aeabi_dadd+0x510>
 8000c8a:	4d50      	ldr	r5, [pc, #320]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000c8c:	42aa      	cmp	r2, r5
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x24e>
 8000c90:	e16a      	b.n	8000f68 <__aeabi_dadd+0x524>
 8000c92:	2501      	movs	r5, #1
 8000c94:	2938      	cmp	r1, #56	@ 0x38
 8000c96:	dd00      	ble.n	8000c9a <__aeabi_dadd+0x256>
 8000c98:	e722      	b.n	8000ae0 <__aeabi_dadd+0x9c>
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	e70e      	b.n	8000abc <__aeabi_dadd+0x78>
 8000c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8000dd4 <__aeabi_dadd+0x390>)
 8000ca0:	1c7d      	adds	r5, r7, #1
 8000ca2:	4215      	tst	r5, r2
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dadd+0x264>
 8000ca6:	e0d0      	b.n	8000e4a <__aeabi_dadd+0x406>
 8000ca8:	0025      	movs	r5, r4
 8000caa:	4662      	mov	r2, ip
 8000cac:	4653      	mov	r3, sl
 8000cae:	4305      	orrs	r5, r0
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	2f00      	cmp	r7, #0
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_dadd+0x274>
 8000cb6:	e137      	b.n	8000f28 <__aeabi_dadd+0x4e4>
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x27a>
 8000cbc:	e1a8      	b.n	8001010 <__aeabi_dadd+0x5cc>
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dadd+0x280>
 8000cc2:	e16a      	b.n	8000f9a <__aeabi_dadd+0x556>
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	1ac5      	subs	r5, r0, r3
 8000cc8:	4653      	mov	r3, sl
 8000cca:	1ae2      	subs	r2, r4, r3
 8000ccc:	42a8      	cmp	r0, r5
 8000cce:	419b      	sbcs	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	021a      	lsls	r2, r3, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dadd+0x296>
 8000cd8:	e203      	b.n	80010e2 <__aeabi_dadd+0x69e>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	1a1d      	subs	r5, r3, r0
 8000cde:	45ac      	cmp	ip, r5
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	1b1c      	subs	r4, r3, r4
 8000ce8:	000e      	movs	r6, r1
 8000cea:	4688      	mov	r8, r1
 8000cec:	1aa4      	subs	r4, r4, r2
 8000cee:	e723      	b.n	8000b38 <__aeabi_dadd+0xf4>
 8000cf0:	4936      	ldr	r1, [pc, #216]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000cf2:	428f      	cmp	r7, r1
 8000cf4:	d070      	beq.n	8000dd8 <__aeabi_dadd+0x394>
 8000cf6:	2501      	movs	r5, #1
 8000cf8:	2a38      	cmp	r2, #56	@ 0x38
 8000cfa:	dca8      	bgt.n	8000c4e <__aeabi_dadd+0x20a>
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	4653      	mov	r3, sl
 8000d00:	0409      	lsls	r1, r1, #16
 8000d02:	430b      	orrs	r3, r1
 8000d04:	469a      	mov	sl, r3
 8000d06:	e78e      	b.n	8000c26 <__aeabi_dadd+0x1e2>
 8000d08:	003c      	movs	r4, r7
 8000d0a:	2500      	movs	r5, #0
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	e731      	b.n	8000b74 <__aeabi_dadd+0x130>
 8000d10:	2307      	movs	r3, #7
 8000d12:	402b      	ands	r3, r5
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d000      	beq.n	8000d1a <__aeabi_dadd+0x2d6>
 8000d18:	e710      	b.n	8000b3c <__aeabi_dadd+0xf8>
 8000d1a:	e093      	b.n	8000e44 <__aeabi_dadd+0x400>
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	d074      	beq.n	8000e0a <__aeabi_dadd+0x3c6>
 8000d20:	464a      	mov	r2, r9
 8000d22:	1bd2      	subs	r2, r2, r7
 8000d24:	2f00      	cmp	r7, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x2e6>
 8000d28:	e0c7      	b.n	8000eba <__aeabi_dadd+0x476>
 8000d2a:	4928      	ldr	r1, [pc, #160]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000d2c:	4589      	cmp	r9, r1
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x2ee>
 8000d30:	e185      	b.n	800103e <__aeabi_dadd+0x5fa>
 8000d32:	2501      	movs	r5, #1
 8000d34:	2a38      	cmp	r2, #56	@ 0x38
 8000d36:	dc12      	bgt.n	8000d5e <__aeabi_dadd+0x31a>
 8000d38:	2180      	movs	r1, #128	@ 0x80
 8000d3a:	0409      	lsls	r1, r1, #16
 8000d3c:	430c      	orrs	r4, r1
 8000d3e:	2a1f      	cmp	r2, #31
 8000d40:	dd00      	ble.n	8000d44 <__aeabi_dadd+0x300>
 8000d42:	e1ab      	b.n	800109c <__aeabi_dadd+0x658>
 8000d44:	2120      	movs	r1, #32
 8000d46:	0025      	movs	r5, r4
 8000d48:	1a89      	subs	r1, r1, r2
 8000d4a:	0007      	movs	r7, r0
 8000d4c:	4088      	lsls	r0, r1
 8000d4e:	408d      	lsls	r5, r1
 8000d50:	40d7      	lsrs	r7, r2
 8000d52:	1e41      	subs	r1, r0, #1
 8000d54:	4188      	sbcs	r0, r1
 8000d56:	40d4      	lsrs	r4, r2
 8000d58:	433d      	orrs	r5, r7
 8000d5a:	4305      	orrs	r5, r0
 8000d5c:	44a2      	add	sl, r4
 8000d5e:	4465      	add	r5, ip
 8000d60:	4565      	cmp	r5, ip
 8000d62:	4192      	sbcs	r2, r2
 8000d64:	4252      	negs	r2, r2
 8000d66:	4452      	add	r2, sl
 8000d68:	0014      	movs	r4, r2
 8000d6a:	464f      	mov	r7, r9
 8000d6c:	e774      	b.n	8000c58 <__aeabi_dadd+0x214>
 8000d6e:	0028      	movs	r0, r5
 8000d70:	f001 fd24 	bl	80027bc <__clzsi2>
 8000d74:	0003      	movs	r3, r0
 8000d76:	3318      	adds	r3, #24
 8000d78:	2b1f      	cmp	r3, #31
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_dadd+0x33a>
 8000d7c:	e6c2      	b.n	8000b04 <__aeabi_dadd+0xc0>
 8000d7e:	002a      	movs	r2, r5
 8000d80:	3808      	subs	r0, #8
 8000d82:	4082      	lsls	r2, r0
 8000d84:	429f      	cmp	r7, r3
 8000d86:	dd00      	ble.n	8000d8a <__aeabi_dadd+0x346>
 8000d88:	e0a9      	b.n	8000ede <__aeabi_dadd+0x49a>
 8000d8a:	1bdb      	subs	r3, r3, r7
 8000d8c:	1c58      	adds	r0, r3, #1
 8000d8e:	281f      	cmp	r0, #31
 8000d90:	dc00      	bgt.n	8000d94 <__aeabi_dadd+0x350>
 8000d92:	e1ac      	b.n	80010ee <__aeabi_dadd+0x6aa>
 8000d94:	0015      	movs	r5, r2
 8000d96:	3b1f      	subs	r3, #31
 8000d98:	40dd      	lsrs	r5, r3
 8000d9a:	2820      	cmp	r0, #32
 8000d9c:	d005      	beq.n	8000daa <__aeabi_dadd+0x366>
 8000d9e:	2340      	movs	r3, #64	@ 0x40
 8000da0:	1a1b      	subs	r3, r3, r0
 8000da2:	409a      	lsls	r2, r3
 8000da4:	1e53      	subs	r3, r2, #1
 8000da6:	419a      	sbcs	r2, r3
 8000da8:	4315      	orrs	r5, r2
 8000daa:	2307      	movs	r3, #7
 8000dac:	2700      	movs	r7, #0
 8000dae:	402b      	ands	r3, r5
 8000db0:	e7b0      	b.n	8000d14 <__aeabi_dadd+0x2d0>
 8000db2:	08ed      	lsrs	r5, r5, #3
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <__aeabi_dadd+0x388>)
 8000db6:	0762      	lsls	r2, r4, #29
 8000db8:	432a      	orrs	r2, r5
 8000dba:	08e4      	lsrs	r4, r4, #3
 8000dbc:	429f      	cmp	r7, r3
 8000dbe:	d00f      	beq.n	8000de0 <__aeabi_dadd+0x39c>
 8000dc0:	0324      	lsls	r4, r4, #12
 8000dc2:	0b25      	lsrs	r5, r4, #12
 8000dc4:	057c      	lsls	r4, r7, #21
 8000dc6:	0d64      	lsrs	r4, r4, #21
 8000dc8:	e6d4      	b.n	8000b74 <__aeabi_dadd+0x130>
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	ff7fffff 	.word	0xff7fffff
 8000dd4:	000007fe 	.word	0x000007fe
 8000dd8:	08c0      	lsrs	r0, r0, #3
 8000dda:	0762      	lsls	r2, r4, #29
 8000ddc:	4302      	orrs	r2, r0
 8000dde:	08e4      	lsrs	r4, r4, #3
 8000de0:	0013      	movs	r3, r2
 8000de2:	4323      	orrs	r3, r4
 8000de4:	d100      	bne.n	8000de8 <__aeabi_dadd+0x3a4>
 8000de6:	e186      	b.n	80010f6 <__aeabi_dadd+0x6b2>
 8000de8:	2580      	movs	r5, #128	@ 0x80
 8000dea:	032d      	lsls	r5, r5, #12
 8000dec:	4325      	orrs	r5, r4
 8000dee:	032d      	lsls	r5, r5, #12
 8000df0:	4cc3      	ldr	r4, [pc, #780]	@ (8001100 <__aeabi_dadd+0x6bc>)
 8000df2:	0b2d      	lsrs	r5, r5, #12
 8000df4:	e6be      	b.n	8000b74 <__aeabi_dadd+0x130>
 8000df6:	4660      	mov	r0, ip
 8000df8:	4654      	mov	r4, sl
 8000dfa:	000e      	movs	r6, r1
 8000dfc:	0017      	movs	r7, r2
 8000dfe:	08c5      	lsrs	r5, r0, #3
 8000e00:	e7d8      	b.n	8000db4 <__aeabi_dadd+0x370>
 8000e02:	4cc0      	ldr	r4, [pc, #768]	@ (8001104 <__aeabi_dadd+0x6c0>)
 8000e04:	1aff      	subs	r7, r7, r3
 8000e06:	4014      	ands	r4, r2
 8000e08:	e696      	b.n	8000b38 <__aeabi_dadd+0xf4>
 8000e0a:	4abf      	ldr	r2, [pc, #764]	@ (8001108 <__aeabi_dadd+0x6c4>)
 8000e0c:	1c79      	adds	r1, r7, #1
 8000e0e:	4211      	tst	r1, r2
 8000e10:	d16b      	bne.n	8000eea <__aeabi_dadd+0x4a6>
 8000e12:	0022      	movs	r2, r4
 8000e14:	4302      	orrs	r2, r0
 8000e16:	2f00      	cmp	r7, #0
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dadd+0x3d8>
 8000e1a:	e0db      	b.n	8000fd4 <__aeabi_dadd+0x590>
 8000e1c:	2a00      	cmp	r2, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dadd+0x3de>
 8000e20:	e12d      	b.n	800107e <__aeabi_dadd+0x63a>
 8000e22:	4662      	mov	r2, ip
 8000e24:	4653      	mov	r3, sl
 8000e26:	431a      	orrs	r2, r3
 8000e28:	d100      	bne.n	8000e2c <__aeabi_dadd+0x3e8>
 8000e2a:	e0b6      	b.n	8000f9a <__aeabi_dadd+0x556>
 8000e2c:	4663      	mov	r3, ip
 8000e2e:	18c5      	adds	r5, r0, r3
 8000e30:	4285      	cmp	r5, r0
 8000e32:	4180      	sbcs	r0, r0
 8000e34:	4454      	add	r4, sl
 8000e36:	4240      	negs	r0, r0
 8000e38:	1824      	adds	r4, r4, r0
 8000e3a:	0223      	lsls	r3, r4, #8
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_dadd+0x400>
 8000e3e:	000f      	movs	r7, r1
 8000e40:	4bb0      	ldr	r3, [pc, #704]	@ (8001104 <__aeabi_dadd+0x6c0>)
 8000e42:	401c      	ands	r4, r3
 8000e44:	003a      	movs	r2, r7
 8000e46:	0028      	movs	r0, r5
 8000e48:	e7d8      	b.n	8000dfc <__aeabi_dadd+0x3b8>
 8000e4a:	4662      	mov	r2, ip
 8000e4c:	1a85      	subs	r5, r0, r2
 8000e4e:	42a8      	cmp	r0, r5
 8000e50:	4192      	sbcs	r2, r2
 8000e52:	4653      	mov	r3, sl
 8000e54:	4252      	negs	r2, r2
 8000e56:	4691      	mov	r9, r2
 8000e58:	1ae3      	subs	r3, r4, r3
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	464b      	mov	r3, r9
 8000e5e:	1ad2      	subs	r2, r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	4691      	mov	r9, r2
 8000e64:	021a      	lsls	r2, r3, #8
 8000e66:	d454      	bmi.n	8000f12 <__aeabi_dadd+0x4ce>
 8000e68:	464a      	mov	r2, r9
 8000e6a:	464c      	mov	r4, r9
 8000e6c:	432a      	orrs	r2, r5
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_dadd+0x42e>
 8000e70:	e640      	b.n	8000af4 <__aeabi_dadd+0xb0>
 8000e72:	2600      	movs	r6, #0
 8000e74:	2400      	movs	r4, #0
 8000e76:	2500      	movs	r5, #0
 8000e78:	e67c      	b.n	8000b74 <__aeabi_dadd+0x130>
 8000e7a:	4da1      	ldr	r5, [pc, #644]	@ (8001100 <__aeabi_dadd+0x6bc>)
 8000e7c:	45a9      	cmp	r9, r5
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_dadd+0x43e>
 8000e80:	e090      	b.n	8000fa4 <__aeabi_dadd+0x560>
 8000e82:	2501      	movs	r5, #1
 8000e84:	2a38      	cmp	r2, #56	@ 0x38
 8000e86:	dd00      	ble.n	8000e8a <__aeabi_dadd+0x446>
 8000e88:	e6ab      	b.n	8000be2 <__aeabi_dadd+0x19e>
 8000e8a:	2580      	movs	r5, #128	@ 0x80
 8000e8c:	042d      	lsls	r5, r5, #16
 8000e8e:	432c      	orrs	r4, r5
 8000e90:	e695      	b.n	8000bbe <__aeabi_dadd+0x17a>
 8000e92:	0011      	movs	r1, r2
 8000e94:	4655      	mov	r5, sl
 8000e96:	3920      	subs	r1, #32
 8000e98:	40cd      	lsrs	r5, r1
 8000e9a:	46a9      	mov	r9, r5
 8000e9c:	2a20      	cmp	r2, #32
 8000e9e:	d006      	beq.n	8000eae <__aeabi_dadd+0x46a>
 8000ea0:	2140      	movs	r1, #64	@ 0x40
 8000ea2:	4653      	mov	r3, sl
 8000ea4:	1a8a      	subs	r2, r1, r2
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	4662      	mov	r2, ip
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	4694      	mov	ip, r2
 8000eae:	4665      	mov	r5, ip
 8000eb0:	1e6b      	subs	r3, r5, #1
 8000eb2:	419d      	sbcs	r5, r3
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	431d      	orrs	r5, r3
 8000eb8:	e612      	b.n	8000ae0 <__aeabi_dadd+0x9c>
 8000eba:	0021      	movs	r1, r4
 8000ebc:	4301      	orrs	r1, r0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_dadd+0x47e>
 8000ec0:	e0c4      	b.n	800104c <__aeabi_dadd+0x608>
 8000ec2:	1e51      	subs	r1, r2, #1
 8000ec4:	2a01      	cmp	r2, #1
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dadd+0x486>
 8000ec8:	e0fb      	b.n	80010c2 <__aeabi_dadd+0x67e>
 8000eca:	4d8d      	ldr	r5, [pc, #564]	@ (8001100 <__aeabi_dadd+0x6bc>)
 8000ecc:	42aa      	cmp	r2, r5
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_dadd+0x48e>
 8000ed0:	e0b5      	b.n	800103e <__aeabi_dadd+0x5fa>
 8000ed2:	2501      	movs	r5, #1
 8000ed4:	2938      	cmp	r1, #56	@ 0x38
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_dadd+0x496>
 8000ed8:	e741      	b.n	8000d5e <__aeabi_dadd+0x31a>
 8000eda:	000a      	movs	r2, r1
 8000edc:	e72f      	b.n	8000d3e <__aeabi_dadd+0x2fa>
 8000ede:	4c89      	ldr	r4, [pc, #548]	@ (8001104 <__aeabi_dadd+0x6c0>)
 8000ee0:	1aff      	subs	r7, r7, r3
 8000ee2:	4014      	ands	r4, r2
 8000ee4:	0762      	lsls	r2, r4, #29
 8000ee6:	08e4      	lsrs	r4, r4, #3
 8000ee8:	e76a      	b.n	8000dc0 <__aeabi_dadd+0x37c>
 8000eea:	4a85      	ldr	r2, [pc, #532]	@ (8001100 <__aeabi_dadd+0x6bc>)
 8000eec:	4291      	cmp	r1, r2
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dadd+0x4ae>
 8000ef0:	e0e3      	b.n	80010ba <__aeabi_dadd+0x676>
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	18c2      	adds	r2, r0, r3
 8000ef6:	4282      	cmp	r2, r0
 8000ef8:	4180      	sbcs	r0, r0
 8000efa:	0023      	movs	r3, r4
 8000efc:	4240      	negs	r0, r0
 8000efe:	4453      	add	r3, sl
 8000f00:	181b      	adds	r3, r3, r0
 8000f02:	07dd      	lsls	r5, r3, #31
 8000f04:	085c      	lsrs	r4, r3, #1
 8000f06:	2307      	movs	r3, #7
 8000f08:	0852      	lsrs	r2, r2, #1
 8000f0a:	4315      	orrs	r5, r2
 8000f0c:	000f      	movs	r7, r1
 8000f0e:	402b      	ands	r3, r5
 8000f10:	e700      	b.n	8000d14 <__aeabi_dadd+0x2d0>
 8000f12:	4663      	mov	r3, ip
 8000f14:	1a1d      	subs	r5, r3, r0
 8000f16:	45ac      	cmp	ip, r5
 8000f18:	4192      	sbcs	r2, r2
 8000f1a:	4653      	mov	r3, sl
 8000f1c:	4252      	negs	r2, r2
 8000f1e:	1b1c      	subs	r4, r3, r4
 8000f20:	000e      	movs	r6, r1
 8000f22:	4688      	mov	r8, r1
 8000f24:	1aa4      	subs	r4, r4, r2
 8000f26:	e5e5      	b.n	8000af4 <__aeabi_dadd+0xb0>
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_dadd+0x4ea>
 8000f2c:	e091      	b.n	8001052 <__aeabi_dadd+0x60e>
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d138      	bne.n	8000fa4 <__aeabi_dadd+0x560>
 8000f32:	2480      	movs	r4, #128	@ 0x80
 8000f34:	2600      	movs	r6, #0
 8000f36:	0324      	lsls	r4, r4, #12
 8000f38:	e756      	b.n	8000de8 <__aeabi_dadd+0x3a4>
 8000f3a:	4663      	mov	r3, ip
 8000f3c:	18c5      	adds	r5, r0, r3
 8000f3e:	4285      	cmp	r5, r0
 8000f40:	4180      	sbcs	r0, r0
 8000f42:	4454      	add	r4, sl
 8000f44:	4240      	negs	r0, r0
 8000f46:	1824      	adds	r4, r4, r0
 8000f48:	2701      	movs	r7, #1
 8000f4a:	0223      	lsls	r3, r4, #8
 8000f4c:	d400      	bmi.n	8000f50 <__aeabi_dadd+0x50c>
 8000f4e:	e6df      	b.n	8000d10 <__aeabi_dadd+0x2cc>
 8000f50:	2702      	movs	r7, #2
 8000f52:	e687      	b.n	8000c64 <__aeabi_dadd+0x220>
 8000f54:	4663      	mov	r3, ip
 8000f56:	1ac5      	subs	r5, r0, r3
 8000f58:	42a8      	cmp	r0, r5
 8000f5a:	4180      	sbcs	r0, r0
 8000f5c:	4653      	mov	r3, sl
 8000f5e:	4240      	negs	r0, r0
 8000f60:	1ae4      	subs	r4, r4, r3
 8000f62:	2701      	movs	r7, #1
 8000f64:	1a24      	subs	r4, r4, r0
 8000f66:	e5c0      	b.n	8000aea <__aeabi_dadd+0xa6>
 8000f68:	0762      	lsls	r2, r4, #29
 8000f6a:	08c0      	lsrs	r0, r0, #3
 8000f6c:	4302      	orrs	r2, r0
 8000f6e:	08e4      	lsrs	r4, r4, #3
 8000f70:	e736      	b.n	8000de0 <__aeabi_dadd+0x39c>
 8000f72:	0011      	movs	r1, r2
 8000f74:	4653      	mov	r3, sl
 8000f76:	3920      	subs	r1, #32
 8000f78:	40cb      	lsrs	r3, r1
 8000f7a:	4699      	mov	r9, r3
 8000f7c:	2a20      	cmp	r2, #32
 8000f7e:	d006      	beq.n	8000f8e <__aeabi_dadd+0x54a>
 8000f80:	2140      	movs	r1, #64	@ 0x40
 8000f82:	4653      	mov	r3, sl
 8000f84:	1a8a      	subs	r2, r1, r2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	4662      	mov	r2, ip
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	4694      	mov	ip, r2
 8000f8e:	4665      	mov	r5, ip
 8000f90:	1e6b      	subs	r3, r5, #1
 8000f92:	419d      	sbcs	r5, r3
 8000f94:	464b      	mov	r3, r9
 8000f96:	431d      	orrs	r5, r3
 8000f98:	e659      	b.n	8000c4e <__aeabi_dadd+0x20a>
 8000f9a:	0762      	lsls	r2, r4, #29
 8000f9c:	08c0      	lsrs	r0, r0, #3
 8000f9e:	4302      	orrs	r2, r0
 8000fa0:	08e4      	lsrs	r4, r4, #3
 8000fa2:	e70d      	b.n	8000dc0 <__aeabi_dadd+0x37c>
 8000fa4:	4653      	mov	r3, sl
 8000fa6:	075a      	lsls	r2, r3, #29
 8000fa8:	4663      	mov	r3, ip
 8000faa:	08d8      	lsrs	r0, r3, #3
 8000fac:	4653      	mov	r3, sl
 8000fae:	000e      	movs	r6, r1
 8000fb0:	4302      	orrs	r2, r0
 8000fb2:	08dc      	lsrs	r4, r3, #3
 8000fb4:	e714      	b.n	8000de0 <__aeabi_dadd+0x39c>
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	0026      	movs	r6, r4
 8000fba:	3d20      	subs	r5, #32
 8000fbc:	40ee      	lsrs	r6, r5
 8000fbe:	2a20      	cmp	r2, #32
 8000fc0:	d003      	beq.n	8000fca <__aeabi_dadd+0x586>
 8000fc2:	2540      	movs	r5, #64	@ 0x40
 8000fc4:	1aaa      	subs	r2, r5, r2
 8000fc6:	4094      	lsls	r4, r2
 8000fc8:	4320      	orrs	r0, r4
 8000fca:	1e42      	subs	r2, r0, #1
 8000fcc:	4190      	sbcs	r0, r2
 8000fce:	0005      	movs	r5, r0
 8000fd0:	4335      	orrs	r5, r6
 8000fd2:	e606      	b.n	8000be2 <__aeabi_dadd+0x19e>
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d07c      	beq.n	80010d2 <__aeabi_dadd+0x68e>
 8000fd8:	4662      	mov	r2, ip
 8000fda:	4653      	mov	r3, sl
 8000fdc:	08c0      	lsrs	r0, r0, #3
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dadd+0x5a0>
 8000fe2:	e6fa      	b.n	8000dda <__aeabi_dadd+0x396>
 8000fe4:	0762      	lsls	r2, r4, #29
 8000fe6:	4310      	orrs	r0, r2
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	08e4      	lsrs	r4, r4, #3
 8000fec:	0312      	lsls	r2, r2, #12
 8000fee:	4214      	tst	r4, r2
 8000ff0:	d008      	beq.n	8001004 <__aeabi_dadd+0x5c0>
 8000ff2:	08d9      	lsrs	r1, r3, #3
 8000ff4:	4211      	tst	r1, r2
 8000ff6:	d105      	bne.n	8001004 <__aeabi_dadd+0x5c0>
 8000ff8:	4663      	mov	r3, ip
 8000ffa:	08d8      	lsrs	r0, r3, #3
 8000ffc:	4653      	mov	r3, sl
 8000ffe:	000c      	movs	r4, r1
 8001000:	075b      	lsls	r3, r3, #29
 8001002:	4318      	orrs	r0, r3
 8001004:	0f42      	lsrs	r2, r0, #29
 8001006:	00c0      	lsls	r0, r0, #3
 8001008:	08c0      	lsrs	r0, r0, #3
 800100a:	0752      	lsls	r2, r2, #29
 800100c:	4302      	orrs	r2, r0
 800100e:	e6e7      	b.n	8000de0 <__aeabi_dadd+0x39c>
 8001010:	2a00      	cmp	r2, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_dadd+0x5d2>
 8001014:	e72d      	b.n	8000e72 <__aeabi_dadd+0x42e>
 8001016:	4663      	mov	r3, ip
 8001018:	08d8      	lsrs	r0, r3, #3
 800101a:	4653      	mov	r3, sl
 800101c:	075a      	lsls	r2, r3, #29
 800101e:	000e      	movs	r6, r1
 8001020:	4302      	orrs	r2, r0
 8001022:	08dc      	lsrs	r4, r3, #3
 8001024:	e6cc      	b.n	8000dc0 <__aeabi_dadd+0x37c>
 8001026:	4663      	mov	r3, ip
 8001028:	1a1d      	subs	r5, r3, r0
 800102a:	45ac      	cmp	ip, r5
 800102c:	4192      	sbcs	r2, r2
 800102e:	4653      	mov	r3, sl
 8001030:	4252      	negs	r2, r2
 8001032:	1b1c      	subs	r4, r3, r4
 8001034:	000e      	movs	r6, r1
 8001036:	4688      	mov	r8, r1
 8001038:	1aa4      	subs	r4, r4, r2
 800103a:	3701      	adds	r7, #1
 800103c:	e555      	b.n	8000aea <__aeabi_dadd+0xa6>
 800103e:	4663      	mov	r3, ip
 8001040:	08d9      	lsrs	r1, r3, #3
 8001042:	4653      	mov	r3, sl
 8001044:	075a      	lsls	r2, r3, #29
 8001046:	430a      	orrs	r2, r1
 8001048:	08dc      	lsrs	r4, r3, #3
 800104a:	e6c9      	b.n	8000de0 <__aeabi_dadd+0x39c>
 800104c:	4660      	mov	r0, ip
 800104e:	4654      	mov	r4, sl
 8001050:	e6d4      	b.n	8000dfc <__aeabi_dadd+0x3b8>
 8001052:	08c0      	lsrs	r0, r0, #3
 8001054:	2a00      	cmp	r2, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x616>
 8001058:	e6bf      	b.n	8000dda <__aeabi_dadd+0x396>
 800105a:	0762      	lsls	r2, r4, #29
 800105c:	4310      	orrs	r0, r2
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	08e4      	lsrs	r4, r4, #3
 8001062:	0312      	lsls	r2, r2, #12
 8001064:	4214      	tst	r4, r2
 8001066:	d0cd      	beq.n	8001004 <__aeabi_dadd+0x5c0>
 8001068:	08dd      	lsrs	r5, r3, #3
 800106a:	4215      	tst	r5, r2
 800106c:	d1ca      	bne.n	8001004 <__aeabi_dadd+0x5c0>
 800106e:	4663      	mov	r3, ip
 8001070:	08d8      	lsrs	r0, r3, #3
 8001072:	4653      	mov	r3, sl
 8001074:	075b      	lsls	r3, r3, #29
 8001076:	000e      	movs	r6, r1
 8001078:	002c      	movs	r4, r5
 800107a:	4318      	orrs	r0, r3
 800107c:	e7c2      	b.n	8001004 <__aeabi_dadd+0x5c0>
 800107e:	4663      	mov	r3, ip
 8001080:	08d9      	lsrs	r1, r3, #3
 8001082:	4653      	mov	r3, sl
 8001084:	075a      	lsls	r2, r3, #29
 8001086:	430a      	orrs	r2, r1
 8001088:	08dc      	lsrs	r4, r3, #3
 800108a:	e699      	b.n	8000dc0 <__aeabi_dadd+0x37c>
 800108c:	4663      	mov	r3, ip
 800108e:	08d8      	lsrs	r0, r3, #3
 8001090:	4653      	mov	r3, sl
 8001092:	075a      	lsls	r2, r3, #29
 8001094:	000e      	movs	r6, r1
 8001096:	4302      	orrs	r2, r0
 8001098:	08dc      	lsrs	r4, r3, #3
 800109a:	e6a1      	b.n	8000de0 <__aeabi_dadd+0x39c>
 800109c:	0011      	movs	r1, r2
 800109e:	0027      	movs	r7, r4
 80010a0:	3920      	subs	r1, #32
 80010a2:	40cf      	lsrs	r7, r1
 80010a4:	2a20      	cmp	r2, #32
 80010a6:	d003      	beq.n	80010b0 <__aeabi_dadd+0x66c>
 80010a8:	2140      	movs	r1, #64	@ 0x40
 80010aa:	1a8a      	subs	r2, r1, r2
 80010ac:	4094      	lsls	r4, r2
 80010ae:	4320      	orrs	r0, r4
 80010b0:	1e42      	subs	r2, r0, #1
 80010b2:	4190      	sbcs	r0, r2
 80010b4:	0005      	movs	r5, r0
 80010b6:	433d      	orrs	r5, r7
 80010b8:	e651      	b.n	8000d5e <__aeabi_dadd+0x31a>
 80010ba:	000c      	movs	r4, r1
 80010bc:	2500      	movs	r5, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	e558      	b.n	8000b74 <__aeabi_dadd+0x130>
 80010c2:	4460      	add	r0, ip
 80010c4:	4560      	cmp	r0, ip
 80010c6:	4192      	sbcs	r2, r2
 80010c8:	4454      	add	r4, sl
 80010ca:	4252      	negs	r2, r2
 80010cc:	0005      	movs	r5, r0
 80010ce:	18a4      	adds	r4, r4, r2
 80010d0:	e73a      	b.n	8000f48 <__aeabi_dadd+0x504>
 80010d2:	4653      	mov	r3, sl
 80010d4:	075a      	lsls	r2, r3, #29
 80010d6:	4663      	mov	r3, ip
 80010d8:	08d9      	lsrs	r1, r3, #3
 80010da:	4653      	mov	r3, sl
 80010dc:	430a      	orrs	r2, r1
 80010de:	08dc      	lsrs	r4, r3, #3
 80010e0:	e67e      	b.n	8000de0 <__aeabi_dadd+0x39c>
 80010e2:	001a      	movs	r2, r3
 80010e4:	001c      	movs	r4, r3
 80010e6:	432a      	orrs	r2, r5
 80010e8:	d000      	beq.n	80010ec <__aeabi_dadd+0x6a8>
 80010ea:	e6ab      	b.n	8000e44 <__aeabi_dadd+0x400>
 80010ec:	e6c1      	b.n	8000e72 <__aeabi_dadd+0x42e>
 80010ee:	2120      	movs	r1, #32
 80010f0:	2500      	movs	r5, #0
 80010f2:	1a09      	subs	r1, r1, r0
 80010f4:	e519      	b.n	8000b2a <__aeabi_dadd+0xe6>
 80010f6:	2200      	movs	r2, #0
 80010f8:	2500      	movs	r5, #0
 80010fa:	4c01      	ldr	r4, [pc, #4]	@ (8001100 <__aeabi_dadd+0x6bc>)
 80010fc:	e53a      	b.n	8000b74 <__aeabi_dadd+0x130>
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	000007ff 	.word	0x000007ff
 8001104:	ff7fffff 	.word	0xff7fffff
 8001108:	000007fe 	.word	0x000007fe

0800110c <__aeabi_ddiv>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	46de      	mov	lr, fp
 8001110:	4645      	mov	r5, r8
 8001112:	4657      	mov	r7, sl
 8001114:	464e      	mov	r6, r9
 8001116:	b5e0      	push	{r5, r6, r7, lr}
 8001118:	b087      	sub	sp, #28
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	030b      	lsls	r3, r1, #12
 8001120:	0b1b      	lsrs	r3, r3, #12
 8001122:	469b      	mov	fp, r3
 8001124:	0fca      	lsrs	r2, r1, #31
 8001126:	004b      	lsls	r3, r1, #1
 8001128:	0004      	movs	r4, r0
 800112a:	4680      	mov	r8, r0
 800112c:	0d5b      	lsrs	r3, r3, #21
 800112e:	9202      	str	r2, [sp, #8]
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0x28>
 8001132:	e16a      	b.n	800140a <__aeabi_ddiv+0x2fe>
 8001134:	4ad4      	ldr	r2, [pc, #848]	@ (8001488 <__aeabi_ddiv+0x37c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x30>
 800113a:	e18c      	b.n	8001456 <__aeabi_ddiv+0x34a>
 800113c:	4659      	mov	r1, fp
 800113e:	0f42      	lsrs	r2, r0, #29
 8001140:	00c9      	lsls	r1, r1, #3
 8001142:	430a      	orrs	r2, r1
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	0409      	lsls	r1, r1, #16
 8001148:	4311      	orrs	r1, r2
 800114a:	00c2      	lsls	r2, r0, #3
 800114c:	4690      	mov	r8, r2
 800114e:	4acf      	ldr	r2, [pc, #828]	@ (800148c <__aeabi_ddiv+0x380>)
 8001150:	4689      	mov	r9, r1
 8001152:	4692      	mov	sl, r2
 8001154:	449a      	add	sl, r3
 8001156:	2300      	movs	r3, #0
 8001158:	2400      	movs	r4, #0
 800115a:	9303      	str	r3, [sp, #12]
 800115c:	9e00      	ldr	r6, [sp, #0]
 800115e:	9f01      	ldr	r7, [sp, #4]
 8001160:	033b      	lsls	r3, r7, #12
 8001162:	0b1b      	lsrs	r3, r3, #12
 8001164:	469b      	mov	fp, r3
 8001166:	007b      	lsls	r3, r7, #1
 8001168:	0030      	movs	r0, r6
 800116a:	0d5b      	lsrs	r3, r3, #21
 800116c:	0ffd      	lsrs	r5, r7, #31
 800116e:	2b00      	cmp	r3, #0
 8001170:	d100      	bne.n	8001174 <__aeabi_ddiv+0x68>
 8001172:	e128      	b.n	80013c6 <__aeabi_ddiv+0x2ba>
 8001174:	4ac4      	ldr	r2, [pc, #784]	@ (8001488 <__aeabi_ddiv+0x37c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d100      	bne.n	800117c <__aeabi_ddiv+0x70>
 800117a:	e177      	b.n	800146c <__aeabi_ddiv+0x360>
 800117c:	4659      	mov	r1, fp
 800117e:	0f72      	lsrs	r2, r6, #29
 8001180:	00c9      	lsls	r1, r1, #3
 8001182:	430a      	orrs	r2, r1
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	0409      	lsls	r1, r1, #16
 8001188:	4311      	orrs	r1, r2
 800118a:	468b      	mov	fp, r1
 800118c:	49bf      	ldr	r1, [pc, #764]	@ (800148c <__aeabi_ddiv+0x380>)
 800118e:	00f2      	lsls	r2, r6, #3
 8001190:	468c      	mov	ip, r1
 8001192:	4651      	mov	r1, sl
 8001194:	4463      	add	r3, ip
 8001196:	1acb      	subs	r3, r1, r3
 8001198:	469a      	mov	sl, r3
 800119a:	2300      	movs	r3, #0
 800119c:	9e02      	ldr	r6, [sp, #8]
 800119e:	406e      	eors	r6, r5
 80011a0:	2c0f      	cmp	r4, #15
 80011a2:	d827      	bhi.n	80011f4 <__aeabi_ddiv+0xe8>
 80011a4:	49ba      	ldr	r1, [pc, #744]	@ (8001490 <__aeabi_ddiv+0x384>)
 80011a6:	00a4      	lsls	r4, r4, #2
 80011a8:	5909      	ldr	r1, [r1, r4]
 80011aa:	468f      	mov	pc, r1
 80011ac:	46cb      	mov	fp, r9
 80011ae:	4642      	mov	r2, r8
 80011b0:	9e02      	ldr	r6, [sp, #8]
 80011b2:	9b03      	ldr	r3, [sp, #12]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d016      	beq.n	80011e6 <__aeabi_ddiv+0xda>
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0xb2>
 80011bc:	e2a6      	b.n	800170c <__aeabi_ddiv+0x600>
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d000      	beq.n	80011c4 <__aeabi_ddiv+0xb8>
 80011c2:	e0df      	b.n	8001384 <__aeabi_ddiv+0x278>
 80011c4:	2200      	movs	r2, #0
 80011c6:	2300      	movs	r3, #0
 80011c8:	2400      	movs	r4, #0
 80011ca:	4690      	mov	r8, r2
 80011cc:	051b      	lsls	r3, r3, #20
 80011ce:	4323      	orrs	r3, r4
 80011d0:	07f6      	lsls	r6, r6, #31
 80011d2:	4333      	orrs	r3, r6
 80011d4:	4640      	mov	r0, r8
 80011d6:	0019      	movs	r1, r3
 80011d8:	b007      	add	sp, #28
 80011da:	bcf0      	pop	{r4, r5, r6, r7}
 80011dc:	46bb      	mov	fp, r7
 80011de:	46b2      	mov	sl, r6
 80011e0:	46a9      	mov	r9, r5
 80011e2:	46a0      	mov	r8, r4
 80011e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e6:	2200      	movs	r2, #0
 80011e8:	2400      	movs	r4, #0
 80011ea:	4690      	mov	r8, r2
 80011ec:	4ba6      	ldr	r3, [pc, #664]	@ (8001488 <__aeabi_ddiv+0x37c>)
 80011ee:	e7ed      	b.n	80011cc <__aeabi_ddiv+0xc0>
 80011f0:	002e      	movs	r6, r5
 80011f2:	e7df      	b.n	80011b4 <__aeabi_ddiv+0xa8>
 80011f4:	45cb      	cmp	fp, r9
 80011f6:	d200      	bcs.n	80011fa <__aeabi_ddiv+0xee>
 80011f8:	e1d4      	b.n	80015a4 <__aeabi_ddiv+0x498>
 80011fa:	d100      	bne.n	80011fe <__aeabi_ddiv+0xf2>
 80011fc:	e1cf      	b.n	800159e <__aeabi_ddiv+0x492>
 80011fe:	2301      	movs	r3, #1
 8001200:	425b      	negs	r3, r3
 8001202:	469c      	mov	ip, r3
 8001204:	4644      	mov	r4, r8
 8001206:	4648      	mov	r0, r9
 8001208:	2700      	movs	r7, #0
 800120a:	44e2      	add	sl, ip
 800120c:	465b      	mov	r3, fp
 800120e:	0e15      	lsrs	r5, r2, #24
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	431d      	orrs	r5, r3
 8001214:	0c19      	lsrs	r1, r3, #16
 8001216:	042b      	lsls	r3, r5, #16
 8001218:	0212      	lsls	r2, r2, #8
 800121a:	9500      	str	r5, [sp, #0]
 800121c:	0c1d      	lsrs	r5, r3, #16
 800121e:	4691      	mov	r9, r2
 8001220:	9102      	str	r1, [sp, #8]
 8001222:	9503      	str	r5, [sp, #12]
 8001224:	f7ff f80e 	bl	8000244 <__aeabi_uidivmod>
 8001228:	0002      	movs	r2, r0
 800122a:	436a      	muls	r2, r5
 800122c:	040b      	lsls	r3, r1, #16
 800122e:	0c21      	lsrs	r1, r4, #16
 8001230:	4680      	mov	r8, r0
 8001232:	4319      	orrs	r1, r3
 8001234:	428a      	cmp	r2, r1
 8001236:	d909      	bls.n	800124c <__aeabi_ddiv+0x140>
 8001238:	9d00      	ldr	r5, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	46ac      	mov	ip, r5
 800123e:	425b      	negs	r3, r3
 8001240:	4461      	add	r1, ip
 8001242:	469c      	mov	ip, r3
 8001244:	44e0      	add	r8, ip
 8001246:	428d      	cmp	r5, r1
 8001248:	d800      	bhi.n	800124c <__aeabi_ddiv+0x140>
 800124a:	e1fb      	b.n	8001644 <__aeabi_ddiv+0x538>
 800124c:	1a88      	subs	r0, r1, r2
 800124e:	9902      	ldr	r1, [sp, #8]
 8001250:	f7fe fff8 	bl	8000244 <__aeabi_uidivmod>
 8001254:	9a03      	ldr	r2, [sp, #12]
 8001256:	0424      	lsls	r4, r4, #16
 8001258:	4342      	muls	r2, r0
 800125a:	0409      	lsls	r1, r1, #16
 800125c:	0c24      	lsrs	r4, r4, #16
 800125e:	0003      	movs	r3, r0
 8001260:	430c      	orrs	r4, r1
 8001262:	42a2      	cmp	r2, r4
 8001264:	d906      	bls.n	8001274 <__aeabi_ddiv+0x168>
 8001266:	9900      	ldr	r1, [sp, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	468c      	mov	ip, r1
 800126c:	4464      	add	r4, ip
 800126e:	42a1      	cmp	r1, r4
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x168>
 8001272:	e1e1      	b.n	8001638 <__aeabi_ddiv+0x52c>
 8001274:	1aa0      	subs	r0, r4, r2
 8001276:	4642      	mov	r2, r8
 8001278:	0412      	lsls	r2, r2, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	4693      	mov	fp, r2
 800127e:	464b      	mov	r3, r9
 8001280:	4659      	mov	r1, fp
 8001282:	0c1b      	lsrs	r3, r3, #16
 8001284:	001d      	movs	r5, r3
 8001286:	9304      	str	r3, [sp, #16]
 8001288:	040b      	lsls	r3, r1, #16
 800128a:	4649      	mov	r1, r9
 800128c:	0409      	lsls	r1, r1, #16
 800128e:	0c09      	lsrs	r1, r1, #16
 8001290:	000c      	movs	r4, r1
 8001292:	0c1b      	lsrs	r3, r3, #16
 8001294:	435c      	muls	r4, r3
 8001296:	0c12      	lsrs	r2, r2, #16
 8001298:	436b      	muls	r3, r5
 800129a:	4688      	mov	r8, r1
 800129c:	4351      	muls	r1, r2
 800129e:	436a      	muls	r2, r5
 80012a0:	0c25      	lsrs	r5, r4, #16
 80012a2:	46ac      	mov	ip, r5
 80012a4:	185b      	adds	r3, r3, r1
 80012a6:	4463      	add	r3, ip
 80012a8:	4299      	cmp	r1, r3
 80012aa:	d903      	bls.n	80012b4 <__aeabi_ddiv+0x1a8>
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	0249      	lsls	r1, r1, #9
 80012b0:	468c      	mov	ip, r1
 80012b2:	4462      	add	r2, ip
 80012b4:	0c19      	lsrs	r1, r3, #16
 80012b6:	0424      	lsls	r4, r4, #16
 80012b8:	041b      	lsls	r3, r3, #16
 80012ba:	0c24      	lsrs	r4, r4, #16
 80012bc:	188a      	adds	r2, r1, r2
 80012be:	191c      	adds	r4, r3, r4
 80012c0:	4290      	cmp	r0, r2
 80012c2:	d302      	bcc.n	80012ca <__aeabi_ddiv+0x1be>
 80012c4:	d116      	bne.n	80012f4 <__aeabi_ddiv+0x1e8>
 80012c6:	42a7      	cmp	r7, r4
 80012c8:	d214      	bcs.n	80012f4 <__aeabi_ddiv+0x1e8>
 80012ca:	465b      	mov	r3, fp
 80012cc:	9d00      	ldr	r5, [sp, #0]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	444f      	add	r7, r9
 80012d2:	9305      	str	r3, [sp, #20]
 80012d4:	454f      	cmp	r7, r9
 80012d6:	419b      	sbcs	r3, r3
 80012d8:	46ac      	mov	ip, r5
 80012da:	425b      	negs	r3, r3
 80012dc:	4463      	add	r3, ip
 80012de:	18c0      	adds	r0, r0, r3
 80012e0:	4285      	cmp	r5, r0
 80012e2:	d300      	bcc.n	80012e6 <__aeabi_ddiv+0x1da>
 80012e4:	e1a1      	b.n	800162a <__aeabi_ddiv+0x51e>
 80012e6:	4282      	cmp	r2, r0
 80012e8:	d900      	bls.n	80012ec <__aeabi_ddiv+0x1e0>
 80012ea:	e1f6      	b.n	80016da <__aeabi_ddiv+0x5ce>
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0x1e4>
 80012ee:	e1f1      	b.n	80016d4 <__aeabi_ddiv+0x5c8>
 80012f0:	9b05      	ldr	r3, [sp, #20]
 80012f2:	469b      	mov	fp, r3
 80012f4:	1b3c      	subs	r4, r7, r4
 80012f6:	42a7      	cmp	r7, r4
 80012f8:	41bf      	sbcs	r7, r7
 80012fa:	9d00      	ldr	r5, [sp, #0]
 80012fc:	1a80      	subs	r0, r0, r2
 80012fe:	427f      	negs	r7, r7
 8001300:	1bc0      	subs	r0, r0, r7
 8001302:	4285      	cmp	r5, r0
 8001304:	d100      	bne.n	8001308 <__aeabi_ddiv+0x1fc>
 8001306:	e1d0      	b.n	80016aa <__aeabi_ddiv+0x59e>
 8001308:	9902      	ldr	r1, [sp, #8]
 800130a:	f7fe ff9b 	bl	8000244 <__aeabi_uidivmod>
 800130e:	9a03      	ldr	r2, [sp, #12]
 8001310:	040b      	lsls	r3, r1, #16
 8001312:	4342      	muls	r2, r0
 8001314:	0c21      	lsrs	r1, r4, #16
 8001316:	0007      	movs	r7, r0
 8001318:	4319      	orrs	r1, r3
 800131a:	428a      	cmp	r2, r1
 800131c:	d900      	bls.n	8001320 <__aeabi_ddiv+0x214>
 800131e:	e178      	b.n	8001612 <__aeabi_ddiv+0x506>
 8001320:	1a88      	subs	r0, r1, r2
 8001322:	9902      	ldr	r1, [sp, #8]
 8001324:	f7fe ff8e 	bl	8000244 <__aeabi_uidivmod>
 8001328:	9a03      	ldr	r2, [sp, #12]
 800132a:	0424      	lsls	r4, r4, #16
 800132c:	4342      	muls	r2, r0
 800132e:	0409      	lsls	r1, r1, #16
 8001330:	0c24      	lsrs	r4, r4, #16
 8001332:	0003      	movs	r3, r0
 8001334:	430c      	orrs	r4, r1
 8001336:	42a2      	cmp	r2, r4
 8001338:	d900      	bls.n	800133c <__aeabi_ddiv+0x230>
 800133a:	e15d      	b.n	80015f8 <__aeabi_ddiv+0x4ec>
 800133c:	4641      	mov	r1, r8
 800133e:	1aa4      	subs	r4, r4, r2
 8001340:	043a      	lsls	r2, r7, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	9d04      	ldr	r5, [sp, #16]
 8001346:	0413      	lsls	r3, r2, #16
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	4359      	muls	r1, r3
 800134c:	4647      	mov	r7, r8
 800134e:	436b      	muls	r3, r5
 8001350:	469c      	mov	ip, r3
 8001352:	0c10      	lsrs	r0, r2, #16
 8001354:	4347      	muls	r7, r0
 8001356:	0c0b      	lsrs	r3, r1, #16
 8001358:	44bc      	add	ip, r7
 800135a:	4463      	add	r3, ip
 800135c:	4368      	muls	r0, r5
 800135e:	429f      	cmp	r7, r3
 8001360:	d903      	bls.n	800136a <__aeabi_ddiv+0x25e>
 8001362:	2580      	movs	r5, #128	@ 0x80
 8001364:	026d      	lsls	r5, r5, #9
 8001366:	46ac      	mov	ip, r5
 8001368:	4460      	add	r0, ip
 800136a:	0c1f      	lsrs	r7, r3, #16
 800136c:	0409      	lsls	r1, r1, #16
 800136e:	041b      	lsls	r3, r3, #16
 8001370:	0c09      	lsrs	r1, r1, #16
 8001372:	183f      	adds	r7, r7, r0
 8001374:	185b      	adds	r3, r3, r1
 8001376:	42bc      	cmp	r4, r7
 8001378:	d200      	bcs.n	800137c <__aeabi_ddiv+0x270>
 800137a:	e102      	b.n	8001582 <__aeabi_ddiv+0x476>
 800137c:	d100      	bne.n	8001380 <__aeabi_ddiv+0x274>
 800137e:	e0fd      	b.n	800157c <__aeabi_ddiv+0x470>
 8001380:	2301      	movs	r3, #1
 8001382:	431a      	orrs	r2, r3
 8001384:	4b43      	ldr	r3, [pc, #268]	@ (8001494 <__aeabi_ddiv+0x388>)
 8001386:	4453      	add	r3, sl
 8001388:	2b00      	cmp	r3, #0
 800138a:	dc00      	bgt.n	800138e <__aeabi_ddiv+0x282>
 800138c:	e0ae      	b.n	80014ec <__aeabi_ddiv+0x3e0>
 800138e:	0751      	lsls	r1, r2, #29
 8001390:	d000      	beq.n	8001394 <__aeabi_ddiv+0x288>
 8001392:	e198      	b.n	80016c6 <__aeabi_ddiv+0x5ba>
 8001394:	4659      	mov	r1, fp
 8001396:	01c9      	lsls	r1, r1, #7
 8001398:	d506      	bpl.n	80013a8 <__aeabi_ddiv+0x29c>
 800139a:	4659      	mov	r1, fp
 800139c:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <__aeabi_ddiv+0x38c>)
 800139e:	4019      	ands	r1, r3
 80013a0:	2380      	movs	r3, #128	@ 0x80
 80013a2:	468b      	mov	fp, r1
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4453      	add	r3, sl
 80013a8:	493c      	ldr	r1, [pc, #240]	@ (800149c <__aeabi_ddiv+0x390>)
 80013aa:	428b      	cmp	r3, r1
 80013ac:	dd00      	ble.n	80013b0 <__aeabi_ddiv+0x2a4>
 80013ae:	e71a      	b.n	80011e6 <__aeabi_ddiv+0xda>
 80013b0:	4659      	mov	r1, fp
 80013b2:	08d2      	lsrs	r2, r2, #3
 80013b4:	0749      	lsls	r1, r1, #29
 80013b6:	4311      	orrs	r1, r2
 80013b8:	465a      	mov	r2, fp
 80013ba:	055b      	lsls	r3, r3, #21
 80013bc:	0254      	lsls	r4, r2, #9
 80013be:	4688      	mov	r8, r1
 80013c0:	0b24      	lsrs	r4, r4, #12
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	e702      	b.n	80011cc <__aeabi_ddiv+0xc0>
 80013c6:	465a      	mov	r2, fp
 80013c8:	9b00      	ldr	r3, [sp, #0]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	d100      	bne.n	80013d0 <__aeabi_ddiv+0x2c4>
 80013ce:	e07e      	b.n	80014ce <__aeabi_ddiv+0x3c2>
 80013d0:	465b      	mov	r3, fp
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x2cc>
 80013d6:	e100      	b.n	80015da <__aeabi_ddiv+0x4ce>
 80013d8:	4658      	mov	r0, fp
 80013da:	f001 f9ef 	bl	80027bc <__clzsi2>
 80013de:	0002      	movs	r2, r0
 80013e0:	0003      	movs	r3, r0
 80013e2:	3a0b      	subs	r2, #11
 80013e4:	271d      	movs	r7, #29
 80013e6:	9e00      	ldr	r6, [sp, #0]
 80013e8:	1aba      	subs	r2, r7, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	4658      	mov	r0, fp
 80013ee:	40d6      	lsrs	r6, r2
 80013f0:	3908      	subs	r1, #8
 80013f2:	4088      	lsls	r0, r1
 80013f4:	0032      	movs	r2, r6
 80013f6:	4302      	orrs	r2, r0
 80013f8:	4693      	mov	fp, r2
 80013fa:	9a00      	ldr	r2, [sp, #0]
 80013fc:	408a      	lsls	r2, r1
 80013fe:	4928      	ldr	r1, [pc, #160]	@ (80014a0 <__aeabi_ddiv+0x394>)
 8001400:	4453      	add	r3, sl
 8001402:	468a      	mov	sl, r1
 8001404:	449a      	add	sl, r3
 8001406:	2300      	movs	r3, #0
 8001408:	e6c8      	b.n	800119c <__aeabi_ddiv+0x90>
 800140a:	465b      	mov	r3, fp
 800140c:	4303      	orrs	r3, r0
 800140e:	4699      	mov	r9, r3
 8001410:	d056      	beq.n	80014c0 <__aeabi_ddiv+0x3b4>
 8001412:	465b      	mov	r3, fp
 8001414:	2b00      	cmp	r3, #0
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x30e>
 8001418:	e0cd      	b.n	80015b6 <__aeabi_ddiv+0x4aa>
 800141a:	4658      	mov	r0, fp
 800141c:	f001 f9ce 	bl	80027bc <__clzsi2>
 8001420:	230b      	movs	r3, #11
 8001422:	425b      	negs	r3, r3
 8001424:	469c      	mov	ip, r3
 8001426:	0002      	movs	r2, r0
 8001428:	4484      	add	ip, r0
 800142a:	4666      	mov	r6, ip
 800142c:	231d      	movs	r3, #29
 800142e:	1b9b      	subs	r3, r3, r6
 8001430:	0026      	movs	r6, r4
 8001432:	0011      	movs	r1, r2
 8001434:	4658      	mov	r0, fp
 8001436:	40de      	lsrs	r6, r3
 8001438:	3908      	subs	r1, #8
 800143a:	4088      	lsls	r0, r1
 800143c:	0033      	movs	r3, r6
 800143e:	4303      	orrs	r3, r0
 8001440:	4699      	mov	r9, r3
 8001442:	0023      	movs	r3, r4
 8001444:	408b      	lsls	r3, r1
 8001446:	4698      	mov	r8, r3
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <__aeabi_ddiv+0x398>)
 800144a:	2400      	movs	r4, #0
 800144c:	1a9b      	subs	r3, r3, r2
 800144e:	469a      	mov	sl, r3
 8001450:	2300      	movs	r3, #0
 8001452:	9303      	str	r3, [sp, #12]
 8001454:	e682      	b.n	800115c <__aeabi_ddiv+0x50>
 8001456:	465a      	mov	r2, fp
 8001458:	4302      	orrs	r2, r0
 800145a:	4691      	mov	r9, r2
 800145c:	d12a      	bne.n	80014b4 <__aeabi_ddiv+0x3a8>
 800145e:	2200      	movs	r2, #0
 8001460:	469a      	mov	sl, r3
 8001462:	2302      	movs	r3, #2
 8001464:	4690      	mov	r8, r2
 8001466:	2408      	movs	r4, #8
 8001468:	9303      	str	r3, [sp, #12]
 800146a:	e677      	b.n	800115c <__aeabi_ddiv+0x50>
 800146c:	465a      	mov	r2, fp
 800146e:	9b00      	ldr	r3, [sp, #0]
 8001470:	431a      	orrs	r2, r3
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <__aeabi_ddiv+0x39c>)
 8001474:	469c      	mov	ip, r3
 8001476:	44e2      	add	sl, ip
 8001478:	2a00      	cmp	r2, #0
 800147a:	d117      	bne.n	80014ac <__aeabi_ddiv+0x3a0>
 800147c:	2302      	movs	r3, #2
 800147e:	431c      	orrs	r4, r3
 8001480:	2300      	movs	r3, #0
 8001482:	469b      	mov	fp, r3
 8001484:	3302      	adds	r3, #2
 8001486:	e689      	b.n	800119c <__aeabi_ddiv+0x90>
 8001488:	000007ff 	.word	0x000007ff
 800148c:	fffffc01 	.word	0xfffffc01
 8001490:	08009580 	.word	0x08009580
 8001494:	000003ff 	.word	0x000003ff
 8001498:	feffffff 	.word	0xfeffffff
 800149c:	000007fe 	.word	0x000007fe
 80014a0:	000003f3 	.word	0x000003f3
 80014a4:	fffffc0d 	.word	0xfffffc0d
 80014a8:	fffff801 	.word	0xfffff801
 80014ac:	2303      	movs	r3, #3
 80014ae:	0032      	movs	r2, r6
 80014b0:	431c      	orrs	r4, r3
 80014b2:	e673      	b.n	800119c <__aeabi_ddiv+0x90>
 80014b4:	469a      	mov	sl, r3
 80014b6:	2303      	movs	r3, #3
 80014b8:	46d9      	mov	r9, fp
 80014ba:	240c      	movs	r4, #12
 80014bc:	9303      	str	r3, [sp, #12]
 80014be:	e64d      	b.n	800115c <__aeabi_ddiv+0x50>
 80014c0:	2300      	movs	r3, #0
 80014c2:	4698      	mov	r8, r3
 80014c4:	469a      	mov	sl, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	2404      	movs	r4, #4
 80014ca:	9303      	str	r3, [sp, #12]
 80014cc:	e646      	b.n	800115c <__aeabi_ddiv+0x50>
 80014ce:	2301      	movs	r3, #1
 80014d0:	431c      	orrs	r4, r3
 80014d2:	2300      	movs	r3, #0
 80014d4:	469b      	mov	fp, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	e660      	b.n	800119c <__aeabi_ddiv+0x90>
 80014da:	2300      	movs	r3, #0
 80014dc:	2480      	movs	r4, #128	@ 0x80
 80014de:	4698      	mov	r8, r3
 80014e0:	2600      	movs	r6, #0
 80014e2:	4b92      	ldr	r3, [pc, #584]	@ (800172c <__aeabi_ddiv+0x620>)
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	e671      	b.n	80011cc <__aeabi_ddiv+0xc0>
 80014e8:	2201      	movs	r2, #1
 80014ea:	4252      	negs	r2, r2
 80014ec:	2101      	movs	r1, #1
 80014ee:	1ac9      	subs	r1, r1, r3
 80014f0:	2938      	cmp	r1, #56	@ 0x38
 80014f2:	dd00      	ble.n	80014f6 <__aeabi_ddiv+0x3ea>
 80014f4:	e666      	b.n	80011c4 <__aeabi_ddiv+0xb8>
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dc00      	bgt.n	80014fc <__aeabi_ddiv+0x3f0>
 80014fa:	e0ab      	b.n	8001654 <__aeabi_ddiv+0x548>
 80014fc:	201f      	movs	r0, #31
 80014fe:	4240      	negs	r0, r0
 8001500:	1ac3      	subs	r3, r0, r3
 8001502:	4658      	mov	r0, fp
 8001504:	40d8      	lsrs	r0, r3
 8001506:	0003      	movs	r3, r0
 8001508:	2920      	cmp	r1, #32
 800150a:	d004      	beq.n	8001516 <__aeabi_ddiv+0x40a>
 800150c:	4658      	mov	r0, fp
 800150e:	4988      	ldr	r1, [pc, #544]	@ (8001730 <__aeabi_ddiv+0x624>)
 8001510:	4451      	add	r1, sl
 8001512:	4088      	lsls	r0, r1
 8001514:	4302      	orrs	r2, r0
 8001516:	1e51      	subs	r1, r2, #1
 8001518:	418a      	sbcs	r2, r1
 800151a:	431a      	orrs	r2, r3
 800151c:	2307      	movs	r3, #7
 800151e:	0019      	movs	r1, r3
 8001520:	2400      	movs	r4, #0
 8001522:	4011      	ands	r1, r2
 8001524:	4213      	tst	r3, r2
 8001526:	d00c      	beq.n	8001542 <__aeabi_ddiv+0x436>
 8001528:	230f      	movs	r3, #15
 800152a:	4013      	ands	r3, r2
 800152c:	2b04      	cmp	r3, #4
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0x426>
 8001530:	e0f9      	b.n	8001726 <__aeabi_ddiv+0x61a>
 8001532:	1d11      	adds	r1, r2, #4
 8001534:	4291      	cmp	r1, r2
 8001536:	419b      	sbcs	r3, r3
 8001538:	000a      	movs	r2, r1
 800153a:	425b      	negs	r3, r3
 800153c:	0759      	lsls	r1, r3, #29
 800153e:	025b      	lsls	r3, r3, #9
 8001540:	0b1c      	lsrs	r4, r3, #12
 8001542:	08d2      	lsrs	r2, r2, #3
 8001544:	430a      	orrs	r2, r1
 8001546:	4690      	mov	r8, r2
 8001548:	2300      	movs	r3, #0
 800154a:	e63f      	b.n	80011cc <__aeabi_ddiv+0xc0>
 800154c:	2480      	movs	r4, #128	@ 0x80
 800154e:	464b      	mov	r3, r9
 8001550:	0324      	lsls	r4, r4, #12
 8001552:	4223      	tst	r3, r4
 8001554:	d009      	beq.n	800156a <__aeabi_ddiv+0x45e>
 8001556:	465b      	mov	r3, fp
 8001558:	4223      	tst	r3, r4
 800155a:	d106      	bne.n	800156a <__aeabi_ddiv+0x45e>
 800155c:	431c      	orrs	r4, r3
 800155e:	0324      	lsls	r4, r4, #12
 8001560:	002e      	movs	r6, r5
 8001562:	4690      	mov	r8, r2
 8001564:	4b71      	ldr	r3, [pc, #452]	@ (800172c <__aeabi_ddiv+0x620>)
 8001566:	0b24      	lsrs	r4, r4, #12
 8001568:	e630      	b.n	80011cc <__aeabi_ddiv+0xc0>
 800156a:	2480      	movs	r4, #128	@ 0x80
 800156c:	464b      	mov	r3, r9
 800156e:	0324      	lsls	r4, r4, #12
 8001570:	431c      	orrs	r4, r3
 8001572:	0324      	lsls	r4, r4, #12
 8001574:	9e02      	ldr	r6, [sp, #8]
 8001576:	4b6d      	ldr	r3, [pc, #436]	@ (800172c <__aeabi_ddiv+0x620>)
 8001578:	0b24      	lsrs	r4, r4, #12
 800157a:	e627      	b.n	80011cc <__aeabi_ddiv+0xc0>
 800157c:	2b00      	cmp	r3, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_ddiv+0x476>
 8001580:	e700      	b.n	8001384 <__aeabi_ddiv+0x278>
 8001582:	9800      	ldr	r0, [sp, #0]
 8001584:	1e51      	subs	r1, r2, #1
 8001586:	4684      	mov	ip, r0
 8001588:	4464      	add	r4, ip
 800158a:	4284      	cmp	r4, r0
 800158c:	d200      	bcs.n	8001590 <__aeabi_ddiv+0x484>
 800158e:	e084      	b.n	800169a <__aeabi_ddiv+0x58e>
 8001590:	42bc      	cmp	r4, r7
 8001592:	d200      	bcs.n	8001596 <__aeabi_ddiv+0x48a>
 8001594:	e0ae      	b.n	80016f4 <__aeabi_ddiv+0x5e8>
 8001596:	d100      	bne.n	800159a <__aeabi_ddiv+0x48e>
 8001598:	e0c1      	b.n	800171e <__aeabi_ddiv+0x612>
 800159a:	000a      	movs	r2, r1
 800159c:	e6f0      	b.n	8001380 <__aeabi_ddiv+0x274>
 800159e:	4542      	cmp	r2, r8
 80015a0:	d900      	bls.n	80015a4 <__aeabi_ddiv+0x498>
 80015a2:	e62c      	b.n	80011fe <__aeabi_ddiv+0xf2>
 80015a4:	464b      	mov	r3, r9
 80015a6:	07dc      	lsls	r4, r3, #31
 80015a8:	0858      	lsrs	r0, r3, #1
 80015aa:	4643      	mov	r3, r8
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	431c      	orrs	r4, r3
 80015b0:	4643      	mov	r3, r8
 80015b2:	07df      	lsls	r7, r3, #31
 80015b4:	e62a      	b.n	800120c <__aeabi_ddiv+0x100>
 80015b6:	f001 f901 	bl	80027bc <__clzsi2>
 80015ba:	2315      	movs	r3, #21
 80015bc:	469c      	mov	ip, r3
 80015be:	4484      	add	ip, r0
 80015c0:	0002      	movs	r2, r0
 80015c2:	4663      	mov	r3, ip
 80015c4:	3220      	adds	r2, #32
 80015c6:	2b1c      	cmp	r3, #28
 80015c8:	dc00      	bgt.n	80015cc <__aeabi_ddiv+0x4c0>
 80015ca:	e72e      	b.n	800142a <__aeabi_ddiv+0x31e>
 80015cc:	0023      	movs	r3, r4
 80015ce:	3808      	subs	r0, #8
 80015d0:	4083      	lsls	r3, r0
 80015d2:	4699      	mov	r9, r3
 80015d4:	2300      	movs	r3, #0
 80015d6:	4698      	mov	r8, r3
 80015d8:	e736      	b.n	8001448 <__aeabi_ddiv+0x33c>
 80015da:	f001 f8ef 	bl	80027bc <__clzsi2>
 80015de:	0002      	movs	r2, r0
 80015e0:	0003      	movs	r3, r0
 80015e2:	3215      	adds	r2, #21
 80015e4:	3320      	adds	r3, #32
 80015e6:	2a1c      	cmp	r2, #28
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_ddiv+0x4e0>
 80015ea:	e6fb      	b.n	80013e4 <__aeabi_ddiv+0x2d8>
 80015ec:	9900      	ldr	r1, [sp, #0]
 80015ee:	3808      	subs	r0, #8
 80015f0:	4081      	lsls	r1, r0
 80015f2:	2200      	movs	r2, #0
 80015f4:	468b      	mov	fp, r1
 80015f6:	e702      	b.n	80013fe <__aeabi_ddiv+0x2f2>
 80015f8:	9900      	ldr	r1, [sp, #0]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	468c      	mov	ip, r1
 80015fe:	4464      	add	r4, ip
 8001600:	42a1      	cmp	r1, r4
 8001602:	d900      	bls.n	8001606 <__aeabi_ddiv+0x4fa>
 8001604:	e69a      	b.n	800133c <__aeabi_ddiv+0x230>
 8001606:	42a2      	cmp	r2, r4
 8001608:	d800      	bhi.n	800160c <__aeabi_ddiv+0x500>
 800160a:	e697      	b.n	800133c <__aeabi_ddiv+0x230>
 800160c:	1e83      	subs	r3, r0, #2
 800160e:	4464      	add	r4, ip
 8001610:	e694      	b.n	800133c <__aeabi_ddiv+0x230>
 8001612:	46ac      	mov	ip, r5
 8001614:	4461      	add	r1, ip
 8001616:	3f01      	subs	r7, #1
 8001618:	428d      	cmp	r5, r1
 800161a:	d900      	bls.n	800161e <__aeabi_ddiv+0x512>
 800161c:	e680      	b.n	8001320 <__aeabi_ddiv+0x214>
 800161e:	428a      	cmp	r2, r1
 8001620:	d800      	bhi.n	8001624 <__aeabi_ddiv+0x518>
 8001622:	e67d      	b.n	8001320 <__aeabi_ddiv+0x214>
 8001624:	1e87      	subs	r7, r0, #2
 8001626:	4461      	add	r1, ip
 8001628:	e67a      	b.n	8001320 <__aeabi_ddiv+0x214>
 800162a:	4285      	cmp	r5, r0
 800162c:	d000      	beq.n	8001630 <__aeabi_ddiv+0x524>
 800162e:	e65f      	b.n	80012f0 <__aeabi_ddiv+0x1e4>
 8001630:	45b9      	cmp	r9, r7
 8001632:	d900      	bls.n	8001636 <__aeabi_ddiv+0x52a>
 8001634:	e65c      	b.n	80012f0 <__aeabi_ddiv+0x1e4>
 8001636:	e656      	b.n	80012e6 <__aeabi_ddiv+0x1da>
 8001638:	42a2      	cmp	r2, r4
 800163a:	d800      	bhi.n	800163e <__aeabi_ddiv+0x532>
 800163c:	e61a      	b.n	8001274 <__aeabi_ddiv+0x168>
 800163e:	1e83      	subs	r3, r0, #2
 8001640:	4464      	add	r4, ip
 8001642:	e617      	b.n	8001274 <__aeabi_ddiv+0x168>
 8001644:	428a      	cmp	r2, r1
 8001646:	d800      	bhi.n	800164a <__aeabi_ddiv+0x53e>
 8001648:	e600      	b.n	800124c <__aeabi_ddiv+0x140>
 800164a:	46ac      	mov	ip, r5
 800164c:	1e83      	subs	r3, r0, #2
 800164e:	4698      	mov	r8, r3
 8001650:	4461      	add	r1, ip
 8001652:	e5fb      	b.n	800124c <__aeabi_ddiv+0x140>
 8001654:	4837      	ldr	r0, [pc, #220]	@ (8001734 <__aeabi_ddiv+0x628>)
 8001656:	0014      	movs	r4, r2
 8001658:	4450      	add	r0, sl
 800165a:	4082      	lsls	r2, r0
 800165c:	465b      	mov	r3, fp
 800165e:	0017      	movs	r7, r2
 8001660:	4083      	lsls	r3, r0
 8001662:	40cc      	lsrs	r4, r1
 8001664:	1e7a      	subs	r2, r7, #1
 8001666:	4197      	sbcs	r7, r2
 8001668:	4323      	orrs	r3, r4
 800166a:	433b      	orrs	r3, r7
 800166c:	001a      	movs	r2, r3
 800166e:	465b      	mov	r3, fp
 8001670:	40cb      	lsrs	r3, r1
 8001672:	0751      	lsls	r1, r2, #29
 8001674:	d009      	beq.n	800168a <__aeabi_ddiv+0x57e>
 8001676:	210f      	movs	r1, #15
 8001678:	4011      	ands	r1, r2
 800167a:	2904      	cmp	r1, #4
 800167c:	d005      	beq.n	800168a <__aeabi_ddiv+0x57e>
 800167e:	1d11      	adds	r1, r2, #4
 8001680:	4291      	cmp	r1, r2
 8001682:	4192      	sbcs	r2, r2
 8001684:	4252      	negs	r2, r2
 8001686:	189b      	adds	r3, r3, r2
 8001688:	000a      	movs	r2, r1
 800168a:	0219      	lsls	r1, r3, #8
 800168c:	d400      	bmi.n	8001690 <__aeabi_ddiv+0x584>
 800168e:	e755      	b.n	800153c <__aeabi_ddiv+0x430>
 8001690:	2200      	movs	r2, #0
 8001692:	2301      	movs	r3, #1
 8001694:	2400      	movs	r4, #0
 8001696:	4690      	mov	r8, r2
 8001698:	e598      	b.n	80011cc <__aeabi_ddiv+0xc0>
 800169a:	000a      	movs	r2, r1
 800169c:	42bc      	cmp	r4, r7
 800169e:	d000      	beq.n	80016a2 <__aeabi_ddiv+0x596>
 80016a0:	e66e      	b.n	8001380 <__aeabi_ddiv+0x274>
 80016a2:	454b      	cmp	r3, r9
 80016a4:	d000      	beq.n	80016a8 <__aeabi_ddiv+0x59c>
 80016a6:	e66b      	b.n	8001380 <__aeabi_ddiv+0x274>
 80016a8:	e66c      	b.n	8001384 <__aeabi_ddiv+0x278>
 80016aa:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <__aeabi_ddiv+0x62c>)
 80016ac:	4a23      	ldr	r2, [pc, #140]	@ (800173c <__aeabi_ddiv+0x630>)
 80016ae:	4453      	add	r3, sl
 80016b0:	4592      	cmp	sl, r2
 80016b2:	da00      	bge.n	80016b6 <__aeabi_ddiv+0x5aa>
 80016b4:	e718      	b.n	80014e8 <__aeabi_ddiv+0x3dc>
 80016b6:	2101      	movs	r1, #1
 80016b8:	4249      	negs	r1, r1
 80016ba:	1d0a      	adds	r2, r1, #4
 80016bc:	428a      	cmp	r2, r1
 80016be:	4189      	sbcs	r1, r1
 80016c0:	4249      	negs	r1, r1
 80016c2:	448b      	add	fp, r1
 80016c4:	e666      	b.n	8001394 <__aeabi_ddiv+0x288>
 80016c6:	210f      	movs	r1, #15
 80016c8:	4011      	ands	r1, r2
 80016ca:	2904      	cmp	r1, #4
 80016cc:	d100      	bne.n	80016d0 <__aeabi_ddiv+0x5c4>
 80016ce:	e661      	b.n	8001394 <__aeabi_ddiv+0x288>
 80016d0:	0011      	movs	r1, r2
 80016d2:	e7f2      	b.n	80016ba <__aeabi_ddiv+0x5ae>
 80016d4:	42bc      	cmp	r4, r7
 80016d6:	d800      	bhi.n	80016da <__aeabi_ddiv+0x5ce>
 80016d8:	e60a      	b.n	80012f0 <__aeabi_ddiv+0x1e4>
 80016da:	2302      	movs	r3, #2
 80016dc:	425b      	negs	r3, r3
 80016de:	469c      	mov	ip, r3
 80016e0:	9900      	ldr	r1, [sp, #0]
 80016e2:	444f      	add	r7, r9
 80016e4:	454f      	cmp	r7, r9
 80016e6:	419b      	sbcs	r3, r3
 80016e8:	44e3      	add	fp, ip
 80016ea:	468c      	mov	ip, r1
 80016ec:	425b      	negs	r3, r3
 80016ee:	4463      	add	r3, ip
 80016f0:	18c0      	adds	r0, r0, r3
 80016f2:	e5ff      	b.n	80012f4 <__aeabi_ddiv+0x1e8>
 80016f4:	4649      	mov	r1, r9
 80016f6:	9d00      	ldr	r5, [sp, #0]
 80016f8:	0048      	lsls	r0, r1, #1
 80016fa:	4548      	cmp	r0, r9
 80016fc:	4189      	sbcs	r1, r1
 80016fe:	46ac      	mov	ip, r5
 8001700:	4249      	negs	r1, r1
 8001702:	4461      	add	r1, ip
 8001704:	4681      	mov	r9, r0
 8001706:	3a02      	subs	r2, #2
 8001708:	1864      	adds	r4, r4, r1
 800170a:	e7c7      	b.n	800169c <__aeabi_ddiv+0x590>
 800170c:	2480      	movs	r4, #128	@ 0x80
 800170e:	465b      	mov	r3, fp
 8001710:	0324      	lsls	r4, r4, #12
 8001712:	431c      	orrs	r4, r3
 8001714:	0324      	lsls	r4, r4, #12
 8001716:	4690      	mov	r8, r2
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <__aeabi_ddiv+0x620>)
 800171a:	0b24      	lsrs	r4, r4, #12
 800171c:	e556      	b.n	80011cc <__aeabi_ddiv+0xc0>
 800171e:	4599      	cmp	r9, r3
 8001720:	d3e8      	bcc.n	80016f4 <__aeabi_ddiv+0x5e8>
 8001722:	000a      	movs	r2, r1
 8001724:	e7bd      	b.n	80016a2 <__aeabi_ddiv+0x596>
 8001726:	2300      	movs	r3, #0
 8001728:	e708      	b.n	800153c <__aeabi_ddiv+0x430>
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	000007ff 	.word	0x000007ff
 8001730:	0000043e 	.word	0x0000043e
 8001734:	0000041e 	.word	0x0000041e
 8001738:	000003ff 	.word	0x000003ff
 800173c:	fffffc02 	.word	0xfffffc02

08001740 <__eqdf2>:
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	4657      	mov	r7, sl
 8001744:	46de      	mov	lr, fp
 8001746:	464e      	mov	r6, r9
 8001748:	4645      	mov	r5, r8
 800174a:	b5e0      	push	{r5, r6, r7, lr}
 800174c:	000d      	movs	r5, r1
 800174e:	0004      	movs	r4, r0
 8001750:	0fe8      	lsrs	r0, r5, #31
 8001752:	4683      	mov	fp, r0
 8001754:	0309      	lsls	r1, r1, #12
 8001756:	0fd8      	lsrs	r0, r3, #31
 8001758:	0b09      	lsrs	r1, r1, #12
 800175a:	4682      	mov	sl, r0
 800175c:	4819      	ldr	r0, [pc, #100]	@ (80017c4 <__eqdf2+0x84>)
 800175e:	468c      	mov	ip, r1
 8001760:	031f      	lsls	r7, r3, #12
 8001762:	0069      	lsls	r1, r5, #1
 8001764:	005e      	lsls	r6, r3, #1
 8001766:	0d49      	lsrs	r1, r1, #21
 8001768:	0b3f      	lsrs	r7, r7, #12
 800176a:	0d76      	lsrs	r6, r6, #21
 800176c:	4281      	cmp	r1, r0
 800176e:	d018      	beq.n	80017a2 <__eqdf2+0x62>
 8001770:	4286      	cmp	r6, r0
 8001772:	d00f      	beq.n	8001794 <__eqdf2+0x54>
 8001774:	2001      	movs	r0, #1
 8001776:	42b1      	cmp	r1, r6
 8001778:	d10d      	bne.n	8001796 <__eqdf2+0x56>
 800177a:	45bc      	cmp	ip, r7
 800177c:	d10b      	bne.n	8001796 <__eqdf2+0x56>
 800177e:	4294      	cmp	r4, r2
 8001780:	d109      	bne.n	8001796 <__eqdf2+0x56>
 8001782:	45d3      	cmp	fp, sl
 8001784:	d01c      	beq.n	80017c0 <__eqdf2+0x80>
 8001786:	2900      	cmp	r1, #0
 8001788:	d105      	bne.n	8001796 <__eqdf2+0x56>
 800178a:	4660      	mov	r0, ip
 800178c:	4320      	orrs	r0, r4
 800178e:	1e43      	subs	r3, r0, #1
 8001790:	4198      	sbcs	r0, r3
 8001792:	e000      	b.n	8001796 <__eqdf2+0x56>
 8001794:	2001      	movs	r0, #1
 8001796:	bcf0      	pop	{r4, r5, r6, r7}
 8001798:	46bb      	mov	fp, r7
 800179a:	46b2      	mov	sl, r6
 800179c:	46a9      	mov	r9, r5
 800179e:	46a0      	mov	r8, r4
 80017a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a2:	2001      	movs	r0, #1
 80017a4:	428e      	cmp	r6, r1
 80017a6:	d1f6      	bne.n	8001796 <__eqdf2+0x56>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4339      	orrs	r1, r7
 80017ac:	000f      	movs	r7, r1
 80017ae:	4317      	orrs	r7, r2
 80017b0:	4327      	orrs	r7, r4
 80017b2:	d1f0      	bne.n	8001796 <__eqdf2+0x56>
 80017b4:	465b      	mov	r3, fp
 80017b6:	4652      	mov	r2, sl
 80017b8:	1a98      	subs	r0, r3, r2
 80017ba:	1e43      	subs	r3, r0, #1
 80017bc:	4198      	sbcs	r0, r3
 80017be:	e7ea      	b.n	8001796 <__eqdf2+0x56>
 80017c0:	2000      	movs	r0, #0
 80017c2:	e7e8      	b.n	8001796 <__eqdf2+0x56>
 80017c4:	000007ff 	.word	0x000007ff

080017c8 <__gedf2>:
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	4657      	mov	r7, sl
 80017cc:	464e      	mov	r6, r9
 80017ce:	4645      	mov	r5, r8
 80017d0:	46de      	mov	lr, fp
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	000d      	movs	r5, r1
 80017d6:	030f      	lsls	r7, r1, #12
 80017d8:	0b39      	lsrs	r1, r7, #12
 80017da:	b083      	sub	sp, #12
 80017dc:	0004      	movs	r4, r0
 80017de:	4680      	mov	r8, r0
 80017e0:	9101      	str	r1, [sp, #4]
 80017e2:	0058      	lsls	r0, r3, #1
 80017e4:	0fe9      	lsrs	r1, r5, #31
 80017e6:	4f31      	ldr	r7, [pc, #196]	@ (80018ac <__gedf2+0xe4>)
 80017e8:	0d40      	lsrs	r0, r0, #21
 80017ea:	468c      	mov	ip, r1
 80017ec:	006e      	lsls	r6, r5, #1
 80017ee:	0319      	lsls	r1, r3, #12
 80017f0:	4682      	mov	sl, r0
 80017f2:	4691      	mov	r9, r2
 80017f4:	0d76      	lsrs	r6, r6, #21
 80017f6:	0b09      	lsrs	r1, r1, #12
 80017f8:	0fd8      	lsrs	r0, r3, #31
 80017fa:	42be      	cmp	r6, r7
 80017fc:	d01f      	beq.n	800183e <__gedf2+0x76>
 80017fe:	45ba      	cmp	sl, r7
 8001800:	d00f      	beq.n	8001822 <__gedf2+0x5a>
 8001802:	2e00      	cmp	r6, #0
 8001804:	d12f      	bne.n	8001866 <__gedf2+0x9e>
 8001806:	4655      	mov	r5, sl
 8001808:	9e01      	ldr	r6, [sp, #4]
 800180a:	4334      	orrs	r4, r6
 800180c:	2d00      	cmp	r5, #0
 800180e:	d127      	bne.n	8001860 <__gedf2+0x98>
 8001810:	430a      	orrs	r2, r1
 8001812:	d03a      	beq.n	800188a <__gedf2+0xc2>
 8001814:	2c00      	cmp	r4, #0
 8001816:	d145      	bne.n	80018a4 <__gedf2+0xdc>
 8001818:	2800      	cmp	r0, #0
 800181a:	d11a      	bne.n	8001852 <__gedf2+0x8a>
 800181c:	2001      	movs	r0, #1
 800181e:	4240      	negs	r0, r0
 8001820:	e017      	b.n	8001852 <__gedf2+0x8a>
 8001822:	4311      	orrs	r1, r2
 8001824:	d13b      	bne.n	800189e <__gedf2+0xd6>
 8001826:	2e00      	cmp	r6, #0
 8001828:	d102      	bne.n	8001830 <__gedf2+0x68>
 800182a:	9f01      	ldr	r7, [sp, #4]
 800182c:	4327      	orrs	r7, r4
 800182e:	d0f3      	beq.n	8001818 <__gedf2+0x50>
 8001830:	4584      	cmp	ip, r0
 8001832:	d109      	bne.n	8001848 <__gedf2+0x80>
 8001834:	4663      	mov	r3, ip
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <__gedf2+0x54>
 800183a:	4660      	mov	r0, ip
 800183c:	e009      	b.n	8001852 <__gedf2+0x8a>
 800183e:	9f01      	ldr	r7, [sp, #4]
 8001840:	4327      	orrs	r7, r4
 8001842:	d12c      	bne.n	800189e <__gedf2+0xd6>
 8001844:	45b2      	cmp	sl, r6
 8001846:	d024      	beq.n	8001892 <__gedf2+0xca>
 8001848:	4663      	mov	r3, ip
 800184a:	2002      	movs	r0, #2
 800184c:	3b01      	subs	r3, #1
 800184e:	4018      	ands	r0, r3
 8001850:	3801      	subs	r0, #1
 8001852:	b003      	add	sp, #12
 8001854:	bcf0      	pop	{r4, r5, r6, r7}
 8001856:	46bb      	mov	fp, r7
 8001858:	46b2      	mov	sl, r6
 800185a:	46a9      	mov	r9, r5
 800185c:	46a0      	mov	r8, r4
 800185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001860:	2c00      	cmp	r4, #0
 8001862:	d0d9      	beq.n	8001818 <__gedf2+0x50>
 8001864:	e7e4      	b.n	8001830 <__gedf2+0x68>
 8001866:	4654      	mov	r4, sl
 8001868:	2c00      	cmp	r4, #0
 800186a:	d0ed      	beq.n	8001848 <__gedf2+0x80>
 800186c:	4584      	cmp	ip, r0
 800186e:	d1eb      	bne.n	8001848 <__gedf2+0x80>
 8001870:	4556      	cmp	r6, sl
 8001872:	dce9      	bgt.n	8001848 <__gedf2+0x80>
 8001874:	dbde      	blt.n	8001834 <__gedf2+0x6c>
 8001876:	9b01      	ldr	r3, [sp, #4]
 8001878:	428b      	cmp	r3, r1
 800187a:	d8e5      	bhi.n	8001848 <__gedf2+0x80>
 800187c:	d1da      	bne.n	8001834 <__gedf2+0x6c>
 800187e:	45c8      	cmp	r8, r9
 8001880:	d8e2      	bhi.n	8001848 <__gedf2+0x80>
 8001882:	2000      	movs	r0, #0
 8001884:	45c8      	cmp	r8, r9
 8001886:	d2e4      	bcs.n	8001852 <__gedf2+0x8a>
 8001888:	e7d4      	b.n	8001834 <__gedf2+0x6c>
 800188a:	2000      	movs	r0, #0
 800188c:	2c00      	cmp	r4, #0
 800188e:	d0e0      	beq.n	8001852 <__gedf2+0x8a>
 8001890:	e7da      	b.n	8001848 <__gedf2+0x80>
 8001892:	4311      	orrs	r1, r2
 8001894:	d103      	bne.n	800189e <__gedf2+0xd6>
 8001896:	4584      	cmp	ip, r0
 8001898:	d1d6      	bne.n	8001848 <__gedf2+0x80>
 800189a:	2000      	movs	r0, #0
 800189c:	e7d9      	b.n	8001852 <__gedf2+0x8a>
 800189e:	2002      	movs	r0, #2
 80018a0:	4240      	negs	r0, r0
 80018a2:	e7d6      	b.n	8001852 <__gedf2+0x8a>
 80018a4:	4584      	cmp	ip, r0
 80018a6:	d0e6      	beq.n	8001876 <__gedf2+0xae>
 80018a8:	e7ce      	b.n	8001848 <__gedf2+0x80>
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	000007ff 	.word	0x000007ff

080018b0 <__ledf2>:
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	4657      	mov	r7, sl
 80018b4:	464e      	mov	r6, r9
 80018b6:	4645      	mov	r5, r8
 80018b8:	46de      	mov	lr, fp
 80018ba:	b5e0      	push	{r5, r6, r7, lr}
 80018bc:	000d      	movs	r5, r1
 80018be:	030f      	lsls	r7, r1, #12
 80018c0:	0004      	movs	r4, r0
 80018c2:	4680      	mov	r8, r0
 80018c4:	0fe8      	lsrs	r0, r5, #31
 80018c6:	0b39      	lsrs	r1, r7, #12
 80018c8:	4684      	mov	ip, r0
 80018ca:	b083      	sub	sp, #12
 80018cc:	0058      	lsls	r0, r3, #1
 80018ce:	4f30      	ldr	r7, [pc, #192]	@ (8001990 <__ledf2+0xe0>)
 80018d0:	0d40      	lsrs	r0, r0, #21
 80018d2:	9101      	str	r1, [sp, #4]
 80018d4:	031e      	lsls	r6, r3, #12
 80018d6:	0069      	lsls	r1, r5, #1
 80018d8:	4682      	mov	sl, r0
 80018da:	4691      	mov	r9, r2
 80018dc:	0d49      	lsrs	r1, r1, #21
 80018de:	0b36      	lsrs	r6, r6, #12
 80018e0:	0fd8      	lsrs	r0, r3, #31
 80018e2:	42b9      	cmp	r1, r7
 80018e4:	d020      	beq.n	8001928 <__ledf2+0x78>
 80018e6:	45ba      	cmp	sl, r7
 80018e8:	d00f      	beq.n	800190a <__ledf2+0x5a>
 80018ea:	2900      	cmp	r1, #0
 80018ec:	d12b      	bne.n	8001946 <__ledf2+0x96>
 80018ee:	9901      	ldr	r1, [sp, #4]
 80018f0:	430c      	orrs	r4, r1
 80018f2:	4651      	mov	r1, sl
 80018f4:	2900      	cmp	r1, #0
 80018f6:	d137      	bne.n	8001968 <__ledf2+0xb8>
 80018f8:	4332      	orrs	r2, r6
 80018fa:	d038      	beq.n	800196e <__ledf2+0xbe>
 80018fc:	2c00      	cmp	r4, #0
 80018fe:	d144      	bne.n	800198a <__ledf2+0xda>
 8001900:	2800      	cmp	r0, #0
 8001902:	d119      	bne.n	8001938 <__ledf2+0x88>
 8001904:	2001      	movs	r0, #1
 8001906:	4240      	negs	r0, r0
 8001908:	e016      	b.n	8001938 <__ledf2+0x88>
 800190a:	4316      	orrs	r6, r2
 800190c:	d113      	bne.n	8001936 <__ledf2+0x86>
 800190e:	2900      	cmp	r1, #0
 8001910:	d102      	bne.n	8001918 <__ledf2+0x68>
 8001912:	9f01      	ldr	r7, [sp, #4]
 8001914:	4327      	orrs	r7, r4
 8001916:	d0f3      	beq.n	8001900 <__ledf2+0x50>
 8001918:	4584      	cmp	ip, r0
 800191a:	d020      	beq.n	800195e <__ledf2+0xae>
 800191c:	4663      	mov	r3, ip
 800191e:	2002      	movs	r0, #2
 8001920:	3b01      	subs	r3, #1
 8001922:	4018      	ands	r0, r3
 8001924:	3801      	subs	r0, #1
 8001926:	e007      	b.n	8001938 <__ledf2+0x88>
 8001928:	9f01      	ldr	r7, [sp, #4]
 800192a:	4327      	orrs	r7, r4
 800192c:	d103      	bne.n	8001936 <__ledf2+0x86>
 800192e:	458a      	cmp	sl, r1
 8001930:	d1f4      	bne.n	800191c <__ledf2+0x6c>
 8001932:	4316      	orrs	r6, r2
 8001934:	d01f      	beq.n	8001976 <__ledf2+0xc6>
 8001936:	2002      	movs	r0, #2
 8001938:	b003      	add	sp, #12
 800193a:	bcf0      	pop	{r4, r5, r6, r7}
 800193c:	46bb      	mov	fp, r7
 800193e:	46b2      	mov	sl, r6
 8001940:	46a9      	mov	r9, r5
 8001942:	46a0      	mov	r8, r4
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001946:	4654      	mov	r4, sl
 8001948:	2c00      	cmp	r4, #0
 800194a:	d0e7      	beq.n	800191c <__ledf2+0x6c>
 800194c:	4584      	cmp	ip, r0
 800194e:	d1e5      	bne.n	800191c <__ledf2+0x6c>
 8001950:	4551      	cmp	r1, sl
 8001952:	dce3      	bgt.n	800191c <__ledf2+0x6c>
 8001954:	db03      	blt.n	800195e <__ledf2+0xae>
 8001956:	9b01      	ldr	r3, [sp, #4]
 8001958:	42b3      	cmp	r3, r6
 800195a:	d8df      	bhi.n	800191c <__ledf2+0x6c>
 800195c:	d00f      	beq.n	800197e <__ledf2+0xce>
 800195e:	4663      	mov	r3, ip
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0cf      	beq.n	8001904 <__ledf2+0x54>
 8001964:	4660      	mov	r0, ip
 8001966:	e7e7      	b.n	8001938 <__ledf2+0x88>
 8001968:	2c00      	cmp	r4, #0
 800196a:	d0c9      	beq.n	8001900 <__ledf2+0x50>
 800196c:	e7d4      	b.n	8001918 <__ledf2+0x68>
 800196e:	2000      	movs	r0, #0
 8001970:	2c00      	cmp	r4, #0
 8001972:	d0e1      	beq.n	8001938 <__ledf2+0x88>
 8001974:	e7d2      	b.n	800191c <__ledf2+0x6c>
 8001976:	4584      	cmp	ip, r0
 8001978:	d1d0      	bne.n	800191c <__ledf2+0x6c>
 800197a:	2000      	movs	r0, #0
 800197c:	e7dc      	b.n	8001938 <__ledf2+0x88>
 800197e:	45c8      	cmp	r8, r9
 8001980:	d8cc      	bhi.n	800191c <__ledf2+0x6c>
 8001982:	2000      	movs	r0, #0
 8001984:	45c8      	cmp	r8, r9
 8001986:	d2d7      	bcs.n	8001938 <__ledf2+0x88>
 8001988:	e7e9      	b.n	800195e <__ledf2+0xae>
 800198a:	4584      	cmp	ip, r0
 800198c:	d0e3      	beq.n	8001956 <__ledf2+0xa6>
 800198e:	e7c5      	b.n	800191c <__ledf2+0x6c>
 8001990:	000007ff 	.word	0x000007ff

08001994 <__aeabi_dmul>:
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	4657      	mov	r7, sl
 8001998:	46de      	mov	lr, fp
 800199a:	464e      	mov	r6, r9
 800199c:	4645      	mov	r5, r8
 800199e:	b5e0      	push	{r5, r6, r7, lr}
 80019a0:	001f      	movs	r7, r3
 80019a2:	030b      	lsls	r3, r1, #12
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	0016      	movs	r6, r2
 80019a8:	469a      	mov	sl, r3
 80019aa:	0fca      	lsrs	r2, r1, #31
 80019ac:	004b      	lsls	r3, r1, #1
 80019ae:	0004      	movs	r4, r0
 80019b0:	4693      	mov	fp, r2
 80019b2:	b087      	sub	sp, #28
 80019b4:	0d5b      	lsrs	r3, r3, #21
 80019b6:	d100      	bne.n	80019ba <__aeabi_dmul+0x26>
 80019b8:	e0d5      	b.n	8001b66 <__aeabi_dmul+0x1d2>
 80019ba:	4abb      	ldr	r2, [pc, #748]	@ (8001ca8 <__aeabi_dmul+0x314>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d100      	bne.n	80019c2 <__aeabi_dmul+0x2e>
 80019c0:	e0f8      	b.n	8001bb4 <__aeabi_dmul+0x220>
 80019c2:	4651      	mov	r1, sl
 80019c4:	0f42      	lsrs	r2, r0, #29
 80019c6:	00c9      	lsls	r1, r1, #3
 80019c8:	430a      	orrs	r2, r1
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	0409      	lsls	r1, r1, #16
 80019ce:	4311      	orrs	r1, r2
 80019d0:	00c2      	lsls	r2, r0, #3
 80019d2:	4691      	mov	r9, r2
 80019d4:	4ab5      	ldr	r2, [pc, #724]	@ (8001cac <__aeabi_dmul+0x318>)
 80019d6:	468a      	mov	sl, r1
 80019d8:	189d      	adds	r5, r3, r2
 80019da:	2300      	movs	r3, #0
 80019dc:	4698      	mov	r8, r3
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	033c      	lsls	r4, r7, #12
 80019e2:	007b      	lsls	r3, r7, #1
 80019e4:	0ffa      	lsrs	r2, r7, #31
 80019e6:	0030      	movs	r0, r6
 80019e8:	0b24      	lsrs	r4, r4, #12
 80019ea:	0d5b      	lsrs	r3, r3, #21
 80019ec:	9200      	str	r2, [sp, #0]
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dmul+0x5e>
 80019f0:	e096      	b.n	8001b20 <__aeabi_dmul+0x18c>
 80019f2:	4aad      	ldr	r2, [pc, #692]	@ (8001ca8 <__aeabi_dmul+0x314>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d031      	beq.n	8001a5c <__aeabi_dmul+0xc8>
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	00e4      	lsls	r4, r4, #3
 80019fc:	4322      	orrs	r2, r4
 80019fe:	2480      	movs	r4, #128	@ 0x80
 8001a00:	0424      	lsls	r4, r4, #16
 8001a02:	4314      	orrs	r4, r2
 8001a04:	4aa9      	ldr	r2, [pc, #676]	@ (8001cac <__aeabi_dmul+0x318>)
 8001a06:	00f0      	lsls	r0, r6, #3
 8001a08:	4694      	mov	ip, r2
 8001a0a:	4463      	add	r3, ip
 8001a0c:	195b      	adds	r3, r3, r5
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	4642      	mov	r2, r8
 8001a14:	2600      	movs	r6, #0
 8001a16:	2a0a      	cmp	r2, #10
 8001a18:	dc42      	bgt.n	8001aa0 <__aeabi_dmul+0x10c>
 8001a1a:	465a      	mov	r2, fp
 8001a1c:	9900      	ldr	r1, [sp, #0]
 8001a1e:	404a      	eors	r2, r1
 8001a20:	4693      	mov	fp, r2
 8001a22:	4642      	mov	r2, r8
 8001a24:	2a02      	cmp	r2, #2
 8001a26:	dc32      	bgt.n	8001a8e <__aeabi_dmul+0xfa>
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	2a01      	cmp	r2, #1
 8001a2c:	d900      	bls.n	8001a30 <__aeabi_dmul+0x9c>
 8001a2e:	e149      	b.n	8001cc4 <__aeabi_dmul+0x330>
 8001a30:	2e02      	cmp	r6, #2
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dmul+0xa2>
 8001a34:	e0ca      	b.n	8001bcc <__aeabi_dmul+0x238>
 8001a36:	2e01      	cmp	r6, #1
 8001a38:	d13d      	bne.n	8001ab6 <__aeabi_dmul+0x122>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	0010      	movs	r0, r2
 8001a42:	465a      	mov	r2, fp
 8001a44:	051b      	lsls	r3, r3, #20
 8001a46:	4323      	orrs	r3, r4
 8001a48:	07d2      	lsls	r2, r2, #31
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	b007      	add	sp, #28
 8001a50:	bcf0      	pop	{r4, r5, r6, r7}
 8001a52:	46bb      	mov	fp, r7
 8001a54:	46b2      	mov	sl, r6
 8001a56:	46a9      	mov	r9, r5
 8001a58:	46a0      	mov	r8, r4
 8001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5c:	4b92      	ldr	r3, [pc, #584]	@ (8001ca8 <__aeabi_dmul+0x314>)
 8001a5e:	4326      	orrs	r6, r4
 8001a60:	18eb      	adds	r3, r5, r3
 8001a62:	2e00      	cmp	r6, #0
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dmul+0xd4>
 8001a66:	e0bb      	b.n	8001be0 <__aeabi_dmul+0x24c>
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4641      	mov	r1, r8
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	465a      	mov	r2, fp
 8001a70:	4688      	mov	r8, r1
 8001a72:	9900      	ldr	r1, [sp, #0]
 8001a74:	404a      	eors	r2, r1
 8001a76:	2180      	movs	r1, #128	@ 0x80
 8001a78:	0109      	lsls	r1, r1, #4
 8001a7a:	468c      	mov	ip, r1
 8001a7c:	0029      	movs	r1, r5
 8001a7e:	4461      	add	r1, ip
 8001a80:	9101      	str	r1, [sp, #4]
 8001a82:	4641      	mov	r1, r8
 8001a84:	290a      	cmp	r1, #10
 8001a86:	dd00      	ble.n	8001a8a <__aeabi_dmul+0xf6>
 8001a88:	e233      	b.n	8001ef2 <__aeabi_dmul+0x55e>
 8001a8a:	4693      	mov	fp, r2
 8001a8c:	2603      	movs	r6, #3
 8001a8e:	4642      	mov	r2, r8
 8001a90:	2701      	movs	r7, #1
 8001a92:	4097      	lsls	r7, r2
 8001a94:	21a6      	movs	r1, #166	@ 0xa6
 8001a96:	003a      	movs	r2, r7
 8001a98:	00c9      	lsls	r1, r1, #3
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	420f      	tst	r7, r1
 8001a9e:	d031      	beq.n	8001b04 <__aeabi_dmul+0x170>
 8001aa0:	9e02      	ldr	r6, [sp, #8]
 8001aa2:	2e02      	cmp	r6, #2
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dmul+0x114>
 8001aa6:	e235      	b.n	8001f14 <__aeabi_dmul+0x580>
 8001aa8:	2e03      	cmp	r6, #3
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dmul+0x11a>
 8001aac:	e1d2      	b.n	8001e54 <__aeabi_dmul+0x4c0>
 8001aae:	4654      	mov	r4, sl
 8001ab0:	4648      	mov	r0, r9
 8001ab2:	2e01      	cmp	r6, #1
 8001ab4:	d0c1      	beq.n	8001a3a <__aeabi_dmul+0xa6>
 8001ab6:	9a01      	ldr	r2, [sp, #4]
 8001ab8:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb0 <__aeabi_dmul+0x31c>)
 8001aba:	4694      	mov	ip, r2
 8001abc:	4463      	add	r3, ip
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	dc00      	bgt.n	8001ac4 <__aeabi_dmul+0x130>
 8001ac2:	e0c0      	b.n	8001c46 <__aeabi_dmul+0x2b2>
 8001ac4:	0742      	lsls	r2, r0, #29
 8001ac6:	d009      	beq.n	8001adc <__aeabi_dmul+0x148>
 8001ac8:	220f      	movs	r2, #15
 8001aca:	4002      	ands	r2, r0
 8001acc:	2a04      	cmp	r2, #4
 8001ace:	d005      	beq.n	8001adc <__aeabi_dmul+0x148>
 8001ad0:	1d02      	adds	r2, r0, #4
 8001ad2:	4282      	cmp	r2, r0
 8001ad4:	4180      	sbcs	r0, r0
 8001ad6:	4240      	negs	r0, r0
 8001ad8:	1824      	adds	r4, r4, r0
 8001ada:	0010      	movs	r0, r2
 8001adc:	01e2      	lsls	r2, r4, #7
 8001ade:	d506      	bpl.n	8001aee <__aeabi_dmul+0x15a>
 8001ae0:	4b74      	ldr	r3, [pc, #464]	@ (8001cb4 <__aeabi_dmul+0x320>)
 8001ae2:	9a01      	ldr	r2, [sp, #4]
 8001ae4:	401c      	ands	r4, r3
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	4694      	mov	ip, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4463      	add	r3, ip
 8001aee:	4a72      	ldr	r2, [pc, #456]	@ (8001cb8 <__aeabi_dmul+0x324>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	dc6b      	bgt.n	8001bcc <__aeabi_dmul+0x238>
 8001af4:	0762      	lsls	r2, r4, #29
 8001af6:	08c0      	lsrs	r0, r0, #3
 8001af8:	0264      	lsls	r4, r4, #9
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	4302      	orrs	r2, r0
 8001afe:	0b24      	lsrs	r4, r4, #12
 8001b00:	0d5b      	lsrs	r3, r3, #21
 8001b02:	e79d      	b.n	8001a40 <__aeabi_dmul+0xac>
 8001b04:	2190      	movs	r1, #144	@ 0x90
 8001b06:	0089      	lsls	r1, r1, #2
 8001b08:	420f      	tst	r7, r1
 8001b0a:	d163      	bne.n	8001bd4 <__aeabi_dmul+0x240>
 8001b0c:	2288      	movs	r2, #136	@ 0x88
 8001b0e:	423a      	tst	r2, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dmul+0x180>
 8001b12:	e0d7      	b.n	8001cc4 <__aeabi_dmul+0x330>
 8001b14:	9b00      	ldr	r3, [sp, #0]
 8001b16:	46a2      	mov	sl, r4
 8001b18:	469b      	mov	fp, r3
 8001b1a:	4681      	mov	r9, r0
 8001b1c:	9602      	str	r6, [sp, #8]
 8001b1e:	e7bf      	b.n	8001aa0 <__aeabi_dmul+0x10c>
 8001b20:	0023      	movs	r3, r4
 8001b22:	4333      	orrs	r3, r6
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dmul+0x194>
 8001b26:	e07f      	b.n	8001c28 <__aeabi_dmul+0x294>
 8001b28:	2c00      	cmp	r4, #0
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dmul+0x19a>
 8001b2c:	e1ad      	b.n	8001e8a <__aeabi_dmul+0x4f6>
 8001b2e:	0020      	movs	r0, r4
 8001b30:	f000 fe44 	bl	80027bc <__clzsi2>
 8001b34:	0002      	movs	r2, r0
 8001b36:	0003      	movs	r3, r0
 8001b38:	3a0b      	subs	r2, #11
 8001b3a:	201d      	movs	r0, #29
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	1a82      	subs	r2, r0, r2
 8001b40:	0030      	movs	r0, r6
 8001b42:	3908      	subs	r1, #8
 8001b44:	40d0      	lsrs	r0, r2
 8001b46:	408c      	lsls	r4, r1
 8001b48:	4304      	orrs	r4, r0
 8001b4a:	0030      	movs	r0, r6
 8001b4c:	4088      	lsls	r0, r1
 8001b4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cbc <__aeabi_dmul+0x328>)
 8001b50:	1aeb      	subs	r3, r5, r3
 8001b52:	4694      	mov	ip, r2
 8001b54:	4463      	add	r3, ip
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	9201      	str	r2, [sp, #4]
 8001b5a:	4642      	mov	r2, r8
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	2a0a      	cmp	r2, #10
 8001b60:	dc00      	bgt.n	8001b64 <__aeabi_dmul+0x1d0>
 8001b62:	e75a      	b.n	8001a1a <__aeabi_dmul+0x86>
 8001b64:	e79c      	b.n	8001aa0 <__aeabi_dmul+0x10c>
 8001b66:	4653      	mov	r3, sl
 8001b68:	4303      	orrs	r3, r0
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	d054      	beq.n	8001c18 <__aeabi_dmul+0x284>
 8001b6e:	4653      	mov	r3, sl
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dmul+0x1e2>
 8001b74:	e177      	b.n	8001e66 <__aeabi_dmul+0x4d2>
 8001b76:	4650      	mov	r0, sl
 8001b78:	f000 fe20 	bl	80027bc <__clzsi2>
 8001b7c:	230b      	movs	r3, #11
 8001b7e:	425b      	negs	r3, r3
 8001b80:	469c      	mov	ip, r3
 8001b82:	0002      	movs	r2, r0
 8001b84:	4484      	add	ip, r0
 8001b86:	0011      	movs	r1, r2
 8001b88:	4650      	mov	r0, sl
 8001b8a:	3908      	subs	r1, #8
 8001b8c:	4088      	lsls	r0, r1
 8001b8e:	231d      	movs	r3, #29
 8001b90:	4680      	mov	r8, r0
 8001b92:	4660      	mov	r0, ip
 8001b94:	1a1b      	subs	r3, r3, r0
 8001b96:	0020      	movs	r0, r4
 8001b98:	40d8      	lsrs	r0, r3
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	4640      	mov	r0, r8
 8001b9e:	4303      	orrs	r3, r0
 8001ba0:	469a      	mov	sl, r3
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	408b      	lsls	r3, r1
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	4d44      	ldr	r5, [pc, #272]	@ (8001cbc <__aeabi_dmul+0x328>)
 8001bac:	4698      	mov	r8, r3
 8001bae:	1aad      	subs	r5, r5, r2
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	e715      	b.n	80019e0 <__aeabi_dmul+0x4c>
 8001bb4:	4652      	mov	r2, sl
 8001bb6:	4302      	orrs	r2, r0
 8001bb8:	4691      	mov	r9, r2
 8001bba:	d126      	bne.n	8001c0a <__aeabi_dmul+0x276>
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	001d      	movs	r5, r3
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	4690      	mov	r8, r2
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	e709      	b.n	80019e0 <__aeabi_dmul+0x4c>
 8001bcc:	2400      	movs	r4, #0
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4b35      	ldr	r3, [pc, #212]	@ (8001ca8 <__aeabi_dmul+0x314>)
 8001bd2:	e735      	b.n	8001a40 <__aeabi_dmul+0xac>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2480      	movs	r4, #128	@ 0x80
 8001bd8:	469b      	mov	fp, r3
 8001bda:	0324      	lsls	r4, r4, #12
 8001bdc:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <__aeabi_dmul+0x314>)
 8001bde:	e72f      	b.n	8001a40 <__aeabi_dmul+0xac>
 8001be0:	2202      	movs	r2, #2
 8001be2:	4641      	mov	r1, r8
 8001be4:	4311      	orrs	r1, r2
 8001be6:	2280      	movs	r2, #128	@ 0x80
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	4694      	mov	ip, r2
 8001bec:	002a      	movs	r2, r5
 8001bee:	4462      	add	r2, ip
 8001bf0:	4688      	mov	r8, r1
 8001bf2:	9201      	str	r2, [sp, #4]
 8001bf4:	290a      	cmp	r1, #10
 8001bf6:	dd00      	ble.n	8001bfa <__aeabi_dmul+0x266>
 8001bf8:	e752      	b.n	8001aa0 <__aeabi_dmul+0x10c>
 8001bfa:	465a      	mov	r2, fp
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	9900      	ldr	r1, [sp, #0]
 8001c00:	0004      	movs	r4, r0
 8001c02:	404a      	eors	r2, r1
 8001c04:	4693      	mov	fp, r2
 8001c06:	2602      	movs	r6, #2
 8001c08:	e70b      	b.n	8001a22 <__aeabi_dmul+0x8e>
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	001d      	movs	r5, r3
 8001c0e:	2303      	movs	r3, #3
 8001c10:	4681      	mov	r9, r0
 8001c12:	4690      	mov	r8, r2
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	e6e3      	b.n	80019e0 <__aeabi_dmul+0x4c>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	469a      	mov	sl, r3
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	4698      	mov	r8, r3
 8001c20:	3b03      	subs	r3, #3
 8001c22:	2500      	movs	r5, #0
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	e6db      	b.n	80019e0 <__aeabi_dmul+0x4c>
 8001c28:	4642      	mov	r2, r8
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	002b      	movs	r3, r5
 8001c30:	4690      	mov	r8, r2
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	4642      	mov	r2, r8
 8001c38:	2400      	movs	r4, #0
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	2601      	movs	r6, #1
 8001c3e:	2a0a      	cmp	r2, #10
 8001c40:	dc00      	bgt.n	8001c44 <__aeabi_dmul+0x2b0>
 8001c42:	e6ea      	b.n	8001a1a <__aeabi_dmul+0x86>
 8001c44:	e72c      	b.n	8001aa0 <__aeabi_dmul+0x10c>
 8001c46:	2201      	movs	r2, #1
 8001c48:	1ad2      	subs	r2, r2, r3
 8001c4a:	2a38      	cmp	r2, #56	@ 0x38
 8001c4c:	dd00      	ble.n	8001c50 <__aeabi_dmul+0x2bc>
 8001c4e:	e6f4      	b.n	8001a3a <__aeabi_dmul+0xa6>
 8001c50:	2a1f      	cmp	r2, #31
 8001c52:	dc00      	bgt.n	8001c56 <__aeabi_dmul+0x2c2>
 8001c54:	e12a      	b.n	8001eac <__aeabi_dmul+0x518>
 8001c56:	211f      	movs	r1, #31
 8001c58:	4249      	negs	r1, r1
 8001c5a:	1acb      	subs	r3, r1, r3
 8001c5c:	0021      	movs	r1, r4
 8001c5e:	40d9      	lsrs	r1, r3
 8001c60:	000b      	movs	r3, r1
 8001c62:	2a20      	cmp	r2, #32
 8001c64:	d005      	beq.n	8001c72 <__aeabi_dmul+0x2de>
 8001c66:	4a16      	ldr	r2, [pc, #88]	@ (8001cc0 <__aeabi_dmul+0x32c>)
 8001c68:	9d01      	ldr	r5, [sp, #4]
 8001c6a:	4694      	mov	ip, r2
 8001c6c:	4465      	add	r5, ip
 8001c6e:	40ac      	lsls	r4, r5
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	4318      	orrs	r0, r3
 8001c78:	2307      	movs	r3, #7
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	4001      	ands	r1, r0
 8001c80:	4203      	tst	r3, r0
 8001c82:	d00c      	beq.n	8001c9e <__aeabi_dmul+0x30a>
 8001c84:	230f      	movs	r3, #15
 8001c86:	4003      	ands	r3, r0
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dmul+0x2fa>
 8001c8c:	e140      	b.n	8001f10 <__aeabi_dmul+0x57c>
 8001c8e:	1d03      	adds	r3, r0, #4
 8001c90:	4283      	cmp	r3, r0
 8001c92:	41a4      	sbcs	r4, r4
 8001c94:	0018      	movs	r0, r3
 8001c96:	4264      	negs	r4, r4
 8001c98:	0761      	lsls	r1, r4, #29
 8001c9a:	0264      	lsls	r4, r4, #9
 8001c9c:	0b24      	lsrs	r4, r4, #12
 8001c9e:	08c2      	lsrs	r2, r0, #3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	e6cc      	b.n	8001a40 <__aeabi_dmul+0xac>
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	000007ff 	.word	0x000007ff
 8001cac:	fffffc01 	.word	0xfffffc01
 8001cb0:	000003ff 	.word	0x000003ff
 8001cb4:	feffffff 	.word	0xfeffffff
 8001cb8:	000007fe 	.word	0x000007fe
 8001cbc:	fffffc0d 	.word	0xfffffc0d
 8001cc0:	0000043e 	.word	0x0000043e
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	464a      	mov	r2, r9
 8001cc8:	0409      	lsls	r1, r1, #16
 8001cca:	0c09      	lsrs	r1, r1, #16
 8001ccc:	000d      	movs	r5, r1
 8001cce:	0c16      	lsrs	r6, r2, #16
 8001cd0:	0c02      	lsrs	r2, r0, #16
 8001cd2:	0400      	lsls	r0, r0, #16
 8001cd4:	0c00      	lsrs	r0, r0, #16
 8001cd6:	4345      	muls	r5, r0
 8001cd8:	46ac      	mov	ip, r5
 8001cda:	0005      	movs	r5, r0
 8001cdc:	4375      	muls	r5, r6
 8001cde:	46a8      	mov	r8, r5
 8001ce0:	0015      	movs	r5, r2
 8001ce2:	000f      	movs	r7, r1
 8001ce4:	4375      	muls	r5, r6
 8001ce6:	9200      	str	r2, [sp, #0]
 8001ce8:	9502      	str	r5, [sp, #8]
 8001cea:	002a      	movs	r2, r5
 8001cec:	9d00      	ldr	r5, [sp, #0]
 8001cee:	436f      	muls	r7, r5
 8001cf0:	4665      	mov	r5, ip
 8001cf2:	0c2d      	lsrs	r5, r5, #16
 8001cf4:	46a9      	mov	r9, r5
 8001cf6:	4447      	add	r7, r8
 8001cf8:	444f      	add	r7, r9
 8001cfa:	45b8      	cmp	r8, r7
 8001cfc:	d905      	bls.n	8001d0a <__aeabi_dmul+0x376>
 8001cfe:	0015      	movs	r5, r2
 8001d00:	2280      	movs	r2, #128	@ 0x80
 8001d02:	0252      	lsls	r2, r2, #9
 8001d04:	4690      	mov	r8, r2
 8001d06:	4445      	add	r5, r8
 8001d08:	9502      	str	r5, [sp, #8]
 8001d0a:	0c3d      	lsrs	r5, r7, #16
 8001d0c:	9503      	str	r5, [sp, #12]
 8001d0e:	4665      	mov	r5, ip
 8001d10:	042d      	lsls	r5, r5, #16
 8001d12:	043f      	lsls	r7, r7, #16
 8001d14:	0c2d      	lsrs	r5, r5, #16
 8001d16:	46ac      	mov	ip, r5
 8001d18:	003d      	movs	r5, r7
 8001d1a:	4465      	add	r5, ip
 8001d1c:	9504      	str	r5, [sp, #16]
 8001d1e:	0c25      	lsrs	r5, r4, #16
 8001d20:	0424      	lsls	r4, r4, #16
 8001d22:	0c24      	lsrs	r4, r4, #16
 8001d24:	46ac      	mov	ip, r5
 8001d26:	0025      	movs	r5, r4
 8001d28:	4375      	muls	r5, r6
 8001d2a:	46a8      	mov	r8, r5
 8001d2c:	4665      	mov	r5, ip
 8001d2e:	000f      	movs	r7, r1
 8001d30:	4369      	muls	r1, r5
 8001d32:	4441      	add	r1, r8
 8001d34:	4689      	mov	r9, r1
 8001d36:	4367      	muls	r7, r4
 8001d38:	0c39      	lsrs	r1, r7, #16
 8001d3a:	4449      	add	r1, r9
 8001d3c:	436e      	muls	r6, r5
 8001d3e:	4588      	cmp	r8, r1
 8001d40:	d903      	bls.n	8001d4a <__aeabi_dmul+0x3b6>
 8001d42:	2280      	movs	r2, #128	@ 0x80
 8001d44:	0252      	lsls	r2, r2, #9
 8001d46:	4690      	mov	r8, r2
 8001d48:	4446      	add	r6, r8
 8001d4a:	0c0d      	lsrs	r5, r1, #16
 8001d4c:	46a8      	mov	r8, r5
 8001d4e:	0035      	movs	r5, r6
 8001d50:	4445      	add	r5, r8
 8001d52:	9505      	str	r5, [sp, #20]
 8001d54:	9d03      	ldr	r5, [sp, #12]
 8001d56:	043f      	lsls	r7, r7, #16
 8001d58:	46a8      	mov	r8, r5
 8001d5a:	0c3f      	lsrs	r7, r7, #16
 8001d5c:	0409      	lsls	r1, r1, #16
 8001d5e:	19c9      	adds	r1, r1, r7
 8001d60:	4488      	add	r8, r1
 8001d62:	4645      	mov	r5, r8
 8001d64:	9503      	str	r5, [sp, #12]
 8001d66:	4655      	mov	r5, sl
 8001d68:	042e      	lsls	r6, r5, #16
 8001d6a:	0c36      	lsrs	r6, r6, #16
 8001d6c:	0c2f      	lsrs	r7, r5, #16
 8001d6e:	0035      	movs	r5, r6
 8001d70:	4345      	muls	r5, r0
 8001d72:	4378      	muls	r0, r7
 8001d74:	4681      	mov	r9, r0
 8001d76:	0038      	movs	r0, r7
 8001d78:	46a8      	mov	r8, r5
 8001d7a:	0c2d      	lsrs	r5, r5, #16
 8001d7c:	46aa      	mov	sl, r5
 8001d7e:	9a00      	ldr	r2, [sp, #0]
 8001d80:	4350      	muls	r0, r2
 8001d82:	4372      	muls	r2, r6
 8001d84:	444a      	add	r2, r9
 8001d86:	4452      	add	r2, sl
 8001d88:	4591      	cmp	r9, r2
 8001d8a:	d903      	bls.n	8001d94 <__aeabi_dmul+0x400>
 8001d8c:	2580      	movs	r5, #128	@ 0x80
 8001d8e:	026d      	lsls	r5, r5, #9
 8001d90:	46a9      	mov	r9, r5
 8001d92:	4448      	add	r0, r9
 8001d94:	0c15      	lsrs	r5, r2, #16
 8001d96:	46a9      	mov	r9, r5
 8001d98:	4645      	mov	r5, r8
 8001d9a:	042d      	lsls	r5, r5, #16
 8001d9c:	0c2d      	lsrs	r5, r5, #16
 8001d9e:	46a8      	mov	r8, r5
 8001da0:	4665      	mov	r5, ip
 8001da2:	437d      	muls	r5, r7
 8001da4:	0412      	lsls	r2, r2, #16
 8001da6:	4448      	add	r0, r9
 8001da8:	4490      	add	r8, r2
 8001daa:	46a9      	mov	r9, r5
 8001dac:	0032      	movs	r2, r6
 8001dae:	4665      	mov	r5, ip
 8001db0:	4362      	muls	r2, r4
 8001db2:	436e      	muls	r6, r5
 8001db4:	437c      	muls	r4, r7
 8001db6:	0c17      	lsrs	r7, r2, #16
 8001db8:	1936      	adds	r6, r6, r4
 8001dba:	19bf      	adds	r7, r7, r6
 8001dbc:	42bc      	cmp	r4, r7
 8001dbe:	d903      	bls.n	8001dc8 <__aeabi_dmul+0x434>
 8001dc0:	2480      	movs	r4, #128	@ 0x80
 8001dc2:	0264      	lsls	r4, r4, #9
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	44e1      	add	r9, ip
 8001dc8:	9c02      	ldr	r4, [sp, #8]
 8001dca:	9e03      	ldr	r6, [sp, #12]
 8001dcc:	46a4      	mov	ip, r4
 8001dce:	9d05      	ldr	r5, [sp, #20]
 8001dd0:	4466      	add	r6, ip
 8001dd2:	428e      	cmp	r6, r1
 8001dd4:	4189      	sbcs	r1, r1
 8001dd6:	46ac      	mov	ip, r5
 8001dd8:	0412      	lsls	r2, r2, #16
 8001dda:	043c      	lsls	r4, r7, #16
 8001ddc:	0c12      	lsrs	r2, r2, #16
 8001dde:	18a2      	adds	r2, r4, r2
 8001de0:	4462      	add	r2, ip
 8001de2:	4249      	negs	r1, r1
 8001de4:	1854      	adds	r4, r2, r1
 8001de6:	4446      	add	r6, r8
 8001de8:	46a4      	mov	ip, r4
 8001dea:	4546      	cmp	r6, r8
 8001dec:	41a4      	sbcs	r4, r4
 8001dee:	4682      	mov	sl, r0
 8001df0:	4264      	negs	r4, r4
 8001df2:	46a0      	mov	r8, r4
 8001df4:	42aa      	cmp	r2, r5
 8001df6:	4192      	sbcs	r2, r2
 8001df8:	458c      	cmp	ip, r1
 8001dfa:	4189      	sbcs	r1, r1
 8001dfc:	44e2      	add	sl, ip
 8001dfe:	44d0      	add	r8, sl
 8001e00:	4249      	negs	r1, r1
 8001e02:	4252      	negs	r2, r2
 8001e04:	430a      	orrs	r2, r1
 8001e06:	45a0      	cmp	r8, r4
 8001e08:	41a4      	sbcs	r4, r4
 8001e0a:	4582      	cmp	sl, r0
 8001e0c:	4189      	sbcs	r1, r1
 8001e0e:	4264      	negs	r4, r4
 8001e10:	4249      	negs	r1, r1
 8001e12:	430c      	orrs	r4, r1
 8001e14:	4641      	mov	r1, r8
 8001e16:	0c3f      	lsrs	r7, r7, #16
 8001e18:	19d2      	adds	r2, r2, r7
 8001e1a:	1912      	adds	r2, r2, r4
 8001e1c:	0dcc      	lsrs	r4, r1, #23
 8001e1e:	9904      	ldr	r1, [sp, #16]
 8001e20:	0270      	lsls	r0, r6, #9
 8001e22:	4308      	orrs	r0, r1
 8001e24:	1e41      	subs	r1, r0, #1
 8001e26:	4188      	sbcs	r0, r1
 8001e28:	4641      	mov	r1, r8
 8001e2a:	444a      	add	r2, r9
 8001e2c:	0df6      	lsrs	r6, r6, #23
 8001e2e:	0252      	lsls	r2, r2, #9
 8001e30:	4330      	orrs	r0, r6
 8001e32:	0249      	lsls	r1, r1, #9
 8001e34:	4314      	orrs	r4, r2
 8001e36:	4308      	orrs	r0, r1
 8001e38:	01d2      	lsls	r2, r2, #7
 8001e3a:	d535      	bpl.n	8001ea8 <__aeabi_dmul+0x514>
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	0843      	lsrs	r3, r0, #1
 8001e40:	4002      	ands	r2, r0
 8001e42:	4313      	orrs	r3, r2
 8001e44:	07e0      	lsls	r0, r4, #31
 8001e46:	4318      	orrs	r0, r3
 8001e48:	0864      	lsrs	r4, r4, #1
 8001e4a:	e634      	b.n	8001ab6 <__aeabi_dmul+0x122>
 8001e4c:	9b00      	ldr	r3, [sp, #0]
 8001e4e:	46a2      	mov	sl, r4
 8001e50:	469b      	mov	fp, r3
 8001e52:	4681      	mov	r9, r0
 8001e54:	2480      	movs	r4, #128	@ 0x80
 8001e56:	4653      	mov	r3, sl
 8001e58:	0324      	lsls	r4, r4, #12
 8001e5a:	431c      	orrs	r4, r3
 8001e5c:	0324      	lsls	r4, r4, #12
 8001e5e:	464a      	mov	r2, r9
 8001e60:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <__aeabi_dmul+0x588>)
 8001e62:	0b24      	lsrs	r4, r4, #12
 8001e64:	e5ec      	b.n	8001a40 <__aeabi_dmul+0xac>
 8001e66:	f000 fca9 	bl	80027bc <__clzsi2>
 8001e6a:	2315      	movs	r3, #21
 8001e6c:	469c      	mov	ip, r3
 8001e6e:	4484      	add	ip, r0
 8001e70:	0002      	movs	r2, r0
 8001e72:	4663      	mov	r3, ip
 8001e74:	3220      	adds	r2, #32
 8001e76:	2b1c      	cmp	r3, #28
 8001e78:	dc00      	bgt.n	8001e7c <__aeabi_dmul+0x4e8>
 8001e7a:	e684      	b.n	8001b86 <__aeabi_dmul+0x1f2>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	4699      	mov	r9, r3
 8001e80:	0023      	movs	r3, r4
 8001e82:	3808      	subs	r0, #8
 8001e84:	4083      	lsls	r3, r0
 8001e86:	469a      	mov	sl, r3
 8001e88:	e68e      	b.n	8001ba8 <__aeabi_dmul+0x214>
 8001e8a:	f000 fc97 	bl	80027bc <__clzsi2>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	0003      	movs	r3, r0
 8001e92:	3215      	adds	r2, #21
 8001e94:	3320      	adds	r3, #32
 8001e96:	2a1c      	cmp	r2, #28
 8001e98:	dc00      	bgt.n	8001e9c <__aeabi_dmul+0x508>
 8001e9a:	e64e      	b.n	8001b3a <__aeabi_dmul+0x1a6>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	0034      	movs	r4, r6
 8001ea0:	3a08      	subs	r2, #8
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	4094      	lsls	r4, r2
 8001ea6:	e652      	b.n	8001b4e <__aeabi_dmul+0x1ba>
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	e604      	b.n	8001ab6 <__aeabi_dmul+0x122>
 8001eac:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <__aeabi_dmul+0x58c>)
 8001eae:	0021      	movs	r1, r4
 8001eb0:	469c      	mov	ip, r3
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	9d01      	ldr	r5, [sp, #4]
 8001eb6:	40d3      	lsrs	r3, r2
 8001eb8:	4465      	add	r5, ip
 8001eba:	40a9      	lsls	r1, r5
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	40ab      	lsls	r3, r5
 8001ec2:	1e58      	subs	r0, r3, #1
 8001ec4:	4183      	sbcs	r3, r0
 8001ec6:	4319      	orrs	r1, r3
 8001ec8:	0008      	movs	r0, r1
 8001eca:	40d4      	lsrs	r4, r2
 8001ecc:	074b      	lsls	r3, r1, #29
 8001ece:	d009      	beq.n	8001ee4 <__aeabi_dmul+0x550>
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	400b      	ands	r3, r1
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d005      	beq.n	8001ee4 <__aeabi_dmul+0x550>
 8001ed8:	1d0b      	adds	r3, r1, #4
 8001eda:	428b      	cmp	r3, r1
 8001edc:	4180      	sbcs	r0, r0
 8001ede:	4240      	negs	r0, r0
 8001ee0:	1824      	adds	r4, r4, r0
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	0223      	lsls	r3, r4, #8
 8001ee6:	d400      	bmi.n	8001eea <__aeabi_dmul+0x556>
 8001ee8:	e6d6      	b.n	8001c98 <__aeabi_dmul+0x304>
 8001eea:	2301      	movs	r3, #1
 8001eec:	2400      	movs	r4, #0
 8001eee:	2200      	movs	r2, #0
 8001ef0:	e5a6      	b.n	8001a40 <__aeabi_dmul+0xac>
 8001ef2:	290f      	cmp	r1, #15
 8001ef4:	d1aa      	bne.n	8001e4c <__aeabi_dmul+0x4b8>
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	4652      	mov	r2, sl
 8001efa:	031b      	lsls	r3, r3, #12
 8001efc:	421a      	tst	r2, r3
 8001efe:	d0a9      	beq.n	8001e54 <__aeabi_dmul+0x4c0>
 8001f00:	421c      	tst	r4, r3
 8001f02:	d1a7      	bne.n	8001e54 <__aeabi_dmul+0x4c0>
 8001f04:	431c      	orrs	r4, r3
 8001f06:	9b00      	ldr	r3, [sp, #0]
 8001f08:	0002      	movs	r2, r0
 8001f0a:	469b      	mov	fp, r3
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <__aeabi_dmul+0x588>)
 8001f0e:	e597      	b.n	8001a40 <__aeabi_dmul+0xac>
 8001f10:	2400      	movs	r4, #0
 8001f12:	e6c1      	b.n	8001c98 <__aeabi_dmul+0x304>
 8001f14:	2400      	movs	r4, #0
 8001f16:	4b01      	ldr	r3, [pc, #4]	@ (8001f1c <__aeabi_dmul+0x588>)
 8001f18:	0022      	movs	r2, r4
 8001f1a:	e591      	b.n	8001a40 <__aeabi_dmul+0xac>
 8001f1c:	000007ff 	.word	0x000007ff
 8001f20:	0000041e 	.word	0x0000041e

08001f24 <__aeabi_dsub>:
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	464e      	mov	r6, r9
 8001f28:	4645      	mov	r5, r8
 8001f2a:	46de      	mov	lr, fp
 8001f2c:	4657      	mov	r7, sl
 8001f2e:	b5e0      	push	{r5, r6, r7, lr}
 8001f30:	b085      	sub	sp, #20
 8001f32:	9000      	str	r0, [sp, #0]
 8001f34:	9101      	str	r1, [sp, #4]
 8001f36:	030c      	lsls	r4, r1, #12
 8001f38:	004f      	lsls	r7, r1, #1
 8001f3a:	0fce      	lsrs	r6, r1, #31
 8001f3c:	0a61      	lsrs	r1, r4, #9
 8001f3e:	9c00      	ldr	r4, [sp, #0]
 8001f40:	46b0      	mov	r8, r6
 8001f42:	0f64      	lsrs	r4, r4, #29
 8001f44:	430c      	orrs	r4, r1
 8001f46:	9900      	ldr	r1, [sp, #0]
 8001f48:	0d7f      	lsrs	r7, r7, #21
 8001f4a:	00c8      	lsls	r0, r1, #3
 8001f4c:	0011      	movs	r1, r2
 8001f4e:	001a      	movs	r2, r3
 8001f50:	031b      	lsls	r3, r3, #12
 8001f52:	469c      	mov	ip, r3
 8001f54:	9100      	str	r1, [sp, #0]
 8001f56:	9201      	str	r2, [sp, #4]
 8001f58:	0051      	lsls	r1, r2, #1
 8001f5a:	0d4b      	lsrs	r3, r1, #21
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	9b01      	ldr	r3, [sp, #4]
 8001f60:	9d00      	ldr	r5, [sp, #0]
 8001f62:	0fd9      	lsrs	r1, r3, #31
 8001f64:	4663      	mov	r3, ip
 8001f66:	0f6a      	lsrs	r2, r5, #29
 8001f68:	0a5b      	lsrs	r3, r3, #9
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	00ea      	lsls	r2, r5, #3
 8001f6e:	4694      	mov	ip, r2
 8001f70:	4693      	mov	fp, r2
 8001f72:	4ac1      	ldr	r2, [pc, #772]	@ (8002278 <__aeabi_dsub+0x354>)
 8001f74:	9003      	str	r0, [sp, #12]
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	4591      	cmp	r9, r2
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x5a>
 8001f7c:	e0cd      	b.n	800211a <__aeabi_dsub+0x1f6>
 8001f7e:	2501      	movs	r5, #1
 8001f80:	4069      	eors	r1, r5
 8001f82:	464d      	mov	r5, r9
 8001f84:	1b7d      	subs	r5, r7, r5
 8001f86:	46aa      	mov	sl, r5
 8001f88:	428e      	cmp	r6, r1
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x6a>
 8001f8c:	e080      	b.n	8002090 <__aeabi_dsub+0x16c>
 8001f8e:	2d00      	cmp	r5, #0
 8001f90:	dc00      	bgt.n	8001f94 <__aeabi_dsub+0x70>
 8001f92:	e335      	b.n	8002600 <__aeabi_dsub+0x6dc>
 8001f94:	4649      	mov	r1, r9
 8001f96:	2900      	cmp	r1, #0
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dsub+0x78>
 8001f9a:	e0df      	b.n	800215c <__aeabi_dsub+0x238>
 8001f9c:	4297      	cmp	r7, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dsub+0x7e>
 8001fa0:	e194      	b.n	80022cc <__aeabi_dsub+0x3a8>
 8001fa2:	4652      	mov	r2, sl
 8001fa4:	2501      	movs	r5, #1
 8001fa6:	2a38      	cmp	r2, #56	@ 0x38
 8001fa8:	dc19      	bgt.n	8001fde <__aeabi_dsub+0xba>
 8001faa:	2280      	movs	r2, #128	@ 0x80
 8001fac:	9b02      	ldr	r3, [sp, #8]
 8001fae:	0412      	lsls	r2, r2, #16
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	4652      	mov	r2, sl
 8001fb6:	2a1f      	cmp	r2, #31
 8001fb8:	dd00      	ble.n	8001fbc <__aeabi_dsub+0x98>
 8001fba:	e1e3      	b.n	8002384 <__aeabi_dsub+0x460>
 8001fbc:	4653      	mov	r3, sl
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	4661      	mov	r1, ip
 8001fc2:	9d02      	ldr	r5, [sp, #8]
 8001fc4:	1ad2      	subs	r2, r2, r3
 8001fc6:	4095      	lsls	r5, r2
 8001fc8:	40d9      	lsrs	r1, r3
 8001fca:	430d      	orrs	r5, r1
 8001fcc:	4661      	mov	r1, ip
 8001fce:	4091      	lsls	r1, r2
 8001fd0:	000a      	movs	r2, r1
 8001fd2:	1e51      	subs	r1, r2, #1
 8001fd4:	418a      	sbcs	r2, r1
 8001fd6:	4315      	orrs	r5, r2
 8001fd8:	9a02      	ldr	r2, [sp, #8]
 8001fda:	40da      	lsrs	r2, r3
 8001fdc:	1aa4      	subs	r4, r4, r2
 8001fde:	1b45      	subs	r5, r0, r5
 8001fe0:	42a8      	cmp	r0, r5
 8001fe2:	4180      	sbcs	r0, r0
 8001fe4:	4240      	negs	r0, r0
 8001fe6:	1a24      	subs	r4, r4, r0
 8001fe8:	0223      	lsls	r3, r4, #8
 8001fea:	d400      	bmi.n	8001fee <__aeabi_dsub+0xca>
 8001fec:	e13d      	b.n	800226a <__aeabi_dsub+0x346>
 8001fee:	0264      	lsls	r4, r4, #9
 8001ff0:	0a64      	lsrs	r4, r4, #9
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dsub+0xd4>
 8001ff6:	e147      	b.n	8002288 <__aeabi_dsub+0x364>
 8001ff8:	0020      	movs	r0, r4
 8001ffa:	f000 fbdf 	bl	80027bc <__clzsi2>
 8001ffe:	0003      	movs	r3, r0
 8002000:	3b08      	subs	r3, #8
 8002002:	2120      	movs	r1, #32
 8002004:	0028      	movs	r0, r5
 8002006:	1aca      	subs	r2, r1, r3
 8002008:	40d0      	lsrs	r0, r2
 800200a:	409c      	lsls	r4, r3
 800200c:	0002      	movs	r2, r0
 800200e:	409d      	lsls	r5, r3
 8002010:	4322      	orrs	r2, r4
 8002012:	429f      	cmp	r7, r3
 8002014:	dd00      	ble.n	8002018 <__aeabi_dsub+0xf4>
 8002016:	e177      	b.n	8002308 <__aeabi_dsub+0x3e4>
 8002018:	1bd8      	subs	r0, r3, r7
 800201a:	3001      	adds	r0, #1
 800201c:	1a09      	subs	r1, r1, r0
 800201e:	002c      	movs	r4, r5
 8002020:	408d      	lsls	r5, r1
 8002022:	40c4      	lsrs	r4, r0
 8002024:	1e6b      	subs	r3, r5, #1
 8002026:	419d      	sbcs	r5, r3
 8002028:	0013      	movs	r3, r2
 800202a:	40c2      	lsrs	r2, r0
 800202c:	408b      	lsls	r3, r1
 800202e:	4325      	orrs	r5, r4
 8002030:	2700      	movs	r7, #0
 8002032:	0014      	movs	r4, r2
 8002034:	431d      	orrs	r5, r3
 8002036:	076b      	lsls	r3, r5, #29
 8002038:	d009      	beq.n	800204e <__aeabi_dsub+0x12a>
 800203a:	230f      	movs	r3, #15
 800203c:	402b      	ands	r3, r5
 800203e:	2b04      	cmp	r3, #4
 8002040:	d005      	beq.n	800204e <__aeabi_dsub+0x12a>
 8002042:	1d2b      	adds	r3, r5, #4
 8002044:	42ab      	cmp	r3, r5
 8002046:	41ad      	sbcs	r5, r5
 8002048:	426d      	negs	r5, r5
 800204a:	1964      	adds	r4, r4, r5
 800204c:	001d      	movs	r5, r3
 800204e:	0223      	lsls	r3, r4, #8
 8002050:	d400      	bmi.n	8002054 <__aeabi_dsub+0x130>
 8002052:	e140      	b.n	80022d6 <__aeabi_dsub+0x3b2>
 8002054:	4a88      	ldr	r2, [pc, #544]	@ (8002278 <__aeabi_dsub+0x354>)
 8002056:	3701      	adds	r7, #1
 8002058:	4297      	cmp	r7, r2
 800205a:	d100      	bne.n	800205e <__aeabi_dsub+0x13a>
 800205c:	e101      	b.n	8002262 <__aeabi_dsub+0x33e>
 800205e:	2601      	movs	r6, #1
 8002060:	4643      	mov	r3, r8
 8002062:	4986      	ldr	r1, [pc, #536]	@ (800227c <__aeabi_dsub+0x358>)
 8002064:	08ed      	lsrs	r5, r5, #3
 8002066:	4021      	ands	r1, r4
 8002068:	074a      	lsls	r2, r1, #29
 800206a:	432a      	orrs	r2, r5
 800206c:	057c      	lsls	r4, r7, #21
 800206e:	024d      	lsls	r5, r1, #9
 8002070:	0b2d      	lsrs	r5, r5, #12
 8002072:	0d64      	lsrs	r4, r4, #21
 8002074:	401e      	ands	r6, r3
 8002076:	0524      	lsls	r4, r4, #20
 8002078:	432c      	orrs	r4, r5
 800207a:	07f6      	lsls	r6, r6, #31
 800207c:	4334      	orrs	r4, r6
 800207e:	0010      	movs	r0, r2
 8002080:	0021      	movs	r1, r4
 8002082:	b005      	add	sp, #20
 8002084:	bcf0      	pop	{r4, r5, r6, r7}
 8002086:	46bb      	mov	fp, r7
 8002088:	46b2      	mov	sl, r6
 800208a:	46a9      	mov	r9, r5
 800208c:	46a0      	mov	r8, r4
 800208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002090:	2d00      	cmp	r5, #0
 8002092:	dc00      	bgt.n	8002096 <__aeabi_dsub+0x172>
 8002094:	e2d0      	b.n	8002638 <__aeabi_dsub+0x714>
 8002096:	4649      	mov	r1, r9
 8002098:	2900      	cmp	r1, #0
 800209a:	d000      	beq.n	800209e <__aeabi_dsub+0x17a>
 800209c:	e0d4      	b.n	8002248 <__aeabi_dsub+0x324>
 800209e:	4661      	mov	r1, ip
 80020a0:	9b02      	ldr	r3, [sp, #8]
 80020a2:	4319      	orrs	r1, r3
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x184>
 80020a6:	e12b      	b.n	8002300 <__aeabi_dsub+0x3dc>
 80020a8:	1e69      	subs	r1, r5, #1
 80020aa:	2d01      	cmp	r5, #1
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x18c>
 80020ae:	e1d9      	b.n	8002464 <__aeabi_dsub+0x540>
 80020b0:	4295      	cmp	r5, r2
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x192>
 80020b4:	e10a      	b.n	80022cc <__aeabi_dsub+0x3a8>
 80020b6:	2501      	movs	r5, #1
 80020b8:	2938      	cmp	r1, #56	@ 0x38
 80020ba:	dc17      	bgt.n	80020ec <__aeabi_dsub+0x1c8>
 80020bc:	468a      	mov	sl, r1
 80020be:	4653      	mov	r3, sl
 80020c0:	2b1f      	cmp	r3, #31
 80020c2:	dd00      	ble.n	80020c6 <__aeabi_dsub+0x1a2>
 80020c4:	e1e7      	b.n	8002496 <__aeabi_dsub+0x572>
 80020c6:	2220      	movs	r2, #32
 80020c8:	1ad2      	subs	r2, r2, r3
 80020ca:	9b02      	ldr	r3, [sp, #8]
 80020cc:	4661      	mov	r1, ip
 80020ce:	4093      	lsls	r3, r2
 80020d0:	001d      	movs	r5, r3
 80020d2:	4653      	mov	r3, sl
 80020d4:	40d9      	lsrs	r1, r3
 80020d6:	4663      	mov	r3, ip
 80020d8:	4093      	lsls	r3, r2
 80020da:	001a      	movs	r2, r3
 80020dc:	430d      	orrs	r5, r1
 80020de:	1e51      	subs	r1, r2, #1
 80020e0:	418a      	sbcs	r2, r1
 80020e2:	4653      	mov	r3, sl
 80020e4:	4315      	orrs	r5, r2
 80020e6:	9a02      	ldr	r2, [sp, #8]
 80020e8:	40da      	lsrs	r2, r3
 80020ea:	18a4      	adds	r4, r4, r2
 80020ec:	182d      	adds	r5, r5, r0
 80020ee:	4285      	cmp	r5, r0
 80020f0:	4180      	sbcs	r0, r0
 80020f2:	4240      	negs	r0, r0
 80020f4:	1824      	adds	r4, r4, r0
 80020f6:	0223      	lsls	r3, r4, #8
 80020f8:	d400      	bmi.n	80020fc <__aeabi_dsub+0x1d8>
 80020fa:	e0b6      	b.n	800226a <__aeabi_dsub+0x346>
 80020fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002278 <__aeabi_dsub+0x354>)
 80020fe:	3701      	adds	r7, #1
 8002100:	429f      	cmp	r7, r3
 8002102:	d100      	bne.n	8002106 <__aeabi_dsub+0x1e2>
 8002104:	e0ad      	b.n	8002262 <__aeabi_dsub+0x33e>
 8002106:	2101      	movs	r1, #1
 8002108:	4b5c      	ldr	r3, [pc, #368]	@ (800227c <__aeabi_dsub+0x358>)
 800210a:	086a      	lsrs	r2, r5, #1
 800210c:	401c      	ands	r4, r3
 800210e:	4029      	ands	r1, r5
 8002110:	430a      	orrs	r2, r1
 8002112:	07e5      	lsls	r5, r4, #31
 8002114:	4315      	orrs	r5, r2
 8002116:	0864      	lsrs	r4, r4, #1
 8002118:	e78d      	b.n	8002036 <__aeabi_dsub+0x112>
 800211a:	4a59      	ldr	r2, [pc, #356]	@ (8002280 <__aeabi_dsub+0x35c>)
 800211c:	9b02      	ldr	r3, [sp, #8]
 800211e:	4692      	mov	sl, r2
 8002120:	4662      	mov	r2, ip
 8002122:	44ba      	add	sl, r7
 8002124:	431a      	orrs	r2, r3
 8002126:	d02c      	beq.n	8002182 <__aeabi_dsub+0x25e>
 8002128:	428e      	cmp	r6, r1
 800212a:	d02e      	beq.n	800218a <__aeabi_dsub+0x266>
 800212c:	4652      	mov	r2, sl
 800212e:	2a00      	cmp	r2, #0
 8002130:	d060      	beq.n	80021f4 <__aeabi_dsub+0x2d0>
 8002132:	2f00      	cmp	r7, #0
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x214>
 8002136:	e0db      	b.n	80022f0 <__aeabi_dsub+0x3cc>
 8002138:	4663      	mov	r3, ip
 800213a:	000e      	movs	r6, r1
 800213c:	9c02      	ldr	r4, [sp, #8]
 800213e:	08d8      	lsrs	r0, r3, #3
 8002140:	0762      	lsls	r2, r4, #29
 8002142:	4302      	orrs	r2, r0
 8002144:	08e4      	lsrs	r4, r4, #3
 8002146:	0013      	movs	r3, r2
 8002148:	4323      	orrs	r3, r4
 800214a:	d100      	bne.n	800214e <__aeabi_dsub+0x22a>
 800214c:	e254      	b.n	80025f8 <__aeabi_dsub+0x6d4>
 800214e:	2580      	movs	r5, #128	@ 0x80
 8002150:	032d      	lsls	r5, r5, #12
 8002152:	4325      	orrs	r5, r4
 8002154:	032d      	lsls	r5, r5, #12
 8002156:	4c48      	ldr	r4, [pc, #288]	@ (8002278 <__aeabi_dsub+0x354>)
 8002158:	0b2d      	lsrs	r5, r5, #12
 800215a:	e78c      	b.n	8002076 <__aeabi_dsub+0x152>
 800215c:	4661      	mov	r1, ip
 800215e:	9b02      	ldr	r3, [sp, #8]
 8002160:	4319      	orrs	r1, r3
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x242>
 8002164:	e0cc      	b.n	8002300 <__aeabi_dsub+0x3dc>
 8002166:	0029      	movs	r1, r5
 8002168:	3901      	subs	r1, #1
 800216a:	2d01      	cmp	r5, #1
 800216c:	d100      	bne.n	8002170 <__aeabi_dsub+0x24c>
 800216e:	e188      	b.n	8002482 <__aeabi_dsub+0x55e>
 8002170:	4295      	cmp	r5, r2
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x252>
 8002174:	e0aa      	b.n	80022cc <__aeabi_dsub+0x3a8>
 8002176:	2501      	movs	r5, #1
 8002178:	2938      	cmp	r1, #56	@ 0x38
 800217a:	dd00      	ble.n	800217e <__aeabi_dsub+0x25a>
 800217c:	e72f      	b.n	8001fde <__aeabi_dsub+0xba>
 800217e:	468a      	mov	sl, r1
 8002180:	e718      	b.n	8001fb4 <__aeabi_dsub+0x90>
 8002182:	2201      	movs	r2, #1
 8002184:	4051      	eors	r1, r2
 8002186:	428e      	cmp	r6, r1
 8002188:	d1d0      	bne.n	800212c <__aeabi_dsub+0x208>
 800218a:	4653      	mov	r3, sl
 800218c:	2b00      	cmp	r3, #0
 800218e:	d100      	bne.n	8002192 <__aeabi_dsub+0x26e>
 8002190:	e0be      	b.n	8002310 <__aeabi_dsub+0x3ec>
 8002192:	2f00      	cmp	r7, #0
 8002194:	d000      	beq.n	8002198 <__aeabi_dsub+0x274>
 8002196:	e138      	b.n	800240a <__aeabi_dsub+0x4e6>
 8002198:	46ca      	mov	sl, r9
 800219a:	0022      	movs	r2, r4
 800219c:	4302      	orrs	r2, r0
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x27e>
 80021a0:	e1e2      	b.n	8002568 <__aeabi_dsub+0x644>
 80021a2:	4653      	mov	r3, sl
 80021a4:	1e59      	subs	r1, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x288>
 80021aa:	e20d      	b.n	80025c8 <__aeabi_dsub+0x6a4>
 80021ac:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <__aeabi_dsub+0x354>)
 80021ae:	4592      	cmp	sl, r2
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x290>
 80021b2:	e1d2      	b.n	800255a <__aeabi_dsub+0x636>
 80021b4:	2701      	movs	r7, #1
 80021b6:	2938      	cmp	r1, #56	@ 0x38
 80021b8:	dc13      	bgt.n	80021e2 <__aeabi_dsub+0x2be>
 80021ba:	291f      	cmp	r1, #31
 80021bc:	dd00      	ble.n	80021c0 <__aeabi_dsub+0x29c>
 80021be:	e1ee      	b.n	800259e <__aeabi_dsub+0x67a>
 80021c0:	2220      	movs	r2, #32
 80021c2:	9b02      	ldr	r3, [sp, #8]
 80021c4:	1a52      	subs	r2, r2, r1
 80021c6:	0025      	movs	r5, r4
 80021c8:	0007      	movs	r7, r0
 80021ca:	469a      	mov	sl, r3
 80021cc:	40cc      	lsrs	r4, r1
 80021ce:	4090      	lsls	r0, r2
 80021d0:	4095      	lsls	r5, r2
 80021d2:	40cf      	lsrs	r7, r1
 80021d4:	44a2      	add	sl, r4
 80021d6:	1e42      	subs	r2, r0, #1
 80021d8:	4190      	sbcs	r0, r2
 80021da:	4653      	mov	r3, sl
 80021dc:	432f      	orrs	r7, r5
 80021de:	4307      	orrs	r7, r0
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	003d      	movs	r5, r7
 80021e4:	4465      	add	r5, ip
 80021e6:	4565      	cmp	r5, ip
 80021e8:	4192      	sbcs	r2, r2
 80021ea:	9b02      	ldr	r3, [sp, #8]
 80021ec:	4252      	negs	r2, r2
 80021ee:	464f      	mov	r7, r9
 80021f0:	18d4      	adds	r4, r2, r3
 80021f2:	e780      	b.n	80020f6 <__aeabi_dsub+0x1d2>
 80021f4:	4a23      	ldr	r2, [pc, #140]	@ (8002284 <__aeabi_dsub+0x360>)
 80021f6:	1c7d      	adds	r5, r7, #1
 80021f8:	4215      	tst	r5, r2
 80021fa:	d000      	beq.n	80021fe <__aeabi_dsub+0x2da>
 80021fc:	e0aa      	b.n	8002354 <__aeabi_dsub+0x430>
 80021fe:	4662      	mov	r2, ip
 8002200:	0025      	movs	r5, r4
 8002202:	9b02      	ldr	r3, [sp, #8]
 8002204:	4305      	orrs	r5, r0
 8002206:	431a      	orrs	r2, r3
 8002208:	2f00      	cmp	r7, #0
 800220a:	d000      	beq.n	800220e <__aeabi_dsub+0x2ea>
 800220c:	e0f5      	b.n	80023fa <__aeabi_dsub+0x4d6>
 800220e:	2d00      	cmp	r5, #0
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x2f0>
 8002212:	e16b      	b.n	80024ec <__aeabi_dsub+0x5c8>
 8002214:	2a00      	cmp	r2, #0
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x2f6>
 8002218:	e152      	b.n	80024c0 <__aeabi_dsub+0x59c>
 800221a:	4663      	mov	r3, ip
 800221c:	1ac5      	subs	r5, r0, r3
 800221e:	9b02      	ldr	r3, [sp, #8]
 8002220:	1ae2      	subs	r2, r4, r3
 8002222:	42a8      	cmp	r0, r5
 8002224:	419b      	sbcs	r3, r3
 8002226:	425b      	negs	r3, r3
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	d400      	bmi.n	8002230 <__aeabi_dsub+0x30c>
 800222e:	e1d5      	b.n	80025dc <__aeabi_dsub+0x6b8>
 8002230:	4663      	mov	r3, ip
 8002232:	1a1d      	subs	r5, r3, r0
 8002234:	45ac      	cmp	ip, r5
 8002236:	4192      	sbcs	r2, r2
 8002238:	2601      	movs	r6, #1
 800223a:	9b02      	ldr	r3, [sp, #8]
 800223c:	4252      	negs	r2, r2
 800223e:	1b1c      	subs	r4, r3, r4
 8002240:	4688      	mov	r8, r1
 8002242:	1aa4      	subs	r4, r4, r2
 8002244:	400e      	ands	r6, r1
 8002246:	e6f6      	b.n	8002036 <__aeabi_dsub+0x112>
 8002248:	4297      	cmp	r7, r2
 800224a:	d03f      	beq.n	80022cc <__aeabi_dsub+0x3a8>
 800224c:	4652      	mov	r2, sl
 800224e:	2501      	movs	r5, #1
 8002250:	2a38      	cmp	r2, #56	@ 0x38
 8002252:	dd00      	ble.n	8002256 <__aeabi_dsub+0x332>
 8002254:	e74a      	b.n	80020ec <__aeabi_dsub+0x1c8>
 8002256:	2280      	movs	r2, #128	@ 0x80
 8002258:	9b02      	ldr	r3, [sp, #8]
 800225a:	0412      	lsls	r2, r2, #16
 800225c:	4313      	orrs	r3, r2
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	e72d      	b.n	80020be <__aeabi_dsub+0x19a>
 8002262:	003c      	movs	r4, r7
 8002264:	2500      	movs	r5, #0
 8002266:	2200      	movs	r2, #0
 8002268:	e705      	b.n	8002076 <__aeabi_dsub+0x152>
 800226a:	2307      	movs	r3, #7
 800226c:	402b      	ands	r3, r5
 800226e:	2b00      	cmp	r3, #0
 8002270:	d000      	beq.n	8002274 <__aeabi_dsub+0x350>
 8002272:	e6e2      	b.n	800203a <__aeabi_dsub+0x116>
 8002274:	e06b      	b.n	800234e <__aeabi_dsub+0x42a>
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	000007ff 	.word	0x000007ff
 800227c:	ff7fffff 	.word	0xff7fffff
 8002280:	fffff801 	.word	0xfffff801
 8002284:	000007fe 	.word	0x000007fe
 8002288:	0028      	movs	r0, r5
 800228a:	f000 fa97 	bl	80027bc <__clzsi2>
 800228e:	0003      	movs	r3, r0
 8002290:	3318      	adds	r3, #24
 8002292:	2b1f      	cmp	r3, #31
 8002294:	dc00      	bgt.n	8002298 <__aeabi_dsub+0x374>
 8002296:	e6b4      	b.n	8002002 <__aeabi_dsub+0xde>
 8002298:	002a      	movs	r2, r5
 800229a:	3808      	subs	r0, #8
 800229c:	4082      	lsls	r2, r0
 800229e:	429f      	cmp	r7, r3
 80022a0:	dd00      	ble.n	80022a4 <__aeabi_dsub+0x380>
 80022a2:	e0b9      	b.n	8002418 <__aeabi_dsub+0x4f4>
 80022a4:	1bdb      	subs	r3, r3, r7
 80022a6:	1c58      	adds	r0, r3, #1
 80022a8:	281f      	cmp	r0, #31
 80022aa:	dc00      	bgt.n	80022ae <__aeabi_dsub+0x38a>
 80022ac:	e1a0      	b.n	80025f0 <__aeabi_dsub+0x6cc>
 80022ae:	0015      	movs	r5, r2
 80022b0:	3b1f      	subs	r3, #31
 80022b2:	40dd      	lsrs	r5, r3
 80022b4:	2820      	cmp	r0, #32
 80022b6:	d005      	beq.n	80022c4 <__aeabi_dsub+0x3a0>
 80022b8:	2340      	movs	r3, #64	@ 0x40
 80022ba:	1a1b      	subs	r3, r3, r0
 80022bc:	409a      	lsls	r2, r3
 80022be:	1e53      	subs	r3, r2, #1
 80022c0:	419a      	sbcs	r2, r3
 80022c2:	4315      	orrs	r5, r2
 80022c4:	2307      	movs	r3, #7
 80022c6:	2700      	movs	r7, #0
 80022c8:	402b      	ands	r3, r5
 80022ca:	e7d0      	b.n	800226e <__aeabi_dsub+0x34a>
 80022cc:	08c0      	lsrs	r0, r0, #3
 80022ce:	0762      	lsls	r2, r4, #29
 80022d0:	4302      	orrs	r2, r0
 80022d2:	08e4      	lsrs	r4, r4, #3
 80022d4:	e737      	b.n	8002146 <__aeabi_dsub+0x222>
 80022d6:	08ea      	lsrs	r2, r5, #3
 80022d8:	0763      	lsls	r3, r4, #29
 80022da:	431a      	orrs	r2, r3
 80022dc:	4bd3      	ldr	r3, [pc, #844]	@ (800262c <__aeabi_dsub+0x708>)
 80022de:	08e4      	lsrs	r4, r4, #3
 80022e0:	429f      	cmp	r7, r3
 80022e2:	d100      	bne.n	80022e6 <__aeabi_dsub+0x3c2>
 80022e4:	e72f      	b.n	8002146 <__aeabi_dsub+0x222>
 80022e6:	0324      	lsls	r4, r4, #12
 80022e8:	0b25      	lsrs	r5, r4, #12
 80022ea:	057c      	lsls	r4, r7, #21
 80022ec:	0d64      	lsrs	r4, r4, #21
 80022ee:	e6c2      	b.n	8002076 <__aeabi_dsub+0x152>
 80022f0:	46ca      	mov	sl, r9
 80022f2:	0022      	movs	r2, r4
 80022f4:	4302      	orrs	r2, r0
 80022f6:	d158      	bne.n	80023aa <__aeabi_dsub+0x486>
 80022f8:	4663      	mov	r3, ip
 80022fa:	000e      	movs	r6, r1
 80022fc:	9c02      	ldr	r4, [sp, #8]
 80022fe:	9303      	str	r3, [sp, #12]
 8002300:	9b03      	ldr	r3, [sp, #12]
 8002302:	4657      	mov	r7, sl
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	e7e7      	b.n	80022d8 <__aeabi_dsub+0x3b4>
 8002308:	4cc9      	ldr	r4, [pc, #804]	@ (8002630 <__aeabi_dsub+0x70c>)
 800230a:	1aff      	subs	r7, r7, r3
 800230c:	4014      	ands	r4, r2
 800230e:	e692      	b.n	8002036 <__aeabi_dsub+0x112>
 8002310:	4dc8      	ldr	r5, [pc, #800]	@ (8002634 <__aeabi_dsub+0x710>)
 8002312:	1c7a      	adds	r2, r7, #1
 8002314:	422a      	tst	r2, r5
 8002316:	d000      	beq.n	800231a <__aeabi_dsub+0x3f6>
 8002318:	e084      	b.n	8002424 <__aeabi_dsub+0x500>
 800231a:	0022      	movs	r2, r4
 800231c:	4302      	orrs	r2, r0
 800231e:	2f00      	cmp	r7, #0
 8002320:	d000      	beq.n	8002324 <__aeabi_dsub+0x400>
 8002322:	e0ef      	b.n	8002504 <__aeabi_dsub+0x5e0>
 8002324:	2a00      	cmp	r2, #0
 8002326:	d100      	bne.n	800232a <__aeabi_dsub+0x406>
 8002328:	e0e5      	b.n	80024f6 <__aeabi_dsub+0x5d2>
 800232a:	4662      	mov	r2, ip
 800232c:	9902      	ldr	r1, [sp, #8]
 800232e:	430a      	orrs	r2, r1
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x410>
 8002332:	e0c5      	b.n	80024c0 <__aeabi_dsub+0x59c>
 8002334:	4663      	mov	r3, ip
 8002336:	18c5      	adds	r5, r0, r3
 8002338:	468c      	mov	ip, r1
 800233a:	4285      	cmp	r5, r0
 800233c:	4180      	sbcs	r0, r0
 800233e:	4464      	add	r4, ip
 8002340:	4240      	negs	r0, r0
 8002342:	1824      	adds	r4, r4, r0
 8002344:	0223      	lsls	r3, r4, #8
 8002346:	d502      	bpl.n	800234e <__aeabi_dsub+0x42a>
 8002348:	4bb9      	ldr	r3, [pc, #740]	@ (8002630 <__aeabi_dsub+0x70c>)
 800234a:	3701      	adds	r7, #1
 800234c:	401c      	ands	r4, r3
 800234e:	46ba      	mov	sl, r7
 8002350:	9503      	str	r5, [sp, #12]
 8002352:	e7d5      	b.n	8002300 <__aeabi_dsub+0x3dc>
 8002354:	4662      	mov	r2, ip
 8002356:	1a85      	subs	r5, r0, r2
 8002358:	42a8      	cmp	r0, r5
 800235a:	4192      	sbcs	r2, r2
 800235c:	4252      	negs	r2, r2
 800235e:	4691      	mov	r9, r2
 8002360:	9b02      	ldr	r3, [sp, #8]
 8002362:	1ae3      	subs	r3, r4, r3
 8002364:	001a      	movs	r2, r3
 8002366:	464b      	mov	r3, r9
 8002368:	1ad2      	subs	r2, r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	4691      	mov	r9, r2
 800236e:	021a      	lsls	r2, r3, #8
 8002370:	d46c      	bmi.n	800244c <__aeabi_dsub+0x528>
 8002372:	464a      	mov	r2, r9
 8002374:	464c      	mov	r4, r9
 8002376:	432a      	orrs	r2, r5
 8002378:	d000      	beq.n	800237c <__aeabi_dsub+0x458>
 800237a:	e63a      	b.n	8001ff2 <__aeabi_dsub+0xce>
 800237c:	2600      	movs	r6, #0
 800237e:	2400      	movs	r4, #0
 8002380:	2500      	movs	r5, #0
 8002382:	e678      	b.n	8002076 <__aeabi_dsub+0x152>
 8002384:	9902      	ldr	r1, [sp, #8]
 8002386:	4653      	mov	r3, sl
 8002388:	000d      	movs	r5, r1
 800238a:	3a20      	subs	r2, #32
 800238c:	40d5      	lsrs	r5, r2
 800238e:	2b20      	cmp	r3, #32
 8002390:	d006      	beq.n	80023a0 <__aeabi_dsub+0x47c>
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	1ad2      	subs	r2, r2, r3
 8002396:	000b      	movs	r3, r1
 8002398:	4093      	lsls	r3, r2
 800239a:	4662      	mov	r2, ip
 800239c:	431a      	orrs	r2, r3
 800239e:	4693      	mov	fp, r2
 80023a0:	465b      	mov	r3, fp
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	4193      	sbcs	r3, r2
 80023a6:	431d      	orrs	r5, r3
 80023a8:	e619      	b.n	8001fde <__aeabi_dsub+0xba>
 80023aa:	4653      	mov	r3, sl
 80023ac:	1e5a      	subs	r2, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d100      	bne.n	80023b4 <__aeabi_dsub+0x490>
 80023b2:	e0c6      	b.n	8002542 <__aeabi_dsub+0x61e>
 80023b4:	4e9d      	ldr	r6, [pc, #628]	@ (800262c <__aeabi_dsub+0x708>)
 80023b6:	45b2      	cmp	sl, r6
 80023b8:	d100      	bne.n	80023bc <__aeabi_dsub+0x498>
 80023ba:	e6bd      	b.n	8002138 <__aeabi_dsub+0x214>
 80023bc:	4688      	mov	r8, r1
 80023be:	000e      	movs	r6, r1
 80023c0:	2501      	movs	r5, #1
 80023c2:	2a38      	cmp	r2, #56	@ 0x38
 80023c4:	dc10      	bgt.n	80023e8 <__aeabi_dsub+0x4c4>
 80023c6:	2a1f      	cmp	r2, #31
 80023c8:	dc7f      	bgt.n	80024ca <__aeabi_dsub+0x5a6>
 80023ca:	2120      	movs	r1, #32
 80023cc:	0025      	movs	r5, r4
 80023ce:	1a89      	subs	r1, r1, r2
 80023d0:	0007      	movs	r7, r0
 80023d2:	4088      	lsls	r0, r1
 80023d4:	408d      	lsls	r5, r1
 80023d6:	40d7      	lsrs	r7, r2
 80023d8:	40d4      	lsrs	r4, r2
 80023da:	1e41      	subs	r1, r0, #1
 80023dc:	4188      	sbcs	r0, r1
 80023de:	9b02      	ldr	r3, [sp, #8]
 80023e0:	433d      	orrs	r5, r7
 80023e2:	1b1b      	subs	r3, r3, r4
 80023e4:	4305      	orrs	r5, r0
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	4662      	mov	r2, ip
 80023ea:	1b55      	subs	r5, r2, r5
 80023ec:	45ac      	cmp	ip, r5
 80023ee:	4192      	sbcs	r2, r2
 80023f0:	9b02      	ldr	r3, [sp, #8]
 80023f2:	4252      	negs	r2, r2
 80023f4:	464f      	mov	r7, r9
 80023f6:	1a9c      	subs	r4, r3, r2
 80023f8:	e5f6      	b.n	8001fe8 <__aeabi_dsub+0xc4>
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	d000      	beq.n	8002400 <__aeabi_dsub+0x4dc>
 80023fe:	e0b7      	b.n	8002570 <__aeabi_dsub+0x64c>
 8002400:	2a00      	cmp	r2, #0
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x4e2>
 8002404:	e0f0      	b.n	80025e8 <__aeabi_dsub+0x6c4>
 8002406:	2601      	movs	r6, #1
 8002408:	400e      	ands	r6, r1
 800240a:	4663      	mov	r3, ip
 800240c:	9802      	ldr	r0, [sp, #8]
 800240e:	08d9      	lsrs	r1, r3, #3
 8002410:	0742      	lsls	r2, r0, #29
 8002412:	430a      	orrs	r2, r1
 8002414:	08c4      	lsrs	r4, r0, #3
 8002416:	e696      	b.n	8002146 <__aeabi_dsub+0x222>
 8002418:	4c85      	ldr	r4, [pc, #532]	@ (8002630 <__aeabi_dsub+0x70c>)
 800241a:	1aff      	subs	r7, r7, r3
 800241c:	4014      	ands	r4, r2
 800241e:	0762      	lsls	r2, r4, #29
 8002420:	08e4      	lsrs	r4, r4, #3
 8002422:	e760      	b.n	80022e6 <__aeabi_dsub+0x3c2>
 8002424:	4981      	ldr	r1, [pc, #516]	@ (800262c <__aeabi_dsub+0x708>)
 8002426:	428a      	cmp	r2, r1
 8002428:	d100      	bne.n	800242c <__aeabi_dsub+0x508>
 800242a:	e0c9      	b.n	80025c0 <__aeabi_dsub+0x69c>
 800242c:	4663      	mov	r3, ip
 800242e:	18c1      	adds	r1, r0, r3
 8002430:	4281      	cmp	r1, r0
 8002432:	4180      	sbcs	r0, r0
 8002434:	9b02      	ldr	r3, [sp, #8]
 8002436:	4240      	negs	r0, r0
 8002438:	18e3      	adds	r3, r4, r3
 800243a:	181b      	adds	r3, r3, r0
 800243c:	07dd      	lsls	r5, r3, #31
 800243e:	085c      	lsrs	r4, r3, #1
 8002440:	2307      	movs	r3, #7
 8002442:	0849      	lsrs	r1, r1, #1
 8002444:	430d      	orrs	r5, r1
 8002446:	0017      	movs	r7, r2
 8002448:	402b      	ands	r3, r5
 800244a:	e710      	b.n	800226e <__aeabi_dsub+0x34a>
 800244c:	4663      	mov	r3, ip
 800244e:	1a1d      	subs	r5, r3, r0
 8002450:	45ac      	cmp	ip, r5
 8002452:	4192      	sbcs	r2, r2
 8002454:	2601      	movs	r6, #1
 8002456:	9b02      	ldr	r3, [sp, #8]
 8002458:	4252      	negs	r2, r2
 800245a:	1b1c      	subs	r4, r3, r4
 800245c:	4688      	mov	r8, r1
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	400e      	ands	r6, r1
 8002462:	e5c6      	b.n	8001ff2 <__aeabi_dsub+0xce>
 8002464:	4663      	mov	r3, ip
 8002466:	18c5      	adds	r5, r0, r3
 8002468:	9b02      	ldr	r3, [sp, #8]
 800246a:	4285      	cmp	r5, r0
 800246c:	4180      	sbcs	r0, r0
 800246e:	469c      	mov	ip, r3
 8002470:	4240      	negs	r0, r0
 8002472:	4464      	add	r4, ip
 8002474:	1824      	adds	r4, r4, r0
 8002476:	2701      	movs	r7, #1
 8002478:	0223      	lsls	r3, r4, #8
 800247a:	d400      	bmi.n	800247e <__aeabi_dsub+0x55a>
 800247c:	e6f5      	b.n	800226a <__aeabi_dsub+0x346>
 800247e:	2702      	movs	r7, #2
 8002480:	e641      	b.n	8002106 <__aeabi_dsub+0x1e2>
 8002482:	4663      	mov	r3, ip
 8002484:	1ac5      	subs	r5, r0, r3
 8002486:	42a8      	cmp	r0, r5
 8002488:	4180      	sbcs	r0, r0
 800248a:	9b02      	ldr	r3, [sp, #8]
 800248c:	4240      	negs	r0, r0
 800248e:	1ae4      	subs	r4, r4, r3
 8002490:	2701      	movs	r7, #1
 8002492:	1a24      	subs	r4, r4, r0
 8002494:	e5a8      	b.n	8001fe8 <__aeabi_dsub+0xc4>
 8002496:	9d02      	ldr	r5, [sp, #8]
 8002498:	4652      	mov	r2, sl
 800249a:	002b      	movs	r3, r5
 800249c:	3a20      	subs	r2, #32
 800249e:	40d3      	lsrs	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	4653      	mov	r3, sl
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d006      	beq.n	80024b6 <__aeabi_dsub+0x592>
 80024a8:	2240      	movs	r2, #64	@ 0x40
 80024aa:	1ad2      	subs	r2, r2, r3
 80024ac:	002b      	movs	r3, r5
 80024ae:	4093      	lsls	r3, r2
 80024b0:	4662      	mov	r2, ip
 80024b2:	431a      	orrs	r2, r3
 80024b4:	4693      	mov	fp, r2
 80024b6:	465d      	mov	r5, fp
 80024b8:	1e6b      	subs	r3, r5, #1
 80024ba:	419d      	sbcs	r5, r3
 80024bc:	430d      	orrs	r5, r1
 80024be:	e615      	b.n	80020ec <__aeabi_dsub+0x1c8>
 80024c0:	0762      	lsls	r2, r4, #29
 80024c2:	08c0      	lsrs	r0, r0, #3
 80024c4:	4302      	orrs	r2, r0
 80024c6:	08e4      	lsrs	r4, r4, #3
 80024c8:	e70d      	b.n	80022e6 <__aeabi_dsub+0x3c2>
 80024ca:	0011      	movs	r1, r2
 80024cc:	0027      	movs	r7, r4
 80024ce:	3920      	subs	r1, #32
 80024d0:	40cf      	lsrs	r7, r1
 80024d2:	2a20      	cmp	r2, #32
 80024d4:	d005      	beq.n	80024e2 <__aeabi_dsub+0x5be>
 80024d6:	2140      	movs	r1, #64	@ 0x40
 80024d8:	1a8a      	subs	r2, r1, r2
 80024da:	4094      	lsls	r4, r2
 80024dc:	0025      	movs	r5, r4
 80024de:	4305      	orrs	r5, r0
 80024e0:	9503      	str	r5, [sp, #12]
 80024e2:	9d03      	ldr	r5, [sp, #12]
 80024e4:	1e6a      	subs	r2, r5, #1
 80024e6:	4195      	sbcs	r5, r2
 80024e8:	433d      	orrs	r5, r7
 80024ea:	e77d      	b.n	80023e8 <__aeabi_dsub+0x4c4>
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x5ce>
 80024f0:	e744      	b.n	800237c <__aeabi_dsub+0x458>
 80024f2:	2601      	movs	r6, #1
 80024f4:	400e      	ands	r6, r1
 80024f6:	4663      	mov	r3, ip
 80024f8:	08d9      	lsrs	r1, r3, #3
 80024fa:	9b02      	ldr	r3, [sp, #8]
 80024fc:	075a      	lsls	r2, r3, #29
 80024fe:	430a      	orrs	r2, r1
 8002500:	08dc      	lsrs	r4, r3, #3
 8002502:	e6f0      	b.n	80022e6 <__aeabi_dsub+0x3c2>
 8002504:	2a00      	cmp	r2, #0
 8002506:	d028      	beq.n	800255a <__aeabi_dsub+0x636>
 8002508:	4662      	mov	r2, ip
 800250a:	9f02      	ldr	r7, [sp, #8]
 800250c:	08c0      	lsrs	r0, r0, #3
 800250e:	433a      	orrs	r2, r7
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x5f0>
 8002512:	e6dc      	b.n	80022ce <__aeabi_dsub+0x3aa>
 8002514:	0762      	lsls	r2, r4, #29
 8002516:	4310      	orrs	r0, r2
 8002518:	2280      	movs	r2, #128	@ 0x80
 800251a:	08e4      	lsrs	r4, r4, #3
 800251c:	0312      	lsls	r2, r2, #12
 800251e:	4214      	tst	r4, r2
 8002520:	d009      	beq.n	8002536 <__aeabi_dsub+0x612>
 8002522:	08fd      	lsrs	r5, r7, #3
 8002524:	4215      	tst	r5, r2
 8002526:	d106      	bne.n	8002536 <__aeabi_dsub+0x612>
 8002528:	4663      	mov	r3, ip
 800252a:	2601      	movs	r6, #1
 800252c:	002c      	movs	r4, r5
 800252e:	08d8      	lsrs	r0, r3, #3
 8002530:	077b      	lsls	r3, r7, #29
 8002532:	4318      	orrs	r0, r3
 8002534:	400e      	ands	r6, r1
 8002536:	0f42      	lsrs	r2, r0, #29
 8002538:	00c0      	lsls	r0, r0, #3
 800253a:	08c0      	lsrs	r0, r0, #3
 800253c:	0752      	lsls	r2, r2, #29
 800253e:	4302      	orrs	r2, r0
 8002540:	e601      	b.n	8002146 <__aeabi_dsub+0x222>
 8002542:	4663      	mov	r3, ip
 8002544:	1a1d      	subs	r5, r3, r0
 8002546:	45ac      	cmp	ip, r5
 8002548:	4192      	sbcs	r2, r2
 800254a:	9b02      	ldr	r3, [sp, #8]
 800254c:	4252      	negs	r2, r2
 800254e:	1b1c      	subs	r4, r3, r4
 8002550:	000e      	movs	r6, r1
 8002552:	4688      	mov	r8, r1
 8002554:	2701      	movs	r7, #1
 8002556:	1aa4      	subs	r4, r4, r2
 8002558:	e546      	b.n	8001fe8 <__aeabi_dsub+0xc4>
 800255a:	4663      	mov	r3, ip
 800255c:	08d9      	lsrs	r1, r3, #3
 800255e:	9b02      	ldr	r3, [sp, #8]
 8002560:	075a      	lsls	r2, r3, #29
 8002562:	430a      	orrs	r2, r1
 8002564:	08dc      	lsrs	r4, r3, #3
 8002566:	e5ee      	b.n	8002146 <__aeabi_dsub+0x222>
 8002568:	4663      	mov	r3, ip
 800256a:	9c02      	ldr	r4, [sp, #8]
 800256c:	9303      	str	r3, [sp, #12]
 800256e:	e6c7      	b.n	8002300 <__aeabi_dsub+0x3dc>
 8002570:	08c0      	lsrs	r0, r0, #3
 8002572:	2a00      	cmp	r2, #0
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x654>
 8002576:	e6aa      	b.n	80022ce <__aeabi_dsub+0x3aa>
 8002578:	0762      	lsls	r2, r4, #29
 800257a:	4310      	orrs	r0, r2
 800257c:	2280      	movs	r2, #128	@ 0x80
 800257e:	08e4      	lsrs	r4, r4, #3
 8002580:	0312      	lsls	r2, r2, #12
 8002582:	4214      	tst	r4, r2
 8002584:	d0d7      	beq.n	8002536 <__aeabi_dsub+0x612>
 8002586:	9f02      	ldr	r7, [sp, #8]
 8002588:	08fd      	lsrs	r5, r7, #3
 800258a:	4215      	tst	r5, r2
 800258c:	d1d3      	bne.n	8002536 <__aeabi_dsub+0x612>
 800258e:	4663      	mov	r3, ip
 8002590:	2601      	movs	r6, #1
 8002592:	08d8      	lsrs	r0, r3, #3
 8002594:	077b      	lsls	r3, r7, #29
 8002596:	002c      	movs	r4, r5
 8002598:	4318      	orrs	r0, r3
 800259a:	400e      	ands	r6, r1
 800259c:	e7cb      	b.n	8002536 <__aeabi_dsub+0x612>
 800259e:	000a      	movs	r2, r1
 80025a0:	0027      	movs	r7, r4
 80025a2:	3a20      	subs	r2, #32
 80025a4:	40d7      	lsrs	r7, r2
 80025a6:	2920      	cmp	r1, #32
 80025a8:	d005      	beq.n	80025b6 <__aeabi_dsub+0x692>
 80025aa:	2240      	movs	r2, #64	@ 0x40
 80025ac:	1a52      	subs	r2, r2, r1
 80025ae:	4094      	lsls	r4, r2
 80025b0:	0025      	movs	r5, r4
 80025b2:	4305      	orrs	r5, r0
 80025b4:	9503      	str	r5, [sp, #12]
 80025b6:	9d03      	ldr	r5, [sp, #12]
 80025b8:	1e6a      	subs	r2, r5, #1
 80025ba:	4195      	sbcs	r5, r2
 80025bc:	432f      	orrs	r7, r5
 80025be:	e610      	b.n	80021e2 <__aeabi_dsub+0x2be>
 80025c0:	0014      	movs	r4, r2
 80025c2:	2500      	movs	r5, #0
 80025c4:	2200      	movs	r2, #0
 80025c6:	e556      	b.n	8002076 <__aeabi_dsub+0x152>
 80025c8:	9b02      	ldr	r3, [sp, #8]
 80025ca:	4460      	add	r0, ip
 80025cc:	4699      	mov	r9, r3
 80025ce:	4560      	cmp	r0, ip
 80025d0:	4192      	sbcs	r2, r2
 80025d2:	444c      	add	r4, r9
 80025d4:	4252      	negs	r2, r2
 80025d6:	0005      	movs	r5, r0
 80025d8:	18a4      	adds	r4, r4, r2
 80025da:	e74c      	b.n	8002476 <__aeabi_dsub+0x552>
 80025dc:	001a      	movs	r2, r3
 80025de:	001c      	movs	r4, r3
 80025e0:	432a      	orrs	r2, r5
 80025e2:	d000      	beq.n	80025e6 <__aeabi_dsub+0x6c2>
 80025e4:	e6b3      	b.n	800234e <__aeabi_dsub+0x42a>
 80025e6:	e6c9      	b.n	800237c <__aeabi_dsub+0x458>
 80025e8:	2480      	movs	r4, #128	@ 0x80
 80025ea:	2600      	movs	r6, #0
 80025ec:	0324      	lsls	r4, r4, #12
 80025ee:	e5ae      	b.n	800214e <__aeabi_dsub+0x22a>
 80025f0:	2120      	movs	r1, #32
 80025f2:	2500      	movs	r5, #0
 80025f4:	1a09      	subs	r1, r1, r0
 80025f6:	e517      	b.n	8002028 <__aeabi_dsub+0x104>
 80025f8:	2200      	movs	r2, #0
 80025fa:	2500      	movs	r5, #0
 80025fc:	4c0b      	ldr	r4, [pc, #44]	@ (800262c <__aeabi_dsub+0x708>)
 80025fe:	e53a      	b.n	8002076 <__aeabi_dsub+0x152>
 8002600:	2d00      	cmp	r5, #0
 8002602:	d100      	bne.n	8002606 <__aeabi_dsub+0x6e2>
 8002604:	e5f6      	b.n	80021f4 <__aeabi_dsub+0x2d0>
 8002606:	464b      	mov	r3, r9
 8002608:	1bda      	subs	r2, r3, r7
 800260a:	4692      	mov	sl, r2
 800260c:	2f00      	cmp	r7, #0
 800260e:	d100      	bne.n	8002612 <__aeabi_dsub+0x6ee>
 8002610:	e66f      	b.n	80022f2 <__aeabi_dsub+0x3ce>
 8002612:	2a38      	cmp	r2, #56	@ 0x38
 8002614:	dc05      	bgt.n	8002622 <__aeabi_dsub+0x6fe>
 8002616:	2680      	movs	r6, #128	@ 0x80
 8002618:	0436      	lsls	r6, r6, #16
 800261a:	4334      	orrs	r4, r6
 800261c:	4688      	mov	r8, r1
 800261e:	000e      	movs	r6, r1
 8002620:	e6d1      	b.n	80023c6 <__aeabi_dsub+0x4a2>
 8002622:	4688      	mov	r8, r1
 8002624:	000e      	movs	r6, r1
 8002626:	2501      	movs	r5, #1
 8002628:	e6de      	b.n	80023e8 <__aeabi_dsub+0x4c4>
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	000007ff 	.word	0x000007ff
 8002630:	ff7fffff 	.word	0xff7fffff
 8002634:	000007fe 	.word	0x000007fe
 8002638:	2d00      	cmp	r5, #0
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x71a>
 800263c:	e668      	b.n	8002310 <__aeabi_dsub+0x3ec>
 800263e:	464b      	mov	r3, r9
 8002640:	1bd9      	subs	r1, r3, r7
 8002642:	2f00      	cmp	r7, #0
 8002644:	d101      	bne.n	800264a <__aeabi_dsub+0x726>
 8002646:	468a      	mov	sl, r1
 8002648:	e5a7      	b.n	800219a <__aeabi_dsub+0x276>
 800264a:	2701      	movs	r7, #1
 800264c:	2938      	cmp	r1, #56	@ 0x38
 800264e:	dd00      	ble.n	8002652 <__aeabi_dsub+0x72e>
 8002650:	e5c7      	b.n	80021e2 <__aeabi_dsub+0x2be>
 8002652:	2280      	movs	r2, #128	@ 0x80
 8002654:	0412      	lsls	r2, r2, #16
 8002656:	4314      	orrs	r4, r2
 8002658:	e5af      	b.n	80021ba <__aeabi_dsub+0x296>
 800265a:	46c0      	nop			@ (mov r8, r8)

0800265c <__aeabi_dcmpun>:
 800265c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265e:	46c6      	mov	lr, r8
 8002660:	031e      	lsls	r6, r3, #12
 8002662:	0b36      	lsrs	r6, r6, #12
 8002664:	46b0      	mov	r8, r6
 8002666:	4e0d      	ldr	r6, [pc, #52]	@ (800269c <__aeabi_dcmpun+0x40>)
 8002668:	030c      	lsls	r4, r1, #12
 800266a:	004d      	lsls	r5, r1, #1
 800266c:	005f      	lsls	r7, r3, #1
 800266e:	b500      	push	{lr}
 8002670:	0b24      	lsrs	r4, r4, #12
 8002672:	0d6d      	lsrs	r5, r5, #21
 8002674:	0d7f      	lsrs	r7, r7, #21
 8002676:	42b5      	cmp	r5, r6
 8002678:	d00b      	beq.n	8002692 <__aeabi_dcmpun+0x36>
 800267a:	4908      	ldr	r1, [pc, #32]	@ (800269c <__aeabi_dcmpun+0x40>)
 800267c:	2000      	movs	r0, #0
 800267e:	428f      	cmp	r7, r1
 8002680:	d104      	bne.n	800268c <__aeabi_dcmpun+0x30>
 8002682:	4646      	mov	r6, r8
 8002684:	4316      	orrs	r6, r2
 8002686:	0030      	movs	r0, r6
 8002688:	1e43      	subs	r3, r0, #1
 800268a:	4198      	sbcs	r0, r3
 800268c:	bc80      	pop	{r7}
 800268e:	46b8      	mov	r8, r7
 8002690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002692:	4304      	orrs	r4, r0
 8002694:	2001      	movs	r0, #1
 8002696:	2c00      	cmp	r4, #0
 8002698:	d1f8      	bne.n	800268c <__aeabi_dcmpun+0x30>
 800269a:	e7ee      	b.n	800267a <__aeabi_dcmpun+0x1e>
 800269c:	000007ff 	.word	0x000007ff

080026a0 <__aeabi_d2iz>:
 80026a0:	000b      	movs	r3, r1
 80026a2:	0002      	movs	r2, r0
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	4d16      	ldr	r5, [pc, #88]	@ (8002700 <__aeabi_d2iz+0x60>)
 80026a8:	030c      	lsls	r4, r1, #12
 80026aa:	b082      	sub	sp, #8
 80026ac:	0049      	lsls	r1, r1, #1
 80026ae:	2000      	movs	r0, #0
 80026b0:	9200      	str	r2, [sp, #0]
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	0b24      	lsrs	r4, r4, #12
 80026b6:	0d49      	lsrs	r1, r1, #21
 80026b8:	0fde      	lsrs	r6, r3, #31
 80026ba:	42a9      	cmp	r1, r5
 80026bc:	dd04      	ble.n	80026c8 <__aeabi_d2iz+0x28>
 80026be:	4811      	ldr	r0, [pc, #68]	@ (8002704 <__aeabi_d2iz+0x64>)
 80026c0:	4281      	cmp	r1, r0
 80026c2:	dd03      	ble.n	80026cc <__aeabi_d2iz+0x2c>
 80026c4:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <__aeabi_d2iz+0x68>)
 80026c6:	18f0      	adds	r0, r6, r3
 80026c8:	b002      	add	sp, #8
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
 80026cc:	2080      	movs	r0, #128	@ 0x80
 80026ce:	0340      	lsls	r0, r0, #13
 80026d0:	4320      	orrs	r0, r4
 80026d2:	4c0e      	ldr	r4, [pc, #56]	@ (800270c <__aeabi_d2iz+0x6c>)
 80026d4:	1a64      	subs	r4, r4, r1
 80026d6:	2c1f      	cmp	r4, #31
 80026d8:	dd08      	ble.n	80026ec <__aeabi_d2iz+0x4c>
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <__aeabi_d2iz+0x70>)
 80026dc:	1a5b      	subs	r3, r3, r1
 80026de:	40d8      	lsrs	r0, r3
 80026e0:	0003      	movs	r3, r0
 80026e2:	4258      	negs	r0, r3
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d1ef      	bne.n	80026c8 <__aeabi_d2iz+0x28>
 80026e8:	0018      	movs	r0, r3
 80026ea:	e7ed      	b.n	80026c8 <__aeabi_d2iz+0x28>
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <__aeabi_d2iz+0x74>)
 80026ee:	9a00      	ldr	r2, [sp, #0]
 80026f0:	469c      	mov	ip, r3
 80026f2:	0003      	movs	r3, r0
 80026f4:	4461      	add	r1, ip
 80026f6:	408b      	lsls	r3, r1
 80026f8:	40e2      	lsrs	r2, r4
 80026fa:	4313      	orrs	r3, r2
 80026fc:	e7f1      	b.n	80026e2 <__aeabi_d2iz+0x42>
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	000003fe 	.word	0x000003fe
 8002704:	0000041d 	.word	0x0000041d
 8002708:	7fffffff 	.word	0x7fffffff
 800270c:	00000433 	.word	0x00000433
 8002710:	00000413 	.word	0x00000413
 8002714:	fffffbed 	.word	0xfffffbed

08002718 <__aeabi_i2d>:
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	2800      	cmp	r0, #0
 800271c:	d016      	beq.n	800274c <__aeabi_i2d+0x34>
 800271e:	17c3      	asrs	r3, r0, #31
 8002720:	18c5      	adds	r5, r0, r3
 8002722:	405d      	eors	r5, r3
 8002724:	0fc4      	lsrs	r4, r0, #31
 8002726:	0028      	movs	r0, r5
 8002728:	f000 f848 	bl	80027bc <__clzsi2>
 800272c:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <__aeabi_i2d+0x58>)
 800272e:	1a1b      	subs	r3, r3, r0
 8002730:	055b      	lsls	r3, r3, #21
 8002732:	0d5b      	lsrs	r3, r3, #21
 8002734:	280a      	cmp	r0, #10
 8002736:	dc14      	bgt.n	8002762 <__aeabi_i2d+0x4a>
 8002738:	0002      	movs	r2, r0
 800273a:	002e      	movs	r6, r5
 800273c:	3215      	adds	r2, #21
 800273e:	4096      	lsls	r6, r2
 8002740:	220b      	movs	r2, #11
 8002742:	1a12      	subs	r2, r2, r0
 8002744:	40d5      	lsrs	r5, r2
 8002746:	032d      	lsls	r5, r5, #12
 8002748:	0b2d      	lsrs	r5, r5, #12
 800274a:	e003      	b.n	8002754 <__aeabi_i2d+0x3c>
 800274c:	2400      	movs	r4, #0
 800274e:	2300      	movs	r3, #0
 8002750:	2500      	movs	r5, #0
 8002752:	2600      	movs	r6, #0
 8002754:	051b      	lsls	r3, r3, #20
 8002756:	432b      	orrs	r3, r5
 8002758:	07e4      	lsls	r4, r4, #31
 800275a:	4323      	orrs	r3, r4
 800275c:	0030      	movs	r0, r6
 800275e:	0019      	movs	r1, r3
 8002760:	bd70      	pop	{r4, r5, r6, pc}
 8002762:	380b      	subs	r0, #11
 8002764:	4085      	lsls	r5, r0
 8002766:	032d      	lsls	r5, r5, #12
 8002768:	2600      	movs	r6, #0
 800276a:	0b2d      	lsrs	r5, r5, #12
 800276c:	e7f2      	b.n	8002754 <__aeabi_i2d+0x3c>
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	0000041e 	.word	0x0000041e

08002774 <__aeabi_ui2d>:
 8002774:	b510      	push	{r4, lr}
 8002776:	1e04      	subs	r4, r0, #0
 8002778:	d010      	beq.n	800279c <__aeabi_ui2d+0x28>
 800277a:	f000 f81f 	bl	80027bc <__clzsi2>
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <__aeabi_ui2d+0x44>)
 8002780:	1a1b      	subs	r3, r3, r0
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	280a      	cmp	r0, #10
 8002788:	dc0f      	bgt.n	80027aa <__aeabi_ui2d+0x36>
 800278a:	220b      	movs	r2, #11
 800278c:	0021      	movs	r1, r4
 800278e:	1a12      	subs	r2, r2, r0
 8002790:	40d1      	lsrs	r1, r2
 8002792:	3015      	adds	r0, #21
 8002794:	030a      	lsls	r2, r1, #12
 8002796:	4084      	lsls	r4, r0
 8002798:	0b12      	lsrs	r2, r2, #12
 800279a:	e001      	b.n	80027a0 <__aeabi_ui2d+0x2c>
 800279c:	2300      	movs	r3, #0
 800279e:	2200      	movs	r2, #0
 80027a0:	051b      	lsls	r3, r3, #20
 80027a2:	4313      	orrs	r3, r2
 80027a4:	0020      	movs	r0, r4
 80027a6:	0019      	movs	r1, r3
 80027a8:	bd10      	pop	{r4, pc}
 80027aa:	0022      	movs	r2, r4
 80027ac:	380b      	subs	r0, #11
 80027ae:	4082      	lsls	r2, r0
 80027b0:	0312      	lsls	r2, r2, #12
 80027b2:	2400      	movs	r4, #0
 80027b4:	0b12      	lsrs	r2, r2, #12
 80027b6:	e7f3      	b.n	80027a0 <__aeabi_ui2d+0x2c>
 80027b8:	0000041e 	.word	0x0000041e

080027bc <__clzsi2>:
 80027bc:	211c      	movs	r1, #28
 80027be:	2301      	movs	r3, #1
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	4298      	cmp	r0, r3
 80027c4:	d301      	bcc.n	80027ca <__clzsi2+0xe>
 80027c6:	0c00      	lsrs	r0, r0, #16
 80027c8:	3910      	subs	r1, #16
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	4298      	cmp	r0, r3
 80027ce:	d301      	bcc.n	80027d4 <__clzsi2+0x18>
 80027d0:	0a00      	lsrs	r0, r0, #8
 80027d2:	3908      	subs	r1, #8
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	4298      	cmp	r0, r3
 80027d8:	d301      	bcc.n	80027de <__clzsi2+0x22>
 80027da:	0900      	lsrs	r0, r0, #4
 80027dc:	3904      	subs	r1, #4
 80027de:	a202      	add	r2, pc, #8	@ (adr r2, 80027e8 <__clzsi2+0x2c>)
 80027e0:	5c10      	ldrb	r0, [r2, r0]
 80027e2:	1840      	adds	r0, r0, r1
 80027e4:	4770      	bx	lr
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	02020304 	.word	0x02020304
 80027ec:	01010101 	.word	0x01010101
	...

080027f8 <__clzdi2>:
 80027f8:	b510      	push	{r4, lr}
 80027fa:	2900      	cmp	r1, #0
 80027fc:	d103      	bne.n	8002806 <__clzdi2+0xe>
 80027fe:	f7ff ffdd 	bl	80027bc <__clzsi2>
 8002802:	3020      	adds	r0, #32
 8002804:	e002      	b.n	800280c <__clzdi2+0x14>
 8002806:	0008      	movs	r0, r1
 8002808:	f7ff ffd8 	bl	80027bc <__clzsi2>
 800280c:	bd10      	pop	{r4, pc}
 800280e:	46c0      	nop			@ (mov r8, r8)

08002810 <_write>:
static void MX_ADC1_Init(void);
static void MX_DAC1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, len);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	4803      	ldr	r0, [pc, #12]	@ (8002834 <_write+0x24>)
 8002826:	f003 fa95 	bl	8005d54 <HAL_UART_Transmit>
  return len;
 800282a:	687b      	ldr	r3, [r7, #4]
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b004      	add	sp, #16
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200002c8 	.word	0x200002c8

08002838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t dacval = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002842:	f000 fcd9 	bl	80031f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002846:	f000 f835 	bl	80028b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284a:	f000 f9c3 	bl	8002bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 800284e:	f000 f9a3 	bl	8002b98 <MX_DMA_Init>
  MX_ADC1_Init();
 8002852:	f000 f877 	bl	8002944 <MX_ADC1_Init>
  MX_DAC1_Init();
 8002856:	f000 f915 	bl	8002a84 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 800285a:	f000 f94f 	bl	8002afc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    printf("Start!\r\n");
 800285e:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <main+0x64>)
 8002860:	0018      	movs	r0, r3
 8002862:	f004 fe5d 	bl	8007520 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while(1){

    	  //HAL_Delay(1);
    	  if(adcflag == 1){
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <main+0x68>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d1fb      	bne.n	8002866 <main+0x2e>
    		  adcflag = 0;
 800286e:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <main+0x68>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
    		  dacval =  (uint32_t)(2*(adcBuf[0] - 1024) + 1024);
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <main+0x6c>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <main+0x70>)
 800287a:	4694      	mov	ip, r2
 800287c:	4463      	add	r3, ip
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	607b      	str	r3, [r7, #4]
    		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacval);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4809      	ldr	r0, [pc, #36]	@ (80028ac <main+0x74>)
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	f001 fe58 	bl	800453e <HAL_DAC_SetValue>
        	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 4);
 800288e:	4905      	ldr	r1, [pc, #20]	@ (80028a4 <main+0x6c>)
 8002890:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <main+0x78>)
 8002892:	2204      	movs	r2, #4
 8002894:	0018      	movs	r0, r3
 8002896:	f001 f831 	bl	80038fc <HAL_ADC_Start_DMA>
    	  if(adcflag == 1){
 800289a:	e7e4      	b.n	8002866 <main+0x2e>
 800289c:	08009578 	.word	0x08009578
 80028a0:	20000000 	.word	0x20000000
 80028a4:	2000035c 	.word	0x2000035c
 80028a8:	fffffe00 	.word	0xfffffe00
 80028ac:	200002b4 	.word	0x200002b4
 80028b0:	200001f4 	.word	0x200001f4

080028b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b093      	sub	sp, #76	@ 0x4c
 80028b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ba:	2410      	movs	r4, #16
 80028bc:	193b      	adds	r3, r7, r4
 80028be:	0018      	movs	r0, r3
 80028c0:	2338      	movs	r3, #56	@ 0x38
 80028c2:	001a      	movs	r2, r3
 80028c4:	2100      	movs	r1, #0
 80028c6:	f004 ff21 	bl	800770c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ca:	003b      	movs	r3, r7
 80028cc:	0018      	movs	r0, r3
 80028ce:	2310      	movs	r3, #16
 80028d0:	001a      	movs	r2, r3
 80028d2:	2100      	movs	r1, #0
 80028d4:	f004 ff1a 	bl	800770c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	0018      	movs	r0, r3
 80028de:	f002 fb3b 	bl	8004f58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	2202      	movs	r2, #2
 80028e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2280      	movs	r2, #128	@ 0x80
 80028ec:	0052      	lsls	r2, r2, #1
 80028ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	2240      	movs	r2, #64	@ 0x40
 80028fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002902:	193b      	adds	r3, r7, r4
 8002904:	0018      	movs	r0, r3
 8002906:	f002 fb73 	bl	8004ff0 <HAL_RCC_OscConfig>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800290e:	f000 fa25 	bl	8002d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002912:	003b      	movs	r3, r7
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002918:	003b      	movs	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800291e:	003b      	movs	r3, r7
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002924:	003b      	movs	r3, r7
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800292a:	003b      	movs	r3, r7
 800292c:	2100      	movs	r1, #0
 800292e:	0018      	movs	r0, r3
 8002930:	f002 fe78 	bl	8005624 <HAL_RCC_ClockConfig>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d001      	beq.n	800293c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002938:	f000 fa10 	bl	8002d5c <Error_Handler>
  }
}
 800293c:	46c0      	nop			@ (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b013      	add	sp, #76	@ 0x4c
 8002942:	bd90      	pop	{r4, r7, pc}

08002944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	0018      	movs	r0, r3
 800294e:	230c      	movs	r3, #12
 8002950:	001a      	movs	r2, r3
 8002952:	2100      	movs	r1, #0
 8002954:	f004 feda 	bl	800770c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002958:	4b46      	ldr	r3, [pc, #280]	@ (8002a74 <MX_ADC1_Init+0x130>)
 800295a:	4a47      	ldr	r2, [pc, #284]	@ (8002a78 <MX_ADC1_Init+0x134>)
 800295c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800295e:	4b45      	ldr	r3, [pc, #276]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002960:	2280      	movs	r2, #128	@ 0x80
 8002962:	05d2      	lsls	r2, r2, #23
 8002964:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002966:	4b43      	ldr	r3, [pc, #268]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800296c:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <MX_ADC1_Init+0x130>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002972:	4b40      	ldr	r3, [pc, #256]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002974:	2280      	movs	r2, #128	@ 0x80
 8002976:	0392      	lsls	r2, r2, #14
 8002978:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800297a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a74 <MX_ADC1_Init+0x130>)
 800297c:	2208      	movs	r2, #8
 800297e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002980:	4b3c      	ldr	r3, [pc, #240]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002982:	2200      	movs	r2, #0
 8002984:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002986:	4b3b      	ldr	r3, [pc, #236]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002988:	2200      	movs	r2, #0
 800298a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800298c:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <MX_ADC1_Init+0x130>)
 800298e:	2201      	movs	r2, #1
 8002990:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8002992:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002994:	2204      	movs	r2, #4
 8002996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002998:	4b36      	ldr	r3, [pc, #216]	@ (8002a74 <MX_ADC1_Init+0x130>)
 800299a:	2220      	movs	r2, #32
 800299c:	2100      	movs	r1, #0
 800299e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029a0:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029a6:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029ac:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029ae:	222c      	movs	r2, #44	@ 0x2c
 80029b0:	2100      	movs	r1, #0
 80029b2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 80029ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029bc:	2203      	movs	r2, #3
 80029be:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 80029c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029c2:	2206      	movs	r2, #6
 80029c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80029c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029c8:	223c      	movs	r2, #60	@ 0x3c
 80029ca:	2100      	movs	r1, #0
 80029cc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80029ce:	4b29      	ldr	r3, [pc, #164]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029d4:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 fde8 	bl	80035ac <HAL_ADC_Init>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80029e0:	f000 f9bc 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	2200      	movs	r2, #0
 80029ee:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f6:	1d3a      	adds	r2, r7, #4
 80029f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <MX_ADC1_Init+0x130>)
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f001 f93b 	bl	8003c78 <HAL_ADC_ConfigChannel>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d001      	beq.n	8002a0a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002a06:	f000 f9a9 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a7c <MX_ADC1_Init+0x138>)
 8002a0e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	2204      	movs	r2, #4
 8002a14:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a16:	1d3a      	adds	r2, r7, #4
 8002a18:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f001 f92b 	bl	8003c78 <HAL_ADC_ConfigChannel>
 8002a22:	1e03      	subs	r3, r0, #0
 8002a24:	d001      	beq.n	8002a2a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002a26:	f000 f999 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	4a14      	ldr	r2, [pc, #80]	@ (8002a80 <MX_ADC1_Init+0x13c>)
 8002a2e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	2208      	movs	r2, #8
 8002a34:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a36:	1d3a      	adds	r2, r7, #4
 8002a38:	4b0e      	ldr	r3, [pc, #56]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f001 f91b 	bl	8003c78 <HAL_ADC_ConfigChannel>
 8002a42:	1e03      	subs	r3, r0, #0
 8002a44:	d001      	beq.n	8002a4a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8002a46:	f000 f989 	bl	8002d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a7c <MX_ADC1_Init+0x138>)
 8002a4e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	220c      	movs	r2, #12
 8002a54:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a56:	1d3a      	adds	r2, r7, #4
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <MX_ADC1_Init+0x130>)
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f001 f90b 	bl	8003c78 <HAL_ADC_ConfigChannel>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d001      	beq.n	8002a6a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002a66:	f000 f979 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	200001f4 	.word	0x200001f4
 8002a78:	40012400 	.word	0x40012400
 8002a7c:	04000002 	.word	0x04000002
 8002a80:	08000004 	.word	0x08000004

08002a84 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	@ 0x28
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */
  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	2324      	movs	r3, #36	@ 0x24
 8002a90:	001a      	movs	r2, r3
 8002a92:	2100      	movs	r1, #0
 8002a94:	f004 fe3a 	bl	800770c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */
  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002a98:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <MX_DAC1_Init+0x70>)
 8002a9a:	4a17      	ldr	r2, [pc, #92]	@ (8002af8 <MX_DAC1_Init+0x74>)
 8002a9c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <MX_DAC1_Init+0x70>)
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f001 fcd3 	bl	800444c <HAL_DAC_Init>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8002aaa:	f000 f957 	bl	8002d5c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002acc:	1d39      	adds	r1, r7, #4
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <MX_DAC1_Init+0x70>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f001 fd5a 	bl	800458c <HAL_DAC_ConfigChannel>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8002adc:	f000 f93e 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <MX_DAC1_Init+0x70>)
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f001 fcd4 	bl	8004492 <HAL_DAC_Start>
  /* USER CODE END DAC1_Init 2 */

}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b00a      	add	sp, #40	@ 0x28
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	200002b4 	.word	0x200002b4
 8002af8:	40007400 	.word	0x40007400

08002afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b00:	4b23      	ldr	r3, [pc, #140]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b02:	4a24      	ldr	r2, [pc, #144]	@ (8002b94 <MX_USART1_UART_Init+0x98>)
 8002b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b06:	4b22      	ldr	r3, [pc, #136]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b08:	22e1      	movs	r2, #225	@ 0xe1
 8002b0a:	0252      	lsls	r2, r2, #9
 8002b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0e:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b14:	4b1e      	ldr	r3, [pc, #120]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b20:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b22:	220c      	movs	r2, #12
 8002b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b26:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b2c:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b32:	4b17      	ldr	r3, [pc, #92]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b38:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b44:	4b12      	ldr	r3, [pc, #72]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b46:	0018      	movs	r0, r3
 8002b48:	f003 f8ae 	bl	8005ca8 <HAL_UART_Init>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b50:	f000 f904 	bl	8002d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b56:	2100      	movs	r1, #0
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f003 fe85 	bl	8006868 <HAL_UARTEx_SetTxFifoThreshold>
 8002b5e:	1e03      	subs	r3, r0, #0
 8002b60:	d001      	beq.n	8002b66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b62:	f000 f8fb 	bl	8002d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b68:	2100      	movs	r1, #0
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f003 febc 	bl	80068e8 <HAL_UARTEx_SetRxFifoThreshold>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d001      	beq.n	8002b78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b74:	f000 f8f2 	bl	8002d5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <MX_USART1_UART_Init+0x94>)
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f003 fe3a 	bl	80067f4 <HAL_UARTEx_DisableFifoMode>
 8002b80:	1e03      	subs	r3, r0, #0
 8002b82:	d001      	beq.n	8002b88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b84:	f000 f8ea 	bl	8002d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8002b88:	46c0      	nop			@ (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	200002c8 	.word	0x200002c8
 8002b94:	40013800 	.word	0x40013800

08002b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <MX_DMA_Init+0x38>)
 8002ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <MX_DMA_Init+0x38>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <MX_DMA_Init+0x38>)
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2009      	movs	r0, #9
 8002bbc:	f001 fc14 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bc0:	2009      	movs	r0, #9
 8002bc2:	f001 fc26 	bl	8004412 <HAL_NVIC_EnableIRQ>

}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b002      	add	sp, #8
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08b      	sub	sp, #44	@ 0x2c
 8002bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bda:	2414      	movs	r4, #20
 8002bdc:	193b      	adds	r3, r7, r4
 8002bde:	0018      	movs	r0, r3
 8002be0:	2314      	movs	r3, #20
 8002be2:	001a      	movs	r2, r3
 8002be4:	2100      	movs	r1, #0
 8002be6:	f004 fd91 	bl	800770c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bea:	4b3c      	ldr	r3, [pc, #240]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bee:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bf6:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c02:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c06:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c08:	2104      	movs	r1, #4
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c0e:	4b33      	ldr	r3, [pc, #204]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c12:	2204      	movs	r2, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1a:	4b30      	ldr	r3, [pc, #192]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c20:	2120      	movs	r1, #32
 8002c22:	430a      	orrs	r2, r1
 8002c24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c26:	4b2d      	ldr	r3, [pc, #180]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c36:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c3e:	4b27      	ldr	r3, [pc, #156]	@ (8002cdc <MX_GPIO_Init+0x108>)
 8002c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c42:	2201      	movs	r2, #1
 8002c44:	4013      	ands	r3, r2
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2280      	movs	r2, #128	@ 0x80
 8002c4e:	01d2      	lsls	r2, r2, #7
 8002c50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	2288      	movs	r2, #136	@ 0x88
 8002c56:	0352      	lsls	r2, r2, #13
 8002c58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c60:	193b      	adds	r3, r7, r4
 8002c62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce0 <MX_GPIO_Init+0x10c>)
 8002c64:	0019      	movs	r1, r3
 8002c66:	0010      	movs	r0, r2
 8002c68:	f002 f812 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_NRST_Pin */
  GPIO_InitStruct.Pin = MCU_NRST_Pin;
 8002c6c:	0021      	movs	r1, r4
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	2204      	movs	r2, #4
 8002c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	2288      	movs	r2, #136	@ 0x88
 8002c78:	0352      	lsls	r2, r2, #13
 8002c7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	000c      	movs	r4, r1
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MCU_NRST_GPIO_Port, &GPIO_InitStruct);
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	4a17      	ldr	r2, [pc, #92]	@ (8002ce4 <MX_GPIO_Init+0x110>)
 8002c88:	0019      	movs	r1, r3
 8002c8a:	0010      	movs	r0, r2
 8002c8c:	f002 f800 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_INT_Pin IFLAG_Z_Pin TFLAG_Z_Pin IFLAG_1V6_Pin */
  GPIO_InitStruct.Pin = SYNC_INT_Pin|IFLAG_Z_Pin|TFLAG_Z_Pin|IFLAG_1V6_Pin;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	22e8      	movs	r2, #232	@ 0xe8
 8002c94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	2288      	movs	r2, #136	@ 0x88
 8002c9a:	0352      	lsls	r2, r2, #13
 8002c9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	193a      	adds	r2, r7, r4
 8002ca6:	23a0      	movs	r3, #160	@ 0xa0
 8002ca8:	05db      	lsls	r3, r3, #23
 8002caa:	0011      	movs	r1, r2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f001 ffef 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFLAG_1V6_Pin */
  GPIO_InitStruct.Pin = TFLAG_1V6_Pin;
 8002cb2:	0021      	movs	r1, r4
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	2288      	movs	r2, #136	@ 0x88
 8002cbe:	0352      	lsls	r2, r2, #13
 8002cc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TFLAG_1V6_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	4a07      	ldr	r2, [pc, #28]	@ (8002ce8 <MX_GPIO_Init+0x114>)
 8002ccc:	0019      	movs	r1, r3
 8002cce:	0010      	movs	r0, r2
 8002cd0:	f001 ffde 	bl	8004c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b00b      	add	sp, #44	@ 0x2c
 8002cda:	bd90      	pop	{r4, r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	50000800 	.word	0x50000800
 8002ce4:	50001400 	.word	0x50001400
 8002ce8:	50000400 	.word	0x50000400

08002cec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	if(adcflag == 0){
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <HAL_ADC_ConvCpltCallback+0x68>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d126      	bne.n	8002d4a <HAL_ADC_ConvCpltCallback+0x5e>
		  float v, z;
		  v = (float)adcBuf[0] - (float)adcBuf[1];
 8002cfc:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fd fe5d 	bl	80009c0 <__aeabi_ui2f>
 8002d06:	1c04      	adds	r4, r0, #0
 8002d08:	4b13      	ldr	r3, [pc, #76]	@ (8002d58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d0a:	885b      	ldrh	r3, [r3, #2]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7fd fe57 	bl	80009c0 <__aeabi_ui2f>
 8002d12:	1c03      	adds	r3, r0, #0
 8002d14:	1c19      	adds	r1, r3, #0
 8002d16:	1c20      	adds	r0, r4, #0
 8002d18:	f7fd fcae 	bl	8000678 <__aeabi_fsub>
 8002d1c:	1c03      	adds	r3, r0, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
		  z = (float)adcBuf[2] - (float)adcBuf[3];
 8002d20:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d22:	889b      	ldrh	r3, [r3, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7fd fe4b 	bl	80009c0 <__aeabi_ui2f>
 8002d2a:	1c04      	adds	r4, r0, #0
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d2e:	88db      	ldrh	r3, [r3, #6]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7fd fe45 	bl	80009c0 <__aeabi_ui2f>
 8002d36:	1c03      	adds	r3, r0, #0
 8002d38:	1c19      	adds	r1, r3, #0
 8002d3a:	1c20      	adds	r0, r4, #0
 8002d3c:	f7fd fc9c 	bl	8000678 <__aeabi_fsub>
 8002d40:	1c03      	adds	r3, r0, #0
 8002d42:	60bb      	str	r3, [r7, #8]
		  //printf("%f, %f\r\n", v, z);
		  //printf("%d, %d, %d, %d\r\n", adcBuf[0], adcBuf[1], adcBuf[2], adcBuf[3]);
		  adcflag = 1;
 8002d44:	4b03      	ldr	r3, [pc, #12]	@ (8002d54 <HAL_ADC_ConvCpltCallback+0x68>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
	}
}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b005      	add	sp, #20
 8002d50:	bd90      	pop	{r4, r7, pc}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	20000000 	.word	0x20000000
 8002d58:	2000035c 	.word	0x2000035c

08002d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <HAL_MspInit+0x44>)
 8002d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d72:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <HAL_MspInit+0x44>)
 8002d74:	2101      	movs	r1, #1
 8002d76:	430a      	orrs	r2, r1
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <HAL_MspInit+0x44>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_MspInit+0x44>)
 8002d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d8a:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_MspInit+0x44>)
 8002d8c:	2180      	movs	r1, #128	@ 0x80
 8002d8e:	0549      	lsls	r1, r1, #21
 8002d90:	430a      	orrs	r2, r1
 8002d92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_MspInit+0x44>)
 8002d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	055b      	lsls	r3, r3, #21
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b08b      	sub	sp, #44	@ 0x2c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	2414      	movs	r4, #20
 8002dba:	193b      	adds	r3, r7, r4
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	2314      	movs	r3, #20
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f004 fca2 	bl	800770c <memset>
  if(hadc->Instance==ADC1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <HAL_ADC_MspInit+0xe4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d15c      	bne.n	8002e8c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002dd2:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <HAL_ADC_MspInit+0xe8>)
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dd6:	4b30      	ldr	r3, [pc, #192]	@ (8002e98 <HAL_ADC_MspInit+0xe8>)
 8002dd8:	2180      	movs	r1, #128	@ 0x80
 8002dda:	0349      	lsls	r1, r1, #13
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40
 8002de0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <HAL_ADC_MspInit+0xe8>)
 8002de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	035b      	lsls	r3, r3, #13
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	4b2a      	ldr	r3, [pc, #168]	@ (8002e98 <HAL_ADC_MspInit+0xe8>)
 8002df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df2:	4b29      	ldr	r3, [pc, #164]	@ (8002e98 <HAL_ADC_MspInit+0xe8>)
 8002df4:	2101      	movs	r1, #1
 8002df6:	430a      	orrs	r2, r1
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dfa:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <HAL_ADC_MspInit+0xe8>)
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_V_Pin|ADC_1V6_Pin|ADC_Zf_Pin;
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	2207      	movs	r2, #7
 8002e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	2203      	movs	r2, #3
 8002e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e18:	193a      	adds	r2, r7, r4
 8002e1a:	23a0      	movs	r3, #160	@ 0xa0
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	0011      	movs	r1, r2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f001 ff35 	bl	8004c90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e26:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <HAL_ADC_MspInit+0xf0>)
 8002e2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e2e:	2205      	movs	r2, #5
 8002e30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e32:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e38:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e3e:	4b17      	ldr	r3, [pc, #92]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e40:	2280      	movs	r2, #128	@ 0x80
 8002e42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e44:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	0052      	lsls	r2, r2, #1
 8002e4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e4e:	2280      	movs	r2, #128	@ 0x80
 8002e50:	00d2      	lsls	r2, r2, #3
 8002e52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e60:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f001 fcc2 	bl	80047ec <HAL_DMA_Init>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002e6c:	f7ff ff76 	bl	8002d5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a0a      	ldr	r2, [pc, #40]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e74:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_ADC_MspInit+0xec>)
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	200c      	movs	r0, #12
 8002e82:	f001 fab1 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002e86:	200c      	movs	r0, #12
 8002e88:	f001 fac3 	bl	8004412 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e8c:	46c0      	nop			@ (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b00b      	add	sp, #44	@ 0x2c
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	40012400 	.word	0x40012400
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	20000258 	.word	0x20000258
 8002ea0:	40020008 	.word	0x40020008

08002ea4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b08b      	sub	sp, #44	@ 0x2c
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	2414      	movs	r4, #20
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	2314      	movs	r3, #20
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f004 fc28 	bl	800770c <memset>
  if(hdac->Instance==DAC1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	@ (8002f24 <HAL_DAC_MspInit+0x80>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d129      	bne.n	8002f1a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <HAL_DAC_MspInit+0x84>)
 8002ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eca:	4b17      	ldr	r3, [pc, #92]	@ (8002f28 <HAL_DAC_MspInit+0x84>)
 8002ecc:	2180      	movs	r1, #128	@ 0x80
 8002ece:	0589      	lsls	r1, r1, #22
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ed4:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <HAL_DAC_MspInit+0x84>)
 8002ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	059b      	lsls	r3, r3, #22
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_DAC_MspInit+0x84>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <HAL_DAC_MspInit+0x84>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <HAL_DAC_MspInit+0x84>)
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Z_Pin;
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	2210      	movs	r2, #16
 8002efe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	2203      	movs	r2, #3
 8002f04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(DAC_Z_GPIO_Port, &GPIO_InitStruct);
 8002f0c:	193a      	adds	r2, r7, r4
 8002f0e:	23a0      	movs	r3, #160	@ 0xa0
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f001 febb 	bl	8004c90 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b00b      	add	sp, #44	@ 0x2c
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	40007400 	.word	0x40007400
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b095      	sub	sp, #84	@ 0x54
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	233c      	movs	r3, #60	@ 0x3c
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	0018      	movs	r0, r3
 8002f3a:	2314      	movs	r3, #20
 8002f3c:	001a      	movs	r2, r3
 8002f3e:	2100      	movs	r1, #0
 8002f40:	f004 fbe4 	bl	800770c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f44:	2410      	movs	r4, #16
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	0018      	movs	r0, r3
 8002f4a:	232c      	movs	r3, #44	@ 0x2c
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	2100      	movs	r1, #0
 8002f50:	f004 fbdc 	bl	800770c <memset>
  if(huart->Instance==USART1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_UART_MspInit+0xb8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d13d      	bne.n	8002fda <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	2200      	movs	r2, #0
 8002f68:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f6a:	193b      	adds	r3, r7, r4
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f002 fd03 	bl	8005978 <HAL_RCCEx_PeriphCLKConfig>
 8002f72:	1e03      	subs	r3, r0, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f76:	f7ff fef1 	bl	8002d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <HAL_UART_MspInit+0xbc>)
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe8 <HAL_UART_MspInit+0xbc>)
 8002f80:	2180      	movs	r1, #128	@ 0x80
 8002f82:	01c9      	lsls	r1, r1, #7
 8002f84:	430a      	orrs	r2, r1
 8002f86:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f88:	4b17      	ldr	r3, [pc, #92]	@ (8002fe8 <HAL_UART_MspInit+0xbc>)
 8002f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	01db      	lsls	r3, r3, #7
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <HAL_UART_MspInit+0xbc>)
 8002f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f9a:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <HAL_UART_MspInit+0xbc>)
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fa2:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <HAL_UART_MspInit+0xbc>)
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002fae:	213c      	movs	r1, #60	@ 0x3c
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	22c0      	movs	r2, #192	@ 0xc0
 8002fb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	2202      	movs	r2, #2
 8002fba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2200      	movs	r2, #0
 8002fcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	4a06      	ldr	r2, [pc, #24]	@ (8002fec <HAL_UART_MspInit+0xc0>)
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	f001 fe5b 	bl	8004c90 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b015      	add	sp, #84	@ 0x54
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	50000400 	.word	0x50000400

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff4:	46c0      	nop			@ (mov r8, r8)
 8002ff6:	e7fd      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	e7fd      	b.n	8002ffc <HardFault_Handler+0x4>

08003000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003018:	f000 f958 	bl	80032cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <DMA1_Channel1_IRQHandler+0x14>)
 800302a:	0018      	movs	r0, r3
 800302c:	f001 fcee 	bl	8004a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003030:	46c0      	nop			@ (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	20000258 	.word	0x20000258

0800303c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003040:	4b03      	ldr	r3, [pc, #12]	@ (8003050 <ADC1_COMP_IRQHandler+0x14>)
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fce8 	bl	8003a18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003048:	46c0      	nop			@ (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	200001f4 	.word	0x200001f4

08003054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  return 1;
 8003058:	2301      	movs	r3, #1
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_kill>:

int _kill(int pid, int sig)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800306a:	f004 fba9 	bl	80077c0 <__errno>
 800306e:	0003      	movs	r3, r0
 8003070:	2216      	movs	r2, #22
 8003072:	601a      	str	r2, [r3, #0]
  return -1;
 8003074:	2301      	movs	r3, #1
 8003076:	425b      	negs	r3, r3
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <_exit>:

void _exit (int status)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003088:	2301      	movs	r3, #1
 800308a:	425a      	negs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff ffe5 	bl	8003060 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	e7fd      	b.n	8003096 <_exit+0x16>

0800309a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e00a      	b.n	80030c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ac:	e000      	b.n	80030b0 <_read+0x16>
 80030ae:	bf00      	nop
 80030b0:	0001      	movs	r1, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	60ba      	str	r2, [r7, #8]
 80030b8:	b2ca      	uxtb	r2, r1
 80030ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3301      	adds	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbf0      	blt.n	80030ac <_read+0x12>
  }

  return len;
 80030ca:	687b      	ldr	r3, [r7, #4]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030dc:	2301      	movs	r3, #1
 80030de:	425b      	negs	r3, r3
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2280      	movs	r2, #128	@ 0x80
 80030f6:	0192      	lsls	r2, r2, #6
 80030f8:	605a      	str	r2, [r3, #4]
  return 0;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <_isatty>:

int _isatty(int file)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800310c:	2301      	movs	r3, #1
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b002      	add	sp, #8
 8003114:	bd80      	pop	{r7, pc}

08003116 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003122:	2300      	movs	r3, #0
}
 8003124:	0018      	movs	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	b004      	add	sp, #16
 800312a:	bd80      	pop	{r7, pc}

0800312c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003134:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <_sbrk+0x5c>)
 8003136:	4b15      	ldr	r3, [pc, #84]	@ (800318c <_sbrk+0x60>)
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <_sbrk+0x64>)
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <_sbrk+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	18d3      	adds	r3, r2, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800315c:	f004 fb30 	bl	80077c0 <__errno>
 8003160:	0003      	movs	r3, r0
 8003162:	220c      	movs	r2, #12
 8003164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003166:	2301      	movs	r3, #1
 8003168:	425b      	negs	r3, r3
 800316a:	e009      	b.n	8003180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800316c:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	18d2      	adds	r2, r2, r3
 800317a:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <_sbrk+0x64>)
 800317c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b006      	add	sp, #24
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20004800 	.word	0x20004800
 800318c:	00000400 	.word	0x00000400
 8003190:	2000036c 	.word	0x2000036c
 8003194:	200004c0 	.word	0x200004c0

08003198 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031a4:	480d      	ldr	r0, [pc, #52]	@ (80031dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031a8:	f7ff fff6 	bl	8003198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031ac:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80031ae:	490d      	ldr	r1, [pc, #52]	@ (80031e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <LoopForever+0xe>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b4:	e002      	b.n	80031bc <LoopCopyDataInit>

080031b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ba:	3304      	adds	r3, #4

080031bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c0:	d3f9      	bcc.n	80031b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80031c4:	4c0a      	ldr	r4, [pc, #40]	@ (80031f0 <LoopForever+0x16>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c8:	e001      	b.n	80031ce <LoopFillZerobss>

080031ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031cc:	3204      	adds	r2, #4

080031ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d0:	d3fb      	bcc.n	80031ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031d2:	f004 fafb 	bl	80077cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80031d6:	f7ff fb2f 	bl	8002838 <main>

080031da <LoopForever>:

LoopForever:
  b LoopForever
 80031da:	e7fe      	b.n	80031da <LoopForever>
  ldr   r0, =_estack
 80031dc:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80031e8:	080099c8 	.word	0x080099c8
  ldr r2, =_sbss
 80031ec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80031f0:	200004c0 	.word	0x200004c0

080031f4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031fe:	1dfb      	adds	r3, r7, #7
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_Init+0x3c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <HAL_Init+0x3c>)
 800320a:	2180      	movs	r1, #128	@ 0x80
 800320c:	0049      	lsls	r1, r1, #1
 800320e:	430a      	orrs	r2, r1
 8003210:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003212:	2003      	movs	r0, #3
 8003214:	f000 f810 	bl	8003238 <HAL_InitTick>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d003      	beq.n	8003224 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e001      	b.n	8003228 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003224:	f7ff fda0 	bl	8002d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	781b      	ldrb	r3, [r3, #0]
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40022000 	.word	0x40022000

08003238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003240:	230f      	movs	r3, #15
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003248:	4b1d      	ldr	r3, [pc, #116]	@ (80032c0 <HAL_InitTick+0x88>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02b      	beq.n	80032a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003250:	4b1c      	ldr	r3, [pc, #112]	@ (80032c4 <HAL_InitTick+0x8c>)
 8003252:	681c      	ldr	r4, [r3, #0]
 8003254:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <HAL_InitTick+0x88>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	0019      	movs	r1, r3
 800325a:	23fa      	movs	r3, #250	@ 0xfa
 800325c:	0098      	lsls	r0, r3, #2
 800325e:	f7fc ff6b 	bl	8000138 <__udivsi3>
 8003262:	0003      	movs	r3, r0
 8003264:	0019      	movs	r1, r3
 8003266:	0020      	movs	r0, r4
 8003268:	f7fc ff66 	bl	8000138 <__udivsi3>
 800326c:	0003      	movs	r3, r0
 800326e:	0018      	movs	r0, r3
 8003270:	f001 f8df 	bl	8004432 <HAL_SYSTICK_Config>
 8003274:	1e03      	subs	r3, r0, #0
 8003276:	d112      	bne.n	800329e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d80a      	bhi.n	8003294 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	2301      	movs	r3, #1
 8003282:	425b      	negs	r3, r3
 8003284:	2200      	movs	r2, #0
 8003286:	0018      	movs	r0, r3
 8003288:	f001 f8ae 	bl	80043e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800328c:	4b0e      	ldr	r3, [pc, #56]	@ (80032c8 <HAL_InitTick+0x90>)
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e00d      	b.n	80032b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003294:	230f      	movs	r3, #15
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e008      	b.n	80032b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800329e:	230f      	movs	r3, #15
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e003      	b.n	80032b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80032b0:	230f      	movs	r3, #15
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b005      	add	sp, #20
 80032bc:	bd90      	pop	{r4, r7, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	2000000c 	.word	0x2000000c
 80032c4:	20000004 	.word	0x20000004
 80032c8:	20000008 	.word	0x20000008

080032cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_IncTick+0x1c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	001a      	movs	r2, r3
 80032d6:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_IncTick+0x20>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	18d2      	adds	r2, r2, r3
 80032dc:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <HAL_IncTick+0x20>)
 80032de:	601a      	str	r2, [r3, #0]
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	2000000c 	.word	0x2000000c
 80032ec:	20000370 	.word	0x20000370

080032f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  return uwTick;
 80032f4:	4b02      	ldr	r3, [pc, #8]	@ (8003300 <HAL_GetTick+0x10>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	20000370 	.word	0x20000370

08003304 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003314:	401a      	ands	r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	fe3fffff 	.word	0xfe3fffff

0800332c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	23e0      	movs	r3, #224	@ 0xe0
 800333a:	045b      	lsls	r3, r3, #17
 800333c:	4013      	ands	r3, r2
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b002      	add	sp, #8
 8003344:	bd80      	pop	{r7, pc}

08003346 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	2104      	movs	r1, #4
 800335a:	400a      	ands	r2, r1
 800335c:	2107      	movs	r1, #7
 800335e:	4091      	lsls	r1, r2
 8003360:	000a      	movs	r2, r1
 8003362:	43d2      	mvns	r2, r2
 8003364:	401a      	ands	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2104      	movs	r1, #4
 800336a:	400b      	ands	r3, r1
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4099      	lsls	r1, r3
 8003370:	000b      	movs	r3, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b004      	add	sp, #16
 800337e:	bd80      	pop	{r7, pc}

08003380 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	2104      	movs	r1, #4
 8003392:	400a      	ands	r2, r1
 8003394:	2107      	movs	r1, #7
 8003396:	4091      	lsls	r1, r2
 8003398:	000a      	movs	r2, r1
 800339a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2104      	movs	r1, #4
 80033a0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80033a2:	40da      	lsrs	r2, r3
 80033a4:	0013      	movs	r3, r2
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}

080033ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	23c0      	movs	r3, #192	@ 0xc0
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	4013      	ands	r3, r2
 80033c0:	d101      	bne.n	80033c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	211f      	movs	r1, #31
 80033e4:	400a      	ands	r2, r1
 80033e6:	210f      	movs	r1, #15
 80033e8:	4091      	lsls	r1, r2
 80033ea:	000a      	movs	r2, r1
 80033ec:	43d2      	mvns	r2, r2
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	210f      	movs	r1, #15
 80033f6:	4019      	ands	r1, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	201f      	movs	r0, #31
 80033fc:	4003      	ands	r3, r0
 80033fe:	4099      	lsls	r1, r3
 8003400:	000b      	movs	r3, r1
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b004      	add	sp, #16
 800340e:	bd80      	pop	{r7, pc}

08003410 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	035b      	lsls	r3, r3, #13
 8003422:	0b5b      	lsrs	r3, r3, #13
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}

08003432 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	0352      	lsls	r2, r2, #13
 8003444:	0b52      	lsrs	r2, r2, #13
 8003446:	43d2      	mvns	r2, r2
 8003448:	401a      	ands	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b002      	add	sp, #8
 8003454:	bd80      	pop	{r7, pc}

08003456 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2203      	movs	r2, #3
 8003464:	4013      	ands	r3, r2
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b002      	add	sp, #8
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	0212      	lsls	r2, r2, #8
 8003484:	43d2      	mvns	r2, r2
 8003486:	401a      	ands	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	400b      	ands	r3, r1
 8003490:	4904      	ldr	r1, [pc, #16]	@ (80034a4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003492:	400b      	ands	r3, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	07ffff00 	.word	0x07ffff00

080034a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a05      	ldr	r2, [pc, #20]	@ (80034cc <LL_ADC_EnableInternalRegulator+0x24>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	2280      	movs	r2, #128	@ 0x80
 80034ba:	0552      	lsls	r2, r2, #21
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b002      	add	sp, #8
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	6fffffe8 	.word	0x6fffffe8

080034d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	2380      	movs	r3, #128	@ 0x80
 80034de:	055b      	lsls	r3, r3, #21
 80034e0:	401a      	ands	r2, r3
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	055b      	lsls	r3, r3, #21
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d101      	bne.n	80034ee <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <LL_ADC_Enable+0x20>)
 8003506:	4013      	ands	r3, r2
 8003508:	2201      	movs	r2, #1
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003510:	46c0      	nop			@ (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}
 8003518:	7fffffe8 	.word	0x7fffffe8

0800351c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a04      	ldr	r2, [pc, #16]	@ (800353c <LL_ADC_Disable+0x20>)
 800352a:	4013      	ands	r3, r2
 800352c:	2202      	movs	r2, #2
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003534:	46c0      	nop			@ (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}
 800353c:	7fffffe8 	.word	0x7fffffe8

08003540 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2201      	movs	r2, #1
 800354e:	4013      	ands	r3, r2
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <LL_ADC_IsEnabled+0x18>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <LL_ADC_IsEnabled+0x1a>
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a04      	ldr	r2, [pc, #16]	@ (8003584 <LL_ADC_REG_StartConversion+0x20>)
 8003572:	4013      	ands	r3, r2
 8003574:	2204      	movs	r2, #4
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800357c:	46c0      	nop			@ (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}
 8003584:	7fffffe8 	.word	0x7fffffe8

08003588 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2204      	movs	r2, #4
 8003596:	4013      	ands	r3, r2
 8003598:	2b04      	cmp	r3, #4
 800359a:	d101      	bne.n	80035a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b4:	231f      	movs	r3, #31
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e17f      	b.n	80038d2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff fbe7 	bl	8002db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2254      	movs	r2, #84	@ 0x54
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff ff6b 	bl	80034d0 <LL_ADC_IsInternalRegulatorEnabled>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d115      	bne.n	800362a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff ff50 	bl	80034a8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003608:	4bb4      	ldr	r3, [pc, #720]	@ (80038dc <HAL_ADC_Init+0x330>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	49b4      	ldr	r1, [pc, #720]	@ (80038e0 <HAL_ADC_Init+0x334>)
 800360e:	0018      	movs	r0, r3
 8003610:	f7fc fd92 	bl	8000138 <__udivsi3>
 8003614:	0003      	movs	r3, r0
 8003616:	3301      	adds	r3, #1
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800361c:	e002      	b.n	8003624 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3b01      	subs	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0018      	movs	r0, r3
 8003630:	f7ff ff4e 	bl	80034d0 <LL_ADC_IsInternalRegulatorEnabled>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d10f      	bne.n	8003658 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363c:	2210      	movs	r2, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	2201      	movs	r2, #1
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003650:	231f      	movs	r3, #31
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0018      	movs	r0, r3
 800365e:	f7ff ff93 	bl	8003588 <LL_ADC_REG_IsConversionOngoing>
 8003662:	0003      	movs	r3, r0
 8003664:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	2210      	movs	r2, #16
 800366c:	4013      	ands	r3, r2
 800366e:	d000      	beq.n	8003672 <HAL_ADC_Init+0xc6>
 8003670:	e122      	b.n	80038b8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d000      	beq.n	800367a <HAL_ADC_Init+0xce>
 8003678:	e11e      	b.n	80038b8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367e:	4a99      	ldr	r2, [pc, #612]	@ (80038e4 <HAL_ADC_Init+0x338>)
 8003680:	4013      	ands	r3, r2
 8003682:	2202      	movs	r2, #2
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0018      	movs	r0, r3
 8003690:	f7ff ff56 	bl	8003540 <LL_ADC_IsEnabled>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d000      	beq.n	800369a <HAL_ADC_Init+0xee>
 8003698:	e0ad      	b.n	80037f6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7e1b      	ldrb	r3, [r3, #24]
 80036a2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80036a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7e5b      	ldrb	r3, [r3, #25]
 80036aa:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80036ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7e9b      	ldrb	r3, [r3, #26]
 80036b2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80036b4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_ADC_Init+0x118>
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	015b      	lsls	r3, r3, #5
 80036c2:	e000      	b.n	80036c6 <HAL_ADC_Init+0x11a>
 80036c4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80036c6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80036cc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	da04      	bge.n	80036e0 <HAL_ADC_Init+0x134>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	e001      	b.n	80036e4 <HAL_ADC_Init+0x138>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80036e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	212c      	movs	r1, #44	@ 0x2c
 80036ea:	5c5b      	ldrb	r3, [r3, r1]
 80036ec:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80036ee:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	5c9b      	ldrb	r3, [r3, r2]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d115      	bne.n	800372c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	7e9b      	ldrb	r3, [r3, #26]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2280      	movs	r2, #128	@ 0x80
 800370c:	0252      	lsls	r2, r2, #9
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	e00b      	b.n	800372c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003718:	2220      	movs	r2, #32
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003724:	2201      	movs	r2, #1
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003738:	23e0      	movs	r3, #224	@ 0xe0
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003742:	4313      	orrs	r3, r2
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a65      	ldr	r2, [pc, #404]	@ (80038e8 <HAL_ADC_Init+0x33c>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	0f9b      	lsrs	r3, r3, #30
 8003766:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800376c:	4313      	orrs	r3, r2
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	223c      	movs	r2, #60	@ 0x3c
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d111      	bne.n	80037a2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	0f9b      	lsrs	r3, r3, #30
 8003784:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800378a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003790:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003796:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	2201      	movs	r2, #1
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	4a50      	ldr	r2, [pc, #320]	@ (80038ec <HAL_ADC_Init+0x340>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	23c0      	movs	r3, #192	@ 0xc0
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d018      	beq.n	80037f6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	05db      	lsls	r3, r3, #23
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d012      	beq.n	80037f6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	429a      	cmp	r2, r3
 80037da:	d00c      	beq.n	80037f6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80037dc:	4b44      	ldr	r3, [pc, #272]	@ (80038f0 <HAL_ADC_Init+0x344>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a44      	ldr	r2, [pc, #272]	@ (80038f4 <HAL_ADC_Init+0x348>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	23f0      	movs	r3, #240	@ 0xf0
 80037ec:	039b      	lsls	r3, r3, #14
 80037ee:	401a      	ands	r2, r3
 80037f0:	4b3f      	ldr	r3, [pc, #252]	@ (80038f0 <HAL_ADC_Init+0x344>)
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fe:	001a      	movs	r2, r3
 8003800:	2100      	movs	r1, #0
 8003802:	f7ff fda0 	bl	8003346 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	493a      	ldr	r1, [pc, #232]	@ (80038f8 <HAL_ADC_Init+0x34c>)
 8003810:	001a      	movs	r2, r3
 8003812:	f7ff fd98 	bl	8003346 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2110      	movs	r1, #16
 800382a:	4249      	negs	r1, r1
 800382c:	430a      	orrs	r2, r1
 800382e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003830:	e018      	b.n	8003864 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	2380      	movs	r3, #128	@ 0x80
 8003838:	039b      	lsls	r3, r3, #14
 800383a:	429a      	cmp	r2, r3
 800383c:	d112      	bne.n	8003864 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	3b01      	subs	r3, #1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	221c      	movs	r2, #28
 800384e:	4013      	ands	r3, r2
 8003850:	2210      	movs	r2, #16
 8003852:	4252      	negs	r2, r2
 8003854:	409a      	lsls	r2, r3
 8003856:	0011      	movs	r1, r2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2100      	movs	r1, #0
 800386a:	0018      	movs	r0, r3
 800386c:	f7ff fd88 	bl	8003380 <LL_ADC_GetSamplingTimeCommonChannels>
 8003870:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003876:	429a      	cmp	r2, r3
 8003878:	d10b      	bne.n	8003892 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	2203      	movs	r2, #3
 8003886:	4393      	bics	r3, r2
 8003888:	2201      	movs	r2, #1
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003890:	e01c      	b.n	80038cc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	2212      	movs	r2, #18
 8003898:	4393      	bics	r3, r2
 800389a:	2210      	movs	r2, #16
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	2201      	movs	r2, #1
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80038ae:	231f      	movs	r3, #31
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038b6:	e009      	b.n	80038cc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	2210      	movs	r2, #16
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038c4:	231f      	movs	r3, #31
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80038cc:	231f      	movs	r3, #31
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b008      	add	sp, #32
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	20000004 	.word	0x20000004
 80038e0:	00030d40 	.word	0x00030d40
 80038e4:	fffffefd 	.word	0xfffffefd
 80038e8:	ffde0201 	.word	0xffde0201
 80038ec:	1ffffc02 	.word	0x1ffffc02
 80038f0:	40012708 	.word	0x40012708
 80038f4:	ffc3ffff 	.word	0xffc3ffff
 80038f8:	07ffff04 	.word	0x07ffff04

080038fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80038fc:	b5b0      	push	{r4, r5, r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0018      	movs	r0, r3
 800390e:	f7ff fe3b 	bl	8003588 <LL_ADC_REG_IsConversionOngoing>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d16c      	bne.n	80039f0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2254      	movs	r2, #84	@ 0x54
 800391a:	5c9b      	ldrb	r3, [r3, r2]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_ADC_Start_DMA+0x28>
 8003920:	2302      	movs	r3, #2
 8003922:	e06c      	b.n	80039fe <HAL_ADC_Start_DMA+0x102>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2254      	movs	r2, #84	@ 0x54
 8003928:	2101      	movs	r1, #1
 800392a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	4013      	ands	r3, r2
 8003936:	d113      	bne.n	8003960 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	0018      	movs	r0, r3
 800393e:	f7ff fdff 	bl	8003540 <LL_ADC_IsEnabled>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d004      	beq.n	8003950 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	0018      	movs	r0, r3
 800394c:	f7ff fde6 	bl	800351c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	430a      	orrs	r2, r1
 800395e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003960:	2517      	movs	r5, #23
 8003962:	197c      	adds	r4, r7, r5
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	0018      	movs	r0, r3
 8003968:	f000 fb5e 	bl	8004028 <ADC_Enable>
 800396c:	0003      	movs	r3, r0
 800396e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003970:	002c      	movs	r4, r5
 8003972:	193b      	adds	r3, r7, r4
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d13e      	bne.n	80039f8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	4a22      	ldr	r2, [pc, #136]	@ (8003a08 <HAL_ADC_Start_DMA+0x10c>)
 8003980:	4013      	ands	r3, r2
 8003982:	2280      	movs	r2, #128	@ 0x80
 8003984:	0052      	lsls	r2, r2, #1
 8003986:	431a      	orrs	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003996:	4a1d      	ldr	r2, [pc, #116]	@ (8003a0c <HAL_ADC_Start_DMA+0x110>)
 8003998:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a10 <HAL_ADC_Start_DMA+0x114>)
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a14 <HAL_ADC_Start_DMA+0x118>)
 80039a8:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	221c      	movs	r2, #28
 80039b0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2254      	movs	r2, #84	@ 0x54
 80039b6:	2100      	movs	r1, #0
 80039b8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2110      	movs	r1, #16
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3340      	adds	r3, #64	@ 0x40
 80039d4:	0019      	movs	r1, r3
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	193c      	adds	r4, r7, r4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f000 ff90 	bl	8004900 <HAL_DMA_Start_IT>
 80039e0:	0003      	movs	r3, r0
 80039e2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff fdbb 	bl	8003564 <LL_ADC_REG_StartConversion>
 80039ee:	e003      	b.n	80039f8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039f0:	2317      	movs	r3, #23
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2202      	movs	r2, #2
 80039f6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80039f8:	2317      	movs	r3, #23
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	781b      	ldrb	r3, [r3, #0]
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b006      	add	sp, #24
 8003a04:	bdb0      	pop	{r4, r5, r7, pc}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	fffff0fe 	.word	0xfffff0fe
 8003a0c:	08004135 	.word	0x08004135
 8003a10:	080041fd 	.word	0x080041fd
 8003a14:	0800421b 	.word	0x0800421b

08003a18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2202      	movs	r2, #2
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d017      	beq.n	8003a6c <HAL_ADC_IRQHandler+0x54>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	4013      	ands	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a48:	2210      	movs	r2, #16
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d106      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	2280      	movs	r2, #128	@ 0x80
 8003a54:	0112      	lsls	r2, r2, #4
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f000 fc06 	bl	8004270 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	4013      	ands	r3, r2
 8003a72:	d003      	beq.n	8003a7c <HAL_ADC_IRQHandler+0x64>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2204      	movs	r2, #4
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d107      	bne.n	8003a8c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2208      	movs	r2, #8
 8003a80:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a82:	d04d      	beq.n	8003b20 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2208      	movs	r2, #8
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d049      	beq.n	8003b20 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a90:	2210      	movs	r2, #16
 8003a92:	4013      	ands	r3, r2
 8003a94:	d106      	bne.n	8003aa4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	0092      	lsls	r2, r2, #2
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff fc80 	bl	80033ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d02e      	beq.n	8003b10 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7e9b      	ldrb	r3, [r3, #26]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d12a      	bne.n	8003b10 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d123      	bne.n	8003b10 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7ff fd5b 	bl	8003588 <LL_ADC_REG_IsConversionOngoing>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d110      	bne.n	8003af8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	210c      	movs	r1, #12
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	4a56      	ldr	r2, [pc, #344]	@ (8003c44 <HAL_ADC_IRQHandler+0x22c>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	2201      	movs	r2, #1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003af6:	e00b      	b.n	8003b10 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	2220      	movs	r2, #32
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b08:	2201      	movs	r2, #1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7ff f8ea 	bl	8002cec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2280      	movs	r2, #128	@ 0x80
 8003b24:	4013      	ands	r3, r2
 8003b26:	d012      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x136>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2280      	movs	r2, #128	@ 0x80
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	2280      	movs	r2, #128	@ 0x80
 8003b36:	0252      	lsls	r2, r2, #9
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 f889 	bl	8003c58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2280      	movs	r2, #128	@ 0x80
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4013      	ands	r3, r2
 8003b56:	d014      	beq.n	8003b82 <HAL_ADC_IRQHandler+0x16a>
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d00f      	beq.n	8003b82 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	2280      	movs	r2, #128	@ 0x80
 8003b68:	0292      	lsls	r2, r2, #10
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	0018      	movs	r0, r3
 8003b74:	f000 fb6c 	bl	8004250 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2280      	movs	r2, #128	@ 0x80
 8003b7e:	0052      	lsls	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	2380      	movs	r3, #128	@ 0x80
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d014      	beq.n	8003bb6 <HAL_ADC_IRQHandler+0x19e>
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4013      	ands	r3, r2
 8003b94:	d00f      	beq.n	8003bb6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	02d2      	lsls	r2, r2, #11
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 fb5a 	bl	8004260 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2280      	movs	r2, #128	@ 0x80
 8003bb2:	0092      	lsls	r2, r2, #2
 8003bb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d02b      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x1fe>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d027      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e008      	b.n	8003be6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff fc3c 	bl	8003456 <LL_ADC_REG_GetDMATransfer>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8003be2:	2301      	movs	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d110      	bne.n	8003c0e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf0:	2280      	movs	r2, #128	@ 0x80
 8003bf2:	00d2      	lsls	r2, r2, #3
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfe:	2202      	movs	r2, #2
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f000 f82d 	bl	8003c68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2210      	movs	r2, #16
 8003c14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	019b      	lsls	r3, r3, #6
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d00d      	beq.n	8003c3c <HAL_ADC_IRQHandler+0x224>
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	4013      	ands	r3, r2
 8003c28:	d008      	beq.n	8003c3c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f000 fb27 	bl	8004280 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2280      	movs	r2, #128	@ 0x80
 8003c38:	0192      	lsls	r2, r2, #6
 8003c3a:	601a      	str	r2, [r3, #0]
  }
}
 8003c3c:	46c0      	nop			@ (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b006      	add	sp, #24
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	fffffefe 	.word	0xfffffefe

08003c48 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c60:	46c0      	nop			@ (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c70:	46c0      	nop			@ (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c82:	2317      	movs	r3, #23
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2254      	movs	r2, #84	@ 0x54
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x24>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e1c0      	b.n	800401e <HAL_ADC_ConfigChannel+0x3a6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2254      	movs	r2, #84	@ 0x54
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7ff fc6d 	bl	8003588 <LL_ADC_REG_IsConversionOngoing>
 8003cae:	1e03      	subs	r3, r0, #0
 8003cb0:	d000      	beq.n	8003cb4 <HAL_ADC_ConfigChannel+0x3c>
 8003cb2:	e1a3      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d100      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x46>
 8003cbc:	e143      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d004      	beq.n	8003cd4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cce:	4ac1      	ldr	r2, [pc, #772]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x35c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d108      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0019      	movs	r1, r3
 8003cde:	0010      	movs	r0, r2
 8003ce0:	f7ff fb96 	bl	8003410 <LL_ADC_REG_SetSequencerChAdd>
 8003ce4:	e0c9      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	211f      	movs	r1, #31
 8003cf0:	400b      	ands	r3, r1
 8003cf2:	210f      	movs	r1, #15
 8003cf4:	4099      	lsls	r1, r3
 8003cf6:	000b      	movs	r3, r1
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	035b      	lsls	r3, r3, #13
 8003d04:	0b5b      	lsrs	r3, r3, #13
 8003d06:	d105      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x9c>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	221f      	movs	r2, #31
 8003d10:	4013      	ands	r3, r2
 8003d12:	e098      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d000      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0xa8>
 8003d1e:	e091      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x1cc>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2202      	movs	r2, #2
 8003d26:	4013      	ands	r3, r2
 8003d28:	d000      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0xb4>
 8003d2a:	e089      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x1c8>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2204      	movs	r2, #4
 8003d32:	4013      	ands	r3, r2
 8003d34:	d000      	beq.n	8003d38 <HAL_ADC_ConfigChannel+0xc0>
 8003d36:	e081      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x1c4>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d000      	beq.n	8003d44 <HAL_ADC_ConfigChannel+0xcc>
 8003d42:	e079      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x1c0>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d000      	beq.n	8003d50 <HAL_ADC_ConfigChannel+0xd8>
 8003d4e:	e071      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x1bc>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2220      	movs	r2, #32
 8003d56:	4013      	ands	r3, r2
 8003d58:	d000      	beq.n	8003d5c <HAL_ADC_ConfigChannel+0xe4>
 8003d5a:	e069      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x1b8>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2240      	movs	r2, #64	@ 0x40
 8003d62:	4013      	ands	r3, r2
 8003d64:	d000      	beq.n	8003d68 <HAL_ADC_ConfigChannel+0xf0>
 8003d66:	e061      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x1b4>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2280      	movs	r2, #128	@ 0x80
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d000      	beq.n	8003d74 <HAL_ADC_ConfigChannel+0xfc>
 8003d72:	e059      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x1b0>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2380      	movs	r3, #128	@ 0x80
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d151      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x1ac>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2380      	movs	r3, #128	@ 0x80
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d149      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x1a8>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4013      	ands	r3, r2
 8003d96:	d141      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x1a4>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	2380      	movs	r3, #128	@ 0x80
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	4013      	ands	r3, r2
 8003da2:	d139      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x1a0>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	@ 0x80
 8003daa:	015b      	lsls	r3, r3, #5
 8003dac:	4013      	ands	r3, r2
 8003dae:	d131      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x19c>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	019b      	lsls	r3, r3, #6
 8003db8:	4013      	ands	r3, r2
 8003dba:	d129      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x198>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	01db      	lsls	r3, r3, #7
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d121      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x194>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	@ 0x80
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d119      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x190>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	025b      	lsls	r3, r3, #9
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d111      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x18c>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	029b      	lsls	r3, r3, #10
 8003de8:	4013      	ands	r3, r2
 8003dea:	d109      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x188>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	2380      	movs	r3, #128	@ 0x80
 8003df2:	02db      	lsls	r3, r3, #11
 8003df4:	4013      	ands	r3, r2
 8003df6:	d001      	beq.n	8003dfc <HAL_ADC_ConfigChannel+0x184>
 8003df8:	2312      	movs	r3, #18
 8003dfa:	e024      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e022      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e00:	2311      	movs	r3, #17
 8003e02:	e020      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e04:	2310      	movs	r3, #16
 8003e06:	e01e      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e08:	230f      	movs	r3, #15
 8003e0a:	e01c      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e0c:	230e      	movs	r3, #14
 8003e0e:	e01a      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e10:	230d      	movs	r3, #13
 8003e12:	e018      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e14:	230c      	movs	r3, #12
 8003e16:	e016      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e18:	230b      	movs	r3, #11
 8003e1a:	e014      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e1c:	230a      	movs	r3, #10
 8003e1e:	e012      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e20:	2309      	movs	r3, #9
 8003e22:	e010      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e24:	2308      	movs	r3, #8
 8003e26:	e00e      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e28:	2307      	movs	r3, #7
 8003e2a:	e00c      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e2c:	2306      	movs	r3, #6
 8003e2e:	e00a      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e30:	2305      	movs	r3, #5
 8003e32:	e008      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e34:	2304      	movs	r3, #4
 8003e36:	e006      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e004      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e002      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x1ce>
 8003e44:	2300      	movs	r3, #0
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	6852      	ldr	r2, [r2, #4]
 8003e4a:	201f      	movs	r0, #31
 8003e4c:	4002      	ands	r2, r0
 8003e4e:	4093      	lsls	r3, r2
 8003e50:	000a      	movs	r2, r1
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	089b      	lsrs	r3, r3, #2
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d808      	bhi.n	8003e7a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	001a      	movs	r2, r3
 8003e76:	f7ff faab 	bl	80033d0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	001a      	movs	r2, r3
 8003e88:	f7ff faf2 	bl	8003470 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	db00      	blt.n	8003e96 <HAL_ADC_ConfigChannel+0x21e>
 8003e94:	e0bc      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e96:	4b50      	ldr	r3, [pc, #320]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x360>)
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff fa47 	bl	800332c <LL_ADC_GetCommonPathInternalCh>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8003fdc <HAL_ADC_ConfigChannel+0x364>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d122      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	2380      	movs	r3, #128	@ 0x80
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003eb4:	d11d      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2280      	movs	r2, #128	@ 0x80
 8003eba:	0412      	lsls	r2, r2, #16
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	4a46      	ldr	r2, [pc, #280]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x360>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	0010      	movs	r0, r2
 8003ec4:	f7ff fa1e 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ec8:	4b45      	ldr	r3, [pc, #276]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x368>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4945      	ldr	r1, [pc, #276]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x36c>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fc f932 	bl	8000138 <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	0013      	movs	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ee2:	e002      	b.n	8003eea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f9      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ef0:	e08e      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x370>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10e      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	2380      	movs	r3, #128	@ 0x80
 8003f00:	045b      	lsls	r3, r3, #17
 8003f02:	4013      	ands	r3, r2
 8003f04:	d109      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2280      	movs	r2, #128	@ 0x80
 8003f0a:	0452      	lsls	r2, r2, #17
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	4a32      	ldr	r2, [pc, #200]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x360>)
 8003f10:	0019      	movs	r1, r3
 8003f12:	0010      	movs	r0, r2
 8003f14:	f7ff f9f6 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003f18:	e07a      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a33      	ldr	r2, [pc, #204]	@ (8003fec <HAL_ADC_ConfigChannel+0x374>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d000      	beq.n	8003f26 <HAL_ADC_ConfigChannel+0x2ae>
 8003f24:	e074      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	2380      	movs	r3, #128	@ 0x80
 8003f2a:	03db      	lsls	r3, r3, #15
 8003f2c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003f2e:	d000      	beq.n	8003f32 <HAL_ADC_ConfigChannel+0x2ba>
 8003f30:	e06e      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2280      	movs	r2, #128	@ 0x80
 8003f36:	03d2      	lsls	r2, r2, #15
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	4a27      	ldr	r2, [pc, #156]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x360>)
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	0010      	movs	r0, r2
 8003f40:	f7ff f9e0 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003f44:	e064      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	2380      	movs	r3, #128	@ 0x80
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d004      	beq.n	8003f5c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f56:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x35c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d107      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0019      	movs	r1, r3
 8003f66:	0010      	movs	r0, r2
 8003f68:	f7ff fa63 	bl	8003432 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	da4d      	bge.n	8004010 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f74:	4b18      	ldr	r3, [pc, #96]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x360>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff f9d8 	bl	800332c <LL_ADC_GetCommonPathInternalCh>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a15      	ldr	r2, [pc, #84]	@ (8003fdc <HAL_ADC_ConfigChannel+0x364>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x378>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	4a11      	ldr	r2, [pc, #68]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x360>)
 8003f92:	0019      	movs	r1, r3
 8003f94:	0010      	movs	r0, r2
 8003f96:	f7ff f9b5 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003f9a:	e039      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a11      	ldr	r2, [pc, #68]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x370>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4a12      	ldr	r2, [pc, #72]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x37c>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x360>)
 8003fae:	0019      	movs	r1, r3
 8003fb0:	0010      	movs	r0, r2
 8003fb2:	f7ff f9a7 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003fb6:	e02b      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8003fec <HAL_ADC_ConfigChannel+0x374>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d126      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x380>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	4a03      	ldr	r2, [pc, #12]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x360>)
 8003fca:	0019      	movs	r1, r3
 8003fcc:	0010      	movs	r0, r2
 8003fce:	f7ff f999 	bl	8003304 <LL_ADC_SetCommonPathInternalCh>
 8003fd2:	e01d      	b.n	8004010 <HAL_ADC_ConfigChannel+0x398>
 8003fd4:	80000004 	.word	0x80000004
 8003fd8:	40012708 	.word	0x40012708
 8003fdc:	b0001000 	.word	0xb0001000
 8003fe0:	20000004 	.word	0x20000004
 8003fe4:	00030d40 	.word	0x00030d40
 8003fe8:	b8004000 	.word	0xb8004000
 8003fec:	b4002000 	.word	0xb4002000
 8003ff0:	ff7fffff 	.word	0xff7fffff
 8003ff4:	feffffff 	.word	0xfeffffff
 8003ff8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	2220      	movs	r2, #32
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004008:	2317      	movs	r3, #23
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2254      	movs	r2, #84	@ 0x54
 8004014:	2100      	movs	r1, #0
 8004016:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004018:	2317      	movs	r3, #23
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	781b      	ldrb	r3, [r3, #0]
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b006      	add	sp, #24
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			@ (mov r8, r8)

08004028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	0018      	movs	r0, r3
 800403a:	f7ff fa81 	bl	8003540 <LL_ADC_IsEnabled>
 800403e:	1e03      	subs	r3, r0, #0
 8004040:	d000      	beq.n	8004044 <ADC_Enable+0x1c>
 8004042:	e069      	b.n	8004118 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4a36      	ldr	r2, [pc, #216]	@ (8004124 <ADC_Enable+0xfc>)
 800404c:	4013      	ands	r3, r2
 800404e:	d00d      	beq.n	800406c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	2210      	movs	r2, #16
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	2201      	movs	r2, #1
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e056      	b.n	800411a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	0018      	movs	r0, r3
 8004072:	f7ff fa41 	bl	80034f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004076:	4b2c      	ldr	r3, [pc, #176]	@ (8004128 <ADC_Enable+0x100>)
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff f957 	bl	800332c <LL_ADC_GetCommonPathInternalCh>
 800407e:	0002      	movs	r2, r0
 8004080:	2380      	movs	r3, #128	@ 0x80
 8004082:	041b      	lsls	r3, r3, #16
 8004084:	4013      	ands	r3, r2
 8004086:	d00f      	beq.n	80040a8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004088:	4b28      	ldr	r3, [pc, #160]	@ (800412c <ADC_Enable+0x104>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4928      	ldr	r1, [pc, #160]	@ (8004130 <ADC_Enable+0x108>)
 800408e:	0018      	movs	r0, r3
 8004090:	f7fc f852 	bl	8000138 <__udivsi3>
 8004094:	0003      	movs	r3, r0
 8004096:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004098:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800409a:	e002      	b.n	80040a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	3b01      	subs	r3, #1
 80040a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f9      	bne.n	800409c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7e5b      	ldrb	r3, [r3, #25]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d033      	beq.n	8004118 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80040b0:	f7ff f91e 	bl	80032f0 <HAL_GetTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040b8:	e027      	b.n	800410a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0018      	movs	r0, r3
 80040c0:	f7ff fa3e 	bl	8003540 <LL_ADC_IsEnabled>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d104      	bne.n	80040d2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff fa13 	bl	80034f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040d2:	f7ff f90d 	bl	80032f0 <HAL_GetTick>
 80040d6:	0002      	movs	r2, r0
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d914      	bls.n	800410a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2201      	movs	r2, #1
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d00d      	beq.n	800410a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	2210      	movs	r2, #16
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fe:	2201      	movs	r2, #1
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e007      	b.n	800411a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2201      	movs	r2, #1
 8004112:	4013      	ands	r3, r2
 8004114:	2b01      	cmp	r3, #1
 8004116:	d1d0      	bne.n	80040ba <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	80000017 	.word	0x80000017
 8004128:	40012708 	.word	0x40012708
 800412c:	20000004 	.word	0x20000004
 8004130:	00030d40 	.word	0x00030d40

08004134 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004140:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004146:	2250      	movs	r2, #80	@ 0x50
 8004148:	4013      	ands	r3, r2
 800414a:	d141      	bne.n	80041d0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004150:	2280      	movs	r2, #128	@ 0x80
 8004152:	0092      	lsls	r2, r2, #2
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	0018      	movs	r0, r3
 8004160:	f7ff f925 	bl	80033ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d02e      	beq.n	80041c6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	7e9b      	ldrb	r3, [r3, #26]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d12a      	bne.n	80041c6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2208      	movs	r2, #8
 8004178:	4013      	ands	r3, r2
 800417a:	2b08      	cmp	r3, #8
 800417c:	d123      	bne.n	80041c6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	0018      	movs	r0, r3
 8004184:	f7ff fa00 	bl	8003588 <LL_ADC_REG_IsConversionOngoing>
 8004188:	1e03      	subs	r3, r0, #0
 800418a:	d110      	bne.n	80041ae <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	210c      	movs	r1, #12
 8004198:	438a      	bics	r2, r1
 800419a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a0:	4a15      	ldr	r2, [pc, #84]	@ (80041f8 <ADC_DMAConvCplt+0xc4>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	2201      	movs	r2, #1
 80041a6:	431a      	orrs	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80041ac:	e00b      	b.n	80041c6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	2220      	movs	r2, #32
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041be:	2201      	movs	r2, #1
 80041c0:	431a      	orrs	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7fe fd8f 	bl	8002cec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041ce:	e00f      	b.n	80041f0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d4:	2210      	movs	r2, #16
 80041d6:	4013      	ands	r3, r2
 80041d8:	d004      	beq.n	80041e4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	0018      	movs	r0, r3
 80041de:	f7ff fd43 	bl	8003c68 <HAL_ADC_ErrorCallback>
}
 80041e2:	e005      	b.n	80041f0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	0010      	movs	r0, r2
 80041ee:	4798      	blx	r3
}
 80041f0:	46c0      	nop			@ (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b004      	add	sp, #16
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	fffffefe 	.word	0xfffffefe

080041fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004208:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0018      	movs	r0, r3
 800420e:	f7ff fd1b 	bl	8003c48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b004      	add	sp, #16
 8004218:	bd80      	pop	{r7, pc}

0800421a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	2240      	movs	r2, #64	@ 0x40
 800422e:	431a      	orrs	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004238:	2204      	movs	r2, #4
 800423a:	431a      	orrs	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	0018      	movs	r0, r3
 8004244:	f7ff fd10 	bl	8003c68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004248:	46c0      	nop			@ (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b004      	add	sp, #16
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004258:	46c0      	nop			@ (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004268:	46c0      	nop			@ (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	b002      	add	sp, #8
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004288:	46c0      	nop			@ (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}

08004290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	0002      	movs	r2, r0
 8004298:	1dfb      	adds	r3, r7, #7
 800429a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800429c:	1dfb      	adds	r3, r7, #7
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80042a2:	d809      	bhi.n	80042b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a4:	1dfb      	adds	r3, r7, #7
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	001a      	movs	r2, r3
 80042aa:	231f      	movs	r3, #31
 80042ac:	401a      	ands	r2, r3
 80042ae:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <__NVIC_EnableIRQ+0x30>)
 80042b0:	2101      	movs	r1, #1
 80042b2:	4091      	lsls	r1, r2
 80042b4:	000a      	movs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80042b8:	46c0      	nop			@ (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	e000e100 	.word	0xe000e100

080042c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	0002      	movs	r2, r0
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	1dfb      	adds	r3, r7, #7
 80042d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042d2:	1dfb      	adds	r3, r7, #7
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80042d8:	d828      	bhi.n	800432c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042da:	4a2f      	ldr	r2, [pc, #188]	@ (8004398 <__NVIC_SetPriority+0xd4>)
 80042dc:	1dfb      	adds	r3, r7, #7
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	089b      	lsrs	r3, r3, #2
 80042e4:	33c0      	adds	r3, #192	@ 0xc0
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	589b      	ldr	r3, [r3, r2]
 80042ea:	1dfa      	adds	r2, r7, #7
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	0011      	movs	r1, r2
 80042f0:	2203      	movs	r2, #3
 80042f2:	400a      	ands	r2, r1
 80042f4:	00d2      	lsls	r2, r2, #3
 80042f6:	21ff      	movs	r1, #255	@ 0xff
 80042f8:	4091      	lsls	r1, r2
 80042fa:	000a      	movs	r2, r1
 80042fc:	43d2      	mvns	r2, r2
 80042fe:	401a      	ands	r2, r3
 8004300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	22ff      	movs	r2, #255	@ 0xff
 8004308:	401a      	ands	r2, r3
 800430a:	1dfb      	adds	r3, r7, #7
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	0018      	movs	r0, r3
 8004310:	2303      	movs	r3, #3
 8004312:	4003      	ands	r3, r0
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004318:	481f      	ldr	r0, [pc, #124]	@ (8004398 <__NVIC_SetPriority+0xd4>)
 800431a:	1dfb      	adds	r3, r7, #7
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b25b      	sxtb	r3, r3
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	430a      	orrs	r2, r1
 8004324:	33c0      	adds	r3, #192	@ 0xc0
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800432a:	e031      	b.n	8004390 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800432c:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <__NVIC_SetPriority+0xd8>)
 800432e:	1dfb      	adds	r3, r7, #7
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	0019      	movs	r1, r3
 8004334:	230f      	movs	r3, #15
 8004336:	400b      	ands	r3, r1
 8004338:	3b08      	subs	r3, #8
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	3306      	adds	r3, #6
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	18d3      	adds	r3, r2, r3
 8004342:	3304      	adds	r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	1dfa      	adds	r2, r7, #7
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	0011      	movs	r1, r2
 800434c:	2203      	movs	r2, #3
 800434e:	400a      	ands	r2, r1
 8004350:	00d2      	lsls	r2, r2, #3
 8004352:	21ff      	movs	r1, #255	@ 0xff
 8004354:	4091      	lsls	r1, r2
 8004356:	000a      	movs	r2, r1
 8004358:	43d2      	mvns	r2, r2
 800435a:	401a      	ands	r2, r3
 800435c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	22ff      	movs	r2, #255	@ 0xff
 8004364:	401a      	ands	r2, r3
 8004366:	1dfb      	adds	r3, r7, #7
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	0018      	movs	r0, r3
 800436c:	2303      	movs	r3, #3
 800436e:	4003      	ands	r3, r0
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004374:	4809      	ldr	r0, [pc, #36]	@ (800439c <__NVIC_SetPriority+0xd8>)
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	001c      	movs	r4, r3
 800437c:	230f      	movs	r3, #15
 800437e:	4023      	ands	r3, r4
 8004380:	3b08      	subs	r3, #8
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	430a      	orrs	r2, r1
 8004386:	3306      	adds	r3, #6
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	18c3      	adds	r3, r0, r3
 800438c:	3304      	adds	r3, #4
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b003      	add	sp, #12
 8004396:	bd90      	pop	{r4, r7, pc}
 8004398:	e000e100 	.word	0xe000e100
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	1e5a      	subs	r2, r3, #1
 80043ac:	2380      	movs	r3, #128	@ 0x80
 80043ae:	045b      	lsls	r3, r3, #17
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d301      	bcc.n	80043b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043b4:	2301      	movs	r3, #1
 80043b6:	e010      	b.n	80043da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b8:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <SysTick_Config+0x44>)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	3a01      	subs	r2, #1
 80043be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043c0:	2301      	movs	r3, #1
 80043c2:	425b      	negs	r3, r3
 80043c4:	2103      	movs	r1, #3
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7ff ff7c 	bl	80042c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <SysTick_Config+0x44>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d2:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <SysTick_Config+0x44>)
 80043d4:	2207      	movs	r2, #7
 80043d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d8:	2300      	movs	r3, #0
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	e000e010 	.word	0xe000e010

080043e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	210f      	movs	r1, #15
 80043f4:	187b      	adds	r3, r7, r1
 80043f6:	1c02      	adds	r2, r0, #0
 80043f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	187b      	adds	r3, r7, r1
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b25b      	sxtb	r3, r3
 8004402:	0011      	movs	r1, r2
 8004404:	0018      	movs	r0, r3
 8004406:	f7ff ff5d 	bl	80042c4 <__NVIC_SetPriority>
}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	0002      	movs	r2, r0
 800441a:	1dfb      	adds	r3, r7, #7
 800441c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b25b      	sxtb	r3, r3
 8004424:	0018      	movs	r0, r3
 8004426:	f7ff ff33 	bl	8004290 <__NVIC_EnableIRQ>
}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	46bd      	mov	sp, r7
 800442e:	b002      	add	sp, #8
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0018      	movs	r0, r3
 800443e:	f7ff ffaf 	bl	80043a0 <SysTick_Config>
 8004442:	0003      	movs	r3, r0
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b002      	add	sp, #8
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e015      	b.n	800448a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	791b      	ldrb	r3, [r3, #4]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f7fe fd17 	bl	8002ea4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b002      	add	sp, #8
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e047      	b.n	8004536 <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	795b      	ldrb	r3, [r3, #5]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_DAC_Start+0x20>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e041      	b.n	8004536 <HAL_DAC_Start+0xa4>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2210      	movs	r2, #16
 80044c8:	4013      	ands	r3, r2
 80044ca:	2201      	movs	r2, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10f      	bne.n	80044fc <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	223e      	movs	r2, #62	@ 0x3e
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d11e      	bne.n	8004528 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	e015      	b.n	8004528 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	23f8      	movs	r3, #248	@ 0xf8
 8004504:	039b      	lsls	r3, r3, #14
 8004506:	401a      	ands	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2110      	movs	r1, #16
 800450c:	400b      	ands	r3, r1
 800450e:	2102      	movs	r1, #2
 8004510:	4099      	lsls	r1, r3
 8004512:	000b      	movs	r3, r1
 8004514:	429a      	cmp	r2, r3
 8004516:	d107      	bne.n	8004528 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2102      	movs	r1, #2
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e014      	b.n	8004584 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	18d3      	adds	r3, r2, r3
 800456c:	3308      	adds	r3, #8
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e004      	b.n	800457c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	18d3      	adds	r3, r2, r3
 8004578:	3314      	adds	r3, #20
 800457a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b006      	add	sp, #24
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	231f      	movs	r3, #31
 800459a:	18fb      	adds	r3, r7, r3
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_DAC_ConfigChannel+0x20>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e115      	b.n	80047dc <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	795b      	ldrb	r3, [r3, #5]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_DAC_ConfigChannel+0x30>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e10f      	b.n	80047dc <HAL_DAC_ConfigChannel+0x250>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2202      	movs	r2, #2
 80045c6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d000      	beq.n	80045d2 <HAL_DAC_ConfigChannel+0x46>
 80045d0:	e07a      	b.n	80046c8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80045d2:	f7fe fe8d 	bl	80032f0 <HAL_GetTick>
 80045d6:	0003      	movs	r3, r0
 80045d8:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d13d      	bne.n	800465c <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045e0:	e018      	b.n	8004614 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045e2:	f7fe fe85 	bl	80032f0 <HAL_GetTick>
 80045e6:	0002      	movs	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d911      	bls.n	8004614 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045f6:	2380      	movs	r3, #128	@ 0x80
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	4013      	ands	r3, r2
 80045fc:	d00a      	beq.n	8004614 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2208      	movs	r2, #8
 8004604:	431a      	orrs	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2203      	movs	r2, #3
 800460e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0e3      	b.n	80047dc <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800461a:	2380      	movs	r3, #128	@ 0x80
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	4013      	ands	r3, r2
 8004620:	d1df      	bne.n	80045e2 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	6992      	ldr	r2, [r2, #24]
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40
 800462c:	e020      	b.n	8004670 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800462e:	f7fe fe5f 	bl	80032f0 <HAL_GetTick>
 8004632:	0002      	movs	r2, r0
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d90f      	bls.n	800465c <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004642:	2b00      	cmp	r3, #0
 8004644:	da0a      	bge.n	800465c <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2208      	movs	r2, #8
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2203      	movs	r2, #3
 8004656:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e0bf      	b.n	80047dc <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	2b00      	cmp	r3, #0
 8004664:	dbe3      	blt.n	800462e <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	6992      	ldr	r2, [r2, #24]
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	2110      	movs	r1, #16
 800467a:	400a      	ands	r2, r1
 800467c:	4959      	ldr	r1, [pc, #356]	@ (80047e4 <HAL_DAC_ConfigChannel+0x258>)
 800467e:	4091      	lsls	r1, r2
 8004680:	000a      	movs	r2, r1
 8004682:	43d2      	mvns	r2, r2
 8004684:	401a      	ands	r2, r3
 8004686:	0011      	movs	r1, r2
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2010      	movs	r0, #16
 8004690:	4003      	ands	r3, r0
 8004692:	409a      	lsls	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	2110      	movs	r1, #16
 80046a6:	400a      	ands	r2, r1
 80046a8:	21ff      	movs	r1, #255	@ 0xff
 80046aa:	4091      	lsls	r1, r2
 80046ac:	000a      	movs	r2, r1
 80046ae:	43d2      	mvns	r2, r2
 80046b0:	401a      	ands	r2, r3
 80046b2:	0011      	movs	r1, r2
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2010      	movs	r0, #16
 80046bc:	4003      	ands	r3, r0
 80046be:	409a      	lsls	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d11d      	bne.n	800470c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2210      	movs	r2, #16
 80046dc:	4013      	ands	r3, r2
 80046de:	221f      	movs	r2, #31
 80046e0:	409a      	lsls	r2, r3
 80046e2:	0013      	movs	r3, r2
 80046e4:	43da      	mvns	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4013      	ands	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2210      	movs	r2, #16
 80046f6:	4013      	ands	r3, r2
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004712:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2210      	movs	r2, #16
 8004718:	4013      	ands	r3, r2
 800471a:	2207      	movs	r2, #7
 800471c:	409a      	lsls	r2, r3
 800471e:	0013      	movs	r3, r2
 8004720:	43da      	mvns	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	4013      	ands	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	431a      	orrs	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2210      	movs	r2, #16
 800473e:	4013      	ands	r3, r2
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	409a      	lsls	r2, r3
 8004744:	0013      	movs	r3, r2
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2110      	movs	r1, #16
 800475e:	400b      	ands	r3, r1
 8004760:	2180      	movs	r1, #128	@ 0x80
 8004762:	01c9      	lsls	r1, r1, #7
 8004764:	4099      	lsls	r1, r3
 8004766:	000b      	movs	r3, r1
 8004768:	43d9      	mvns	r1, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	400a      	ands	r2, r1
 8004770:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2210      	movs	r2, #16
 800477e:	4013      	ands	r3, r2
 8004780:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <HAL_DAC_ConfigChannel+0x25c>)
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	43da      	mvns	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4013      	ands	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2210      	movs	r2, #16
 8004798:	4013      	ands	r3, r2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	409a      	lsls	r2, r3
 800479e:	0013      	movs	r3, r2
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2110      	movs	r1, #16
 80047b8:	400b      	ands	r3, r1
 80047ba:	21c0      	movs	r1, #192	@ 0xc0
 80047bc:	4099      	lsls	r1, r3
 80047be:	000b      	movs	r3, r1
 80047c0:	43d9      	mvns	r1, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	400a      	ands	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80047d6:	231f      	movs	r3, #31
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781b      	ldrb	r3, [r3, #0]
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b008      	add	sp, #32
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	000003ff 	.word	0x000003ff
 80047e8:	00000ffe 	.word	0x00000ffe

080047ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e077      	b.n	80048ee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a3d      	ldr	r2, [pc, #244]	@ (80048f8 <HAL_DMA_Init+0x10c>)
 8004804:	4694      	mov	ip, r2
 8004806:	4463      	add	r3, ip
 8004808:	2114      	movs	r1, #20
 800480a:	0018      	movs	r0, r3
 800480c:	f7fb fc94 	bl	8000138 <__udivsi3>
 8004810:	0003      	movs	r3, r0
 8004812:	009a      	lsls	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2225      	movs	r2, #37	@ 0x25
 800481c:	2102      	movs	r1, #2
 800481e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4934      	ldr	r1, [pc, #208]	@ (80048fc <HAL_DMA_Init+0x110>)
 800482c:	400a      	ands	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f9c1 	bl	8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	2380      	movs	r3, #128	@ 0x80
 8004874:	01db      	lsls	r3, r3, #7
 8004876:	429a      	cmp	r2, r3
 8004878:	d102      	bne.n	8004880 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004888:	213f      	movs	r1, #63	@ 0x3f
 800488a:	400a      	ands	r2, r1
 800488c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004896:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d011      	beq.n	80048c4 <HAL_DMA_Init+0xd8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d80d      	bhi.n	80048c4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 f9cc 	bl	8004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	e008      	b.n	80048d6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2225      	movs	r2, #37	@ 0x25
 80048e0:	2101      	movs	r1, #1
 80048e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2224      	movs	r2, #36	@ 0x24
 80048e8:	2100      	movs	r1, #0
 80048ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	bffdfff8 	.word	0xbffdfff8
 80048fc:	ffff800f 	.word	0xffff800f

08004900 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2317      	movs	r3, #23
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2224      	movs	r2, #36	@ 0x24
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_DMA_Start_IT+0x24>
 8004920:	2302      	movs	r3, #2
 8004922:	e06f      	b.n	8004a04 <HAL_DMA_Start_IT+0x104>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2224      	movs	r2, #36	@ 0x24
 8004928:	2101      	movs	r1, #1
 800492a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2225      	movs	r2, #37	@ 0x25
 8004930:	5c9b      	ldrb	r3, [r3, r2]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d157      	bne.n	80049e8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2225      	movs	r2, #37	@ 0x25
 800493c:	2102      	movs	r1, #2
 800493e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2101      	movs	r1, #1
 8004952:	438a      	bics	r2, r1
 8004954:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f907 	bl	8004b70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	210e      	movs	r1, #14
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e00f      	b.n	800499c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2104      	movs	r1, #4
 8004988:	438a      	bics	r2, r1
 800498a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	210a      	movs	r1, #10
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	2380      	movs	r3, #128	@ 0x80
 80049a4:	025b      	lsls	r3, r3, #9
 80049a6:	4013      	ands	r3, r2
 80049a8:	d008      	beq.n	80049bc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b4:	2180      	movs	r1, #128	@ 0x80
 80049b6:	0049      	lsls	r1, r1, #1
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ce:	2180      	movs	r1, #128	@ 0x80
 80049d0:	0049      	lsls	r1, r1, #1
 80049d2:	430a      	orrs	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2101      	movs	r1, #1
 80049e2:	430a      	orrs	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e00a      	b.n	80049fe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2280      	movs	r2, #128	@ 0x80
 80049ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2224      	movs	r2, #36	@ 0x24
 80049f2:	2100      	movs	r1, #0
 80049f4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80049f6:	2317      	movs	r3, #23
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80049fe:	2317      	movs	r3, #23
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	781b      	ldrb	r3, [r3, #0]
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b006      	add	sp, #24
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004a14:	4b55      	ldr	r3, [pc, #340]	@ (8004b6c <HAL_DMA_IRQHandler+0x160>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	221c      	movs	r2, #28
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	0013      	movs	r3, r2
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	d027      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x7a>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2204      	movs	r2, #4
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d023      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2220      	movs	r2, #32
 8004a46:	4013      	ands	r3, r2
 8004a48:	d107      	bne.n	8004a5a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2104      	movs	r1, #4
 8004a56:	438a      	bics	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004a5a:	4b44      	ldr	r3, [pc, #272]	@ (8004b6c <HAL_DMA_IRQHandler+0x160>)
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	221c      	movs	r2, #28
 8004a64:	4013      	ands	r3, r2
 8004a66:	2204      	movs	r2, #4
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	4b40      	ldr	r3, [pc, #256]	@ (8004b6c <HAL_DMA_IRQHandler+0x160>)
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d100      	bne.n	8004a7a <HAL_DMA_IRQHandler+0x6e>
 8004a78:	e073      	b.n	8004b62 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	0010      	movs	r0, r2
 8004a82:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004a84:	e06d      	b.n	8004b62 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	221c      	movs	r2, #28
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2202      	movs	r2, #2
 8004a90:	409a      	lsls	r2, r3
 8004a92:	0013      	movs	r3, r2
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4013      	ands	r3, r2
 8004a98:	d02e      	beq.n	8004af8 <HAL_DMA_IRQHandler+0xec>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d02a      	beq.n	8004af8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d10b      	bne.n	8004ac6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	210a      	movs	r1, #10
 8004aba:	438a      	bics	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2225      	movs	r2, #37	@ 0x25
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004ac6:	4b29      	ldr	r3, [pc, #164]	@ (8004b6c <HAL_DMA_IRQHandler+0x160>)
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	221c      	movs	r2, #28
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	4b25      	ldr	r3, [pc, #148]	@ (8004b6c <HAL_DMA_IRQHandler+0x160>)
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2224      	movs	r2, #36	@ 0x24
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d03a      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	0010      	movs	r0, r2
 8004af4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004af6:	e034      	b.n	8004b62 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	221c      	movs	r2, #28
 8004afe:	4013      	ands	r3, r2
 8004b00:	2208      	movs	r2, #8
 8004b02:	409a      	lsls	r2, r3
 8004b04:	0013      	movs	r3, r2
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d02b      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x158>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2208      	movs	r2, #8
 8004b10:	4013      	ands	r3, r2
 8004b12:	d027      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	210e      	movs	r1, #14
 8004b20:	438a      	bics	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004b24:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <HAL_DMA_IRQHandler+0x160>)
 8004b26:	6859      	ldr	r1, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	221c      	movs	r2, #28
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2201      	movs	r2, #1
 8004b32:	409a      	lsls	r2, r3
 8004b34:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <HAL_DMA_IRQHandler+0x160>)
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2225      	movs	r2, #37	@ 0x25
 8004b44:	2101      	movs	r1, #1
 8004b46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	@ 0x24
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	0010      	movs	r0, r2
 8004b60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46c0      	nop			@ (mov r8, r8)
}
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b004      	add	sp, #16
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40020000 	.word	0x40020000

08004b70 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004b98:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004b9a:	4b14      	ldr	r3, [pc, #80]	@ (8004bec <DMA_SetConfig+0x7c>)
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	221c      	movs	r2, #28
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <DMA_SetConfig+0x7c>)
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d108      	bne.n	8004bd2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bd0:	e007      	b.n	8004be2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b004      	add	sp, #16
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	40020000 	.word	0x40020000

08004bf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfc:	089b      	lsrs	r3, r3, #2
 8004bfe:	4a10      	ldr	r2, [pc, #64]	@ (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004c00:	4694      	mov	ip, r2
 8004c02:	4463      	add	r3, ip
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	001a      	movs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	001a      	movs	r2, r3
 8004c12:	23ff      	movs	r3, #255	@ 0xff
 8004c14:	4013      	ands	r3, r2
 8004c16:	3b08      	subs	r3, #8
 8004c18:	2114      	movs	r1, #20
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f7fb fa8c 	bl	8000138 <__udivsi3>
 8004c20:	0003      	movs	r3, r0
 8004c22:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a07      	ldr	r2, [pc, #28]	@ (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004c28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	221f      	movs	r2, #31
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2201      	movs	r2, #1
 8004c32:	409a      	lsls	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004c38:	46c0      	nop			@ (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b004      	add	sp, #16
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	10008200 	.word	0x10008200
 8004c44:	40020880 	.word	0x40020880

08004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	223f      	movs	r2, #63	@ 0x3f
 8004c56:	4013      	ands	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c5e:	4694      	mov	ip, r2
 8004c60:	4463      	add	r3, ip
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	001a      	movs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a07      	ldr	r2, [pc, #28]	@ (8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	2203      	movs	r2, #3
 8004c76:	4013      	ands	r3, r2
 8004c78:	2201      	movs	r2, #1
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8004c80:	46c0      	nop			@ (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b004      	add	sp, #16
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	1000823f 	.word	0x1000823f
 8004c8c:	40020940 	.word	0x40020940

08004c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c9e:	e147      	b.n	8004f30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4091      	lsls	r1, r2
 8004caa:	000a      	movs	r2, r1
 8004cac:	4013      	ands	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d100      	bne.n	8004cb8 <HAL_GPIO_Init+0x28>
 8004cb6:	e138      	b.n	8004f2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d005      	beq.n	8004cd0 <HAL_GPIO_Init+0x40>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d130      	bne.n	8004d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	2203      	movs	r2, #3
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	0013      	movs	r3, r2
 8004ce0:	43da      	mvns	r2, r3
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	0013      	movs	r3, r2
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d06:	2201      	movs	r2, #1
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	0013      	movs	r3, r2
 8004d0e:	43da      	mvns	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4013      	ands	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	401a      	ands	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	409a      	lsls	r2, r3
 8004d24:	0013      	movs	r3, r2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2203      	movs	r2, #3
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d017      	beq.n	8004d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	2203      	movs	r2, #3
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	0013      	movs	r3, r2
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4013      	ands	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	0013      	movs	r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2203      	movs	r2, #3
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d123      	bne.n	8004dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	08da      	lsrs	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3208      	adds	r2, #8
 8004d82:	0092      	lsls	r2, r2, #2
 8004d84:	58d3      	ldr	r3, [r2, r3]
 8004d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2207      	movs	r2, #7
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	220f      	movs	r2, #15
 8004d92:	409a      	lsls	r2, r3
 8004d94:	0013      	movs	r3, r2
 8004d96:	43da      	mvns	r2, r3
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2107      	movs	r1, #7
 8004da6:	400b      	ands	r3, r1
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	409a      	lsls	r2, r3
 8004dac:	0013      	movs	r3, r2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	08da      	lsrs	r2, r3, #3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3208      	adds	r2, #8
 8004dbc:	0092      	lsls	r2, r2, #2
 8004dbe:	6939      	ldr	r1, [r7, #16]
 8004dc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2203      	movs	r2, #3
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	0013      	movs	r3, r2
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2203      	movs	r2, #3
 8004de0:	401a      	ands	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	409a      	lsls	r2, r3
 8004de8:	0013      	movs	r3, r2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	23c0      	movs	r3, #192	@ 0xc0
 8004dfc:	029b      	lsls	r3, r3, #10
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d100      	bne.n	8004e04 <HAL_GPIO_Init+0x174>
 8004e02:	e092      	b.n	8004f2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004e04:	4a50      	ldr	r2, [pc, #320]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	3318      	adds	r3, #24
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	589b      	ldr	r3, [r3, r2]
 8004e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2203      	movs	r2, #3
 8004e16:	4013      	ands	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	0013      	movs	r3, r2
 8004e20:	43da      	mvns	r2, r3
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4013      	ands	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	23a0      	movs	r3, #160	@ 0xa0
 8004e2c:	05db      	lsls	r3, r3, #23
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d013      	beq.n	8004e5a <HAL_GPIO_Init+0x1ca>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a45      	ldr	r2, [pc, #276]	@ (8004f4c <HAL_GPIO_Init+0x2bc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00d      	beq.n	8004e56 <HAL_GPIO_Init+0x1c6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a44      	ldr	r2, [pc, #272]	@ (8004f50 <HAL_GPIO_Init+0x2c0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <HAL_GPIO_Init+0x1c2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a43      	ldr	r2, [pc, #268]	@ (8004f54 <HAL_GPIO_Init+0x2c4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_GPIO_Init+0x1be>
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e006      	b.n	8004e5c <HAL_GPIO_Init+0x1cc>
 8004e4e:	2305      	movs	r3, #5
 8004e50:	e004      	b.n	8004e5c <HAL_GPIO_Init+0x1cc>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e002      	b.n	8004e5c <HAL_GPIO_Init+0x1cc>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_GPIO_Init+0x1cc>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	2103      	movs	r1, #3
 8004e60:	400a      	ands	r2, r1
 8004e62:	00d2      	lsls	r2, r2, #3
 8004e64:	4093      	lsls	r3, r2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004e6c:	4936      	ldr	r1, [pc, #216]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	3318      	adds	r3, #24
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e7a:	4b33      	ldr	r3, [pc, #204]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	43da      	mvns	r2, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	2380      	movs	r3, #128	@ 0x80
 8004e90:	035b      	lsls	r3, r3, #13
 8004e92:	4013      	ands	r3, r2
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004ea4:	4b28      	ldr	r3, [pc, #160]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	43da      	mvns	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	2380      	movs	r3, #128	@ 0x80
 8004eba:	039b      	lsls	r3, r3, #14
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ece:	4a1e      	ldr	r2, [pc, #120]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004ed0:	2384      	movs	r3, #132	@ 0x84
 8004ed2:	58d3      	ldr	r3, [r2, r3]
 8004ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	43da      	mvns	r2, r3
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4013      	ands	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	2380      	movs	r3, #128	@ 0x80
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ef4:	4914      	ldr	r1, [pc, #80]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004ef6:	2284      	movs	r2, #132	@ 0x84
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004efc:	4a12      	ldr	r2, [pc, #72]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004efe:	2380      	movs	r3, #128	@ 0x80
 8004f00:	58d3      	ldr	r3, [r2, r3]
 8004f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	43da      	mvns	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	2380      	movs	r3, #128	@ 0x80
 8004f14:	025b      	lsls	r3, r3, #9
 8004f16:	4013      	ands	r3, r2
 8004f18:	d003      	beq.n	8004f22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f22:	4909      	ldr	r1, [pc, #36]	@ (8004f48 <HAL_GPIO_Init+0x2b8>)
 8004f24:	2280      	movs	r2, #128	@ 0x80
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	40da      	lsrs	r2, r3
 8004f38:	1e13      	subs	r3, r2, #0
 8004f3a:	d000      	beq.n	8004f3e <HAL_GPIO_Init+0x2ae>
 8004f3c:	e6b0      	b.n	8004ca0 <HAL_GPIO_Init+0x10>
  }
}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	46c0      	nop			@ (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b006      	add	sp, #24
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021800 	.word	0x40021800
 8004f4c:	50000400 	.word	0x50000400
 8004f50:	50000800 	.word	0x50000800
 8004f54:	50000c00 	.word	0x50000c00

08004f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004f60:	4b19      	ldr	r3, [pc, #100]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a19      	ldr	r2, [pc, #100]	@ (8004fcc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	4b17      	ldr	r3, [pc, #92]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	2380      	movs	r3, #128	@ 0x80
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d11f      	bne.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004f7c:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	0013      	movs	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	4912      	ldr	r1, [pc, #72]	@ (8004fd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f7fb f8d4 	bl	8000138 <__udivsi3>
 8004f90:	0003      	movs	r3, r0
 8004f92:	3301      	adds	r3, #1
 8004f94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f96:	e008      	b.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e001      	b.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e009      	b.n	8004fbe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	2380      	movs	r3, #128	@ 0x80
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	2380      	movs	r3, #128	@ 0x80
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d0ed      	beq.n	8004f98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b004      	add	sp, #16
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	fffff9ff 	.word	0xfffff9ff
 8004fd0:	20000004 	.word	0x20000004
 8004fd4:	000f4240 	.word	0x000f4240

08004fd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004fdc:	4b03      	ldr	r3, [pc, #12]	@ (8004fec <LL_RCC_GetAPB1Prescaler+0x14>)
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	23e0      	movs	r3, #224	@ 0xe0
 8004fe2:	01db      	lsls	r3, r3, #7
 8004fe4:	4013      	ands	r3, r2
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000

08004ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e2fe      	b.n	8005600 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2201      	movs	r2, #1
 8005008:	4013      	ands	r3, r2
 800500a:	d100      	bne.n	800500e <HAL_RCC_OscConfig+0x1e>
 800500c:	e07c      	b.n	8005108 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500e:	4bc3      	ldr	r3, [pc, #780]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2238      	movs	r2, #56	@ 0x38
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005018:	4bc0      	ldr	r3, [pc, #768]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2203      	movs	r2, #3
 800501e:	4013      	ands	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b10      	cmp	r3, #16
 8005026:	d102      	bne.n	800502e <HAL_RCC_OscConfig+0x3e>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d002      	beq.n	8005034 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d10b      	bne.n	800504c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	4bb9      	ldr	r3, [pc, #740]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	029b      	lsls	r3, r3, #10
 800503c:	4013      	ands	r3, r2
 800503e:	d062      	beq.n	8005106 <HAL_RCC_OscConfig+0x116>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d15e      	bne.n	8005106 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e2d9      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	2380      	movs	r3, #128	@ 0x80
 8005052:	025b      	lsls	r3, r3, #9
 8005054:	429a      	cmp	r2, r3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x78>
 8005058:	4bb0      	ldr	r3, [pc, #704]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4baf      	ldr	r3, [pc, #700]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800505e:	2180      	movs	r1, #128	@ 0x80
 8005060:	0249      	lsls	r1, r1, #9
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e020      	b.n	80050aa <HAL_RCC_OscConfig+0xba>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	23a0      	movs	r3, #160	@ 0xa0
 800506e:	02db      	lsls	r3, r3, #11
 8005070:	429a      	cmp	r2, r3
 8005072:	d10e      	bne.n	8005092 <HAL_RCC_OscConfig+0xa2>
 8005074:	4ba9      	ldr	r3, [pc, #676]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4ba8      	ldr	r3, [pc, #672]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800507a:	2180      	movs	r1, #128	@ 0x80
 800507c:	02c9      	lsls	r1, r1, #11
 800507e:	430a      	orrs	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	4ba6      	ldr	r3, [pc, #664]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4ba5      	ldr	r3, [pc, #660]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005088:	2180      	movs	r1, #128	@ 0x80
 800508a:	0249      	lsls	r1, r1, #9
 800508c:	430a      	orrs	r2, r1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e00b      	b.n	80050aa <HAL_RCC_OscConfig+0xba>
 8005092:	4ba2      	ldr	r3, [pc, #648]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4ba1      	ldr	r3, [pc, #644]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005098:	49a1      	ldr	r1, [pc, #644]	@ (8005320 <HAL_RCC_OscConfig+0x330>)
 800509a:	400a      	ands	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	4b9f      	ldr	r3, [pc, #636]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b9e      	ldr	r3, [pc, #632]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80050a4:	499f      	ldr	r1, [pc, #636]	@ (8005324 <HAL_RCC_OscConfig+0x334>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d014      	beq.n	80050dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fe f91d 	bl	80032f0 <HAL_GetTick>
 80050b6:	0003      	movs	r3, r0
 80050b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fe f918 	bl	80032f0 <HAL_GetTick>
 80050c0:	0002      	movs	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	@ 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e298      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ce:	4b93      	ldr	r3, [pc, #588]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	2380      	movs	r3, #128	@ 0x80
 80050d4:	029b      	lsls	r3, r3, #10
 80050d6:	4013      	ands	r3, r2
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0xcc>
 80050da:	e015      	b.n	8005108 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fe f908 	bl	80032f0 <HAL_GetTick>
 80050e0:	0003      	movs	r3, r0
 80050e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e6:	f7fe f903 	bl	80032f0 <HAL_GetTick>
 80050ea:	0002      	movs	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b64      	cmp	r3, #100	@ 0x64
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e283      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050f8:	4b88      	ldr	r3, [pc, #544]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	2380      	movs	r3, #128	@ 0x80
 80050fe:	029b      	lsls	r3, r3, #10
 8005100:	4013      	ands	r3, r2
 8005102:	d1f0      	bne.n	80050e6 <HAL_RCC_OscConfig+0xf6>
 8005104:	e000      	b.n	8005108 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005106:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2202      	movs	r2, #2
 800510e:	4013      	ands	r3, r2
 8005110:	d100      	bne.n	8005114 <HAL_RCC_OscConfig+0x124>
 8005112:	e099      	b.n	8005248 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005114:	4b81      	ldr	r3, [pc, #516]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2238      	movs	r2, #56	@ 0x38
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800511e:	4b7f      	ldr	r3, [pc, #508]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2203      	movs	r2, #3
 8005124:	4013      	ands	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b10      	cmp	r3, #16
 800512c:	d102      	bne.n	8005134 <HAL_RCC_OscConfig+0x144>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d002      	beq.n	800513a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d135      	bne.n	80051a6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800513a:	4b78      	ldr	r3, [pc, #480]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4013      	ands	r3, r2
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x162>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e256      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005152:	4b72      	ldr	r3, [pc, #456]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4a74      	ldr	r2, [pc, #464]	@ (8005328 <HAL_RCC_OscConfig+0x338>)
 8005158:	4013      	ands	r3, r2
 800515a:	0019      	movs	r1, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	021a      	lsls	r2, r3, #8
 8005162:	4b6e      	ldr	r3, [pc, #440]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d112      	bne.n	8005194 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800516e:	4b6b      	ldr	r3, [pc, #428]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a6e      	ldr	r2, [pc, #440]	@ (800532c <HAL_RCC_OscConfig+0x33c>)
 8005174:	4013      	ands	r3, r2
 8005176:	0019      	movs	r1, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	4b67      	ldr	r3, [pc, #412]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005182:	4b66      	ldr	r3, [pc, #408]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	0adb      	lsrs	r3, r3, #11
 8005188:	2207      	movs	r2, #7
 800518a:	4013      	ands	r3, r2
 800518c:	4a68      	ldr	r2, [pc, #416]	@ (8005330 <HAL_RCC_OscConfig+0x340>)
 800518e:	40da      	lsrs	r2, r3
 8005190:	4b68      	ldr	r3, [pc, #416]	@ (8005334 <HAL_RCC_OscConfig+0x344>)
 8005192:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005194:	4b68      	ldr	r3, [pc, #416]	@ (8005338 <HAL_RCC_OscConfig+0x348>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	0018      	movs	r0, r3
 800519a:	f7fe f84d 	bl	8003238 <HAL_InitTick>
 800519e:	1e03      	subs	r3, r0, #0
 80051a0:	d051      	beq.n	8005246 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e22c      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d030      	beq.n	8005210 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80051ae:	4b5b      	ldr	r3, [pc, #364]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a5e      	ldr	r2, [pc, #376]	@ (800532c <HAL_RCC_OscConfig+0x33c>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	0019      	movs	r1, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	4b57      	ldr	r3, [pc, #348]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80051c2:	4b56      	ldr	r3, [pc, #344]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b55      	ldr	r3, [pc, #340]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80051c8:	2180      	movs	r1, #128	@ 0x80
 80051ca:	0049      	lsls	r1, r1, #1
 80051cc:	430a      	orrs	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fe f88e 	bl	80032f0 <HAL_GetTick>
 80051d4:	0003      	movs	r3, r0
 80051d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051da:	f7fe f889 	bl	80032f0 <HAL_GetTick>
 80051de:	0002      	movs	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e209      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ec:	4b4b      	ldr	r3, [pc, #300]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	2380      	movs	r3, #128	@ 0x80
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4013      	ands	r3, r2
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f8:	4b48      	ldr	r3, [pc, #288]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a4a      	ldr	r2, [pc, #296]	@ (8005328 <HAL_RCC_OscConfig+0x338>)
 80051fe:	4013      	ands	r3, r2
 8005200:	0019      	movs	r1, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	4b44      	ldr	r3, [pc, #272]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	e01b      	b.n	8005248 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005210:	4b42      	ldr	r3, [pc, #264]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4b41      	ldr	r3, [pc, #260]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005216:	4949      	ldr	r1, [pc, #292]	@ (800533c <HAL_RCC_OscConfig+0x34c>)
 8005218:	400a      	ands	r2, r1
 800521a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fe f868 	bl	80032f0 <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005226:	f7fe f863 	bl	80032f0 <HAL_GetTick>
 800522a:	0002      	movs	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e1e3      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005238:	4b38      	ldr	r3, [pc, #224]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	2380      	movs	r3, #128	@ 0x80
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4013      	ands	r3, r2
 8005242:	d1f0      	bne.n	8005226 <HAL_RCC_OscConfig+0x236>
 8005244:	e000      	b.n	8005248 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005246:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2208      	movs	r2, #8
 800524e:	4013      	ands	r3, r2
 8005250:	d047      	beq.n	80052e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005252:	4b32      	ldr	r3, [pc, #200]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2238      	movs	r2, #56	@ 0x38
 8005258:	4013      	ands	r3, r2
 800525a:	2b18      	cmp	r3, #24
 800525c:	d10a      	bne.n	8005274 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800525e:	4b2f      	ldr	r3, [pc, #188]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005262:	2202      	movs	r2, #2
 8005264:	4013      	ands	r3, r2
 8005266:	d03c      	beq.n	80052e2 <HAL_RCC_OscConfig+0x2f2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d138      	bne.n	80052e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e1c5      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d019      	beq.n	80052b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800527c:	4b27      	ldr	r3, [pc, #156]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 800527e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005280:	4b26      	ldr	r3, [pc, #152]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005282:	2101      	movs	r1, #1
 8005284:	430a      	orrs	r2, r1
 8005286:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fe f832 	bl	80032f0 <HAL_GetTick>
 800528c:	0003      	movs	r3, r0
 800528e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005292:	f7fe f82d 	bl	80032f0 <HAL_GetTick>
 8005296:	0002      	movs	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e1ad      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052a4:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80052a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a8:	2202      	movs	r2, #2
 80052aa:	4013      	ands	r3, r2
 80052ac:	d0f1      	beq.n	8005292 <HAL_RCC_OscConfig+0x2a2>
 80052ae:	e018      	b.n	80052e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80052b0:	4b1a      	ldr	r3, [pc, #104]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80052b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052b4:	4b19      	ldr	r3, [pc, #100]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80052b6:	2101      	movs	r1, #1
 80052b8:	438a      	bics	r2, r1
 80052ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fe f818 	bl	80032f0 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c6:	f7fe f813 	bl	80032f0 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e193      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d8:	4b10      	ldr	r3, [pc, #64]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80052da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052dc:	2202      	movs	r2, #2
 80052de:	4013      	ands	r3, r2
 80052e0:	d1f1      	bne.n	80052c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2204      	movs	r2, #4
 80052e8:	4013      	ands	r3, r2
 80052ea:	d100      	bne.n	80052ee <HAL_RCC_OscConfig+0x2fe>
 80052ec:	e0c6      	b.n	800547c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ee:	231f      	movs	r3, #31
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80052f6:	4b09      	ldr	r3, [pc, #36]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2238      	movs	r2, #56	@ 0x38
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d11e      	bne.n	8005340 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <HAL_RCC_OscConfig+0x32c>)
 8005304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005306:	2202      	movs	r2, #2
 8005308:	4013      	ands	r3, r2
 800530a:	d100      	bne.n	800530e <HAL_RCC_OscConfig+0x31e>
 800530c:	e0b6      	b.n	800547c <HAL_RCC_OscConfig+0x48c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d000      	beq.n	8005318 <HAL_RCC_OscConfig+0x328>
 8005316:	e0b1      	b.n	800547c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e171      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
 800531c:	40021000 	.word	0x40021000
 8005320:	fffeffff 	.word	0xfffeffff
 8005324:	fffbffff 	.word	0xfffbffff
 8005328:	ffff80ff 	.word	0xffff80ff
 800532c:	ffffc7ff 	.word	0xffffc7ff
 8005330:	00f42400 	.word	0x00f42400
 8005334:	20000004 	.word	0x20000004
 8005338:	20000008 	.word	0x20000008
 800533c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005340:	4bb1      	ldr	r3, [pc, #708]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	055b      	lsls	r3, r3, #21
 8005348:	4013      	ands	r3, r2
 800534a:	d101      	bne.n	8005350 <HAL_RCC_OscConfig+0x360>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <HAL_RCC_OscConfig+0x362>
 8005350:	2300      	movs	r3, #0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d011      	beq.n	800537a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	4bac      	ldr	r3, [pc, #688]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800535a:	4bab      	ldr	r3, [pc, #684]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 800535c:	2180      	movs	r1, #128	@ 0x80
 800535e:	0549      	lsls	r1, r1, #21
 8005360:	430a      	orrs	r2, r1
 8005362:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005364:	4ba8      	ldr	r3, [pc, #672]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	055b      	lsls	r3, r3, #21
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005372:	231f      	movs	r3, #31
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537a:	4ba4      	ldr	r3, [pc, #656]	@ (800560c <HAL_RCC_OscConfig+0x61c>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	2380      	movs	r3, #128	@ 0x80
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4013      	ands	r3, r2
 8005384:	d11a      	bne.n	80053bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005386:	4ba1      	ldr	r3, [pc, #644]	@ (800560c <HAL_RCC_OscConfig+0x61c>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4ba0      	ldr	r3, [pc, #640]	@ (800560c <HAL_RCC_OscConfig+0x61c>)
 800538c:	2180      	movs	r1, #128	@ 0x80
 800538e:	0049      	lsls	r1, r1, #1
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005394:	f7fd ffac 	bl	80032f0 <HAL_GetTick>
 8005398:	0003      	movs	r3, r0
 800539a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539e:	f7fd ffa7 	bl	80032f0 <HAL_GetTick>
 80053a2:	0002      	movs	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e127      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b0:	4b96      	ldr	r3, [pc, #600]	@ (800560c <HAL_RCC_OscConfig+0x61c>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4013      	ands	r3, r2
 80053ba:	d0f0      	beq.n	800539e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d106      	bne.n	80053d2 <HAL_RCC_OscConfig+0x3e2>
 80053c4:	4b90      	ldr	r3, [pc, #576]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80053c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80053ca:	2101      	movs	r1, #1
 80053cc:	430a      	orrs	r2, r1
 80053ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053d0:	e01c      	b.n	800540c <HAL_RCC_OscConfig+0x41c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x404>
 80053da:	4b8b      	ldr	r3, [pc, #556]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80053dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053de:	4b8a      	ldr	r3, [pc, #552]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80053e0:	2104      	movs	r1, #4
 80053e2:	430a      	orrs	r2, r1
 80053e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053e6:	4b88      	ldr	r3, [pc, #544]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80053e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053ea:	4b87      	ldr	r3, [pc, #540]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80053ec:	2101      	movs	r1, #1
 80053ee:	430a      	orrs	r2, r1
 80053f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053f2:	e00b      	b.n	800540c <HAL_RCC_OscConfig+0x41c>
 80053f4:	4b84      	ldr	r3, [pc, #528]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80053f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053f8:	4b83      	ldr	r3, [pc, #524]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80053fa:	2101      	movs	r1, #1
 80053fc:	438a      	bics	r2, r1
 80053fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005400:	4b81      	ldr	r3, [pc, #516]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005402:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005404:	4b80      	ldr	r3, [pc, #512]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005406:	2104      	movs	r1, #4
 8005408:	438a      	bics	r2, r1
 800540a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d014      	beq.n	800543e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fd ff6c 	bl	80032f0 <HAL_GetTick>
 8005418:	0003      	movs	r3, r0
 800541a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800541c:	e009      	b.n	8005432 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541e:	f7fd ff67 	bl	80032f0 <HAL_GetTick>
 8005422:	0002      	movs	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	4a79      	ldr	r2, [pc, #484]	@ (8005610 <HAL_RCC_OscConfig+0x620>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e0e6      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005432:	4b75      	ldr	r3, [pc, #468]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005436:	2202      	movs	r2, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x42e>
 800543c:	e013      	b.n	8005466 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7fd ff57 	bl	80032f0 <HAL_GetTick>
 8005442:	0003      	movs	r3, r0
 8005444:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005446:	e009      	b.n	800545c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005448:	f7fd ff52 	bl	80032f0 <HAL_GetTick>
 800544c:	0002      	movs	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	4a6f      	ldr	r2, [pc, #444]	@ (8005610 <HAL_RCC_OscConfig+0x620>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0d1      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800545c:	4b6a      	ldr	r3, [pc, #424]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	2202      	movs	r2, #2
 8005462:	4013      	ands	r3, r2
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005466:	231f      	movs	r3, #31
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d105      	bne.n	800547c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005470:	4b65      	ldr	r3, [pc, #404]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005474:	4b64      	ldr	r3, [pc, #400]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005476:	4967      	ldr	r1, [pc, #412]	@ (8005614 <HAL_RCC_OscConfig+0x624>)
 8005478:	400a      	ands	r2, r1
 800547a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d100      	bne.n	8005486 <HAL_RCC_OscConfig+0x496>
 8005484:	e0bb      	b.n	80055fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005486:	4b60      	ldr	r3, [pc, #384]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2238      	movs	r2, #56	@ 0x38
 800548c:	4013      	ands	r3, r2
 800548e:	2b10      	cmp	r3, #16
 8005490:	d100      	bne.n	8005494 <HAL_RCC_OscConfig+0x4a4>
 8005492:	e07b      	b.n	800558c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d156      	bne.n	800554a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549c:	4b5a      	ldr	r3, [pc, #360]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b59      	ldr	r3, [pc, #356]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80054a2:	495d      	ldr	r1, [pc, #372]	@ (8005618 <HAL_RCC_OscConfig+0x628>)
 80054a4:	400a      	ands	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd ff22 	bl	80032f0 <HAL_GetTick>
 80054ac:	0003      	movs	r3, r0
 80054ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b2:	f7fd ff1d 	bl	80032f0 <HAL_GetTick>
 80054b6:	0002      	movs	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e09d      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c4:	4b50      	ldr	r3, [pc, #320]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	2380      	movs	r3, #128	@ 0x80
 80054ca:	049b      	lsls	r3, r3, #18
 80054cc:	4013      	ands	r3, r2
 80054ce:	d1f0      	bne.n	80054b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a51      	ldr	r2, [pc, #324]	@ (800561c <HAL_RCC_OscConfig+0x62c>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	0019      	movs	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fc:	431a      	orrs	r2, r3
 80054fe:	4b42      	ldr	r3, [pc, #264]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005500:	430a      	orrs	r2, r1
 8005502:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005504:	4b40      	ldr	r3, [pc, #256]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b3f      	ldr	r3, [pc, #252]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 800550a:	2180      	movs	r1, #128	@ 0x80
 800550c:	0449      	lsls	r1, r1, #17
 800550e:	430a      	orrs	r2, r1
 8005510:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005512:	4b3d      	ldr	r3, [pc, #244]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	4b3c      	ldr	r3, [pc, #240]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005518:	2180      	movs	r1, #128	@ 0x80
 800551a:	0549      	lsls	r1, r1, #21
 800551c:	430a      	orrs	r2, r1
 800551e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fd fee6 	bl	80032f0 <HAL_GetTick>
 8005524:	0003      	movs	r3, r0
 8005526:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552a:	f7fd fee1 	bl	80032f0 <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e061      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800553c:	4b32      	ldr	r3, [pc, #200]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	049b      	lsls	r3, r3, #18
 8005544:	4013      	ands	r3, r2
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x53a>
 8005548:	e059      	b.n	80055fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554a:	4b2f      	ldr	r3, [pc, #188]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b2e      	ldr	r3, [pc, #184]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005550:	4931      	ldr	r1, [pc, #196]	@ (8005618 <HAL_RCC_OscConfig+0x628>)
 8005552:	400a      	ands	r2, r1
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fd fecb 	bl	80032f0 <HAL_GetTick>
 800555a:	0003      	movs	r3, r0
 800555c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005560:	f7fd fec6 	bl	80032f0 <HAL_GetTick>
 8005564:	0002      	movs	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e046      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005572:	4b25      	ldr	r3, [pc, #148]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	2380      	movs	r3, #128	@ 0x80
 8005578:	049b      	lsls	r3, r3, #18
 800557a:	4013      	ands	r3, r2
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800557e:	4b22      	ldr	r3, [pc, #136]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	4b21      	ldr	r3, [pc, #132]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 8005584:	4926      	ldr	r1, [pc, #152]	@ (8005620 <HAL_RCC_OscConfig+0x630>)
 8005586:	400a      	ands	r2, r1
 8005588:	60da      	str	r2, [r3, #12]
 800558a:	e038      	b.n	80055fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e033      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005598:	4b1b      	ldr	r3, [pc, #108]	@ (8005608 <HAL_RCC_OscConfig+0x618>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2203      	movs	r2, #3
 80055a2:	401a      	ands	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d126      	bne.n	80055fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2270      	movs	r2, #112	@ 0x70
 80055b0:	401a      	ands	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d11f      	bne.n	80055fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	23fe      	movs	r3, #254	@ 0xfe
 80055be:	01db      	lsls	r3, r3, #7
 80055c0:	401a      	ands	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d116      	bne.n	80055fa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	23f8      	movs	r3, #248	@ 0xf8
 80055d0:	039b      	lsls	r3, r3, #14
 80055d2:	401a      	ands	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d10e      	bne.n	80055fa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	23e0      	movs	r3, #224	@ 0xe0
 80055e0:	051b      	lsls	r3, r3, #20
 80055e2:	401a      	ands	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	0f5b      	lsrs	r3, r3, #29
 80055f0:	075a      	lsls	r2, r3, #29
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d001      	beq.n	80055fe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	0018      	movs	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	b008      	add	sp, #32
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000
 800560c:	40007000 	.word	0x40007000
 8005610:	00001388 	.word	0x00001388
 8005614:	efffffff 	.word	0xefffffff
 8005618:	feffffff 	.word	0xfeffffff
 800561c:	11c1808c 	.word	0x11c1808c
 8005620:	eefefffc 	.word	0xeefefffc

08005624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0e9      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005638:	4b76      	ldr	r3, [pc, #472]	@ (8005814 <HAL_RCC_ClockConfig+0x1f0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2207      	movs	r2, #7
 800563e:	4013      	ands	r3, r2
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d91e      	bls.n	8005684 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005646:	4b73      	ldr	r3, [pc, #460]	@ (8005814 <HAL_RCC_ClockConfig+0x1f0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2207      	movs	r2, #7
 800564c:	4393      	bics	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	4b70      	ldr	r3, [pc, #448]	@ (8005814 <HAL_RCC_ClockConfig+0x1f0>)
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005658:	f7fd fe4a 	bl	80032f0 <HAL_GetTick>
 800565c:	0003      	movs	r3, r0
 800565e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005660:	e009      	b.n	8005676 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005662:	f7fd fe45 	bl	80032f0 <HAL_GetTick>
 8005666:	0002      	movs	r2, r0
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	4a6a      	ldr	r2, [pc, #424]	@ (8005818 <HAL_RCC_ClockConfig+0x1f4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e0ca      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005676:	4b67      	ldr	r3, [pc, #412]	@ (8005814 <HAL_RCC_ClockConfig+0x1f0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2207      	movs	r2, #7
 800567c:	4013      	ands	r3, r2
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d1ee      	bne.n	8005662 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2202      	movs	r2, #2
 800568a:	4013      	ands	r3, r2
 800568c:	d015      	beq.n	80056ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2204      	movs	r2, #4
 8005694:	4013      	ands	r3, r2
 8005696:	d006      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005698:	4b60      	ldr	r3, [pc, #384]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	4b5f      	ldr	r3, [pc, #380]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 800569e:	21e0      	movs	r1, #224	@ 0xe0
 80056a0:	01c9      	lsls	r1, r1, #7
 80056a2:	430a      	orrs	r2, r1
 80056a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a6:	4b5d      	ldr	r3, [pc, #372]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005820 <HAL_RCC_ClockConfig+0x1fc>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	0019      	movs	r1, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	4b59      	ldr	r3, [pc, #356]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 80056b6:	430a      	orrs	r2, r1
 80056b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2201      	movs	r2, #1
 80056c0:	4013      	ands	r3, r2
 80056c2:	d057      	beq.n	8005774 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d107      	bne.n	80056dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056cc:	4b53      	ldr	r3, [pc, #332]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	2380      	movs	r3, #128	@ 0x80
 80056d2:	029b      	lsls	r3, r3, #10
 80056d4:	4013      	ands	r3, r2
 80056d6:	d12b      	bne.n	8005730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e097      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056e4:	4b4d      	ldr	r3, [pc, #308]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	049b      	lsls	r3, r3, #18
 80056ec:	4013      	ands	r3, r2
 80056ee:	d11f      	bne.n	8005730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e08b      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d107      	bne.n	800570c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056fc:	4b47      	ldr	r3, [pc, #284]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	4013      	ands	r3, r2
 8005706:	d113      	bne.n	8005730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e07f      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d106      	bne.n	8005722 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005714:	4b41      	ldr	r3, [pc, #260]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 8005716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005718:	2202      	movs	r2, #2
 800571a:	4013      	ands	r3, r2
 800571c:	d108      	bne.n	8005730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e074      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005722:	4b3e      	ldr	r3, [pc, #248]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 8005724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005726:	2202      	movs	r2, #2
 8005728:	4013      	ands	r3, r2
 800572a:	d101      	bne.n	8005730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e06d      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005730:	4b3a      	ldr	r3, [pc, #232]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2207      	movs	r2, #7
 8005736:	4393      	bics	r3, r2
 8005738:	0019      	movs	r1, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	4b37      	ldr	r3, [pc, #220]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 8005740:	430a      	orrs	r2, r1
 8005742:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005744:	f7fd fdd4 	bl	80032f0 <HAL_GetTick>
 8005748:	0003      	movs	r3, r0
 800574a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574c:	e009      	b.n	8005762 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800574e:	f7fd fdcf 	bl	80032f0 <HAL_GetTick>
 8005752:	0002      	movs	r2, r0
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	4a2f      	ldr	r2, [pc, #188]	@ (8005818 <HAL_RCC_ClockConfig+0x1f4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e054      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005762:	4b2e      	ldr	r3, [pc, #184]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2238      	movs	r2, #56	@ 0x38
 8005768:	401a      	ands	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	429a      	cmp	r2, r3
 8005772:	d1ec      	bne.n	800574e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005774:	4b27      	ldr	r3, [pc, #156]	@ (8005814 <HAL_RCC_ClockConfig+0x1f0>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2207      	movs	r2, #7
 800577a:	4013      	ands	r3, r2
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d21e      	bcs.n	80057c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005782:	4b24      	ldr	r3, [pc, #144]	@ (8005814 <HAL_RCC_ClockConfig+0x1f0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2207      	movs	r2, #7
 8005788:	4393      	bics	r3, r2
 800578a:	0019      	movs	r1, r3
 800578c:	4b21      	ldr	r3, [pc, #132]	@ (8005814 <HAL_RCC_ClockConfig+0x1f0>)
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005794:	f7fd fdac 	bl	80032f0 <HAL_GetTick>
 8005798:	0003      	movs	r3, r0
 800579a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800579c:	e009      	b.n	80057b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800579e:	f7fd fda7 	bl	80032f0 <HAL_GetTick>
 80057a2:	0002      	movs	r2, r0
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <HAL_RCC_ClockConfig+0x1f4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e02c      	b.n	800580c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057b2:	4b18      	ldr	r3, [pc, #96]	@ (8005814 <HAL_RCC_ClockConfig+0x1f0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2207      	movs	r2, #7
 80057b8:	4013      	ands	r3, r2
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d1ee      	bne.n	800579e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2204      	movs	r2, #4
 80057c6:	4013      	ands	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80057ca:	4b14      	ldr	r3, [pc, #80]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <HAL_RCC_ClockConfig+0x200>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	0019      	movs	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	4b10      	ldr	r3, [pc, #64]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80057de:	f000 f829 	bl	8005834 <HAL_RCC_GetSysClockFreq>
 80057e2:	0001      	movs	r1, r0
 80057e4:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <HAL_RCC_ClockConfig+0x1f8>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	0a1b      	lsrs	r3, r3, #8
 80057ea:	220f      	movs	r2, #15
 80057ec:	401a      	ands	r2, r3
 80057ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <HAL_RCC_ClockConfig+0x204>)
 80057f0:	0092      	lsls	r2, r2, #2
 80057f2:	58d3      	ldr	r3, [r2, r3]
 80057f4:	221f      	movs	r2, #31
 80057f6:	4013      	ands	r3, r2
 80057f8:	000a      	movs	r2, r1
 80057fa:	40da      	lsrs	r2, r3
 80057fc:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <HAL_RCC_ClockConfig+0x208>)
 80057fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCC_ClockConfig+0x20c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	0018      	movs	r0, r3
 8005806:	f7fd fd17 	bl	8003238 <HAL_InitTick>
 800580a:	0003      	movs	r3, r0
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b004      	add	sp, #16
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40022000 	.word	0x40022000
 8005818:	00001388 	.word	0x00001388
 800581c:	40021000 	.word	0x40021000
 8005820:	fffff0ff 	.word	0xfffff0ff
 8005824:	ffff8fff 	.word	0xffff8fff
 8005828:	080095c0 	.word	0x080095c0
 800582c:	20000004 	.word	0x20000004
 8005830:	20000008 	.word	0x20000008

08005834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800583a:	4b3c      	ldr	r3, [pc, #240]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2238      	movs	r2, #56	@ 0x38
 8005840:	4013      	ands	r3, r2
 8005842:	d10f      	bne.n	8005864 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005844:	4b39      	ldr	r3, [pc, #228]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	0adb      	lsrs	r3, r3, #11
 800584a:	2207      	movs	r2, #7
 800584c:	4013      	ands	r3, r2
 800584e:	2201      	movs	r2, #1
 8005850:	409a      	lsls	r2, r3
 8005852:	0013      	movs	r3, r2
 8005854:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	4835      	ldr	r0, [pc, #212]	@ (8005930 <HAL_RCC_GetSysClockFreq+0xfc>)
 800585a:	f7fa fc6d 	bl	8000138 <__udivsi3>
 800585e:	0003      	movs	r3, r0
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	e05d      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005864:	4b31      	ldr	r3, [pc, #196]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2238      	movs	r2, #56	@ 0x38
 800586a:	4013      	ands	r3, r2
 800586c:	2b08      	cmp	r3, #8
 800586e:	d102      	bne.n	8005876 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005870:	4b30      	ldr	r3, [pc, #192]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x100>)
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	e054      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005876:	4b2d      	ldr	r3, [pc, #180]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2238      	movs	r2, #56	@ 0x38
 800587c:	4013      	ands	r3, r2
 800587e:	2b10      	cmp	r3, #16
 8005880:	d138      	bne.n	80058f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005882:	4b2a      	ldr	r3, [pc, #168]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2203      	movs	r2, #3
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800588c:	4b27      	ldr	r3, [pc, #156]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	2207      	movs	r2, #7
 8005894:	4013      	ands	r3, r2
 8005896:	3301      	adds	r3, #1
 8005898:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d10d      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4824      	ldr	r0, [pc, #144]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x100>)
 80058a4:	f7fa fc48 	bl	8000138 <__udivsi3>
 80058a8:	0003      	movs	r3, r0
 80058aa:	0019      	movs	r1, r3
 80058ac:	4b1f      	ldr	r3, [pc, #124]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	227f      	movs	r2, #127	@ 0x7f
 80058b4:	4013      	ands	r3, r2
 80058b6:	434b      	muls	r3, r1
 80058b8:	617b      	str	r3, [r7, #20]
        break;
 80058ba:	e00d      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	481c      	ldr	r0, [pc, #112]	@ (8005930 <HAL_RCC_GetSysClockFreq+0xfc>)
 80058c0:	f7fa fc3a 	bl	8000138 <__udivsi3>
 80058c4:	0003      	movs	r3, r0
 80058c6:	0019      	movs	r1, r3
 80058c8:	4b18      	ldr	r3, [pc, #96]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	227f      	movs	r2, #127	@ 0x7f
 80058d0:	4013      	ands	r3, r2
 80058d2:	434b      	muls	r3, r1
 80058d4:	617b      	str	r3, [r7, #20]
        break;
 80058d6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80058d8:	4b14      	ldr	r3, [pc, #80]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	0f5b      	lsrs	r3, r3, #29
 80058de:	2207      	movs	r2, #7
 80058e0:	4013      	ands	r3, r2
 80058e2:	3301      	adds	r3, #1
 80058e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	6978      	ldr	r0, [r7, #20]
 80058ea:	f7fa fc25 	bl	8000138 <__udivsi3>
 80058ee:	0003      	movs	r3, r0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	e015      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80058f4:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2238      	movs	r2, #56	@ 0x38
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d103      	bne.n	8005908 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005900:	2380      	movs	r3, #128	@ 0x80
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	e00b      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005908:	4b08      	ldr	r3, [pc, #32]	@ (800592c <HAL_RCC_GetSysClockFreq+0xf8>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2238      	movs	r2, #56	@ 0x38
 800590e:	4013      	ands	r3, r2
 8005910:	2b18      	cmp	r3, #24
 8005912:	d103      	bne.n	800591c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005914:	23fa      	movs	r3, #250	@ 0xfa
 8005916:	01db      	lsls	r3, r3, #7
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e001      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005920:	693b      	ldr	r3, [r7, #16]
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b006      	add	sp, #24
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	40021000 	.word	0x40021000
 8005930:	00f42400 	.word	0x00f42400
 8005934:	007a1200 	.word	0x007a1200

08005938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800593c:	4b02      	ldr	r3, [pc, #8]	@ (8005948 <HAL_RCC_GetHCLKFreq+0x10>)
 800593e:	681b      	ldr	r3, [r3, #0]
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	20000004 	.word	0x20000004

0800594c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800594c:	b5b0      	push	{r4, r5, r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005950:	f7ff fff2 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 8005954:	0004      	movs	r4, r0
 8005956:	f7ff fb3f 	bl	8004fd8 <LL_RCC_GetAPB1Prescaler>
 800595a:	0003      	movs	r3, r0
 800595c:	0b1a      	lsrs	r2, r3, #12
 800595e:	4b05      	ldr	r3, [pc, #20]	@ (8005974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005960:	0092      	lsls	r2, r2, #2
 8005962:	58d3      	ldr	r3, [r2, r3]
 8005964:	221f      	movs	r2, #31
 8005966:	4013      	ands	r3, r2
 8005968:	40dc      	lsrs	r4, r3
 800596a:	0023      	movs	r3, r4
}
 800596c:	0018      	movs	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	bdb0      	pop	{r4, r5, r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	08009600 	.word	0x08009600

08005978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005980:	2313      	movs	r3, #19
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005988:	2312      	movs	r3, #18
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	029b      	lsls	r3, r3, #10
 8005998:	4013      	ands	r3, r2
 800599a:	d100      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800599c:	e0a3      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599e:	2011      	movs	r0, #17
 80059a0:	183b      	adds	r3, r7, r0
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059a6:	4bb3      	ldr	r3, [pc, #716]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80059a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059aa:	2380      	movs	r3, #128	@ 0x80
 80059ac:	055b      	lsls	r3, r3, #21
 80059ae:	4013      	ands	r3, r2
 80059b0:	d110      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b2:	4bb0      	ldr	r3, [pc, #704]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80059b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059b6:	4baf      	ldr	r3, [pc, #700]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80059b8:	2180      	movs	r1, #128	@ 0x80
 80059ba:	0549      	lsls	r1, r1, #21
 80059bc:	430a      	orrs	r2, r1
 80059be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80059c0:	4bac      	ldr	r3, [pc, #688]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80059c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059c4:	2380      	movs	r3, #128	@ 0x80
 80059c6:	055b      	lsls	r3, r3, #21
 80059c8:	4013      	ands	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]
 80059cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ce:	183b      	adds	r3, r7, r0
 80059d0:	2201      	movs	r2, #1
 80059d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059d4:	4ba8      	ldr	r3, [pc, #672]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4ba7      	ldr	r3, [pc, #668]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059da:	2180      	movs	r1, #128	@ 0x80
 80059dc:	0049      	lsls	r1, r1, #1
 80059de:	430a      	orrs	r2, r1
 80059e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059e2:	f7fd fc85 	bl	80032f0 <HAL_GetTick>
 80059e6:	0003      	movs	r3, r0
 80059e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ea:	e00b      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ec:	f7fd fc80 	bl	80032f0 <HAL_GetTick>
 80059f0:	0002      	movs	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d904      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80059fa:	2313      	movs	r3, #19
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	2203      	movs	r2, #3
 8005a00:	701a      	strb	r2, [r3, #0]
        break;
 8005a02:	e005      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a04:	4b9c      	ldr	r3, [pc, #624]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	2380      	movs	r3, #128	@ 0x80
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d0ed      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005a10:	2313      	movs	r3, #19
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d154      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a1a:	4b96      	ldr	r3, [pc, #600]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005a1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a1e:	23c0      	movs	r3, #192	@ 0xc0
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4013      	ands	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d019      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d014      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a36:	4b8f      	ldr	r3, [pc, #572]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a3a:	4a90      	ldr	r2, [pc, #576]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a40:	4b8c      	ldr	r3, [pc, #560]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a44:	4b8b      	ldr	r3, [pc, #556]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005a46:	2180      	movs	r1, #128	@ 0x80
 8005a48:	0249      	lsls	r1, r1, #9
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a4e:	4b89      	ldr	r3, [pc, #548]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005a50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a52:	4b88      	ldr	r3, [pc, #544]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005a54:	498a      	ldr	r1, [pc, #552]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a56:	400a      	ands	r2, r1
 8005a58:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a5a:	4b86      	ldr	r3, [pc, #536]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2201      	movs	r2, #1
 8005a64:	4013      	ands	r3, r2
 8005a66:	d016      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fd fc42 	bl	80032f0 <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a70:	e00c      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a72:	f7fd fc3d 	bl	80032f0 <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	4a81      	ldr	r2, [pc, #516]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d904      	bls.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005a82:	2313      	movs	r3, #19
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	2203      	movs	r2, #3
 8005a88:	701a      	strb	r2, [r3, #0]
            break;
 8005a8a:	e004      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a8c:	4b79      	ldr	r3, [pc, #484]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a90:	2202      	movs	r2, #2
 8005a92:	4013      	ands	r3, r2
 8005a94:	d0ed      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005a96:	2313      	movs	r3, #19
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aa0:	4b74      	ldr	r3, [pc, #464]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa4:	4a75      	ldr	r2, [pc, #468]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005aae:	4b71      	ldr	r3, [pc, #452]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ab4:	e00c      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ab6:	2312      	movs	r3, #18
 8005ab8:	18fb      	adds	r3, r7, r3
 8005aba:	2213      	movs	r2, #19
 8005abc:	18ba      	adds	r2, r7, r2
 8005abe:	7812      	ldrb	r2, [r2, #0]
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e005      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	2312      	movs	r3, #18
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	2213      	movs	r2, #19
 8005aca:	18ba      	adds	r2, r7, r2
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ad0:	2311      	movs	r3, #17
 8005ad2:	18fb      	adds	r3, r7, r3
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ada:	4b66      	ldr	r3, [pc, #408]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005adc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ade:	4b65      	ldr	r3, [pc, #404]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005ae0:	4969      	ldr	r1, [pc, #420]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ae2:	400a      	ands	r2, r1
 8005ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2201      	movs	r2, #1
 8005aec:	4013      	ands	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005af0:	4b60      	ldr	r3, [pc, #384]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	2203      	movs	r2, #3
 8005af6:	4393      	bics	r3, r2
 8005af8:	0019      	movs	r1, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	4b5d      	ldr	r3, [pc, #372]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b00:	430a      	orrs	r2, r1
 8005b02:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b0e:	4b59      	ldr	r3, [pc, #356]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b12:	4a5e      	ldr	r2, [pc, #376]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	0019      	movs	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	4b55      	ldr	r3, [pc, #340]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	2380      	movs	r3, #128	@ 0x80
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b2e:	4b51      	ldr	r3, [pc, #324]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	4a57      	ldr	r2, [pc, #348]	@ (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	0019      	movs	r1, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695a      	ldr	r2, [r3, #20]
 8005b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	2380      	movs	r3, #128	@ 0x80
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b4e:	4b49      	ldr	r3, [pc, #292]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b52:	4a50      	ldr	r2, [pc, #320]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	0019      	movs	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	4b45      	ldr	r3, [pc, #276]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2220      	movs	r2, #32
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b6c:	4b41      	ldr	r3, [pc, #260]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b70:	4a49      	ldr	r2, [pc, #292]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	0019      	movs	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	2380      	movs	r3, #128	@ 0x80
 8005b86:	01db      	lsls	r3, r3, #7
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d015      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b8c:	4b39      	ldr	r3, [pc, #228]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	0899      	lsrs	r1, r3, #2
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69da      	ldr	r2, [r3, #28]
 8005ba2:	2380      	movs	r3, #128	@ 0x80
 8005ba4:	05db      	lsls	r3, r3, #23
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005baa:	4b32      	ldr	r3, [pc, #200]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	4b31      	ldr	r3, [pc, #196]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005bb0:	2180      	movs	r1, #128	@ 0x80
 8005bb2:	0249      	lsls	r1, r1, #9
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	2380      	movs	r3, #128	@ 0x80
 8005bbe:	039b      	lsls	r3, r3, #14
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d016      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc8:	4a34      	ldr	r2, [pc, #208]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	4b28      	ldr	r3, [pc, #160]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1a      	ldr	r2, [r3, #32]
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	03db      	lsls	r3, r3, #15
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d106      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005be4:	4b23      	ldr	r3, [pc, #140]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	4b22      	ldr	r3, [pc, #136]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005bea:	2180      	movs	r1, #128	@ 0x80
 8005bec:	0449      	lsls	r1, r1, #17
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	2380      	movs	r3, #128	@ 0x80
 8005bf8:	03db      	lsls	r3, r3, #15
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d016      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c02:	4a27      	ldr	r2, [pc, #156]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	0019      	movs	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c0c:	4b19      	ldr	r3, [pc, #100]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c16:	2380      	movs	r3, #128	@ 0x80
 8005c18:	045b      	lsls	r3, r3, #17
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d106      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c1e:	4b15      	ldr	r3, [pc, #84]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	4b14      	ldr	r3, [pc, #80]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c24:	2180      	movs	r1, #128	@ 0x80
 8005c26:	0449      	lsls	r1, r1, #17
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	2380      	movs	r3, #128	@ 0x80
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	4013      	ands	r3, r2
 8005c36:	d016      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005c38:	4b0e      	ldr	r3, [pc, #56]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	4a19      	ldr	r2, [pc, #100]	@ (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	0019      	movs	r1, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	01db      	lsls	r3, r3, #7
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d106      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c58:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005c5e:	2180      	movs	r1, #128	@ 0x80
 8005c60:	0249      	lsls	r1, r1, #9
 8005c62:	430a      	orrs	r2, r1
 8005c64:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005c66:	2312      	movs	r3, #18
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	781b      	ldrb	r3, [r3, #0]
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b006      	add	sp, #24
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40007000 	.word	0x40007000
 8005c7c:	fffffcff 	.word	0xfffffcff
 8005c80:	fffeffff 	.word	0xfffeffff
 8005c84:	00001388 	.word	0x00001388
 8005c88:	efffffff 	.word	0xefffffff
 8005c8c:	fffff3ff 	.word	0xfffff3ff
 8005c90:	fff3ffff 	.word	0xfff3ffff
 8005c94:	ffcfffff 	.word	0xffcfffff
 8005c98:	ffffcfff 	.word	0xffffcfff
 8005c9c:	ffbfffff 	.word	0xffbfffff
 8005ca0:	feffffff 	.word	0xfeffffff
 8005ca4:	ffff3fff 	.word	0xffff3fff

08005ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e046      	b.n	8005d48 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2288      	movs	r2, #136	@ 0x88
 8005cbe:	589b      	ldr	r3, [r3, r2]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d107      	bne.n	8005cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2284      	movs	r2, #132	@ 0x84
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7fd f92c 	bl	8002f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2288      	movs	r2, #136	@ 0x88
 8005cd8:	2124      	movs	r1, #36	@ 0x24
 8005cda:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	438a      	bics	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f000 fb48 	bl	800638c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 f8cc 	bl	8005e9c <UART_SetConfig>
 8005d04:	0003      	movs	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e01c      	b.n	8005d48 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	490d      	ldr	r1, [pc, #52]	@ (8005d50 <HAL_UART_Init+0xa8>)
 8005d1a:	400a      	ands	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	212a      	movs	r1, #42	@ 0x2a
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 fbd7 	bl	80064f4 <UART_CheckIdleState>
 8005d46:	0003      	movs	r3, r0
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b002      	add	sp, #8
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	ffffb7ff 	.word	0xffffb7ff

08005d54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	@ 0x28
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	1dbb      	adds	r3, r7, #6
 8005d62:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2288      	movs	r2, #136	@ 0x88
 8005d68:	589b      	ldr	r3, [r3, r2]
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d000      	beq.n	8005d70 <HAL_UART_Transmit+0x1c>
 8005d6e:	e090      	b.n	8005e92 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_UART_Transmit+0x2a>
 8005d76:	1dbb      	adds	r3, r7, #6
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e088      	b.n	8005e94 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	2380      	movs	r3, #128	@ 0x80
 8005d88:	015b      	lsls	r3, r3, #5
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d109      	bne.n	8005da2 <HAL_UART_Transmit+0x4e>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d105      	bne.n	8005da2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d001      	beq.n	8005da2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e078      	b.n	8005e94 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2290      	movs	r2, #144	@ 0x90
 8005da6:	2100      	movs	r1, #0
 8005da8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2288      	movs	r2, #136	@ 0x88
 8005dae:	2121      	movs	r1, #33	@ 0x21
 8005db0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005db2:	f7fd fa9d 	bl	80032f0 <HAL_GetTick>
 8005db6:	0003      	movs	r3, r0
 8005db8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1dba      	adds	r2, r7, #6
 8005dbe:	2154      	movs	r1, #84	@ 0x54
 8005dc0:	8812      	ldrh	r2, [r2, #0]
 8005dc2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	1dba      	adds	r2, r7, #6
 8005dc8:	2156      	movs	r1, #86	@ 0x56
 8005dca:	8812      	ldrh	r2, [r2, #0]
 8005dcc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	2380      	movs	r3, #128	@ 0x80
 8005dd4:	015b      	lsls	r3, r3, #5
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d108      	bne.n	8005dec <HAL_UART_Transmit+0x98>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e003      	b.n	8005df4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005df4:	e030      	b.n	8005e58 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	0013      	movs	r3, r2
 8005e00:	2200      	movs	r2, #0
 8005e02:	2180      	movs	r1, #128	@ 0x80
 8005e04:	f000 fc20 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 8005e08:	1e03      	subs	r3, r0, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2288      	movs	r2, #136	@ 0x88
 8005e10:	2120      	movs	r1, #32
 8005e12:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e03d      	b.n	8005e94 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	001a      	movs	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	05d2      	lsls	r2, r2, #23
 8005e2a:	0dd2      	lsrs	r2, r2, #23
 8005e2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	3302      	adds	r3, #2
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e007      	b.n	8005e46 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	781a      	ldrb	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2256      	movs	r2, #86	@ 0x56
 8005e4a:	5a9b      	ldrh	r3, [r3, r2]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b299      	uxth	r1, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2256      	movs	r2, #86	@ 0x56
 8005e56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2256      	movs	r2, #86	@ 0x56
 8005e5c:	5a9b      	ldrh	r3, [r3, r2]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1c8      	bne.n	8005df6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	0013      	movs	r3, r2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2140      	movs	r1, #64	@ 0x40
 8005e72:	f000 fbe9 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 8005e76:	1e03      	subs	r3, r0, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2288      	movs	r2, #136	@ 0x88
 8005e7e:	2120      	movs	r1, #32
 8005e80:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e006      	b.n	8005e94 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2288      	movs	r2, #136	@ 0x88
 8005e8a:	2120      	movs	r1, #32
 8005e8c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e000      	b.n	8005e94 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005e92:	2302      	movs	r3, #2
  }
}
 8005e94:	0018      	movs	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b008      	add	sp, #32
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e9c:	b5b0      	push	{r4, r5, r7, lr}
 8005e9e:	b090      	sub	sp, #64	@ 0x40
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ea4:	231a      	movs	r3, #26
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	189b      	adds	r3, r3, r2
 8005eaa:	19db      	adds	r3, r3, r7
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4ac4      	ldr	r2, [pc, #784]	@ (80061e0 <UART_SetConfig+0x344>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	0019      	movs	r1, r3
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eda:	430b      	orrs	r3, r1
 8005edc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4abf      	ldr	r2, [pc, #764]	@ (80061e4 <UART_SetConfig+0x348>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	0018      	movs	r0, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	68d9      	ldr	r1, [r3, #12]
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4ab9      	ldr	r2, [pc, #740]	@ (80061e8 <UART_SetConfig+0x34c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4ab4      	ldr	r2, [pc, #720]	@ (80061ec <UART_SetConfig+0x350>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2e:	220f      	movs	r2, #15
 8005f30:	4393      	bics	r3, r2
 8005f32:	0018      	movs	r0, r3
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4aaa      	ldr	r2, [pc, #680]	@ (80061f0 <UART_SetConfig+0x354>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d131      	bne.n	8005fb0 <UART_SetConfig+0x114>
 8005f4c:	4ba9      	ldr	r3, [pc, #676]	@ (80061f4 <UART_SetConfig+0x358>)
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f50:	2203      	movs	r2, #3
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d01d      	beq.n	8005f94 <UART_SetConfig+0xf8>
 8005f58:	d823      	bhi.n	8005fa2 <UART_SetConfig+0x106>
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d00c      	beq.n	8005f78 <UART_SetConfig+0xdc>
 8005f5e:	d820      	bhi.n	8005fa2 <UART_SetConfig+0x106>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <UART_SetConfig+0xce>
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d00e      	beq.n	8005f86 <UART_SetConfig+0xea>
 8005f68:	e01b      	b.n	8005fa2 <UART_SetConfig+0x106>
 8005f6a:	231b      	movs	r3, #27
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	189b      	adds	r3, r3, r2
 8005f70:	19db      	adds	r3, r3, r7
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	e071      	b.n	800605c <UART_SetConfig+0x1c0>
 8005f78:	231b      	movs	r3, #27
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	189b      	adds	r3, r3, r2
 8005f7e:	19db      	adds	r3, r3, r7
 8005f80:	2202      	movs	r2, #2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e06a      	b.n	800605c <UART_SetConfig+0x1c0>
 8005f86:	231b      	movs	r3, #27
 8005f88:	2220      	movs	r2, #32
 8005f8a:	189b      	adds	r3, r3, r2
 8005f8c:	19db      	adds	r3, r3, r7
 8005f8e:	2204      	movs	r2, #4
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e063      	b.n	800605c <UART_SetConfig+0x1c0>
 8005f94:	231b      	movs	r3, #27
 8005f96:	2220      	movs	r2, #32
 8005f98:	189b      	adds	r3, r3, r2
 8005f9a:	19db      	adds	r3, r3, r7
 8005f9c:	2208      	movs	r2, #8
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	e05c      	b.n	800605c <UART_SetConfig+0x1c0>
 8005fa2:	231b      	movs	r3, #27
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	189b      	adds	r3, r3, r2
 8005fa8:	19db      	adds	r3, r3, r7
 8005faa:	2210      	movs	r2, #16
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	e055      	b.n	800605c <UART_SetConfig+0x1c0>
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a90      	ldr	r2, [pc, #576]	@ (80061f8 <UART_SetConfig+0x35c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d106      	bne.n	8005fc8 <UART_SetConfig+0x12c>
 8005fba:	231b      	movs	r3, #27
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	19db      	adds	r3, r3, r7
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e049      	b.n	800605c <UART_SetConfig+0x1c0>
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a86      	ldr	r2, [pc, #536]	@ (80061e8 <UART_SetConfig+0x34c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d13e      	bne.n	8006050 <UART_SetConfig+0x1b4>
 8005fd2:	4b88      	ldr	r3, [pc, #544]	@ (80061f4 <UART_SetConfig+0x358>)
 8005fd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fd6:	23c0      	movs	r3, #192	@ 0xc0
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4013      	ands	r3, r2
 8005fdc:	22c0      	movs	r2, #192	@ 0xc0
 8005fde:	0112      	lsls	r2, r2, #4
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d027      	beq.n	8006034 <UART_SetConfig+0x198>
 8005fe4:	22c0      	movs	r2, #192	@ 0xc0
 8005fe6:	0112      	lsls	r2, r2, #4
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d82a      	bhi.n	8006042 <UART_SetConfig+0x1a6>
 8005fec:	2280      	movs	r2, #128	@ 0x80
 8005fee:	0112      	lsls	r2, r2, #4
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d011      	beq.n	8006018 <UART_SetConfig+0x17c>
 8005ff4:	2280      	movs	r2, #128	@ 0x80
 8005ff6:	0112      	lsls	r2, r2, #4
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d822      	bhi.n	8006042 <UART_SetConfig+0x1a6>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <UART_SetConfig+0x16e>
 8006000:	2280      	movs	r2, #128	@ 0x80
 8006002:	00d2      	lsls	r2, r2, #3
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <UART_SetConfig+0x18a>
 8006008:	e01b      	b.n	8006042 <UART_SetConfig+0x1a6>
 800600a:	231b      	movs	r3, #27
 800600c:	2220      	movs	r2, #32
 800600e:	189b      	adds	r3, r3, r2
 8006010:	19db      	adds	r3, r3, r7
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e021      	b.n	800605c <UART_SetConfig+0x1c0>
 8006018:	231b      	movs	r3, #27
 800601a:	2220      	movs	r2, #32
 800601c:	189b      	adds	r3, r3, r2
 800601e:	19db      	adds	r3, r3, r7
 8006020:	2202      	movs	r2, #2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e01a      	b.n	800605c <UART_SetConfig+0x1c0>
 8006026:	231b      	movs	r3, #27
 8006028:	2220      	movs	r2, #32
 800602a:	189b      	adds	r3, r3, r2
 800602c:	19db      	adds	r3, r3, r7
 800602e:	2204      	movs	r2, #4
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e013      	b.n	800605c <UART_SetConfig+0x1c0>
 8006034:	231b      	movs	r3, #27
 8006036:	2220      	movs	r2, #32
 8006038:	189b      	adds	r3, r3, r2
 800603a:	19db      	adds	r3, r3, r7
 800603c:	2208      	movs	r2, #8
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	e00c      	b.n	800605c <UART_SetConfig+0x1c0>
 8006042:	231b      	movs	r3, #27
 8006044:	2220      	movs	r2, #32
 8006046:	189b      	adds	r3, r3, r2
 8006048:	19db      	adds	r3, r3, r7
 800604a:	2210      	movs	r2, #16
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e005      	b.n	800605c <UART_SetConfig+0x1c0>
 8006050:	231b      	movs	r3, #27
 8006052:	2220      	movs	r2, #32
 8006054:	189b      	adds	r3, r3, r2
 8006056:	19db      	adds	r3, r3, r7
 8006058:	2210      	movs	r2, #16
 800605a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a61      	ldr	r2, [pc, #388]	@ (80061e8 <UART_SetConfig+0x34c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d000      	beq.n	8006068 <UART_SetConfig+0x1cc>
 8006066:	e092      	b.n	800618e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006068:	231b      	movs	r3, #27
 800606a:	2220      	movs	r2, #32
 800606c:	189b      	adds	r3, r3, r2
 800606e:	19db      	adds	r3, r3, r7
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b08      	cmp	r3, #8
 8006074:	d015      	beq.n	80060a2 <UART_SetConfig+0x206>
 8006076:	dc18      	bgt.n	80060aa <UART_SetConfig+0x20e>
 8006078:	2b04      	cmp	r3, #4
 800607a:	d00d      	beq.n	8006098 <UART_SetConfig+0x1fc>
 800607c:	dc15      	bgt.n	80060aa <UART_SetConfig+0x20e>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <UART_SetConfig+0x1ec>
 8006082:	2b02      	cmp	r3, #2
 8006084:	d005      	beq.n	8006092 <UART_SetConfig+0x1f6>
 8006086:	e010      	b.n	80060aa <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7ff fc60 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 800608c:	0003      	movs	r3, r0
 800608e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006090:	e014      	b.n	80060bc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006092:	4b5a      	ldr	r3, [pc, #360]	@ (80061fc <UART_SetConfig+0x360>)
 8006094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006096:	e011      	b.n	80060bc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006098:	f7ff fbcc 	bl	8005834 <HAL_RCC_GetSysClockFreq>
 800609c:	0003      	movs	r3, r0
 800609e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060a0:	e00c      	b.n	80060bc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	2380      	movs	r3, #128	@ 0x80
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060a8:	e008      	b.n	80060bc <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80060ae:	231a      	movs	r3, #26
 80060b0:	2220      	movs	r2, #32
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	19db      	adds	r3, r3, r7
 80060b6:	2201      	movs	r2, #1
 80060b8:	701a      	strb	r2, [r3, #0]
        break;
 80060ba:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d100      	bne.n	80060c4 <UART_SetConfig+0x228>
 80060c2:	e147      	b.n	8006354 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006200 <UART_SetConfig+0x364>)
 80060ca:	0052      	lsls	r2, r2, #1
 80060cc:	5ad3      	ldrh	r3, [r2, r3]
 80060ce:	0019      	movs	r1, r3
 80060d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80060d2:	f7fa f831 	bl	8000138 <__udivsi3>
 80060d6:	0003      	movs	r3, r0
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	0013      	movs	r3, r2
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	189b      	adds	r3, r3, r2
 80060e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d305      	bcc.n	80060f6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d906      	bls.n	8006104 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80060f6:	231a      	movs	r3, #26
 80060f8:	2220      	movs	r2, #32
 80060fa:	189b      	adds	r3, r3, r2
 80060fc:	19db      	adds	r3, r3, r7
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e127      	b.n	8006354 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	2300      	movs	r3, #0
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006110:	4b3b      	ldr	r3, [pc, #236]	@ (8006200 <UART_SetConfig+0x364>)
 8006112:	0052      	lsls	r2, r2, #1
 8006114:	5ad3      	ldrh	r3, [r2, r3]
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	69b8      	ldr	r0, [r7, #24]
 8006122:	69f9      	ldr	r1, [r7, #28]
 8006124:	f7fa f9bc 	bl	80004a0 <__aeabi_uldivmod>
 8006128:	0002      	movs	r2, r0
 800612a:	000b      	movs	r3, r1
 800612c:	0e11      	lsrs	r1, r2, #24
 800612e:	021d      	lsls	r5, r3, #8
 8006130:	430d      	orrs	r5, r1
 8006132:	0214      	lsls	r4, r2, #8
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	68b8      	ldr	r0, [r7, #8]
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	1900      	adds	r0, r0, r4
 8006146:	4169      	adcs	r1, r5
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f7fa f9a3 	bl	80004a0 <__aeabi_uldivmod>
 800615a:	0002      	movs	r2, r0
 800615c:	000b      	movs	r3, r1
 800615e:	0013      	movs	r3, r2
 8006160:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006164:	23c0      	movs	r3, #192	@ 0xc0
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	429a      	cmp	r2, r3
 800616a:	d309      	bcc.n	8006180 <UART_SetConfig+0x2e4>
 800616c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800616e:	2380      	movs	r3, #128	@ 0x80
 8006170:	035b      	lsls	r3, r3, #13
 8006172:	429a      	cmp	r2, r3
 8006174:	d204      	bcs.n	8006180 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800617c:	60da      	str	r2, [r3, #12]
 800617e:	e0e9      	b.n	8006354 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006180:	231a      	movs	r3, #26
 8006182:	2220      	movs	r2, #32
 8006184:	189b      	adds	r3, r3, r2
 8006186:	19db      	adds	r3, r3, r7
 8006188:	2201      	movs	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	e0e2      	b.n	8006354 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	69da      	ldr	r2, [r3, #28]
 8006192:	2380      	movs	r3, #128	@ 0x80
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	429a      	cmp	r2, r3
 8006198:	d000      	beq.n	800619c <UART_SetConfig+0x300>
 800619a:	e083      	b.n	80062a4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800619c:	231b      	movs	r3, #27
 800619e:	2220      	movs	r2, #32
 80061a0:	189b      	adds	r3, r3, r2
 80061a2:	19db      	adds	r3, r3, r7
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d015      	beq.n	80061d6 <UART_SetConfig+0x33a>
 80061aa:	dc2b      	bgt.n	8006204 <UART_SetConfig+0x368>
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d00d      	beq.n	80061cc <UART_SetConfig+0x330>
 80061b0:	dc28      	bgt.n	8006204 <UART_SetConfig+0x368>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <UART_SetConfig+0x320>
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d005      	beq.n	80061c6 <UART_SetConfig+0x32a>
 80061ba:	e023      	b.n	8006204 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061bc:	f7ff fbc6 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 80061c0:	0003      	movs	r3, r0
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061c4:	e027      	b.n	8006216 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c6:	4b0d      	ldr	r3, [pc, #52]	@ (80061fc <UART_SetConfig+0x360>)
 80061c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ca:	e024      	b.n	8006216 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061cc:	f7ff fb32 	bl	8005834 <HAL_RCC_GetSysClockFreq>
 80061d0:	0003      	movs	r3, r0
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061d4:	e01f      	b.n	8006216 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d6:	2380      	movs	r3, #128	@ 0x80
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061dc:	e01b      	b.n	8006216 <UART_SetConfig+0x37a>
 80061de:	46c0      	nop			@ (mov r8, r8)
 80061e0:	cfff69f3 	.word	0xcfff69f3
 80061e4:	ffffcfff 	.word	0xffffcfff
 80061e8:	40008000 	.word	0x40008000
 80061ec:	11fff4ff 	.word	0x11fff4ff
 80061f0:	40013800 	.word	0x40013800
 80061f4:	40021000 	.word	0x40021000
 80061f8:	40004400 	.word	0x40004400
 80061fc:	00f42400 	.word	0x00f42400
 8006200:	08009620 	.word	0x08009620
      default:
        pclk = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006208:	231a      	movs	r3, #26
 800620a:	2220      	movs	r2, #32
 800620c:	189b      	adds	r3, r3, r2
 800620e:	19db      	adds	r3, r3, r7
 8006210:	2201      	movs	r2, #1
 8006212:	701a      	strb	r2, [r3, #0]
        break;
 8006214:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	d100      	bne.n	800621e <UART_SetConfig+0x382>
 800621c:	e09a      	b.n	8006354 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006222:	4b58      	ldr	r3, [pc, #352]	@ (8006384 <UART_SetConfig+0x4e8>)
 8006224:	0052      	lsls	r2, r2, #1
 8006226:	5ad3      	ldrh	r3, [r2, r3]
 8006228:	0019      	movs	r1, r3
 800622a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800622c:	f7f9 ff84 	bl	8000138 <__udivsi3>
 8006230:	0003      	movs	r3, r0
 8006232:	005a      	lsls	r2, r3, #1
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	18d2      	adds	r2, r2, r3
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	0019      	movs	r1, r3
 8006242:	0010      	movs	r0, r2
 8006244:	f7f9 ff78 	bl	8000138 <__udivsi3>
 8006248:	0003      	movs	r3, r0
 800624a:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	2b0f      	cmp	r3, #15
 8006250:	d921      	bls.n	8006296 <UART_SetConfig+0x3fa>
 8006252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	025b      	lsls	r3, r3, #9
 8006258:	429a      	cmp	r2, r3
 800625a:	d21c      	bcs.n	8006296 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	b29a      	uxth	r2, r3
 8006260:	200e      	movs	r0, #14
 8006262:	2420      	movs	r4, #32
 8006264:	1903      	adds	r3, r0, r4
 8006266:	19db      	adds	r3, r3, r7
 8006268:	210f      	movs	r1, #15
 800626a:	438a      	bics	r2, r1
 800626c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	085b      	lsrs	r3, r3, #1
 8006272:	b29b      	uxth	r3, r3
 8006274:	2207      	movs	r2, #7
 8006276:	4013      	ands	r3, r2
 8006278:	b299      	uxth	r1, r3
 800627a:	1903      	adds	r3, r0, r4
 800627c:	19db      	adds	r3, r3, r7
 800627e:	1902      	adds	r2, r0, r4
 8006280:	19d2      	adds	r2, r2, r7
 8006282:	8812      	ldrh	r2, [r2, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	1902      	adds	r2, r0, r4
 800628e:	19d2      	adds	r2, r2, r7
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	60da      	str	r2, [r3, #12]
 8006294:	e05e      	b.n	8006354 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006296:	231a      	movs	r3, #26
 8006298:	2220      	movs	r2, #32
 800629a:	189b      	adds	r3, r3, r2
 800629c:	19db      	adds	r3, r3, r7
 800629e:	2201      	movs	r2, #1
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e057      	b.n	8006354 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062a4:	231b      	movs	r3, #27
 80062a6:	2220      	movs	r2, #32
 80062a8:	189b      	adds	r3, r3, r2
 80062aa:	19db      	adds	r3, r3, r7
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d015      	beq.n	80062de <UART_SetConfig+0x442>
 80062b2:	dc18      	bgt.n	80062e6 <UART_SetConfig+0x44a>
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d00d      	beq.n	80062d4 <UART_SetConfig+0x438>
 80062b8:	dc15      	bgt.n	80062e6 <UART_SetConfig+0x44a>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <UART_SetConfig+0x428>
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d005      	beq.n	80062ce <UART_SetConfig+0x432>
 80062c2:	e010      	b.n	80062e6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c4:	f7ff fb42 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 80062c8:	0003      	movs	r3, r0
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062cc:	e014      	b.n	80062f8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ce:	4b2e      	ldr	r3, [pc, #184]	@ (8006388 <UART_SetConfig+0x4ec>)
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062d2:	e011      	b.n	80062f8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d4:	f7ff faae 	bl	8005834 <HAL_RCC_GetSysClockFreq>
 80062d8:	0003      	movs	r3, r0
 80062da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062dc:	e00c      	b.n	80062f8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062de:	2380      	movs	r3, #128	@ 0x80
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062e4:	e008      	b.n	80062f8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80062ea:	231a      	movs	r3, #26
 80062ec:	2220      	movs	r2, #32
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
        break;
 80062f6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d02a      	beq.n	8006354 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006302:	4b20      	ldr	r3, [pc, #128]	@ (8006384 <UART_SetConfig+0x4e8>)
 8006304:	0052      	lsls	r2, r2, #1
 8006306:	5ad3      	ldrh	r3, [r2, r3]
 8006308:	0019      	movs	r1, r3
 800630a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800630c:	f7f9 ff14 	bl	8000138 <__udivsi3>
 8006310:	0003      	movs	r3, r0
 8006312:	001a      	movs	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	18d2      	adds	r2, r2, r3
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	0019      	movs	r1, r3
 8006322:	0010      	movs	r0, r2
 8006324:	f7f9 ff08 	bl	8000138 <__udivsi3>
 8006328:	0003      	movs	r3, r0
 800632a:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d90a      	bls.n	8006348 <UART_SetConfig+0x4ac>
 8006332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006334:	2380      	movs	r3, #128	@ 0x80
 8006336:	025b      	lsls	r3, r3, #9
 8006338:	429a      	cmp	r2, r3
 800633a:	d205      	bcs.n	8006348 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	b29a      	uxth	r2, r3
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	e005      	b.n	8006354 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006348:	231a      	movs	r3, #26
 800634a:	2220      	movs	r2, #32
 800634c:	189b      	adds	r3, r3, r2
 800634e:	19db      	adds	r3, r3, r7
 8006350:	2201      	movs	r2, #1
 8006352:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	226a      	movs	r2, #106	@ 0x6a
 8006358:	2101      	movs	r1, #1
 800635a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	2268      	movs	r2, #104	@ 0x68
 8006360:	2101      	movs	r1, #1
 8006362:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	2200      	movs	r2, #0
 8006368:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	2200      	movs	r2, #0
 800636e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006370:	231a      	movs	r3, #26
 8006372:	2220      	movs	r2, #32
 8006374:	189b      	adds	r3, r3, r2
 8006376:	19db      	adds	r3, r3, r7
 8006378:	781b      	ldrb	r3, [r3, #0]
}
 800637a:	0018      	movs	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	b010      	add	sp, #64	@ 0x40
 8006380:	bdb0      	pop	{r4, r5, r7, pc}
 8006382:	46c0      	nop			@ (mov r8, r8)
 8006384:	08009620 	.word	0x08009620
 8006388:	00f42400 	.word	0x00f42400

0800638c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006398:	2208      	movs	r2, #8
 800639a:	4013      	ands	r3, r2
 800639c:	d00b      	beq.n	80063b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a4a      	ldr	r2, [pc, #296]	@ (80064d0 <UART_AdvFeatureConfig+0x144>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	0019      	movs	r1, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ba:	2201      	movs	r2, #1
 80063bc:	4013      	ands	r3, r2
 80063be:	d00b      	beq.n	80063d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	4a43      	ldr	r2, [pc, #268]	@ (80064d4 <UART_AdvFeatureConfig+0x148>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	0019      	movs	r1, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	2202      	movs	r2, #2
 80063de:	4013      	ands	r3, r2
 80063e0:	d00b      	beq.n	80063fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	4a3b      	ldr	r2, [pc, #236]	@ (80064d8 <UART_AdvFeatureConfig+0x14c>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	0019      	movs	r1, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fe:	2204      	movs	r2, #4
 8006400:	4013      	ands	r3, r2
 8006402:	d00b      	beq.n	800641c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4a34      	ldr	r2, [pc, #208]	@ (80064dc <UART_AdvFeatureConfig+0x150>)
 800640c:	4013      	ands	r3, r2
 800640e:	0019      	movs	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	2210      	movs	r2, #16
 8006422:	4013      	ands	r3, r2
 8006424:	d00b      	beq.n	800643e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	4a2c      	ldr	r2, [pc, #176]	@ (80064e0 <UART_AdvFeatureConfig+0x154>)
 800642e:	4013      	ands	r3, r2
 8006430:	0019      	movs	r1, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006442:	2220      	movs	r2, #32
 8006444:	4013      	ands	r3, r2
 8006446:	d00b      	beq.n	8006460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	4a25      	ldr	r2, [pc, #148]	@ (80064e4 <UART_AdvFeatureConfig+0x158>)
 8006450:	4013      	ands	r3, r2
 8006452:	0019      	movs	r1, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006464:	2240      	movs	r2, #64	@ 0x40
 8006466:	4013      	ands	r3, r2
 8006468:	d01d      	beq.n	80064a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a1d      	ldr	r2, [pc, #116]	@ (80064e8 <UART_AdvFeatureConfig+0x15c>)
 8006472:	4013      	ands	r3, r2
 8006474:	0019      	movs	r1, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006486:	2380      	movs	r3, #128	@ 0x80
 8006488:	035b      	lsls	r3, r3, #13
 800648a:	429a      	cmp	r2, r3
 800648c:	d10b      	bne.n	80064a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4a15      	ldr	r2, [pc, #84]	@ (80064ec <UART_AdvFeatureConfig+0x160>)
 8006496:	4013      	ands	r3, r2
 8006498:	0019      	movs	r1, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064aa:	2280      	movs	r2, #128	@ 0x80
 80064ac:	4013      	ands	r3, r2
 80064ae:	d00b      	beq.n	80064c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4a0e      	ldr	r2, [pc, #56]	@ (80064f0 <UART_AdvFeatureConfig+0x164>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	0019      	movs	r1, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }
}
 80064c8:	46c0      	nop			@ (mov r8, r8)
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b002      	add	sp, #8
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	ffff7fff 	.word	0xffff7fff
 80064d4:	fffdffff 	.word	0xfffdffff
 80064d8:	fffeffff 	.word	0xfffeffff
 80064dc:	fffbffff 	.word	0xfffbffff
 80064e0:	ffffefff 	.word	0xffffefff
 80064e4:	ffffdfff 	.word	0xffffdfff
 80064e8:	ffefffff 	.word	0xffefffff
 80064ec:	ff9fffff 	.word	0xff9fffff
 80064f0:	fff7ffff 	.word	0xfff7ffff

080064f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b092      	sub	sp, #72	@ 0x48
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2290      	movs	r2, #144	@ 0x90
 8006500:	2100      	movs	r1, #0
 8006502:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006504:	f7fc fef4 	bl	80032f0 <HAL_GetTick>
 8006508:	0003      	movs	r3, r0
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2208      	movs	r2, #8
 8006514:	4013      	ands	r3, r2
 8006516:	2b08      	cmp	r3, #8
 8006518:	d12d      	bne.n	8006576 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800651a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651c:	2280      	movs	r2, #128	@ 0x80
 800651e:	0391      	lsls	r1, r2, #14
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4a47      	ldr	r2, [pc, #284]	@ (8006640 <UART_CheckIdleState+0x14c>)
 8006524:	9200      	str	r2, [sp, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	f000 f88e 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 800652c:	1e03      	subs	r3, r0, #0
 800652e:	d022      	beq.n	8006576 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006530:	f3ef 8310 	mrs	r3, PRIMASK
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800653a:	2301      	movs	r3, #1
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006540:	f383 8810 	msr	PRIMASK, r3
}
 8006544:	46c0      	nop			@ (mov r8, r8)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2180      	movs	r1, #128	@ 0x80
 8006552:	438a      	bics	r2, r1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655c:	f383 8810 	msr	PRIMASK, r3
}
 8006560:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2288      	movs	r2, #136	@ 0x88
 8006566:	2120      	movs	r1, #32
 8006568:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2284      	movs	r2, #132	@ 0x84
 800656e:	2100      	movs	r1, #0
 8006570:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e060      	b.n	8006638 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2204      	movs	r2, #4
 800657e:	4013      	ands	r3, r2
 8006580:	2b04      	cmp	r3, #4
 8006582:	d146      	bne.n	8006612 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006586:	2280      	movs	r2, #128	@ 0x80
 8006588:	03d1      	lsls	r1, r2, #15
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4a2c      	ldr	r2, [pc, #176]	@ (8006640 <UART_CheckIdleState+0x14c>)
 800658e:	9200      	str	r2, [sp, #0]
 8006590:	2200      	movs	r2, #0
 8006592:	f000 f859 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 8006596:	1e03      	subs	r3, r0, #0
 8006598:	d03b      	beq.n	8006612 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659a:	f3ef 8310 	mrs	r3, PRIMASK
 800659e:	60fb      	str	r3, [r7, #12]
  return(result);
 80065a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a4:	2301      	movs	r3, #1
 80065a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f383 8810 	msr	PRIMASK, r3
}
 80065ae:	46c0      	nop			@ (mov r8, r8)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4922      	ldr	r1, [pc, #136]	@ (8006644 <UART_CheckIdleState+0x150>)
 80065bc:	400a      	ands	r2, r1
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f383 8810 	msr	PRIMASK, r3
}
 80065ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065cc:	f3ef 8310 	mrs	r3, PRIMASK
 80065d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80065d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d6:	2301      	movs	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f383 8810 	msr	PRIMASK, r3
}
 80065e0:	46c0      	nop			@ (mov r8, r8)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2101      	movs	r1, #1
 80065ee:	438a      	bics	r2, r1
 80065f0:	609a      	str	r2, [r3, #8]
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	f383 8810 	msr	PRIMASK, r3
}
 80065fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	228c      	movs	r2, #140	@ 0x8c
 8006602:	2120      	movs	r1, #32
 8006604:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2284      	movs	r2, #132	@ 0x84
 800660a:	2100      	movs	r1, #0
 800660c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e012      	b.n	8006638 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2288      	movs	r2, #136	@ 0x88
 8006616:	2120      	movs	r1, #32
 8006618:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	228c      	movs	r2, #140	@ 0x8c
 800661e:	2120      	movs	r1, #32
 8006620:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2284      	movs	r2, #132	@ 0x84
 8006632:	2100      	movs	r1, #0
 8006634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	0018      	movs	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	b010      	add	sp, #64	@ 0x40
 800663e:	bd80      	pop	{r7, pc}
 8006640:	01ffffff 	.word	0x01ffffff
 8006644:	fffffedf 	.word	0xfffffedf

08006648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	1dfb      	adds	r3, r7, #7
 8006656:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006658:	e051      	b.n	80066fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	3301      	adds	r3, #1
 800665e:	d04e      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006660:	f7fc fe46 	bl	80032f0 <HAL_GetTick>
 8006664:	0002      	movs	r2, r0
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	429a      	cmp	r2, r3
 800666e:	d302      	bcc.n	8006676 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e051      	b.n	800671e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2204      	movs	r2, #4
 8006682:	4013      	ands	r3, r2
 8006684:	d03b      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b80      	cmp	r3, #128	@ 0x80
 800668a:	d038      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b40      	cmp	r3, #64	@ 0x40
 8006690:	d035      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	2208      	movs	r2, #8
 800669a:	4013      	ands	r3, r2
 800669c:	2b08      	cmp	r3, #8
 800669e:	d111      	bne.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2208      	movs	r2, #8
 80066a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 f83c 	bl	8006728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2290      	movs	r2, #144	@ 0x90
 80066b4:	2108      	movs	r1, #8
 80066b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2284      	movs	r2, #132	@ 0x84
 80066bc:	2100      	movs	r1, #0
 80066be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e02c      	b.n	800671e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	2380      	movs	r3, #128	@ 0x80
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	401a      	ands	r2, r3
 80066d0:	2380      	movs	r3, #128	@ 0x80
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d112      	bne.n	80066fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2280      	movs	r2, #128	@ 0x80
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	0018      	movs	r0, r3
 80066e6:	f000 f81f 	bl	8006728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2290      	movs	r2, #144	@ 0x90
 80066ee:	2120      	movs	r1, #32
 80066f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2284      	movs	r2, #132	@ 0x84
 80066f6:	2100      	movs	r1, #0
 80066f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e00f      	b.n	800671e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	4013      	ands	r3, r2
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	425a      	negs	r2, r3
 800670e:	4153      	adcs	r3, r2
 8006710:	b2db      	uxtb	r3, r3
 8006712:	001a      	movs	r2, r3
 8006714:	1dfb      	adds	r3, r7, #7
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d09e      	beq.n	800665a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b004      	add	sp, #16
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08e      	sub	sp, #56	@ 0x38
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006730:	f3ef 8310 	mrs	r3, PRIMASK
 8006734:	617b      	str	r3, [r7, #20]
  return(result);
 8006736:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
 800673a:	2301      	movs	r3, #1
 800673c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	f383 8810 	msr	PRIMASK, r3
}
 8006744:	46c0      	nop			@ (mov r8, r8)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4926      	ldr	r1, [pc, #152]	@ (80067ec <UART_EndRxTransfer+0xc4>)
 8006752:	400a      	ands	r2, r1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f383 8810 	msr	PRIMASK, r3
}
 8006760:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006762:	f3ef 8310 	mrs	r3, PRIMASK
 8006766:	623b      	str	r3, [r7, #32]
  return(result);
 8006768:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800676a:	633b      	str	r3, [r7, #48]	@ 0x30
 800676c:	2301      	movs	r3, #1
 800676e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	f383 8810 	msr	PRIMASK, r3
}
 8006776:	46c0      	nop			@ (mov r8, r8)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	491b      	ldr	r1, [pc, #108]	@ (80067f0 <UART_EndRxTransfer+0xc8>)
 8006784:	400a      	ands	r2, r1
 8006786:	609a      	str	r2, [r3, #8]
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678e:	f383 8810 	msr	PRIMASK, r3
}
 8006792:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d118      	bne.n	80067ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800679c:	f3ef 8310 	mrs	r3, PRIMASK
 80067a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80067a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067a6:	2301      	movs	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f383 8810 	msr	PRIMASK, r3
}
 80067b0:	46c0      	nop			@ (mov r8, r8)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2110      	movs	r1, #16
 80067be:	438a      	bics	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f383 8810 	msr	PRIMASK, r3
}
 80067cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	228c      	movs	r2, #140	@ 0x8c
 80067d2:	2120      	movs	r1, #32
 80067d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b00e      	add	sp, #56	@ 0x38
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			@ (mov r8, r8)
 80067ec:	fffffedf 	.word	0xfffffedf
 80067f0:	effffffe 	.word	0xeffffffe

080067f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2284      	movs	r2, #132	@ 0x84
 8006800:	5c9b      	ldrb	r3, [r3, r2]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_UARTEx_DisableFifoMode+0x16>
 8006806:	2302      	movs	r3, #2
 8006808:	e027      	b.n	800685a <HAL_UARTEx_DisableFifoMode+0x66>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2284      	movs	r2, #132	@ 0x84
 800680e:	2101      	movs	r1, #1
 8006810:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2288      	movs	r2, #136	@ 0x88
 8006816:	2124      	movs	r1, #36	@ 0x24
 8006818:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2101      	movs	r1, #1
 800682e:	438a      	bics	r2, r1
 8006830:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a0b      	ldr	r2, [pc, #44]	@ (8006864 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006836:	4013      	ands	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2288      	movs	r2, #136	@ 0x88
 800684c:	2120      	movs	r1, #32
 800684e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2284      	movs	r2, #132	@ 0x84
 8006854:	2100      	movs	r1, #0
 8006856:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b004      	add	sp, #16
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	dfffffff 	.word	0xdfffffff

08006868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2284      	movs	r2, #132	@ 0x84
 8006876:	5c9b      	ldrb	r3, [r3, r2]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800687c:	2302      	movs	r3, #2
 800687e:	e02e      	b.n	80068de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2284      	movs	r2, #132	@ 0x84
 8006884:	2101      	movs	r1, #1
 8006886:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2288      	movs	r2, #136	@ 0x88
 800688c:	2124      	movs	r1, #36	@ 0x24
 800688e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2101      	movs	r1, #1
 80068a4:	438a      	bics	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	08d9      	lsrs	r1, r3, #3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	0018      	movs	r0, r3
 80068c0:	f000 f854 	bl	800696c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2288      	movs	r2, #136	@ 0x88
 80068d0:	2120      	movs	r1, #32
 80068d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2284      	movs	r2, #132	@ 0x84
 80068d8:	2100      	movs	r1, #0
 80068da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	0018      	movs	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b004      	add	sp, #16
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2284      	movs	r2, #132	@ 0x84
 80068f6:	5c9b      	ldrb	r3, [r3, r2]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e02f      	b.n	8006960 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2284      	movs	r2, #132	@ 0x84
 8006904:	2101      	movs	r1, #1
 8006906:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2288      	movs	r2, #136	@ 0x88
 800690c:	2124      	movs	r1, #36	@ 0x24
 800690e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2101      	movs	r1, #1
 8006924:	438a      	bics	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	4a0e      	ldr	r2, [pc, #56]	@ (8006968 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006930:	4013      	ands	r3, r2
 8006932:	0019      	movs	r1, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0018      	movs	r0, r3
 8006942:	f000 f813 	bl	800696c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2288      	movs	r2, #136	@ 0x88
 8006952:	2120      	movs	r1, #32
 8006954:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2284      	movs	r2, #132	@ 0x84
 800695a:	2100      	movs	r1, #0
 800695c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	0018      	movs	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	b004      	add	sp, #16
 8006966:	bd80      	pop	{r7, pc}
 8006968:	f1ffffff 	.word	0xf1ffffff

0800696c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006978:	2b00      	cmp	r3, #0
 800697a:	d108      	bne.n	800698e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	226a      	movs	r2, #106	@ 0x6a
 8006980:	2101      	movs	r1, #1
 8006982:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2268      	movs	r2, #104	@ 0x68
 8006988:	2101      	movs	r1, #1
 800698a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800698c:	e043      	b.n	8006a16 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800698e:	260f      	movs	r6, #15
 8006990:	19bb      	adds	r3, r7, r6
 8006992:	2208      	movs	r2, #8
 8006994:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006996:	200e      	movs	r0, #14
 8006998:	183b      	adds	r3, r7, r0
 800699a:	2208      	movs	r2, #8
 800699c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	0e5b      	lsrs	r3, r3, #25
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	240d      	movs	r4, #13
 80069aa:	193b      	adds	r3, r7, r4
 80069ac:	2107      	movs	r1, #7
 80069ae:	400a      	ands	r2, r1
 80069b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	0f5b      	lsrs	r3, r3, #29
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	250c      	movs	r5, #12
 80069be:	197b      	adds	r3, r7, r5
 80069c0:	2107      	movs	r1, #7
 80069c2:	400a      	ands	r2, r1
 80069c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069c6:	183b      	adds	r3, r7, r0
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	197a      	adds	r2, r7, r5
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	4914      	ldr	r1, [pc, #80]	@ (8006a20 <UARTEx_SetNbDataToProcess+0xb4>)
 80069d0:	5c8a      	ldrb	r2, [r1, r2]
 80069d2:	435a      	muls	r2, r3
 80069d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80069d6:	197b      	adds	r3, r7, r5
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	4a12      	ldr	r2, [pc, #72]	@ (8006a24 <UARTEx_SetNbDataToProcess+0xb8>)
 80069dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069de:	0019      	movs	r1, r3
 80069e0:	f7f9 fc34 	bl	800024c <__divsi3>
 80069e4:	0003      	movs	r3, r0
 80069e6:	b299      	uxth	r1, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	226a      	movs	r2, #106	@ 0x6a
 80069ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069ee:	19bb      	adds	r3, r7, r6
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	193a      	adds	r2, r7, r4
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	490a      	ldr	r1, [pc, #40]	@ (8006a20 <UARTEx_SetNbDataToProcess+0xb4>)
 80069f8:	5c8a      	ldrb	r2, [r1, r2]
 80069fa:	435a      	muls	r2, r3
 80069fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80069fe:	193b      	adds	r3, r7, r4
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	4a08      	ldr	r2, [pc, #32]	@ (8006a24 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a06:	0019      	movs	r1, r3
 8006a08:	f7f9 fc20 	bl	800024c <__divsi3>
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	b299      	uxth	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2268      	movs	r2, #104	@ 0x68
 8006a14:	5299      	strh	r1, [r3, r2]
}
 8006a16:	46c0      	nop			@ (mov r8, r8)
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	b005      	add	sp, #20
 8006a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	08009638 	.word	0x08009638
 8006a24:	08009640 	.word	0x08009640

08006a28 <__cvt>:
 8006a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2a:	001f      	movs	r7, r3
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	0016      	movs	r6, r2
 8006a30:	b08b      	sub	sp, #44	@ 0x2c
 8006a32:	429f      	cmp	r7, r3
 8006a34:	da04      	bge.n	8006a40 <__cvt+0x18>
 8006a36:	2180      	movs	r1, #128	@ 0x80
 8006a38:	0609      	lsls	r1, r1, #24
 8006a3a:	187b      	adds	r3, r7, r1
 8006a3c:	001f      	movs	r7, r3
 8006a3e:	232d      	movs	r3, #45	@ 0x2d
 8006a40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a42:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006a44:	7013      	strb	r3, [r2, #0]
 8006a46:	2320      	movs	r3, #32
 8006a48:	2203      	movs	r2, #3
 8006a4a:	439d      	bics	r5, r3
 8006a4c:	2d46      	cmp	r5, #70	@ 0x46
 8006a4e:	d007      	beq.n	8006a60 <__cvt+0x38>
 8006a50:	002b      	movs	r3, r5
 8006a52:	3b45      	subs	r3, #69	@ 0x45
 8006a54:	4259      	negs	r1, r3
 8006a56:	414b      	adcs	r3, r1
 8006a58:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006a5a:	3a01      	subs	r2, #1
 8006a5c:	18cb      	adds	r3, r1, r3
 8006a5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a60:	ab09      	add	r3, sp, #36	@ 0x24
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	ab08      	add	r3, sp, #32
 8006a66:	9303      	str	r3, [sp, #12]
 8006a68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a6a:	9200      	str	r2, [sp, #0]
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a70:	0032      	movs	r2, r6
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	003b      	movs	r3, r7
 8006a76:	f000 ff69 	bl	800794c <_dtoa_r>
 8006a7a:	0004      	movs	r4, r0
 8006a7c:	2d47      	cmp	r5, #71	@ 0x47
 8006a7e:	d11b      	bne.n	8006ab8 <__cvt+0x90>
 8006a80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a82:	07db      	lsls	r3, r3, #31
 8006a84:	d511      	bpl.n	8006aaa <__cvt+0x82>
 8006a86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a88:	18c3      	adds	r3, r0, r3
 8006a8a:	9307      	str	r3, [sp, #28]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	0030      	movs	r0, r6
 8006a92:	0039      	movs	r1, r7
 8006a94:	f7f9 fcd6 	bl	8000444 <__aeabi_dcmpeq>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d001      	beq.n	8006aa0 <__cvt+0x78>
 8006a9c:	9b07      	ldr	r3, [sp, #28]
 8006a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aa0:	2230      	movs	r2, #48	@ 0x30
 8006aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa4:	9907      	ldr	r1, [sp, #28]
 8006aa6:	428b      	cmp	r3, r1
 8006aa8:	d320      	bcc.n	8006aec <__cvt+0xc4>
 8006aaa:	0020      	movs	r0, r4
 8006aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006ab0:	1b1b      	subs	r3, r3, r4
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	b00b      	add	sp, #44	@ 0x2c
 8006ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006aba:	18c3      	adds	r3, r0, r3
 8006abc:	9307      	str	r3, [sp, #28]
 8006abe:	2d46      	cmp	r5, #70	@ 0x46
 8006ac0:	d1e4      	bne.n	8006a8c <__cvt+0x64>
 8006ac2:	7803      	ldrb	r3, [r0, #0]
 8006ac4:	2b30      	cmp	r3, #48	@ 0x30
 8006ac6:	d10c      	bne.n	8006ae2 <__cvt+0xba>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	0030      	movs	r0, r6
 8006ace:	0039      	movs	r1, r7
 8006ad0:	f7f9 fcb8 	bl	8000444 <__aeabi_dcmpeq>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d104      	bne.n	8006ae2 <__cvt+0xba>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006adc:	1a9b      	subs	r3, r3, r2
 8006ade:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ae4:	9a07      	ldr	r2, [sp, #28]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	18d3      	adds	r3, r2, r3
 8006aea:	e7ce      	b.n	8006a8a <__cvt+0x62>
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	9109      	str	r1, [sp, #36]	@ 0x24
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	e7d6      	b.n	8006aa2 <__cvt+0x7a>

08006af4 <__exponent>:
 8006af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006af6:	232b      	movs	r3, #43	@ 0x2b
 8006af8:	0005      	movs	r5, r0
 8006afa:	000c      	movs	r4, r1
 8006afc:	b085      	sub	sp, #20
 8006afe:	7002      	strb	r2, [r0, #0]
 8006b00:	2900      	cmp	r1, #0
 8006b02:	da01      	bge.n	8006b08 <__exponent+0x14>
 8006b04:	424c      	negs	r4, r1
 8006b06:	3302      	adds	r3, #2
 8006b08:	706b      	strb	r3, [r5, #1]
 8006b0a:	2c09      	cmp	r4, #9
 8006b0c:	dd2c      	ble.n	8006b68 <__exponent+0x74>
 8006b0e:	ab02      	add	r3, sp, #8
 8006b10:	1dde      	adds	r6, r3, #7
 8006b12:	0020      	movs	r0, r4
 8006b14:	210a      	movs	r1, #10
 8006b16:	f7f9 fc7f 	bl	8000418 <__aeabi_idivmod>
 8006b1a:	0037      	movs	r7, r6
 8006b1c:	3130      	adds	r1, #48	@ 0x30
 8006b1e:	3e01      	subs	r6, #1
 8006b20:	0020      	movs	r0, r4
 8006b22:	7031      	strb	r1, [r6, #0]
 8006b24:	210a      	movs	r1, #10
 8006b26:	9401      	str	r4, [sp, #4]
 8006b28:	f7f9 fb90 	bl	800024c <__divsi3>
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	0004      	movs	r4, r0
 8006b30:	2b63      	cmp	r3, #99	@ 0x63
 8006b32:	dcee      	bgt.n	8006b12 <__exponent+0x1e>
 8006b34:	1eba      	subs	r2, r7, #2
 8006b36:	1ca8      	adds	r0, r5, #2
 8006b38:	0001      	movs	r1, r0
 8006b3a:	0013      	movs	r3, r2
 8006b3c:	3430      	adds	r4, #48	@ 0x30
 8006b3e:	7014      	strb	r4, [r2, #0]
 8006b40:	ac02      	add	r4, sp, #8
 8006b42:	3407      	adds	r4, #7
 8006b44:	429c      	cmp	r4, r3
 8006b46:	d80a      	bhi.n	8006b5e <__exponent+0x6a>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	42a2      	cmp	r2, r4
 8006b4c:	d803      	bhi.n	8006b56 <__exponent+0x62>
 8006b4e:	3309      	adds	r3, #9
 8006b50:	aa02      	add	r2, sp, #8
 8006b52:	189b      	adds	r3, r3, r2
 8006b54:	1bdb      	subs	r3, r3, r7
 8006b56:	18c0      	adds	r0, r0, r3
 8006b58:	1b40      	subs	r0, r0, r5
 8006b5a:	b005      	add	sp, #20
 8006b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5e:	781c      	ldrb	r4, [r3, #0]
 8006b60:	3301      	adds	r3, #1
 8006b62:	700c      	strb	r4, [r1, #0]
 8006b64:	3101      	adds	r1, #1
 8006b66:	e7eb      	b.n	8006b40 <__exponent+0x4c>
 8006b68:	2330      	movs	r3, #48	@ 0x30
 8006b6a:	18e4      	adds	r4, r4, r3
 8006b6c:	70ab      	strb	r3, [r5, #2]
 8006b6e:	1d28      	adds	r0, r5, #4
 8006b70:	70ec      	strb	r4, [r5, #3]
 8006b72:	e7f1      	b.n	8006b58 <__exponent+0x64>

08006b74 <_printf_float>:
 8006b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b76:	b097      	sub	sp, #92	@ 0x5c
 8006b78:	000d      	movs	r5, r1
 8006b7a:	920a      	str	r2, [sp, #40]	@ 0x28
 8006b7c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8006b7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b80:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b82:	f000 fdcb 	bl	800771c <_localeconv_r>
 8006b86:	6803      	ldr	r3, [r0, #0]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006b8c:	f7f9 fab8 	bl	8000100 <strlen>
 8006b90:	2300      	movs	r3, #0
 8006b92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006b94:	9314      	str	r3, [sp, #80]	@ 0x50
 8006b96:	7e2b      	ldrb	r3, [r5, #24]
 8006b98:	2207      	movs	r2, #7
 8006b9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ba0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	05c9      	lsls	r1, r1, #23
 8006ba6:	d545      	bpl.n	8006c34 <_printf_float+0xc0>
 8006ba8:	189b      	adds	r3, r3, r2
 8006baa:	4393      	bics	r3, r2
 8006bac:	001a      	movs	r2, r3
 8006bae:	3208      	adds	r2, #8
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	681e      	ldr	r6, [r3, #0]
 8006bb6:	685f      	ldr	r7, [r3, #4]
 8006bb8:	007b      	lsls	r3, r7, #1
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8006bbe:	9610      	str	r6, [sp, #64]	@ 0x40
 8006bc0:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006bc2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006bc4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006bc6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006bc8:	4ba7      	ldr	r3, [pc, #668]	@ (8006e68 <_printf_float+0x2f4>)
 8006bca:	4252      	negs	r2, r2
 8006bcc:	f7fb fd46 	bl	800265c <__aeabi_dcmpun>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d131      	bne.n	8006c38 <_printf_float+0xc4>
 8006bd4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006bd6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006bd8:	2201      	movs	r2, #1
 8006bda:	4ba3      	ldr	r3, [pc, #652]	@ (8006e68 <_printf_float+0x2f4>)
 8006bdc:	4252      	negs	r2, r2
 8006bde:	f7f9 fc41 	bl	8000464 <__aeabi_dcmple>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d128      	bne.n	8006c38 <_printf_float+0xc4>
 8006be6:	2200      	movs	r2, #0
 8006be8:	2300      	movs	r3, #0
 8006bea:	0030      	movs	r0, r6
 8006bec:	0039      	movs	r1, r7
 8006bee:	f7f9 fc2f 	bl	8000450 <__aeabi_dcmplt>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d003      	beq.n	8006bfe <_printf_float+0x8a>
 8006bf6:	002b      	movs	r3, r5
 8006bf8:	222d      	movs	r2, #45	@ 0x2d
 8006bfa:	3343      	adds	r3, #67	@ 0x43
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c00:	4f9a      	ldr	r7, [pc, #616]	@ (8006e6c <_printf_float+0x2f8>)
 8006c02:	2b47      	cmp	r3, #71	@ 0x47
 8006c04:	d900      	bls.n	8006c08 <_printf_float+0x94>
 8006c06:	4f9a      	ldr	r7, [pc, #616]	@ (8006e70 <_printf_float+0x2fc>)
 8006c08:	2303      	movs	r3, #3
 8006c0a:	2400      	movs	r4, #0
 8006c0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c0e:	612b      	str	r3, [r5, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	439a      	bics	r2, r3
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c18:	0029      	movs	r1, r5
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c20:	aa15      	add	r2, sp, #84	@ 0x54
 8006c22:	f000 f9e5 	bl	8006ff0 <_printf_common>
 8006c26:	3001      	adds	r0, #1
 8006c28:	d000      	beq.n	8006c2c <_printf_float+0xb8>
 8006c2a:	e09f      	b.n	8006d6c <_printf_float+0x1f8>
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	4240      	negs	r0, r0
 8006c30:	b017      	add	sp, #92	@ 0x5c
 8006c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c34:	3307      	adds	r3, #7
 8006c36:	e7b8      	b.n	8006baa <_printf_float+0x36>
 8006c38:	0032      	movs	r2, r6
 8006c3a:	003b      	movs	r3, r7
 8006c3c:	0030      	movs	r0, r6
 8006c3e:	0039      	movs	r1, r7
 8006c40:	f7fb fd0c 	bl	800265c <__aeabi_dcmpun>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d00b      	beq.n	8006c60 <_printf_float+0xec>
 8006c48:	2f00      	cmp	r7, #0
 8006c4a:	da03      	bge.n	8006c54 <_printf_float+0xe0>
 8006c4c:	002b      	movs	r3, r5
 8006c4e:	222d      	movs	r2, #45	@ 0x2d
 8006c50:	3343      	adds	r3, #67	@ 0x43
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c56:	4f87      	ldr	r7, [pc, #540]	@ (8006e74 <_printf_float+0x300>)
 8006c58:	2b47      	cmp	r3, #71	@ 0x47
 8006c5a:	d9d5      	bls.n	8006c08 <_printf_float+0x94>
 8006c5c:	4f86      	ldr	r7, [pc, #536]	@ (8006e78 <_printf_float+0x304>)
 8006c5e:	e7d3      	b.n	8006c08 <_printf_float+0x94>
 8006c60:	2220      	movs	r2, #32
 8006c62:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006c64:	686b      	ldr	r3, [r5, #4]
 8006c66:	4394      	bics	r4, r2
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	d146      	bne.n	8006cfa <_printf_float+0x186>
 8006c6c:	3307      	adds	r3, #7
 8006c6e:	606b      	str	r3, [r5, #4]
 8006c70:	2380      	movs	r3, #128	@ 0x80
 8006c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	2200      	movs	r2, #0
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	9206      	str	r2, [sp, #24]
 8006c7e:	aa14      	add	r2, sp, #80	@ 0x50
 8006c80:	9205      	str	r2, [sp, #20]
 8006c82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c84:	a90a      	add	r1, sp, #40	@ 0x28
 8006c86:	9204      	str	r2, [sp, #16]
 8006c88:	aa13      	add	r2, sp, #76	@ 0x4c
 8006c8a:	9203      	str	r2, [sp, #12]
 8006c8c:	2223      	movs	r2, #35	@ 0x23
 8006c8e:	1852      	adds	r2, r2, r1
 8006c90:	9202      	str	r2, [sp, #8]
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	686b      	ldr	r3, [r5, #4]
 8006c96:	0032      	movs	r2, r6
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c9c:	003b      	movs	r3, r7
 8006c9e:	f7ff fec3 	bl	8006a28 <__cvt>
 8006ca2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ca4:	0007      	movs	r7, r0
 8006ca6:	2c47      	cmp	r4, #71	@ 0x47
 8006ca8:	d12d      	bne.n	8006d06 <_printf_float+0x192>
 8006caa:	1cd3      	adds	r3, r2, #3
 8006cac:	db02      	blt.n	8006cb4 <_printf_float+0x140>
 8006cae:	686b      	ldr	r3, [r5, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	dd48      	ble.n	8006d46 <_printf_float+0x1d2>
 8006cb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cb6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006cb8:	3b02      	subs	r3, #2
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cbe:	0028      	movs	r0, r5
 8006cc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006cc2:	3901      	subs	r1, #1
 8006cc4:	3050      	adds	r0, #80	@ 0x50
 8006cc6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006cc8:	f7ff ff14 	bl	8006af4 <__exponent>
 8006ccc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006cce:	0004      	movs	r4, r0
 8006cd0:	1813      	adds	r3, r2, r0
 8006cd2:	612b      	str	r3, [r5, #16]
 8006cd4:	2a01      	cmp	r2, #1
 8006cd6:	dc02      	bgt.n	8006cde <_printf_float+0x16a>
 8006cd8:	682a      	ldr	r2, [r5, #0]
 8006cda:	07d2      	lsls	r2, r2, #31
 8006cdc:	d501      	bpl.n	8006ce2 <_printf_float+0x16e>
 8006cde:	3301      	adds	r3, #1
 8006ce0:	612b      	str	r3, [r5, #16]
 8006ce2:	2323      	movs	r3, #35	@ 0x23
 8006ce4:	aa0a      	add	r2, sp, #40	@ 0x28
 8006ce6:	189b      	adds	r3, r3, r2
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d100      	bne.n	8006cf0 <_printf_float+0x17c>
 8006cee:	e792      	b.n	8006c16 <_printf_float+0xa2>
 8006cf0:	002b      	movs	r3, r5
 8006cf2:	222d      	movs	r2, #45	@ 0x2d
 8006cf4:	3343      	adds	r3, #67	@ 0x43
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	e78d      	b.n	8006c16 <_printf_float+0xa2>
 8006cfa:	2c47      	cmp	r4, #71	@ 0x47
 8006cfc:	d1b8      	bne.n	8006c70 <_printf_float+0xfc>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1b6      	bne.n	8006c70 <_printf_float+0xfc>
 8006d02:	3301      	adds	r3, #1
 8006d04:	e7b3      	b.n	8006c6e <_printf_float+0xfa>
 8006d06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d08:	0011      	movs	r1, r2
 8006d0a:	2b65      	cmp	r3, #101	@ 0x65
 8006d0c:	d9d7      	bls.n	8006cbe <_printf_float+0x14a>
 8006d0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d10:	2b66      	cmp	r3, #102	@ 0x66
 8006d12:	d11a      	bne.n	8006d4a <_printf_float+0x1d6>
 8006d14:	686b      	ldr	r3, [r5, #4]
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	dd09      	ble.n	8006d2e <_printf_float+0x1ba>
 8006d1a:	612a      	str	r2, [r5, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <_printf_float+0x1b2>
 8006d20:	6829      	ldr	r1, [r5, #0]
 8006d22:	07c9      	lsls	r1, r1, #31
 8006d24:	d50b      	bpl.n	8006d3e <_printf_float+0x1ca>
 8006d26:	3301      	adds	r3, #1
 8006d28:	189b      	adds	r3, r3, r2
 8006d2a:	612b      	str	r3, [r5, #16]
 8006d2c:	e007      	b.n	8006d3e <_printf_float+0x1ca>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d103      	bne.n	8006d3a <_printf_float+0x1c6>
 8006d32:	2201      	movs	r2, #1
 8006d34:	6829      	ldr	r1, [r5, #0]
 8006d36:	4211      	tst	r1, r2
 8006d38:	d000      	beq.n	8006d3c <_printf_float+0x1c8>
 8006d3a:	1c9a      	adds	r2, r3, #2
 8006d3c:	612a      	str	r2, [r5, #16]
 8006d3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d40:	2400      	movs	r4, #0
 8006d42:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006d44:	e7cd      	b.n	8006ce2 <_printf_float+0x16e>
 8006d46:	2367      	movs	r3, #103	@ 0x67
 8006d48:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d4a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d4e:	4299      	cmp	r1, r3
 8006d50:	db06      	blt.n	8006d60 <_printf_float+0x1ec>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	6129      	str	r1, [r5, #16]
 8006d56:	07db      	lsls	r3, r3, #31
 8006d58:	d5f1      	bpl.n	8006d3e <_printf_float+0x1ca>
 8006d5a:	3101      	adds	r1, #1
 8006d5c:	6129      	str	r1, [r5, #16]
 8006d5e:	e7ee      	b.n	8006d3e <_printf_float+0x1ca>
 8006d60:	2201      	movs	r2, #1
 8006d62:	2900      	cmp	r1, #0
 8006d64:	dce0      	bgt.n	8006d28 <_printf_float+0x1b4>
 8006d66:	1892      	adds	r2, r2, r2
 8006d68:	1a52      	subs	r2, r2, r1
 8006d6a:	e7dd      	b.n	8006d28 <_printf_float+0x1b4>
 8006d6c:	682a      	ldr	r2, [r5, #0]
 8006d6e:	0553      	lsls	r3, r2, #21
 8006d70:	d408      	bmi.n	8006d84 <_printf_float+0x210>
 8006d72:	692b      	ldr	r3, [r5, #16]
 8006d74:	003a      	movs	r2, r7
 8006d76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006d7c:	47a0      	blx	r4
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d129      	bne.n	8006dd6 <_printf_float+0x262>
 8006d82:	e753      	b.n	8006c2c <_printf_float+0xb8>
 8006d84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d86:	2b65      	cmp	r3, #101	@ 0x65
 8006d88:	d800      	bhi.n	8006d8c <_printf_float+0x218>
 8006d8a:	e0da      	b.n	8006f42 <_printf_float+0x3ce>
 8006d8c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006d8e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006d90:	2200      	movs	r2, #0
 8006d92:	2300      	movs	r3, #0
 8006d94:	f7f9 fb56 	bl	8000444 <__aeabi_dcmpeq>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d033      	beq.n	8006e04 <_printf_float+0x290>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4a37      	ldr	r2, [pc, #220]	@ (8006e7c <_printf_float+0x308>)
 8006da0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006da4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006da6:	47a0      	blx	r4
 8006da8:	3001      	adds	r0, #1
 8006daa:	d100      	bne.n	8006dae <_printf_float+0x23a>
 8006dac:	e73e      	b.n	8006c2c <_printf_float+0xb8>
 8006dae:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006db0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006db2:	42b3      	cmp	r3, r6
 8006db4:	db02      	blt.n	8006dbc <_printf_float+0x248>
 8006db6:	682b      	ldr	r3, [r5, #0]
 8006db8:	07db      	lsls	r3, r3, #31
 8006dba:	d50c      	bpl.n	8006dd6 <_printf_float+0x262>
 8006dbc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006dbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006dc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dc4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dc6:	47a0      	blx	r4
 8006dc8:	2400      	movs	r4, #0
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d100      	bne.n	8006dd0 <_printf_float+0x25c>
 8006dce:	e72d      	b.n	8006c2c <_printf_float+0xb8>
 8006dd0:	1e73      	subs	r3, r6, #1
 8006dd2:	42a3      	cmp	r3, r4
 8006dd4:	dc0a      	bgt.n	8006dec <_printf_float+0x278>
 8006dd6:	682b      	ldr	r3, [r5, #0]
 8006dd8:	079b      	lsls	r3, r3, #30
 8006dda:	d500      	bpl.n	8006dde <_printf_float+0x26a>
 8006ddc:	e105      	b.n	8006fea <_printf_float+0x476>
 8006dde:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006de0:	68e8      	ldr	r0, [r5, #12]
 8006de2:	4298      	cmp	r0, r3
 8006de4:	db00      	blt.n	8006de8 <_printf_float+0x274>
 8006de6:	e723      	b.n	8006c30 <_printf_float+0xbc>
 8006de8:	0018      	movs	r0, r3
 8006dea:	e721      	b.n	8006c30 <_printf_float+0xbc>
 8006dec:	002a      	movs	r2, r5
 8006dee:	2301      	movs	r3, #1
 8006df0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006df4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006df6:	321a      	adds	r2, #26
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	d100      	bne.n	8006e00 <_printf_float+0x28c>
 8006dfe:	e715      	b.n	8006c2c <_printf_float+0xb8>
 8006e00:	3401      	adds	r4, #1
 8006e02:	e7e5      	b.n	8006dd0 <_printf_float+0x25c>
 8006e04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dc3a      	bgt.n	8006e80 <_printf_float+0x30c>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <_printf_float+0x308>)
 8006e0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e14:	47a0      	blx	r4
 8006e16:	3001      	adds	r0, #1
 8006e18:	d100      	bne.n	8006e1c <_printf_float+0x2a8>
 8006e1a:	e707      	b.n	8006c2c <_printf_float+0xb8>
 8006e1c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006e1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e20:	4333      	orrs	r3, r6
 8006e22:	d102      	bne.n	8006e2a <_printf_float+0x2b6>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	07db      	lsls	r3, r3, #31
 8006e28:	d5d5      	bpl.n	8006dd6 <_printf_float+0x262>
 8006e2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e34:	47a0      	blx	r4
 8006e36:	2300      	movs	r3, #0
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d100      	bne.n	8006e3e <_printf_float+0x2ca>
 8006e3c:	e6f6      	b.n	8006c2c <_printf_float+0xb8>
 8006e3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e44:	425b      	negs	r3, r3
 8006e46:	4293      	cmp	r3, r2
 8006e48:	dc01      	bgt.n	8006e4e <_printf_float+0x2da>
 8006e4a:	0033      	movs	r3, r6
 8006e4c:	e792      	b.n	8006d74 <_printf_float+0x200>
 8006e4e:	002a      	movs	r2, r5
 8006e50:	2301      	movs	r3, #1
 8006e52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e58:	321a      	adds	r2, #26
 8006e5a:	47a0      	blx	r4
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d100      	bne.n	8006e62 <_printf_float+0x2ee>
 8006e60:	e6e4      	b.n	8006c2c <_printf_float+0xb8>
 8006e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e64:	3301      	adds	r3, #1
 8006e66:	e7ea      	b.n	8006e3e <_printf_float+0x2ca>
 8006e68:	7fefffff 	.word	0x7fefffff
 8006e6c:	08009648 	.word	0x08009648
 8006e70:	0800964c 	.word	0x0800964c
 8006e74:	08009650 	.word	0x08009650
 8006e78:	08009654 	.word	0x08009654
 8006e7c:	08009658 	.word	0x08009658
 8006e80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e82:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006e84:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e86:	429e      	cmp	r6, r3
 8006e88:	dd00      	ble.n	8006e8c <_printf_float+0x318>
 8006e8a:	001e      	movs	r6, r3
 8006e8c:	2e00      	cmp	r6, #0
 8006e8e:	dc31      	bgt.n	8006ef4 <_printf_float+0x380>
 8006e90:	43f3      	mvns	r3, r6
 8006e92:	2400      	movs	r4, #0
 8006e94:	17db      	asrs	r3, r3, #31
 8006e96:	4033      	ands	r3, r6
 8006e98:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e9a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e9e:	1af3      	subs	r3, r6, r3
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	dc30      	bgt.n	8006f06 <_printf_float+0x392>
 8006ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ea6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	dc38      	bgt.n	8006f1e <_printf_float+0x3aa>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d435      	bmi.n	8006f1e <_printf_float+0x3aa>
 8006eb2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006eb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006eb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006eb8:	1b9b      	subs	r3, r3, r6
 8006eba:	1b14      	subs	r4, r2, r4
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	dd00      	ble.n	8006ec2 <_printf_float+0x34e>
 8006ec0:	001c      	movs	r4, r3
 8006ec2:	2c00      	cmp	r4, #0
 8006ec4:	dc34      	bgt.n	8006f30 <_printf_float+0x3bc>
 8006ec6:	43e3      	mvns	r3, r4
 8006ec8:	2600      	movs	r6, #0
 8006eca:	17db      	asrs	r3, r3, #31
 8006ecc:	401c      	ands	r4, r3
 8006ece:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ed0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	1b1b      	subs	r3, r3, r4
 8006ed6:	42b3      	cmp	r3, r6
 8006ed8:	dc00      	bgt.n	8006edc <_printf_float+0x368>
 8006eda:	e77c      	b.n	8006dd6 <_printf_float+0x262>
 8006edc:	002a      	movs	r2, r5
 8006ede:	2301      	movs	r3, #1
 8006ee0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ee4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006ee6:	321a      	adds	r2, #26
 8006ee8:	47b8      	blx	r7
 8006eea:	3001      	adds	r0, #1
 8006eec:	d100      	bne.n	8006ef0 <_printf_float+0x37c>
 8006eee:	e69d      	b.n	8006c2c <_printf_float+0xb8>
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	e7ec      	b.n	8006ece <_printf_float+0x35a>
 8006ef4:	0033      	movs	r3, r6
 8006ef6:	003a      	movs	r2, r7
 8006ef8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006efc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006efe:	47a0      	blx	r4
 8006f00:	3001      	adds	r0, #1
 8006f02:	d1c5      	bne.n	8006e90 <_printf_float+0x31c>
 8006f04:	e692      	b.n	8006c2c <_printf_float+0xb8>
 8006f06:	002a      	movs	r2, r5
 8006f08:	2301      	movs	r3, #1
 8006f0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f0e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f10:	321a      	adds	r2, #26
 8006f12:	47b0      	blx	r6
 8006f14:	3001      	adds	r0, #1
 8006f16:	d100      	bne.n	8006f1a <_printf_float+0x3a6>
 8006f18:	e688      	b.n	8006c2c <_printf_float+0xb8>
 8006f1a:	3401      	adds	r4, #1
 8006f1c:	e7bd      	b.n	8006e9a <_printf_float+0x326>
 8006f1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006f28:	47a0      	blx	r4
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d1c1      	bne.n	8006eb2 <_printf_float+0x33e>
 8006f2e:	e67d      	b.n	8006c2c <_printf_float+0xb8>
 8006f30:	19ba      	adds	r2, r7, r6
 8006f32:	0023      	movs	r3, r4
 8006f34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f38:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f3a:	47b0      	blx	r6
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d1c2      	bne.n	8006ec6 <_printf_float+0x352>
 8006f40:	e674      	b.n	8006c2c <_printf_float+0xb8>
 8006f42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f44:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	dc02      	bgt.n	8006f50 <_printf_float+0x3dc>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	421a      	tst	r2, r3
 8006f4e:	d039      	beq.n	8006fc4 <_printf_float+0x450>
 8006f50:	2301      	movs	r3, #1
 8006f52:	003a      	movs	r2, r7
 8006f54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f58:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f5a:	47b0      	blx	r6
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d100      	bne.n	8006f62 <_printf_float+0x3ee>
 8006f60:	e664      	b.n	8006c2c <_printf_float+0xb8>
 8006f62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f6a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f6c:	47b0      	blx	r6
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d100      	bne.n	8006f74 <_printf_float+0x400>
 8006f72:	e65b      	b.n	8006c2c <_printf_float+0xb8>
 8006f74:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006f76:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f80:	2300      	movs	r3, #0
 8006f82:	f7f9 fa5f 	bl	8000444 <__aeabi_dcmpeq>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d11a      	bne.n	8006fc0 <_printf_float+0x44c>
 8006f8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f8c:	1c7a      	adds	r2, r7, #1
 8006f8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f92:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f94:	47b0      	blx	r6
 8006f96:	3001      	adds	r0, #1
 8006f98:	d10e      	bne.n	8006fb8 <_printf_float+0x444>
 8006f9a:	e647      	b.n	8006c2c <_printf_float+0xb8>
 8006f9c:	002a      	movs	r2, r5
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fa4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006fa6:	321a      	adds	r2, #26
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	d100      	bne.n	8006fb0 <_printf_float+0x43c>
 8006fae:	e63d      	b.n	8006c2c <_printf_float+0xb8>
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fb4:	429e      	cmp	r6, r3
 8006fb6:	dbf1      	blt.n	8006f9c <_printf_float+0x428>
 8006fb8:	002a      	movs	r2, r5
 8006fba:	0023      	movs	r3, r4
 8006fbc:	3250      	adds	r2, #80	@ 0x50
 8006fbe:	e6da      	b.n	8006d76 <_printf_float+0x202>
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	e7f6      	b.n	8006fb2 <_printf_float+0x43e>
 8006fc4:	003a      	movs	r2, r7
 8006fc6:	e7e2      	b.n	8006f8e <_printf_float+0x41a>
 8006fc8:	002a      	movs	r2, r5
 8006fca:	2301      	movs	r3, #1
 8006fcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fd0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006fd2:	3219      	adds	r2, #25
 8006fd4:	47b0      	blx	r6
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d100      	bne.n	8006fdc <_printf_float+0x468>
 8006fda:	e627      	b.n	8006c2c <_printf_float+0xb8>
 8006fdc:	3401      	adds	r4, #1
 8006fde:	68eb      	ldr	r3, [r5, #12]
 8006fe0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	dcef      	bgt.n	8006fc8 <_printf_float+0x454>
 8006fe8:	e6f9      	b.n	8006dde <_printf_float+0x26a>
 8006fea:	2400      	movs	r4, #0
 8006fec:	e7f7      	b.n	8006fde <_printf_float+0x46a>
 8006fee:	46c0      	nop			@ (mov r8, r8)

08006ff0 <_printf_common>:
 8006ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ff2:	0016      	movs	r6, r2
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	688a      	ldr	r2, [r1, #8]
 8006ff8:	690b      	ldr	r3, [r1, #16]
 8006ffa:	000c      	movs	r4, r1
 8006ffc:	9000      	str	r0, [sp, #0]
 8006ffe:	4293      	cmp	r3, r2
 8007000:	da00      	bge.n	8007004 <_printf_common+0x14>
 8007002:	0013      	movs	r3, r2
 8007004:	0022      	movs	r2, r4
 8007006:	6033      	str	r3, [r6, #0]
 8007008:	3243      	adds	r2, #67	@ 0x43
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	2a00      	cmp	r2, #0
 800700e:	d001      	beq.n	8007014 <_printf_common+0x24>
 8007010:	3301      	adds	r3, #1
 8007012:	6033      	str	r3, [r6, #0]
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	069b      	lsls	r3, r3, #26
 8007018:	d502      	bpl.n	8007020 <_printf_common+0x30>
 800701a:	6833      	ldr	r3, [r6, #0]
 800701c:	3302      	adds	r3, #2
 800701e:	6033      	str	r3, [r6, #0]
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	2306      	movs	r3, #6
 8007024:	0015      	movs	r5, r2
 8007026:	401d      	ands	r5, r3
 8007028:	421a      	tst	r2, r3
 800702a:	d027      	beq.n	800707c <_printf_common+0x8c>
 800702c:	0023      	movs	r3, r4
 800702e:	3343      	adds	r3, #67	@ 0x43
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	1e5a      	subs	r2, r3, #1
 8007034:	4193      	sbcs	r3, r2
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	0692      	lsls	r2, r2, #26
 800703a:	d430      	bmi.n	800709e <_printf_common+0xae>
 800703c:	0022      	movs	r2, r4
 800703e:	9901      	ldr	r1, [sp, #4]
 8007040:	9800      	ldr	r0, [sp, #0]
 8007042:	9d08      	ldr	r5, [sp, #32]
 8007044:	3243      	adds	r2, #67	@ 0x43
 8007046:	47a8      	blx	r5
 8007048:	3001      	adds	r0, #1
 800704a:	d025      	beq.n	8007098 <_printf_common+0xa8>
 800704c:	2206      	movs	r2, #6
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	2500      	movs	r5, #0
 8007052:	4013      	ands	r3, r2
 8007054:	2b04      	cmp	r3, #4
 8007056:	d105      	bne.n	8007064 <_printf_common+0x74>
 8007058:	6833      	ldr	r3, [r6, #0]
 800705a:	68e5      	ldr	r5, [r4, #12]
 800705c:	1aed      	subs	r5, r5, r3
 800705e:	43eb      	mvns	r3, r5
 8007060:	17db      	asrs	r3, r3, #31
 8007062:	401d      	ands	r5, r3
 8007064:	68a3      	ldr	r3, [r4, #8]
 8007066:	6922      	ldr	r2, [r4, #16]
 8007068:	4293      	cmp	r3, r2
 800706a:	dd01      	ble.n	8007070 <_printf_common+0x80>
 800706c:	1a9b      	subs	r3, r3, r2
 800706e:	18ed      	adds	r5, r5, r3
 8007070:	2600      	movs	r6, #0
 8007072:	42b5      	cmp	r5, r6
 8007074:	d120      	bne.n	80070b8 <_printf_common+0xc8>
 8007076:	2000      	movs	r0, #0
 8007078:	e010      	b.n	800709c <_printf_common+0xac>
 800707a:	3501      	adds	r5, #1
 800707c:	68e3      	ldr	r3, [r4, #12]
 800707e:	6832      	ldr	r2, [r6, #0]
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	42ab      	cmp	r3, r5
 8007084:	ddd2      	ble.n	800702c <_printf_common+0x3c>
 8007086:	0022      	movs	r2, r4
 8007088:	2301      	movs	r3, #1
 800708a:	9901      	ldr	r1, [sp, #4]
 800708c:	9800      	ldr	r0, [sp, #0]
 800708e:	9f08      	ldr	r7, [sp, #32]
 8007090:	3219      	adds	r2, #25
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	d1f0      	bne.n	800707a <_printf_common+0x8a>
 8007098:	2001      	movs	r0, #1
 800709a:	4240      	negs	r0, r0
 800709c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800709e:	2030      	movs	r0, #48	@ 0x30
 80070a0:	18e1      	adds	r1, r4, r3
 80070a2:	3143      	adds	r1, #67	@ 0x43
 80070a4:	7008      	strb	r0, [r1, #0]
 80070a6:	0021      	movs	r1, r4
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	3145      	adds	r1, #69	@ 0x45
 80070ac:	7809      	ldrb	r1, [r1, #0]
 80070ae:	18a2      	adds	r2, r4, r2
 80070b0:	3243      	adds	r2, #67	@ 0x43
 80070b2:	3302      	adds	r3, #2
 80070b4:	7011      	strb	r1, [r2, #0]
 80070b6:	e7c1      	b.n	800703c <_printf_common+0x4c>
 80070b8:	0022      	movs	r2, r4
 80070ba:	2301      	movs	r3, #1
 80070bc:	9901      	ldr	r1, [sp, #4]
 80070be:	9800      	ldr	r0, [sp, #0]
 80070c0:	9f08      	ldr	r7, [sp, #32]
 80070c2:	321a      	adds	r2, #26
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	d0e6      	beq.n	8007098 <_printf_common+0xa8>
 80070ca:	3601      	adds	r6, #1
 80070cc:	e7d1      	b.n	8007072 <_printf_common+0x82>
	...

080070d0 <_printf_i>:
 80070d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070d2:	b08b      	sub	sp, #44	@ 0x2c
 80070d4:	9206      	str	r2, [sp, #24]
 80070d6:	000a      	movs	r2, r1
 80070d8:	3243      	adds	r2, #67	@ 0x43
 80070da:	9307      	str	r3, [sp, #28]
 80070dc:	9005      	str	r0, [sp, #20]
 80070de:	9203      	str	r2, [sp, #12]
 80070e0:	7e0a      	ldrb	r2, [r1, #24]
 80070e2:	000c      	movs	r4, r1
 80070e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070e6:	2a78      	cmp	r2, #120	@ 0x78
 80070e8:	d809      	bhi.n	80070fe <_printf_i+0x2e>
 80070ea:	2a62      	cmp	r2, #98	@ 0x62
 80070ec:	d80b      	bhi.n	8007106 <_printf_i+0x36>
 80070ee:	2a00      	cmp	r2, #0
 80070f0:	d100      	bne.n	80070f4 <_printf_i+0x24>
 80070f2:	e0bc      	b.n	800726e <_printf_i+0x19e>
 80070f4:	497b      	ldr	r1, [pc, #492]	@ (80072e4 <_printf_i+0x214>)
 80070f6:	9104      	str	r1, [sp, #16]
 80070f8:	2a58      	cmp	r2, #88	@ 0x58
 80070fa:	d100      	bne.n	80070fe <_printf_i+0x2e>
 80070fc:	e090      	b.n	8007220 <_printf_i+0x150>
 80070fe:	0025      	movs	r5, r4
 8007100:	3542      	adds	r5, #66	@ 0x42
 8007102:	702a      	strb	r2, [r5, #0]
 8007104:	e022      	b.n	800714c <_printf_i+0x7c>
 8007106:	0010      	movs	r0, r2
 8007108:	3863      	subs	r0, #99	@ 0x63
 800710a:	2815      	cmp	r0, #21
 800710c:	d8f7      	bhi.n	80070fe <_printf_i+0x2e>
 800710e:	f7f9 f809 	bl	8000124 <__gnu_thumb1_case_shi>
 8007112:	0016      	.short	0x0016
 8007114:	fff6001f 	.word	0xfff6001f
 8007118:	fff6fff6 	.word	0xfff6fff6
 800711c:	001ffff6 	.word	0x001ffff6
 8007120:	fff6fff6 	.word	0xfff6fff6
 8007124:	fff6fff6 	.word	0xfff6fff6
 8007128:	003600a1 	.word	0x003600a1
 800712c:	fff60080 	.word	0xfff60080
 8007130:	00b2fff6 	.word	0x00b2fff6
 8007134:	0036fff6 	.word	0x0036fff6
 8007138:	fff6fff6 	.word	0xfff6fff6
 800713c:	0084      	.short	0x0084
 800713e:	0025      	movs	r5, r4
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	3542      	adds	r5, #66	@ 0x42
 8007144:	1d11      	adds	r1, r2, #4
 8007146:	6019      	str	r1, [r3, #0]
 8007148:	6813      	ldr	r3, [r2, #0]
 800714a:	702b      	strb	r3, [r5, #0]
 800714c:	2301      	movs	r3, #1
 800714e:	e0a0      	b.n	8007292 <_printf_i+0x1c2>
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	6809      	ldr	r1, [r1, #0]
 8007154:	1d02      	adds	r2, r0, #4
 8007156:	060d      	lsls	r5, r1, #24
 8007158:	d50b      	bpl.n	8007172 <_printf_i+0xa2>
 800715a:	6806      	ldr	r6, [r0, #0]
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	2e00      	cmp	r6, #0
 8007160:	da03      	bge.n	800716a <_printf_i+0x9a>
 8007162:	232d      	movs	r3, #45	@ 0x2d
 8007164:	9a03      	ldr	r2, [sp, #12]
 8007166:	4276      	negs	r6, r6
 8007168:	7013      	strb	r3, [r2, #0]
 800716a:	4b5e      	ldr	r3, [pc, #376]	@ (80072e4 <_printf_i+0x214>)
 800716c:	270a      	movs	r7, #10
 800716e:	9304      	str	r3, [sp, #16]
 8007170:	e018      	b.n	80071a4 <_printf_i+0xd4>
 8007172:	6806      	ldr	r6, [r0, #0]
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	0649      	lsls	r1, r1, #25
 8007178:	d5f1      	bpl.n	800715e <_printf_i+0x8e>
 800717a:	b236      	sxth	r6, r6
 800717c:	e7ef      	b.n	800715e <_printf_i+0x8e>
 800717e:	6808      	ldr	r0, [r1, #0]
 8007180:	6819      	ldr	r1, [r3, #0]
 8007182:	c940      	ldmia	r1!, {r6}
 8007184:	0605      	lsls	r5, r0, #24
 8007186:	d402      	bmi.n	800718e <_printf_i+0xbe>
 8007188:	0640      	lsls	r0, r0, #25
 800718a:	d500      	bpl.n	800718e <_printf_i+0xbe>
 800718c:	b2b6      	uxth	r6, r6
 800718e:	6019      	str	r1, [r3, #0]
 8007190:	4b54      	ldr	r3, [pc, #336]	@ (80072e4 <_printf_i+0x214>)
 8007192:	270a      	movs	r7, #10
 8007194:	9304      	str	r3, [sp, #16]
 8007196:	2a6f      	cmp	r2, #111	@ 0x6f
 8007198:	d100      	bne.n	800719c <_printf_i+0xcc>
 800719a:	3f02      	subs	r7, #2
 800719c:	0023      	movs	r3, r4
 800719e:	2200      	movs	r2, #0
 80071a0:	3343      	adds	r3, #67	@ 0x43
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	6863      	ldr	r3, [r4, #4]
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	db03      	blt.n	80071b4 <_printf_i+0xe4>
 80071ac:	2104      	movs	r1, #4
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	438a      	bics	r2, r1
 80071b2:	6022      	str	r2, [r4, #0]
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	d102      	bne.n	80071be <_printf_i+0xee>
 80071b8:	9d03      	ldr	r5, [sp, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00c      	beq.n	80071d8 <_printf_i+0x108>
 80071be:	9d03      	ldr	r5, [sp, #12]
 80071c0:	0030      	movs	r0, r6
 80071c2:	0039      	movs	r1, r7
 80071c4:	f7f9 f83e 	bl	8000244 <__aeabi_uidivmod>
 80071c8:	9b04      	ldr	r3, [sp, #16]
 80071ca:	3d01      	subs	r5, #1
 80071cc:	5c5b      	ldrb	r3, [r3, r1]
 80071ce:	702b      	strb	r3, [r5, #0]
 80071d0:	0033      	movs	r3, r6
 80071d2:	0006      	movs	r6, r0
 80071d4:	429f      	cmp	r7, r3
 80071d6:	d9f3      	bls.n	80071c0 <_printf_i+0xf0>
 80071d8:	2f08      	cmp	r7, #8
 80071da:	d109      	bne.n	80071f0 <_printf_i+0x120>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	07db      	lsls	r3, r3, #31
 80071e0:	d506      	bpl.n	80071f0 <_printf_i+0x120>
 80071e2:	6862      	ldr	r2, [r4, #4]
 80071e4:	6923      	ldr	r3, [r4, #16]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	dc02      	bgt.n	80071f0 <_printf_i+0x120>
 80071ea:	2330      	movs	r3, #48	@ 0x30
 80071ec:	3d01      	subs	r5, #1
 80071ee:	702b      	strb	r3, [r5, #0]
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	1b5b      	subs	r3, r3, r5
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	9b07      	ldr	r3, [sp, #28]
 80071f8:	0021      	movs	r1, r4
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	9805      	ldr	r0, [sp, #20]
 80071fe:	9b06      	ldr	r3, [sp, #24]
 8007200:	aa09      	add	r2, sp, #36	@ 0x24
 8007202:	f7ff fef5 	bl	8006ff0 <_printf_common>
 8007206:	3001      	adds	r0, #1
 8007208:	d148      	bne.n	800729c <_printf_i+0x1cc>
 800720a:	2001      	movs	r0, #1
 800720c:	4240      	negs	r0, r0
 800720e:	b00b      	add	sp, #44	@ 0x2c
 8007210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007212:	2220      	movs	r2, #32
 8007214:	6809      	ldr	r1, [r1, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	6022      	str	r2, [r4, #0]
 800721a:	2278      	movs	r2, #120	@ 0x78
 800721c:	4932      	ldr	r1, [pc, #200]	@ (80072e8 <_printf_i+0x218>)
 800721e:	9104      	str	r1, [sp, #16]
 8007220:	0021      	movs	r1, r4
 8007222:	3145      	adds	r1, #69	@ 0x45
 8007224:	700a      	strb	r2, [r1, #0]
 8007226:	6819      	ldr	r1, [r3, #0]
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	c940      	ldmia	r1!, {r6}
 800722c:	0610      	lsls	r0, r2, #24
 800722e:	d402      	bmi.n	8007236 <_printf_i+0x166>
 8007230:	0650      	lsls	r0, r2, #25
 8007232:	d500      	bpl.n	8007236 <_printf_i+0x166>
 8007234:	b2b6      	uxth	r6, r6
 8007236:	6019      	str	r1, [r3, #0]
 8007238:	07d3      	lsls	r3, r2, #31
 800723a:	d502      	bpl.n	8007242 <_printf_i+0x172>
 800723c:	2320      	movs	r3, #32
 800723e:	4313      	orrs	r3, r2
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	2e00      	cmp	r6, #0
 8007244:	d001      	beq.n	800724a <_printf_i+0x17a>
 8007246:	2710      	movs	r7, #16
 8007248:	e7a8      	b.n	800719c <_printf_i+0xcc>
 800724a:	2220      	movs	r2, #32
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	4393      	bics	r3, r2
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	e7f8      	b.n	8007246 <_printf_i+0x176>
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	680d      	ldr	r5, [r1, #0]
 8007258:	1d10      	adds	r0, r2, #4
 800725a:	6949      	ldr	r1, [r1, #20]
 800725c:	6018      	str	r0, [r3, #0]
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	062e      	lsls	r6, r5, #24
 8007262:	d501      	bpl.n	8007268 <_printf_i+0x198>
 8007264:	6019      	str	r1, [r3, #0]
 8007266:	e002      	b.n	800726e <_printf_i+0x19e>
 8007268:	066d      	lsls	r5, r5, #25
 800726a:	d5fb      	bpl.n	8007264 <_printf_i+0x194>
 800726c:	8019      	strh	r1, [r3, #0]
 800726e:	2300      	movs	r3, #0
 8007270:	9d03      	ldr	r5, [sp, #12]
 8007272:	6123      	str	r3, [r4, #16]
 8007274:	e7bf      	b.n	80071f6 <_printf_i+0x126>
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	1d11      	adds	r1, r2, #4
 800727a:	6019      	str	r1, [r3, #0]
 800727c:	6815      	ldr	r5, [r2, #0]
 800727e:	2100      	movs	r1, #0
 8007280:	0028      	movs	r0, r5
 8007282:	6862      	ldr	r2, [r4, #4]
 8007284:	f000 fac9 	bl	800781a <memchr>
 8007288:	2800      	cmp	r0, #0
 800728a:	d001      	beq.n	8007290 <_printf_i+0x1c0>
 800728c:	1b40      	subs	r0, r0, r5
 800728e:	6060      	str	r0, [r4, #4]
 8007290:	6863      	ldr	r3, [r4, #4]
 8007292:	6123      	str	r3, [r4, #16]
 8007294:	2300      	movs	r3, #0
 8007296:	9a03      	ldr	r2, [sp, #12]
 8007298:	7013      	strb	r3, [r2, #0]
 800729a:	e7ac      	b.n	80071f6 <_printf_i+0x126>
 800729c:	002a      	movs	r2, r5
 800729e:	6923      	ldr	r3, [r4, #16]
 80072a0:	9906      	ldr	r1, [sp, #24]
 80072a2:	9805      	ldr	r0, [sp, #20]
 80072a4:	9d07      	ldr	r5, [sp, #28]
 80072a6:	47a8      	blx	r5
 80072a8:	3001      	adds	r0, #1
 80072aa:	d0ae      	beq.n	800720a <_printf_i+0x13a>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	079b      	lsls	r3, r3, #30
 80072b0:	d415      	bmi.n	80072de <_printf_i+0x20e>
 80072b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b4:	68e0      	ldr	r0, [r4, #12]
 80072b6:	4298      	cmp	r0, r3
 80072b8:	daa9      	bge.n	800720e <_printf_i+0x13e>
 80072ba:	0018      	movs	r0, r3
 80072bc:	e7a7      	b.n	800720e <_printf_i+0x13e>
 80072be:	0022      	movs	r2, r4
 80072c0:	2301      	movs	r3, #1
 80072c2:	9906      	ldr	r1, [sp, #24]
 80072c4:	9805      	ldr	r0, [sp, #20]
 80072c6:	9e07      	ldr	r6, [sp, #28]
 80072c8:	3219      	adds	r2, #25
 80072ca:	47b0      	blx	r6
 80072cc:	3001      	adds	r0, #1
 80072ce:	d09c      	beq.n	800720a <_printf_i+0x13a>
 80072d0:	3501      	adds	r5, #1
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dcf0      	bgt.n	80072be <_printf_i+0x1ee>
 80072dc:	e7e9      	b.n	80072b2 <_printf_i+0x1e2>
 80072de:	2500      	movs	r5, #0
 80072e0:	e7f7      	b.n	80072d2 <_printf_i+0x202>
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	0800965a 	.word	0x0800965a
 80072e8:	0800966b 	.word	0x0800966b

080072ec <std>:
 80072ec:	2300      	movs	r3, #0
 80072ee:	b510      	push	{r4, lr}
 80072f0:	0004      	movs	r4, r0
 80072f2:	6003      	str	r3, [r0, #0]
 80072f4:	6043      	str	r3, [r0, #4]
 80072f6:	6083      	str	r3, [r0, #8]
 80072f8:	8181      	strh	r1, [r0, #12]
 80072fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80072fc:	81c2      	strh	r2, [r0, #14]
 80072fe:	6103      	str	r3, [r0, #16]
 8007300:	6143      	str	r3, [r0, #20]
 8007302:	6183      	str	r3, [r0, #24]
 8007304:	0019      	movs	r1, r3
 8007306:	2208      	movs	r2, #8
 8007308:	305c      	adds	r0, #92	@ 0x5c
 800730a:	f000 f9ff 	bl	800770c <memset>
 800730e:	4b0b      	ldr	r3, [pc, #44]	@ (800733c <std+0x50>)
 8007310:	6224      	str	r4, [r4, #32]
 8007312:	6263      	str	r3, [r4, #36]	@ 0x24
 8007314:	4b0a      	ldr	r3, [pc, #40]	@ (8007340 <std+0x54>)
 8007316:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007318:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <std+0x58>)
 800731a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800731c:	4b0a      	ldr	r3, [pc, #40]	@ (8007348 <std+0x5c>)
 800731e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007320:	4b0a      	ldr	r3, [pc, #40]	@ (800734c <std+0x60>)
 8007322:	429c      	cmp	r4, r3
 8007324:	d005      	beq.n	8007332 <std+0x46>
 8007326:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <std+0x64>)
 8007328:	429c      	cmp	r4, r3
 800732a:	d002      	beq.n	8007332 <std+0x46>
 800732c:	4b09      	ldr	r3, [pc, #36]	@ (8007354 <std+0x68>)
 800732e:	429c      	cmp	r4, r3
 8007330:	d103      	bne.n	800733a <std+0x4e>
 8007332:	0020      	movs	r0, r4
 8007334:	3058      	adds	r0, #88	@ 0x58
 8007336:	f000 fa6d 	bl	8007814 <__retarget_lock_init_recursive>
 800733a:	bd10      	pop	{r4, pc}
 800733c:	08007535 	.word	0x08007535
 8007340:	0800755d 	.word	0x0800755d
 8007344:	08007595 	.word	0x08007595
 8007348:	080075c1 	.word	0x080075c1
 800734c:	20000374 	.word	0x20000374
 8007350:	200003dc 	.word	0x200003dc
 8007354:	20000444 	.word	0x20000444

08007358 <stdio_exit_handler>:
 8007358:	b510      	push	{r4, lr}
 800735a:	4a03      	ldr	r2, [pc, #12]	@ (8007368 <stdio_exit_handler+0x10>)
 800735c:	4903      	ldr	r1, [pc, #12]	@ (800736c <stdio_exit_handler+0x14>)
 800735e:	4804      	ldr	r0, [pc, #16]	@ (8007370 <stdio_exit_handler+0x18>)
 8007360:	f000 f86c 	bl	800743c <_fwalk_sglue>
 8007364:	bd10      	pop	{r4, pc}
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	20000010 	.word	0x20000010
 800736c:	08008f95 	.word	0x08008f95
 8007370:	20000020 	.word	0x20000020

08007374 <cleanup_stdio>:
 8007374:	6841      	ldr	r1, [r0, #4]
 8007376:	4b0b      	ldr	r3, [pc, #44]	@ (80073a4 <cleanup_stdio+0x30>)
 8007378:	b510      	push	{r4, lr}
 800737a:	0004      	movs	r4, r0
 800737c:	4299      	cmp	r1, r3
 800737e:	d001      	beq.n	8007384 <cleanup_stdio+0x10>
 8007380:	f001 fe08 	bl	8008f94 <_fflush_r>
 8007384:	68a1      	ldr	r1, [r4, #8]
 8007386:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <cleanup_stdio+0x34>)
 8007388:	4299      	cmp	r1, r3
 800738a:	d002      	beq.n	8007392 <cleanup_stdio+0x1e>
 800738c:	0020      	movs	r0, r4
 800738e:	f001 fe01 	bl	8008f94 <_fflush_r>
 8007392:	68e1      	ldr	r1, [r4, #12]
 8007394:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <cleanup_stdio+0x38>)
 8007396:	4299      	cmp	r1, r3
 8007398:	d002      	beq.n	80073a0 <cleanup_stdio+0x2c>
 800739a:	0020      	movs	r0, r4
 800739c:	f001 fdfa 	bl	8008f94 <_fflush_r>
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	46c0      	nop			@ (mov r8, r8)
 80073a4:	20000374 	.word	0x20000374
 80073a8:	200003dc 	.word	0x200003dc
 80073ac:	20000444 	.word	0x20000444

080073b0 <global_stdio_init.part.0>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	4b09      	ldr	r3, [pc, #36]	@ (80073d8 <global_stdio_init.part.0+0x28>)
 80073b4:	4a09      	ldr	r2, [pc, #36]	@ (80073dc <global_stdio_init.part.0+0x2c>)
 80073b6:	2104      	movs	r1, #4
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	4809      	ldr	r0, [pc, #36]	@ (80073e0 <global_stdio_init.part.0+0x30>)
 80073bc:	2200      	movs	r2, #0
 80073be:	f7ff ff95 	bl	80072ec <std>
 80073c2:	2201      	movs	r2, #1
 80073c4:	2109      	movs	r1, #9
 80073c6:	4807      	ldr	r0, [pc, #28]	@ (80073e4 <global_stdio_init.part.0+0x34>)
 80073c8:	f7ff ff90 	bl	80072ec <std>
 80073cc:	2202      	movs	r2, #2
 80073ce:	2112      	movs	r1, #18
 80073d0:	4805      	ldr	r0, [pc, #20]	@ (80073e8 <global_stdio_init.part.0+0x38>)
 80073d2:	f7ff ff8b 	bl	80072ec <std>
 80073d6:	bd10      	pop	{r4, pc}
 80073d8:	200004ac 	.word	0x200004ac
 80073dc:	08007359 	.word	0x08007359
 80073e0:	20000374 	.word	0x20000374
 80073e4:	200003dc 	.word	0x200003dc
 80073e8:	20000444 	.word	0x20000444

080073ec <__sfp_lock_acquire>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4802      	ldr	r0, [pc, #8]	@ (80073f8 <__sfp_lock_acquire+0xc>)
 80073f0:	f000 fa11 	bl	8007816 <__retarget_lock_acquire_recursive>
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	46c0      	nop			@ (mov r8, r8)
 80073f8:	200004b5 	.word	0x200004b5

080073fc <__sfp_lock_release>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4802      	ldr	r0, [pc, #8]	@ (8007408 <__sfp_lock_release+0xc>)
 8007400:	f000 fa0a 	bl	8007818 <__retarget_lock_release_recursive>
 8007404:	bd10      	pop	{r4, pc}
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	200004b5 	.word	0x200004b5

0800740c <__sinit>:
 800740c:	b510      	push	{r4, lr}
 800740e:	0004      	movs	r4, r0
 8007410:	f7ff ffec 	bl	80073ec <__sfp_lock_acquire>
 8007414:	6a23      	ldr	r3, [r4, #32]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <__sinit+0x14>
 800741a:	f7ff ffef 	bl	80073fc <__sfp_lock_release>
 800741e:	bd10      	pop	{r4, pc}
 8007420:	4b04      	ldr	r3, [pc, #16]	@ (8007434 <__sinit+0x28>)
 8007422:	6223      	str	r3, [r4, #32]
 8007424:	4b04      	ldr	r3, [pc, #16]	@ (8007438 <__sinit+0x2c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f6      	bne.n	800741a <__sinit+0xe>
 800742c:	f7ff ffc0 	bl	80073b0 <global_stdio_init.part.0>
 8007430:	e7f3      	b.n	800741a <__sinit+0xe>
 8007432:	46c0      	nop			@ (mov r8, r8)
 8007434:	08007375 	.word	0x08007375
 8007438:	200004ac 	.word	0x200004ac

0800743c <_fwalk_sglue>:
 800743c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800743e:	0014      	movs	r4, r2
 8007440:	2600      	movs	r6, #0
 8007442:	9000      	str	r0, [sp, #0]
 8007444:	9101      	str	r1, [sp, #4]
 8007446:	68a5      	ldr	r5, [r4, #8]
 8007448:	6867      	ldr	r7, [r4, #4]
 800744a:	3f01      	subs	r7, #1
 800744c:	d504      	bpl.n	8007458 <_fwalk_sglue+0x1c>
 800744e:	6824      	ldr	r4, [r4, #0]
 8007450:	2c00      	cmp	r4, #0
 8007452:	d1f8      	bne.n	8007446 <_fwalk_sglue+0xa>
 8007454:	0030      	movs	r0, r6
 8007456:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007458:	89ab      	ldrh	r3, [r5, #12]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d908      	bls.n	8007470 <_fwalk_sglue+0x34>
 800745e:	220e      	movs	r2, #14
 8007460:	5eab      	ldrsh	r3, [r5, r2]
 8007462:	3301      	adds	r3, #1
 8007464:	d004      	beq.n	8007470 <_fwalk_sglue+0x34>
 8007466:	0029      	movs	r1, r5
 8007468:	9800      	ldr	r0, [sp, #0]
 800746a:	9b01      	ldr	r3, [sp, #4]
 800746c:	4798      	blx	r3
 800746e:	4306      	orrs	r6, r0
 8007470:	3568      	adds	r5, #104	@ 0x68
 8007472:	e7ea      	b.n	800744a <_fwalk_sglue+0xe>

08007474 <_puts_r>:
 8007474:	6a03      	ldr	r3, [r0, #32]
 8007476:	b570      	push	{r4, r5, r6, lr}
 8007478:	0005      	movs	r5, r0
 800747a:	000e      	movs	r6, r1
 800747c:	6884      	ldr	r4, [r0, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <_puts_r+0x12>
 8007482:	f7ff ffc3 	bl	800740c <__sinit>
 8007486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007488:	07db      	lsls	r3, r3, #31
 800748a:	d405      	bmi.n	8007498 <_puts_r+0x24>
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	059b      	lsls	r3, r3, #22
 8007490:	d402      	bmi.n	8007498 <_puts_r+0x24>
 8007492:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007494:	f000 f9bf 	bl	8007816 <__retarget_lock_acquire_recursive>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	071b      	lsls	r3, r3, #28
 800749c:	d502      	bpl.n	80074a4 <_puts_r+0x30>
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11f      	bne.n	80074e4 <_puts_r+0x70>
 80074a4:	0021      	movs	r1, r4
 80074a6:	0028      	movs	r0, r5
 80074a8:	f000 f8d2 	bl	8007650 <__swsetup_r>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d019      	beq.n	80074e4 <_puts_r+0x70>
 80074b0:	2501      	movs	r5, #1
 80074b2:	426d      	negs	r5, r5
 80074b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074b6:	07db      	lsls	r3, r3, #31
 80074b8:	d405      	bmi.n	80074c6 <_puts_r+0x52>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	059b      	lsls	r3, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_puts_r+0x52>
 80074c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074c2:	f000 f9a9 	bl	8007818 <__retarget_lock_release_recursive>
 80074c6:	0028      	movs	r0, r5
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	3601      	adds	r6, #1
 80074cc:	60a3      	str	r3, [r4, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	da04      	bge.n	80074dc <_puts_r+0x68>
 80074d2:	69a2      	ldr	r2, [r4, #24]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	dc16      	bgt.n	8007506 <_puts_r+0x92>
 80074d8:	290a      	cmp	r1, #10
 80074da:	d014      	beq.n	8007506 <_puts_r+0x92>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	7019      	strb	r1, [r3, #0]
 80074e4:	68a3      	ldr	r3, [r4, #8]
 80074e6:	7831      	ldrb	r1, [r6, #0]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	2900      	cmp	r1, #0
 80074ec:	d1ed      	bne.n	80074ca <_puts_r+0x56>
 80074ee:	60a3      	str	r3, [r4, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	da0f      	bge.n	8007514 <_puts_r+0xa0>
 80074f4:	0022      	movs	r2, r4
 80074f6:	0028      	movs	r0, r5
 80074f8:	310a      	adds	r1, #10
 80074fa:	f000 f867 	bl	80075cc <__swbuf_r>
 80074fe:	3001      	adds	r0, #1
 8007500:	d0d6      	beq.n	80074b0 <_puts_r+0x3c>
 8007502:	250a      	movs	r5, #10
 8007504:	e7d6      	b.n	80074b4 <_puts_r+0x40>
 8007506:	0022      	movs	r2, r4
 8007508:	0028      	movs	r0, r5
 800750a:	f000 f85f 	bl	80075cc <__swbuf_r>
 800750e:	3001      	adds	r0, #1
 8007510:	d1e8      	bne.n	80074e4 <_puts_r+0x70>
 8007512:	e7cd      	b.n	80074b0 <_puts_r+0x3c>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	6022      	str	r2, [r4, #0]
 800751a:	220a      	movs	r2, #10
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	e7f0      	b.n	8007502 <_puts_r+0x8e>

08007520 <puts>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4b03      	ldr	r3, [pc, #12]	@ (8007530 <puts+0x10>)
 8007524:	0001      	movs	r1, r0
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	f7ff ffa4 	bl	8007474 <_puts_r>
 800752c:	bd10      	pop	{r4, pc}
 800752e:	46c0      	nop			@ (mov r8, r8)
 8007530:	2000001c 	.word	0x2000001c

08007534 <__sread>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	000c      	movs	r4, r1
 8007538:	250e      	movs	r5, #14
 800753a:	5f49      	ldrsh	r1, [r1, r5]
 800753c:	f000 f918 	bl	8007770 <_read_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	db03      	blt.n	800754c <__sread+0x18>
 8007544:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007546:	181b      	adds	r3, r3, r0
 8007548:	6563      	str	r3, [r4, #84]	@ 0x54
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	4a02      	ldr	r2, [pc, #8]	@ (8007558 <__sread+0x24>)
 8007550:	4013      	ands	r3, r2
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	e7f9      	b.n	800754a <__sread+0x16>
 8007556:	46c0      	nop			@ (mov r8, r8)
 8007558:	ffffefff 	.word	0xffffefff

0800755c <__swrite>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	001f      	movs	r7, r3
 8007560:	898b      	ldrh	r3, [r1, #12]
 8007562:	0005      	movs	r5, r0
 8007564:	000c      	movs	r4, r1
 8007566:	0016      	movs	r6, r2
 8007568:	05db      	lsls	r3, r3, #23
 800756a:	d505      	bpl.n	8007578 <__swrite+0x1c>
 800756c:	230e      	movs	r3, #14
 800756e:	5ec9      	ldrsh	r1, [r1, r3]
 8007570:	2200      	movs	r2, #0
 8007572:	2302      	movs	r3, #2
 8007574:	f000 f8e8 	bl	8007748 <_lseek_r>
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	4a05      	ldr	r2, [pc, #20]	@ (8007590 <__swrite+0x34>)
 800757c:	0028      	movs	r0, r5
 800757e:	4013      	ands	r3, r2
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	0032      	movs	r2, r6
 8007584:	230e      	movs	r3, #14
 8007586:	5ee1      	ldrsh	r1, [r4, r3]
 8007588:	003b      	movs	r3, r7
 800758a:	f000 f905 	bl	8007798 <_write_r>
 800758e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007590:	ffffefff 	.word	0xffffefff

08007594 <__sseek>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	000c      	movs	r4, r1
 8007598:	250e      	movs	r5, #14
 800759a:	5f49      	ldrsh	r1, [r1, r5]
 800759c:	f000 f8d4 	bl	8007748 <_lseek_r>
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	1c42      	adds	r2, r0, #1
 80075a4:	d103      	bne.n	80075ae <__sseek+0x1a>
 80075a6:	4a05      	ldr	r2, [pc, #20]	@ (80075bc <__sseek+0x28>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	81a3      	strh	r3, [r4, #12]
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
 80075ae:	2280      	movs	r2, #128	@ 0x80
 80075b0:	0152      	lsls	r2, r2, #5
 80075b2:	4313      	orrs	r3, r2
 80075b4:	81a3      	strh	r3, [r4, #12]
 80075b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80075b8:	e7f8      	b.n	80075ac <__sseek+0x18>
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	ffffefff 	.word	0xffffefff

080075c0 <__sclose>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	230e      	movs	r3, #14
 80075c4:	5ec9      	ldrsh	r1, [r1, r3]
 80075c6:	f000 f8ad 	bl	8007724 <_close_r>
 80075ca:	bd10      	pop	{r4, pc}

080075cc <__swbuf_r>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	0006      	movs	r6, r0
 80075d0:	000d      	movs	r5, r1
 80075d2:	0014      	movs	r4, r2
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d004      	beq.n	80075e2 <__swbuf_r+0x16>
 80075d8:	6a03      	ldr	r3, [r0, #32]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <__swbuf_r+0x16>
 80075de:	f7ff ff15 	bl	800740c <__sinit>
 80075e2:	69a3      	ldr	r3, [r4, #24]
 80075e4:	60a3      	str	r3, [r4, #8]
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	071b      	lsls	r3, r3, #28
 80075ea:	d502      	bpl.n	80075f2 <__swbuf_r+0x26>
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <__swbuf_r+0x3a>
 80075f2:	0021      	movs	r1, r4
 80075f4:	0030      	movs	r0, r6
 80075f6:	f000 f82b 	bl	8007650 <__swsetup_r>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d003      	beq.n	8007606 <__swbuf_r+0x3a>
 80075fe:	2501      	movs	r5, #1
 8007600:	426d      	negs	r5, r5
 8007602:	0028      	movs	r0, r5
 8007604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	b2ef      	uxtb	r7, r5
 800760c:	1ac0      	subs	r0, r0, r3
 800760e:	6963      	ldr	r3, [r4, #20]
 8007610:	b2ed      	uxtb	r5, r5
 8007612:	4283      	cmp	r3, r0
 8007614:	dc05      	bgt.n	8007622 <__swbuf_r+0x56>
 8007616:	0021      	movs	r1, r4
 8007618:	0030      	movs	r0, r6
 800761a:	f001 fcbb 	bl	8008f94 <_fflush_r>
 800761e:	2800      	cmp	r0, #0
 8007620:	d1ed      	bne.n	80075fe <__swbuf_r+0x32>
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	3001      	adds	r0, #1
 8007626:	3b01      	subs	r3, #1
 8007628:	60a3      	str	r3, [r4, #8]
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	6022      	str	r2, [r4, #0]
 8007630:	701f      	strb	r7, [r3, #0]
 8007632:	6963      	ldr	r3, [r4, #20]
 8007634:	4283      	cmp	r3, r0
 8007636:	d004      	beq.n	8007642 <__swbuf_r+0x76>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	07db      	lsls	r3, r3, #31
 800763c:	d5e1      	bpl.n	8007602 <__swbuf_r+0x36>
 800763e:	2d0a      	cmp	r5, #10
 8007640:	d1df      	bne.n	8007602 <__swbuf_r+0x36>
 8007642:	0021      	movs	r1, r4
 8007644:	0030      	movs	r0, r6
 8007646:	f001 fca5 	bl	8008f94 <_fflush_r>
 800764a:	2800      	cmp	r0, #0
 800764c:	d0d9      	beq.n	8007602 <__swbuf_r+0x36>
 800764e:	e7d6      	b.n	80075fe <__swbuf_r+0x32>

08007650 <__swsetup_r>:
 8007650:	4b2d      	ldr	r3, [pc, #180]	@ (8007708 <__swsetup_r+0xb8>)
 8007652:	b570      	push	{r4, r5, r6, lr}
 8007654:	0005      	movs	r5, r0
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	000c      	movs	r4, r1
 800765a:	2800      	cmp	r0, #0
 800765c:	d004      	beq.n	8007668 <__swsetup_r+0x18>
 800765e:	6a03      	ldr	r3, [r0, #32]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <__swsetup_r+0x18>
 8007664:	f7ff fed2 	bl	800740c <__sinit>
 8007668:	230c      	movs	r3, #12
 800766a:	5ee2      	ldrsh	r2, [r4, r3]
 800766c:	0713      	lsls	r3, r2, #28
 800766e:	d423      	bmi.n	80076b8 <__swsetup_r+0x68>
 8007670:	06d3      	lsls	r3, r2, #27
 8007672:	d407      	bmi.n	8007684 <__swsetup_r+0x34>
 8007674:	2309      	movs	r3, #9
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	2340      	movs	r3, #64	@ 0x40
 800767a:	2001      	movs	r0, #1
 800767c:	4313      	orrs	r3, r2
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	4240      	negs	r0, r0
 8007682:	e03a      	b.n	80076fa <__swsetup_r+0xaa>
 8007684:	0752      	lsls	r2, r2, #29
 8007686:	d513      	bpl.n	80076b0 <__swsetup_r+0x60>
 8007688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800768a:	2900      	cmp	r1, #0
 800768c:	d008      	beq.n	80076a0 <__swsetup_r+0x50>
 800768e:	0023      	movs	r3, r4
 8007690:	3344      	adds	r3, #68	@ 0x44
 8007692:	4299      	cmp	r1, r3
 8007694:	d002      	beq.n	800769c <__swsetup_r+0x4c>
 8007696:	0028      	movs	r0, r5
 8007698:	f000 ff4c 	bl	8008534 <_free_r>
 800769c:	2300      	movs	r3, #0
 800769e:	6363      	str	r3, [r4, #52]	@ 0x34
 80076a0:	2224      	movs	r2, #36	@ 0x24
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	4393      	bics	r3, r2
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	2300      	movs	r3, #0
 80076aa:	6063      	str	r3, [r4, #4]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	2308      	movs	r3, #8
 80076b2:	89a2      	ldrh	r2, [r4, #12]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10b      	bne.n	80076d6 <__swsetup_r+0x86>
 80076be:	21a0      	movs	r1, #160	@ 0xa0
 80076c0:	2280      	movs	r2, #128	@ 0x80
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	0089      	lsls	r1, r1, #2
 80076c6:	0092      	lsls	r2, r2, #2
 80076c8:	400b      	ands	r3, r1
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d003      	beq.n	80076d6 <__swsetup_r+0x86>
 80076ce:	0021      	movs	r1, r4
 80076d0:	0028      	movs	r0, r5
 80076d2:	f001 fcb5 	bl	8009040 <__smakebuf_r>
 80076d6:	230c      	movs	r3, #12
 80076d8:	5ee2      	ldrsh	r2, [r4, r3]
 80076da:	2101      	movs	r1, #1
 80076dc:	0013      	movs	r3, r2
 80076de:	400b      	ands	r3, r1
 80076e0:	420a      	tst	r2, r1
 80076e2:	d00b      	beq.n	80076fc <__swsetup_r+0xac>
 80076e4:	2300      	movs	r3, #0
 80076e6:	60a3      	str	r3, [r4, #8]
 80076e8:	6963      	ldr	r3, [r4, #20]
 80076ea:	425b      	negs	r3, r3
 80076ec:	61a3      	str	r3, [r4, #24]
 80076ee:	2000      	movs	r0, #0
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	4283      	cmp	r3, r0
 80076f4:	d101      	bne.n	80076fa <__swsetup_r+0xaa>
 80076f6:	0613      	lsls	r3, r2, #24
 80076f8:	d4be      	bmi.n	8007678 <__swsetup_r+0x28>
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	0791      	lsls	r1, r2, #30
 80076fe:	d400      	bmi.n	8007702 <__swsetup_r+0xb2>
 8007700:	6963      	ldr	r3, [r4, #20]
 8007702:	60a3      	str	r3, [r4, #8]
 8007704:	e7f3      	b.n	80076ee <__swsetup_r+0x9e>
 8007706:	46c0      	nop			@ (mov r8, r8)
 8007708:	2000001c 	.word	0x2000001c

0800770c <memset>:
 800770c:	0003      	movs	r3, r0
 800770e:	1882      	adds	r2, r0, r2
 8007710:	4293      	cmp	r3, r2
 8007712:	d100      	bne.n	8007716 <memset+0xa>
 8007714:	4770      	bx	lr
 8007716:	7019      	strb	r1, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	e7f9      	b.n	8007710 <memset+0x4>

0800771c <_localeconv_r>:
 800771c:	4800      	ldr	r0, [pc, #0]	@ (8007720 <_localeconv_r+0x4>)
 800771e:	4770      	bx	lr
 8007720:	2000015c 	.word	0x2000015c

08007724 <_close_r>:
 8007724:	2300      	movs	r3, #0
 8007726:	b570      	push	{r4, r5, r6, lr}
 8007728:	4d06      	ldr	r5, [pc, #24]	@ (8007744 <_close_r+0x20>)
 800772a:	0004      	movs	r4, r0
 800772c:	0008      	movs	r0, r1
 800772e:	602b      	str	r3, [r5, #0]
 8007730:	f7fb fcd0 	bl	80030d4 <_close>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	d103      	bne.n	8007740 <_close_r+0x1c>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d000      	beq.n	8007740 <_close_r+0x1c>
 800773e:	6023      	str	r3, [r4, #0]
 8007740:	bd70      	pop	{r4, r5, r6, pc}
 8007742:	46c0      	nop			@ (mov r8, r8)
 8007744:	200004b0 	.word	0x200004b0

08007748 <_lseek_r>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	0004      	movs	r4, r0
 800774c:	0008      	movs	r0, r1
 800774e:	0011      	movs	r1, r2
 8007750:	001a      	movs	r2, r3
 8007752:	2300      	movs	r3, #0
 8007754:	4d05      	ldr	r5, [pc, #20]	@ (800776c <_lseek_r+0x24>)
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f7fb fcdd 	bl	8003116 <_lseek>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d103      	bne.n	8007768 <_lseek_r+0x20>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d000      	beq.n	8007768 <_lseek_r+0x20>
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	bd70      	pop	{r4, r5, r6, pc}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	200004b0 	.word	0x200004b0

08007770 <_read_r>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	0004      	movs	r4, r0
 8007774:	0008      	movs	r0, r1
 8007776:	0011      	movs	r1, r2
 8007778:	001a      	movs	r2, r3
 800777a:	2300      	movs	r3, #0
 800777c:	4d05      	ldr	r5, [pc, #20]	@ (8007794 <_read_r+0x24>)
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7fb fc8b 	bl	800309a <_read>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d103      	bne.n	8007790 <_read_r+0x20>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d000      	beq.n	8007790 <_read_r+0x20>
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	46c0      	nop			@ (mov r8, r8)
 8007794:	200004b0 	.word	0x200004b0

08007798 <_write_r>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	0004      	movs	r4, r0
 800779c:	0008      	movs	r0, r1
 800779e:	0011      	movs	r1, r2
 80077a0:	001a      	movs	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	4d05      	ldr	r5, [pc, #20]	@ (80077bc <_write_r+0x24>)
 80077a6:	602b      	str	r3, [r5, #0]
 80077a8:	f7fb f832 	bl	8002810 <_write>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d103      	bne.n	80077b8 <_write_r+0x20>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d000      	beq.n	80077b8 <_write_r+0x20>
 80077b6:	6023      	str	r3, [r4, #0]
 80077b8:	bd70      	pop	{r4, r5, r6, pc}
 80077ba:	46c0      	nop			@ (mov r8, r8)
 80077bc:	200004b0 	.word	0x200004b0

080077c0 <__errno>:
 80077c0:	4b01      	ldr	r3, [pc, #4]	@ (80077c8 <__errno+0x8>)
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	4770      	bx	lr
 80077c6:	46c0      	nop			@ (mov r8, r8)
 80077c8:	2000001c 	.word	0x2000001c

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	2600      	movs	r6, #0
 80077d0:	4c0c      	ldr	r4, [pc, #48]	@ (8007804 <__libc_init_array+0x38>)
 80077d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007808 <__libc_init_array+0x3c>)
 80077d4:	1b64      	subs	r4, r4, r5
 80077d6:	10a4      	asrs	r4, r4, #2
 80077d8:	42a6      	cmp	r6, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	2600      	movs	r6, #0
 80077de:	f001 febf 	bl	8009560 <_init>
 80077e2:	4c0a      	ldr	r4, [pc, #40]	@ (800780c <__libc_init_array+0x40>)
 80077e4:	4d0a      	ldr	r5, [pc, #40]	@ (8007810 <__libc_init_array+0x44>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	42a6      	cmp	r6, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	00b3      	lsls	r3, r6, #2
 80077f2:	58eb      	ldr	r3, [r5, r3]
 80077f4:	4798      	blx	r3
 80077f6:	3601      	adds	r6, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	00b3      	lsls	r3, r6, #2
 80077fc:	58eb      	ldr	r3, [r5, r3]
 80077fe:	4798      	blx	r3
 8007800:	3601      	adds	r6, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	080099c0 	.word	0x080099c0
 8007808:	080099c0 	.word	0x080099c0
 800780c:	080099c4 	.word	0x080099c4
 8007810:	080099c0 	.word	0x080099c0

08007814 <__retarget_lock_init_recursive>:
 8007814:	4770      	bx	lr

08007816 <__retarget_lock_acquire_recursive>:
 8007816:	4770      	bx	lr

08007818 <__retarget_lock_release_recursive>:
 8007818:	4770      	bx	lr

0800781a <memchr>:
 800781a:	b2c9      	uxtb	r1, r1
 800781c:	1882      	adds	r2, r0, r2
 800781e:	4290      	cmp	r0, r2
 8007820:	d101      	bne.n	8007826 <memchr+0xc>
 8007822:	2000      	movs	r0, #0
 8007824:	4770      	bx	lr
 8007826:	7803      	ldrb	r3, [r0, #0]
 8007828:	428b      	cmp	r3, r1
 800782a:	d0fb      	beq.n	8007824 <memchr+0xa>
 800782c:	3001      	adds	r0, #1
 800782e:	e7f6      	b.n	800781e <memchr+0x4>

08007830 <quorem>:
 8007830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007832:	6902      	ldr	r2, [r0, #16]
 8007834:	690f      	ldr	r7, [r1, #16]
 8007836:	b087      	sub	sp, #28
 8007838:	0006      	movs	r6, r0
 800783a:	000b      	movs	r3, r1
 800783c:	2000      	movs	r0, #0
 800783e:	9102      	str	r1, [sp, #8]
 8007840:	42ba      	cmp	r2, r7
 8007842:	db6d      	blt.n	8007920 <quorem+0xf0>
 8007844:	3f01      	subs	r7, #1
 8007846:	00bc      	lsls	r4, r7, #2
 8007848:	3314      	adds	r3, #20
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	191b      	adds	r3, r3, r4
 800784e:	9303      	str	r3, [sp, #12]
 8007850:	0033      	movs	r3, r6
 8007852:	3314      	adds	r3, #20
 8007854:	191c      	adds	r4, r3, r4
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	9804      	ldr	r0, [sp, #16]
 8007860:	681d      	ldr	r5, [r3, #0]
 8007862:	3501      	adds	r5, #1
 8007864:	0029      	movs	r1, r5
 8007866:	f7f8 fc67 	bl	8000138 <__udivsi3>
 800786a:	9b04      	ldr	r3, [sp, #16]
 800786c:	9000      	str	r0, [sp, #0]
 800786e:	42ab      	cmp	r3, r5
 8007870:	d32b      	bcc.n	80078ca <quorem+0x9a>
 8007872:	9b05      	ldr	r3, [sp, #20]
 8007874:	9d01      	ldr	r5, [sp, #4]
 8007876:	469c      	mov	ip, r3
 8007878:	2300      	movs	r3, #0
 800787a:	9305      	str	r3, [sp, #20]
 800787c:	9304      	str	r3, [sp, #16]
 800787e:	4662      	mov	r2, ip
 8007880:	ca08      	ldmia	r2!, {r3}
 8007882:	6828      	ldr	r0, [r5, #0]
 8007884:	4694      	mov	ip, r2
 8007886:	9a00      	ldr	r2, [sp, #0]
 8007888:	b299      	uxth	r1, r3
 800788a:	4351      	muls	r1, r2
 800788c:	9a05      	ldr	r2, [sp, #20]
 800788e:	0c1b      	lsrs	r3, r3, #16
 8007890:	1889      	adds	r1, r1, r2
 8007892:	9a00      	ldr	r2, [sp, #0]
 8007894:	4353      	muls	r3, r2
 8007896:	0c0a      	lsrs	r2, r1, #16
 8007898:	189b      	adds	r3, r3, r2
 800789a:	0c1a      	lsrs	r2, r3, #16
 800789c:	b289      	uxth	r1, r1
 800789e:	9205      	str	r2, [sp, #20]
 80078a0:	b282      	uxth	r2, r0
 80078a2:	1a52      	subs	r2, r2, r1
 80078a4:	9904      	ldr	r1, [sp, #16]
 80078a6:	0c00      	lsrs	r0, r0, #16
 80078a8:	1852      	adds	r2, r2, r1
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	1411      	asrs	r1, r2, #16
 80078ae:	1ac3      	subs	r3, r0, r3
 80078b0:	185b      	adds	r3, r3, r1
 80078b2:	1419      	asrs	r1, r3, #16
 80078b4:	b292      	uxth	r2, r2
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	431a      	orrs	r2, r3
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	9104      	str	r1, [sp, #16]
 80078be:	c504      	stmia	r5!, {r2}
 80078c0:	4563      	cmp	r3, ip
 80078c2:	d2dc      	bcs.n	800787e <quorem+0x4e>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d030      	beq.n	800792c <quorem+0xfc>
 80078ca:	0030      	movs	r0, r6
 80078cc:	9902      	ldr	r1, [sp, #8]
 80078ce:	f001 f9c5 	bl	8008c5c <__mcmp>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	db23      	blt.n	800791e <quorem+0xee>
 80078d6:	0034      	movs	r4, r6
 80078d8:	2500      	movs	r5, #0
 80078da:	9902      	ldr	r1, [sp, #8]
 80078dc:	3414      	adds	r4, #20
 80078de:	3114      	adds	r1, #20
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	c901      	ldmia	r1!, {r0}
 80078e4:	9302      	str	r3, [sp, #8]
 80078e6:	466b      	mov	r3, sp
 80078e8:	891b      	ldrh	r3, [r3, #8]
 80078ea:	b282      	uxth	r2, r0
 80078ec:	1a9a      	subs	r2, r3, r2
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	1952      	adds	r2, r2, r5
 80078f2:	0c00      	lsrs	r0, r0, #16
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	1a1b      	subs	r3, r3, r0
 80078f8:	1410      	asrs	r0, r2, #16
 80078fa:	181b      	adds	r3, r3, r0
 80078fc:	141d      	asrs	r5, r3, #16
 80078fe:	b292      	uxth	r2, r2
 8007900:	041b      	lsls	r3, r3, #16
 8007902:	431a      	orrs	r2, r3
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	c404      	stmia	r4!, {r2}
 8007908:	428b      	cmp	r3, r1
 800790a:	d2e9      	bcs.n	80078e0 <quorem+0xb0>
 800790c:	9a01      	ldr	r2, [sp, #4]
 800790e:	00bb      	lsls	r3, r7, #2
 8007910:	18d3      	adds	r3, r2, r3
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	2a00      	cmp	r2, #0
 8007916:	d013      	beq.n	8007940 <quorem+0x110>
 8007918:	9b00      	ldr	r3, [sp, #0]
 800791a:	3301      	adds	r3, #1
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	9800      	ldr	r0, [sp, #0]
 8007920:	b007      	add	sp, #28
 8007922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d104      	bne.n	8007934 <quorem+0x104>
 800792a:	3f01      	subs	r7, #1
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	3c04      	subs	r4, #4
 8007930:	42a3      	cmp	r3, r4
 8007932:	d3f7      	bcc.n	8007924 <quorem+0xf4>
 8007934:	6137      	str	r7, [r6, #16]
 8007936:	e7c8      	b.n	80078ca <quorem+0x9a>
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	2a00      	cmp	r2, #0
 800793c:	d104      	bne.n	8007948 <quorem+0x118>
 800793e:	3f01      	subs	r7, #1
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	3b04      	subs	r3, #4
 8007944:	429a      	cmp	r2, r3
 8007946:	d3f7      	bcc.n	8007938 <quorem+0x108>
 8007948:	6137      	str	r7, [r6, #16]
 800794a:	e7e5      	b.n	8007918 <quorem+0xe8>

0800794c <_dtoa_r>:
 800794c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800794e:	0014      	movs	r4, r2
 8007950:	001d      	movs	r5, r3
 8007952:	69c6      	ldr	r6, [r0, #28]
 8007954:	b09d      	sub	sp, #116	@ 0x74
 8007956:	940a      	str	r4, [sp, #40]	@ 0x28
 8007958:	950b      	str	r5, [sp, #44]	@ 0x2c
 800795a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800795c:	9003      	str	r0, [sp, #12]
 800795e:	2e00      	cmp	r6, #0
 8007960:	d10f      	bne.n	8007982 <_dtoa_r+0x36>
 8007962:	2010      	movs	r0, #16
 8007964:	f000 fe30 	bl	80085c8 <malloc>
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	1e02      	subs	r2, r0, #0
 800796c:	61d8      	str	r0, [r3, #28]
 800796e:	d104      	bne.n	800797a <_dtoa_r+0x2e>
 8007970:	21ef      	movs	r1, #239	@ 0xef
 8007972:	4bc7      	ldr	r3, [pc, #796]	@ (8007c90 <_dtoa_r+0x344>)
 8007974:	48c7      	ldr	r0, [pc, #796]	@ (8007c94 <_dtoa_r+0x348>)
 8007976:	f001 fbe5 	bl	8009144 <__assert_func>
 800797a:	6046      	str	r6, [r0, #4]
 800797c:	6086      	str	r6, [r0, #8]
 800797e:	6006      	str	r6, [r0, #0]
 8007980:	60c6      	str	r6, [r0, #12]
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	6819      	ldr	r1, [r3, #0]
 8007988:	2900      	cmp	r1, #0
 800798a:	d00b      	beq.n	80079a4 <_dtoa_r+0x58>
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	2301      	movs	r3, #1
 8007990:	4093      	lsls	r3, r2
 8007992:	604a      	str	r2, [r1, #4]
 8007994:	608b      	str	r3, [r1, #8]
 8007996:	9803      	ldr	r0, [sp, #12]
 8007998:	f000 ff16 	bl	80087c8 <_Bfree>
 800799c:	2200      	movs	r2, #0
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	2d00      	cmp	r5, #0
 80079a6:	da1e      	bge.n	80079e6 <_dtoa_r+0x9a>
 80079a8:	2301      	movs	r3, #1
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	006b      	lsls	r3, r5, #1
 80079ae:	085b      	lsrs	r3, r3, #1
 80079b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079b2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80079b4:	4bb8      	ldr	r3, [pc, #736]	@ (8007c98 <_dtoa_r+0x34c>)
 80079b6:	4ab8      	ldr	r2, [pc, #736]	@ (8007c98 <_dtoa_r+0x34c>)
 80079b8:	403b      	ands	r3, r7
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d116      	bne.n	80079ec <_dtoa_r+0xa0>
 80079be:	4bb7      	ldr	r3, [pc, #732]	@ (8007c9c <_dtoa_r+0x350>)
 80079c0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	033b      	lsls	r3, r7, #12
 80079c6:	0b1b      	lsrs	r3, r3, #12
 80079c8:	4323      	orrs	r3, r4
 80079ca:	d101      	bne.n	80079d0 <_dtoa_r+0x84>
 80079cc:	f000 fd83 	bl	80084d6 <_dtoa_r+0xb8a>
 80079d0:	4bb3      	ldr	r3, [pc, #716]	@ (8007ca0 <_dtoa_r+0x354>)
 80079d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80079d4:	9308      	str	r3, [sp, #32]
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	d002      	beq.n	80079e0 <_dtoa_r+0x94>
 80079da:	4bb2      	ldr	r3, [pc, #712]	@ (8007ca4 <_dtoa_r+0x358>)
 80079dc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	9808      	ldr	r0, [sp, #32]
 80079e2:	b01d      	add	sp, #116	@ 0x74
 80079e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e6:	2300      	movs	r3, #0
 80079e8:	603b      	str	r3, [r7, #0]
 80079ea:	e7e2      	b.n	80079b2 <_dtoa_r+0x66>
 80079ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079f0:	9212      	str	r2, [sp, #72]	@ 0x48
 80079f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80079f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80079f8:	2200      	movs	r2, #0
 80079fa:	2300      	movs	r3, #0
 80079fc:	f7f8 fd22 	bl	8000444 <__aeabi_dcmpeq>
 8007a00:	1e06      	subs	r6, r0, #0
 8007a02:	d00b      	beq.n	8007a1c <_dtoa_r+0xd0>
 8007a04:	2301      	movs	r3, #1
 8007a06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <_dtoa_r+0xca>
 8007a10:	4ba5      	ldr	r3, [pc, #660]	@ (8007ca8 <_dtoa_r+0x35c>)
 8007a12:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	4ba5      	ldr	r3, [pc, #660]	@ (8007cac <_dtoa_r+0x360>)
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	e7e1      	b.n	80079e0 <_dtoa_r+0x94>
 8007a1c:	ab1a      	add	r3, sp, #104	@ 0x68
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	9803      	ldr	r0, [sp, #12]
 8007a26:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a2a:	f001 f9cd 	bl	8008dc8 <__d2b>
 8007a2e:	007a      	lsls	r2, r7, #1
 8007a30:	9005      	str	r0, [sp, #20]
 8007a32:	0d52      	lsrs	r2, r2, #21
 8007a34:	d100      	bne.n	8007a38 <_dtoa_r+0xec>
 8007a36:	e07b      	b.n	8007b30 <_dtoa_r+0x1e4>
 8007a38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a3a:	9618      	str	r6, [sp, #96]	@ 0x60
 8007a3c:	0319      	lsls	r1, r3, #12
 8007a3e:	4b9c      	ldr	r3, [pc, #624]	@ (8007cb0 <_dtoa_r+0x364>)
 8007a40:	0b09      	lsrs	r1, r1, #12
 8007a42:	430b      	orrs	r3, r1
 8007a44:	499b      	ldr	r1, [pc, #620]	@ (8007cb4 <_dtoa_r+0x368>)
 8007a46:	1857      	adds	r7, r2, r1
 8007a48:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007a4a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007a4c:	0019      	movs	r1, r3
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4b99      	ldr	r3, [pc, #612]	@ (8007cb8 <_dtoa_r+0x36c>)
 8007a52:	f7fa fa67 	bl	8001f24 <__aeabi_dsub>
 8007a56:	4a99      	ldr	r2, [pc, #612]	@ (8007cbc <_dtoa_r+0x370>)
 8007a58:	4b99      	ldr	r3, [pc, #612]	@ (8007cc0 <_dtoa_r+0x374>)
 8007a5a:	f7f9 ff9b 	bl	8001994 <__aeabi_dmul>
 8007a5e:	4a99      	ldr	r2, [pc, #612]	@ (8007cc4 <_dtoa_r+0x378>)
 8007a60:	4b99      	ldr	r3, [pc, #612]	@ (8007cc8 <_dtoa_r+0x37c>)
 8007a62:	f7f8 ffef 	bl	8000a44 <__aeabi_dadd>
 8007a66:	0004      	movs	r4, r0
 8007a68:	0038      	movs	r0, r7
 8007a6a:	000d      	movs	r5, r1
 8007a6c:	f7fa fe54 	bl	8002718 <__aeabi_i2d>
 8007a70:	4a96      	ldr	r2, [pc, #600]	@ (8007ccc <_dtoa_r+0x380>)
 8007a72:	4b97      	ldr	r3, [pc, #604]	@ (8007cd0 <_dtoa_r+0x384>)
 8007a74:	f7f9 ff8e 	bl	8001994 <__aeabi_dmul>
 8007a78:	0002      	movs	r2, r0
 8007a7a:	000b      	movs	r3, r1
 8007a7c:	0020      	movs	r0, r4
 8007a7e:	0029      	movs	r1, r5
 8007a80:	f7f8 ffe0 	bl	8000a44 <__aeabi_dadd>
 8007a84:	0004      	movs	r4, r0
 8007a86:	000d      	movs	r5, r1
 8007a88:	f7fa fe0a 	bl	80026a0 <__aeabi_d2iz>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	9004      	str	r0, [sp, #16]
 8007a90:	2300      	movs	r3, #0
 8007a92:	0020      	movs	r0, r4
 8007a94:	0029      	movs	r1, r5
 8007a96:	f7f8 fcdb 	bl	8000450 <__aeabi_dcmplt>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d00b      	beq.n	8007ab6 <_dtoa_r+0x16a>
 8007a9e:	9804      	ldr	r0, [sp, #16]
 8007aa0:	f7fa fe3a 	bl	8002718 <__aeabi_i2d>
 8007aa4:	002b      	movs	r3, r5
 8007aa6:	0022      	movs	r2, r4
 8007aa8:	f7f8 fccc 	bl	8000444 <__aeabi_dcmpeq>
 8007aac:	4243      	negs	r3, r0
 8007aae:	4158      	adcs	r0, r3
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	1a1b      	subs	r3, r3, r0
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	9315      	str	r3, [sp, #84]	@ 0x54
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	2b16      	cmp	r3, #22
 8007abe:	d810      	bhi.n	8007ae2 <_dtoa_r+0x196>
 8007ac0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007ac2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	4b83      	ldr	r3, [pc, #524]	@ (8007cd4 <_dtoa_r+0x388>)
 8007ac8:	00d2      	lsls	r2, r2, #3
 8007aca:	189b      	adds	r3, r3, r2
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f7f8 fcbe 	bl	8000450 <__aeabi_dcmplt>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d047      	beq.n	8007b68 <_dtoa_r+0x21c>
 8007ad8:	9b04      	ldr	r3, [sp, #16]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007ae6:	9206      	str	r2, [sp, #24]
 8007ae8:	1bdb      	subs	r3, r3, r7
 8007aea:	1e5a      	subs	r2, r3, #1
 8007aec:	d53e      	bpl.n	8007b6c <_dtoa_r+0x220>
 8007aee:	2201      	movs	r2, #1
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	9306      	str	r3, [sp, #24]
 8007af4:	2300      	movs	r3, #0
 8007af6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	db38      	blt.n	8007b70 <_dtoa_r+0x224>
 8007afe:	9a04      	ldr	r2, [sp, #16]
 8007b00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b02:	4694      	mov	ip, r2
 8007b04:	4463      	add	r3, ip
 8007b06:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b10:	2401      	movs	r4, #1
 8007b12:	2b09      	cmp	r3, #9
 8007b14:	d867      	bhi.n	8007be6 <_dtoa_r+0x29a>
 8007b16:	2b05      	cmp	r3, #5
 8007b18:	dd02      	ble.n	8007b20 <_dtoa_r+0x1d4>
 8007b1a:	2400      	movs	r4, #0
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	9322      	str	r3, [sp, #136]	@ 0x88
 8007b20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b22:	1e98      	subs	r0, r3, #2
 8007b24:	2803      	cmp	r0, #3
 8007b26:	d867      	bhi.n	8007bf8 <_dtoa_r+0x2ac>
 8007b28:	f7f8 faf2 	bl	8000110 <__gnu_thumb1_case_uqi>
 8007b2c:	5b383a2b 	.word	0x5b383a2b
 8007b30:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007b32:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007b34:	18f6      	adds	r6, r6, r3
 8007b36:	4b68      	ldr	r3, [pc, #416]	@ (8007cd8 <_dtoa_r+0x38c>)
 8007b38:	18f2      	adds	r2, r6, r3
 8007b3a:	2a20      	cmp	r2, #32
 8007b3c:	dd0f      	ble.n	8007b5e <_dtoa_r+0x212>
 8007b3e:	2340      	movs	r3, #64	@ 0x40
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	409f      	lsls	r7, r3
 8007b44:	4b65      	ldr	r3, [pc, #404]	@ (8007cdc <_dtoa_r+0x390>)
 8007b46:	0038      	movs	r0, r7
 8007b48:	18f3      	adds	r3, r6, r3
 8007b4a:	40dc      	lsrs	r4, r3
 8007b4c:	4320      	orrs	r0, r4
 8007b4e:	f7fa fe11 	bl	8002774 <__aeabi_ui2d>
 8007b52:	2201      	movs	r2, #1
 8007b54:	4b62      	ldr	r3, [pc, #392]	@ (8007ce0 <_dtoa_r+0x394>)
 8007b56:	1e77      	subs	r7, r6, #1
 8007b58:	18cb      	adds	r3, r1, r3
 8007b5a:	9218      	str	r2, [sp, #96]	@ 0x60
 8007b5c:	e776      	b.n	8007a4c <_dtoa_r+0x100>
 8007b5e:	2320      	movs	r3, #32
 8007b60:	0020      	movs	r0, r4
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	4098      	lsls	r0, r3
 8007b66:	e7f2      	b.n	8007b4e <_dtoa_r+0x202>
 8007b68:	9015      	str	r0, [sp, #84]	@ 0x54
 8007b6a:	e7ba      	b.n	8007ae2 <_dtoa_r+0x196>
 8007b6c:	920d      	str	r2, [sp, #52]	@ 0x34
 8007b6e:	e7c3      	b.n	8007af8 <_dtoa_r+0x1ac>
 8007b70:	9b06      	ldr	r3, [sp, #24]
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	1a9b      	subs	r3, r3, r2
 8007b76:	9306      	str	r3, [sp, #24]
 8007b78:	4253      	negs	r3, r2
 8007b7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9314      	str	r3, [sp, #80]	@ 0x50
 8007b80:	e7c5      	b.n	8007b0e <_dtoa_r+0x1c2>
 8007b82:	2300      	movs	r3, #0
 8007b84:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b86:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b88:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dc13      	bgt.n	8007bb8 <_dtoa_r+0x26c>
 8007b90:	2301      	movs	r3, #1
 8007b92:	001a      	movs	r2, r3
 8007b94:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b98:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007b9a:	e00d      	b.n	8007bb8 <_dtoa_r+0x26c>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e7f1      	b.n	8007b84 <_dtoa_r+0x238>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ba4:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ba6:	4694      	mov	ip, r2
 8007ba8:	9b04      	ldr	r3, [sp, #16]
 8007baa:	4463      	add	r3, ip
 8007bac:	930e      	str	r3, [sp, #56]	@ 0x38
 8007bae:	3301      	adds	r3, #1
 8007bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dc00      	bgt.n	8007bb8 <_dtoa_r+0x26c>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	9a03      	ldr	r2, [sp, #12]
 8007bba:	2100      	movs	r1, #0
 8007bbc:	69d0      	ldr	r0, [r2, #28]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	0015      	movs	r5, r2
 8007bc2:	3514      	adds	r5, #20
 8007bc4:	429d      	cmp	r5, r3
 8007bc6:	d91b      	bls.n	8007c00 <_dtoa_r+0x2b4>
 8007bc8:	6041      	str	r1, [r0, #4]
 8007bca:	9803      	ldr	r0, [sp, #12]
 8007bcc:	f000 fdb8 	bl	8008740 <_Balloc>
 8007bd0:	9008      	str	r0, [sp, #32]
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d117      	bne.n	8007c06 <_dtoa_r+0x2ba>
 8007bd6:	21b0      	movs	r1, #176	@ 0xb0
 8007bd8:	4b42      	ldr	r3, [pc, #264]	@ (8007ce4 <_dtoa_r+0x398>)
 8007bda:	482e      	ldr	r0, [pc, #184]	@ (8007c94 <_dtoa_r+0x348>)
 8007bdc:	9a08      	ldr	r2, [sp, #32]
 8007bde:	31ff      	adds	r1, #255	@ 0xff
 8007be0:	e6c9      	b.n	8007976 <_dtoa_r+0x2a>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e7dd      	b.n	8007ba2 <_dtoa_r+0x256>
 8007be6:	2300      	movs	r3, #0
 8007be8:	9410      	str	r4, [sp, #64]	@ 0x40
 8007bea:	9322      	str	r3, [sp, #136]	@ 0x88
 8007bec:	3b01      	subs	r3, #1
 8007bee:	930e      	str	r3, [sp, #56]	@ 0x38
 8007bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	3313      	adds	r3, #19
 8007bf6:	e7cf      	b.n	8007b98 <_dtoa_r+0x24c>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bfc:	3b02      	subs	r3, #2
 8007bfe:	e7f6      	b.n	8007bee <_dtoa_r+0x2a2>
 8007c00:	3101      	adds	r1, #1
 8007c02:	0052      	lsls	r2, r2, #1
 8007c04:	e7dc      	b.n	8007bc0 <_dtoa_r+0x274>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	9a08      	ldr	r2, [sp, #32]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c10:	2b0e      	cmp	r3, #14
 8007c12:	d900      	bls.n	8007c16 <_dtoa_r+0x2ca>
 8007c14:	e0d9      	b.n	8007dca <_dtoa_r+0x47e>
 8007c16:	2c00      	cmp	r4, #0
 8007c18:	d100      	bne.n	8007c1c <_dtoa_r+0x2d0>
 8007c1a:	e0d6      	b.n	8007dca <_dtoa_r+0x47e>
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dd64      	ble.n	8007cec <_dtoa_r+0x3a0>
 8007c22:	210f      	movs	r1, #15
 8007c24:	9a04      	ldr	r2, [sp, #16]
 8007c26:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd4 <_dtoa_r+0x388>)
 8007c28:	400a      	ands	r2, r1
 8007c2a:	00d2      	lsls	r2, r2, #3
 8007c2c:	189b      	adds	r3, r3, r2
 8007c2e:	681e      	ldr	r6, [r3, #0]
 8007c30:	685f      	ldr	r7, [r3, #4]
 8007c32:	9b04      	ldr	r3, [sp, #16]
 8007c34:	2402      	movs	r4, #2
 8007c36:	111d      	asrs	r5, r3, #4
 8007c38:	05db      	lsls	r3, r3, #23
 8007c3a:	d50a      	bpl.n	8007c52 <_dtoa_r+0x306>
 8007c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8007ce8 <_dtoa_r+0x39c>)
 8007c3e:	400d      	ands	r5, r1
 8007c40:	6a1a      	ldr	r2, [r3, #32]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007c46:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007c48:	f7f9 fa60 	bl	800110c <__aeabi_ddiv>
 8007c4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c50:	3401      	adds	r4, #1
 8007c52:	4b25      	ldr	r3, [pc, #148]	@ (8007ce8 <_dtoa_r+0x39c>)
 8007c54:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	d108      	bne.n	8007c6c <_dtoa_r+0x320>
 8007c5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c5e:	0032      	movs	r2, r6
 8007c60:	003b      	movs	r3, r7
 8007c62:	f7f9 fa53 	bl	800110c <__aeabi_ddiv>
 8007c66:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c68:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c6a:	e05a      	b.n	8007d22 <_dtoa_r+0x3d6>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	421d      	tst	r5, r3
 8007c70:	d009      	beq.n	8007c86 <_dtoa_r+0x33a>
 8007c72:	18e4      	adds	r4, r4, r3
 8007c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c76:	0030      	movs	r0, r6
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	0039      	movs	r1, r7
 8007c7e:	f7f9 fe89 	bl	8001994 <__aeabi_dmul>
 8007c82:	0006      	movs	r6, r0
 8007c84:	000f      	movs	r7, r1
 8007c86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c88:	106d      	asrs	r5, r5, #1
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	e7e2      	b.n	8007c54 <_dtoa_r+0x308>
 8007c8e:	46c0      	nop			@ (mov r8, r8)
 8007c90:	08009689 	.word	0x08009689
 8007c94:	080096a0 	.word	0x080096a0
 8007c98:	7ff00000 	.word	0x7ff00000
 8007c9c:	0000270f 	.word	0x0000270f
 8007ca0:	08009685 	.word	0x08009685
 8007ca4:	08009688 	.word	0x08009688
 8007ca8:	08009659 	.word	0x08009659
 8007cac:	08009658 	.word	0x08009658
 8007cb0:	3ff00000 	.word	0x3ff00000
 8007cb4:	fffffc01 	.word	0xfffffc01
 8007cb8:	3ff80000 	.word	0x3ff80000
 8007cbc:	636f4361 	.word	0x636f4361
 8007cc0:	3fd287a7 	.word	0x3fd287a7
 8007cc4:	8b60c8b3 	.word	0x8b60c8b3
 8007cc8:	3fc68a28 	.word	0x3fc68a28
 8007ccc:	509f79fb 	.word	0x509f79fb
 8007cd0:	3fd34413 	.word	0x3fd34413
 8007cd4:	08009798 	.word	0x08009798
 8007cd8:	00000432 	.word	0x00000432
 8007cdc:	00000412 	.word	0x00000412
 8007ce0:	fe100000 	.word	0xfe100000
 8007ce4:	080096f8 	.word	0x080096f8
 8007ce8:	08009770 	.word	0x08009770
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	2402      	movs	r4, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d016      	beq.n	8007d22 <_dtoa_r+0x3d6>
 8007cf4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007cf6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007cf8:	220f      	movs	r2, #15
 8007cfa:	425d      	negs	r5, r3
 8007cfc:	402a      	ands	r2, r5
 8007cfe:	4bd7      	ldr	r3, [pc, #860]	@ (800805c <_dtoa_r+0x710>)
 8007d00:	00d2      	lsls	r2, r2, #3
 8007d02:	189b      	adds	r3, r3, r2
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f7f9 fe44 	bl	8001994 <__aeabi_dmul>
 8007d0c:	2701      	movs	r7, #1
 8007d0e:	2300      	movs	r3, #0
 8007d10:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007d14:	4ed2      	ldr	r6, [pc, #840]	@ (8008060 <_dtoa_r+0x714>)
 8007d16:	112d      	asrs	r5, r5, #4
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	d000      	beq.n	8007d1e <_dtoa_r+0x3d2>
 8007d1c:	e0ba      	b.n	8007e94 <_dtoa_r+0x548>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1a1      	bne.n	8007c66 <_dtoa_r+0x31a>
 8007d22:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007d24:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007d26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d100      	bne.n	8007d2e <_dtoa_r+0x3e2>
 8007d2c:	e0bd      	b.n	8007eaa <_dtoa_r+0x55e>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	0030      	movs	r0, r6
 8007d32:	0039      	movs	r1, r7
 8007d34:	4bcb      	ldr	r3, [pc, #812]	@ (8008064 <_dtoa_r+0x718>)
 8007d36:	f7f8 fb8b 	bl	8000450 <__aeabi_dcmplt>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d100      	bne.n	8007d40 <_dtoa_r+0x3f4>
 8007d3e:	e0b4      	b.n	8007eaa <_dtoa_r+0x55e>
 8007d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d100      	bne.n	8007d48 <_dtoa_r+0x3fc>
 8007d46:	e0b0      	b.n	8007eaa <_dtoa_r+0x55e>
 8007d48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dd39      	ble.n	8007dc2 <_dtoa_r+0x476>
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	2200      	movs	r2, #0
 8007d52:	3b01      	subs	r3, #1
 8007d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d56:	0030      	movs	r0, r6
 8007d58:	4bc3      	ldr	r3, [pc, #780]	@ (8008068 <_dtoa_r+0x71c>)
 8007d5a:	0039      	movs	r1, r7
 8007d5c:	f7f9 fe1a 	bl	8001994 <__aeabi_dmul>
 8007d60:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d62:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d66:	3401      	adds	r4, #1
 8007d68:	0020      	movs	r0, r4
 8007d6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8007d6c:	f7fa fcd4 	bl	8002718 <__aeabi_i2d>
 8007d70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d74:	f7f9 fe0e 	bl	8001994 <__aeabi_dmul>
 8007d78:	4bbc      	ldr	r3, [pc, #752]	@ (800806c <_dtoa_r+0x720>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f7f8 fe62 	bl	8000a44 <__aeabi_dadd>
 8007d80:	4bbb      	ldr	r3, [pc, #748]	@ (8008070 <_dtoa_r+0x724>)
 8007d82:	0006      	movs	r6, r0
 8007d84:	18cf      	adds	r7, r1, r3
 8007d86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d000      	beq.n	8007d8e <_dtoa_r+0x442>
 8007d8c:	e091      	b.n	8007eb2 <_dtoa_r+0x566>
 8007d8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d92:	2200      	movs	r2, #0
 8007d94:	4bb7      	ldr	r3, [pc, #732]	@ (8008074 <_dtoa_r+0x728>)
 8007d96:	f7fa f8c5 	bl	8001f24 <__aeabi_dsub>
 8007d9a:	0032      	movs	r2, r6
 8007d9c:	003b      	movs	r3, r7
 8007d9e:	0004      	movs	r4, r0
 8007da0:	000d      	movs	r5, r1
 8007da2:	f7f8 fb69 	bl	8000478 <__aeabi_dcmpgt>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d000      	beq.n	8007dac <_dtoa_r+0x460>
 8007daa:	e29d      	b.n	80082e8 <_dtoa_r+0x99c>
 8007dac:	2180      	movs	r1, #128	@ 0x80
 8007dae:	0609      	lsls	r1, r1, #24
 8007db0:	187b      	adds	r3, r7, r1
 8007db2:	0032      	movs	r2, r6
 8007db4:	0020      	movs	r0, r4
 8007db6:	0029      	movs	r1, r5
 8007db8:	f7f8 fb4a 	bl	8000450 <__aeabi_dcmplt>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d000      	beq.n	8007dc2 <_dtoa_r+0x476>
 8007dc0:	e130      	b.n	8008024 <_dtoa_r+0x6d8>
 8007dc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007dc4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dc8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007dca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da00      	bge.n	8007dd2 <_dtoa_r+0x486>
 8007dd0:	e177      	b.n	80080c2 <_dtoa_r+0x776>
 8007dd2:	9a04      	ldr	r2, [sp, #16]
 8007dd4:	2a0e      	cmp	r2, #14
 8007dd6:	dd00      	ble.n	8007dda <_dtoa_r+0x48e>
 8007dd8:	e173      	b.n	80080c2 <_dtoa_r+0x776>
 8007dda:	4ba0      	ldr	r3, [pc, #640]	@ (800805c <_dtoa_r+0x710>)
 8007ddc:	00d2      	lsls	r2, r2, #3
 8007dde:	189b      	adds	r3, r3, r2
 8007de0:	685c      	ldr	r4, [r3, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	9306      	str	r3, [sp, #24]
 8007de6:	9407      	str	r4, [sp, #28]
 8007de8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da03      	bge.n	8007df6 <_dtoa_r+0x4aa>
 8007dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	dc00      	bgt.n	8007df6 <_dtoa_r+0x4aa>
 8007df4:	e106      	b.n	8008004 <_dtoa_r+0x6b8>
 8007df6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007df8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfc:	9d08      	ldr	r5, [sp, #32]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	195b      	adds	r3, r3, r5
 8007e02:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e04:	9a06      	ldr	r2, [sp, #24]
 8007e06:	9b07      	ldr	r3, [sp, #28]
 8007e08:	0030      	movs	r0, r6
 8007e0a:	0039      	movs	r1, r7
 8007e0c:	f7f9 f97e 	bl	800110c <__aeabi_ddiv>
 8007e10:	f7fa fc46 	bl	80026a0 <__aeabi_d2iz>
 8007e14:	9009      	str	r0, [sp, #36]	@ 0x24
 8007e16:	f7fa fc7f 	bl	8002718 <__aeabi_i2d>
 8007e1a:	9a06      	ldr	r2, [sp, #24]
 8007e1c:	9b07      	ldr	r3, [sp, #28]
 8007e1e:	f7f9 fdb9 	bl	8001994 <__aeabi_dmul>
 8007e22:	0002      	movs	r2, r0
 8007e24:	000b      	movs	r3, r1
 8007e26:	0030      	movs	r0, r6
 8007e28:	0039      	movs	r1, r7
 8007e2a:	f7fa f87b 	bl	8001f24 <__aeabi_dsub>
 8007e2e:	002b      	movs	r3, r5
 8007e30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e32:	3501      	adds	r5, #1
 8007e34:	3230      	adds	r2, #48	@ 0x30
 8007e36:	701a      	strb	r2, [r3, #0]
 8007e38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e3a:	002c      	movs	r4, r5
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d000      	beq.n	8007e42 <_dtoa_r+0x4f6>
 8007e40:	e131      	b.n	80080a6 <_dtoa_r+0x75a>
 8007e42:	0002      	movs	r2, r0
 8007e44:	000b      	movs	r3, r1
 8007e46:	f7f8 fdfd 	bl	8000a44 <__aeabi_dadd>
 8007e4a:	9a06      	ldr	r2, [sp, #24]
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	0006      	movs	r6, r0
 8007e50:	000f      	movs	r7, r1
 8007e52:	f7f8 fb11 	bl	8000478 <__aeabi_dcmpgt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d000      	beq.n	8007e5c <_dtoa_r+0x510>
 8007e5a:	e10f      	b.n	800807c <_dtoa_r+0x730>
 8007e5c:	9a06      	ldr	r2, [sp, #24]
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	0030      	movs	r0, r6
 8007e62:	0039      	movs	r1, r7
 8007e64:	f7f8 faee 	bl	8000444 <__aeabi_dcmpeq>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d003      	beq.n	8007e74 <_dtoa_r+0x528>
 8007e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e6e:	07dd      	lsls	r5, r3, #31
 8007e70:	d500      	bpl.n	8007e74 <_dtoa_r+0x528>
 8007e72:	e103      	b.n	800807c <_dtoa_r+0x730>
 8007e74:	9905      	ldr	r1, [sp, #20]
 8007e76:	9803      	ldr	r0, [sp, #12]
 8007e78:	f000 fca6 	bl	80087c8 <_Bfree>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	7023      	strb	r3, [r4, #0]
 8007e80:	9b04      	ldr	r3, [sp, #16]
 8007e82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e84:	3301      	adds	r3, #1
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d100      	bne.n	8007e90 <_dtoa_r+0x544>
 8007e8e:	e5a7      	b.n	80079e0 <_dtoa_r+0x94>
 8007e90:	601c      	str	r4, [r3, #0]
 8007e92:	e5a5      	b.n	80079e0 <_dtoa_r+0x94>
 8007e94:	423d      	tst	r5, r7
 8007e96:	d005      	beq.n	8007ea4 <_dtoa_r+0x558>
 8007e98:	6832      	ldr	r2, [r6, #0]
 8007e9a:	6873      	ldr	r3, [r6, #4]
 8007e9c:	f7f9 fd7a 	bl	8001994 <__aeabi_dmul>
 8007ea0:	003b      	movs	r3, r7
 8007ea2:	3401      	adds	r4, #1
 8007ea4:	106d      	asrs	r5, r5, #1
 8007ea6:	3608      	adds	r6, #8
 8007ea8:	e736      	b.n	8007d18 <_dtoa_r+0x3cc>
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	930c      	str	r3, [sp, #48]	@ 0x30
 8007eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb0:	e75a      	b.n	8007d68 <_dtoa_r+0x41c>
 8007eb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007eb4:	4b69      	ldr	r3, [pc, #420]	@ (800805c <_dtoa_r+0x710>)
 8007eb6:	3a01      	subs	r2, #1
 8007eb8:	00d2      	lsls	r2, r2, #3
 8007eba:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2900      	cmp	r1, #0
 8007ec4:	d04c      	beq.n	8007f60 <_dtoa_r+0x614>
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	496b      	ldr	r1, [pc, #428]	@ (8008078 <_dtoa_r+0x72c>)
 8007eca:	f7f9 f91f 	bl	800110c <__aeabi_ddiv>
 8007ece:	0032      	movs	r2, r6
 8007ed0:	003b      	movs	r3, r7
 8007ed2:	f7fa f827 	bl	8001f24 <__aeabi_dsub>
 8007ed6:	9a08      	ldr	r2, [sp, #32]
 8007ed8:	0006      	movs	r6, r0
 8007eda:	4694      	mov	ip, r2
 8007edc:	000f      	movs	r7, r1
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	9316      	str	r3, [sp, #88]	@ 0x58
 8007ee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ee4:	4463      	add	r3, ip
 8007ee6:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ee8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007eea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007eec:	f7fa fbd8 	bl	80026a0 <__aeabi_d2iz>
 8007ef0:	0005      	movs	r5, r0
 8007ef2:	f7fa fc11 	bl	8002718 <__aeabi_i2d>
 8007ef6:	0002      	movs	r2, r0
 8007ef8:	000b      	movs	r3, r1
 8007efa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007efc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007efe:	f7fa f811 	bl	8001f24 <__aeabi_dsub>
 8007f02:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f04:	3530      	adds	r5, #48	@ 0x30
 8007f06:	1c5c      	adds	r4, r3, #1
 8007f08:	701d      	strb	r5, [r3, #0]
 8007f0a:	0032      	movs	r2, r6
 8007f0c:	003b      	movs	r3, r7
 8007f0e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f10:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f12:	f7f8 fa9d 	bl	8000450 <__aeabi_dcmplt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d16a      	bne.n	8007ff0 <_dtoa_r+0x6a4>
 8007f1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f1e:	2000      	movs	r0, #0
 8007f20:	4950      	ldr	r1, [pc, #320]	@ (8008064 <_dtoa_r+0x718>)
 8007f22:	f7f9 ffff 	bl	8001f24 <__aeabi_dsub>
 8007f26:	0032      	movs	r2, r6
 8007f28:	003b      	movs	r3, r7
 8007f2a:	f7f8 fa91 	bl	8000450 <__aeabi_dcmplt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d000      	beq.n	8007f34 <_dtoa_r+0x5e8>
 8007f32:	e0a5      	b.n	8008080 <_dtoa_r+0x734>
 8007f34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	d100      	bne.n	8007f3c <_dtoa_r+0x5f0>
 8007f3a:	e742      	b.n	8007dc2 <_dtoa_r+0x476>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	0030      	movs	r0, r6
 8007f40:	0039      	movs	r1, r7
 8007f42:	4b49      	ldr	r3, [pc, #292]	@ (8008068 <_dtoa_r+0x71c>)
 8007f44:	f7f9 fd26 	bl	8001994 <__aeabi_dmul>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	0006      	movs	r6, r0
 8007f4c:	000f      	movs	r7, r1
 8007f4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f52:	4b45      	ldr	r3, [pc, #276]	@ (8008068 <_dtoa_r+0x71c>)
 8007f54:	f7f9 fd1e 	bl	8001994 <__aeabi_dmul>
 8007f58:	9416      	str	r4, [sp, #88]	@ 0x58
 8007f5a:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f5e:	e7c3      	b.n	8007ee8 <_dtoa_r+0x59c>
 8007f60:	0030      	movs	r0, r6
 8007f62:	0039      	movs	r1, r7
 8007f64:	f7f9 fd16 	bl	8001994 <__aeabi_dmul>
 8007f68:	9d08      	ldr	r5, [sp, #32]
 8007f6a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f6c:	002b      	movs	r3, r5
 8007f6e:	4694      	mov	ip, r2
 8007f70:	9016      	str	r0, [sp, #88]	@ 0x58
 8007f72:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007f74:	4463      	add	r3, ip
 8007f76:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f7c:	f7fa fb90 	bl	80026a0 <__aeabi_d2iz>
 8007f80:	0004      	movs	r4, r0
 8007f82:	f7fa fbc9 	bl	8002718 <__aeabi_i2d>
 8007f86:	000b      	movs	r3, r1
 8007f88:	0002      	movs	r2, r0
 8007f8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f8e:	f7f9 ffc9 	bl	8001f24 <__aeabi_dsub>
 8007f92:	3430      	adds	r4, #48	@ 0x30
 8007f94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f96:	702c      	strb	r4, [r5, #0]
 8007f98:	3501      	adds	r5, #1
 8007f9a:	0006      	movs	r6, r0
 8007f9c:	000f      	movs	r7, r1
 8007f9e:	42ab      	cmp	r3, r5
 8007fa0:	d129      	bne.n	8007ff6 <_dtoa_r+0x6aa>
 8007fa2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007fa4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007fa6:	9b08      	ldr	r3, [sp, #32]
 8007fa8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007faa:	469c      	mov	ip, r3
 8007fac:	2200      	movs	r2, #0
 8007fae:	4b32      	ldr	r3, [pc, #200]	@ (8008078 <_dtoa_r+0x72c>)
 8007fb0:	4464      	add	r4, ip
 8007fb2:	f7f8 fd47 	bl	8000a44 <__aeabi_dadd>
 8007fb6:	0002      	movs	r2, r0
 8007fb8:	000b      	movs	r3, r1
 8007fba:	0030      	movs	r0, r6
 8007fbc:	0039      	movs	r1, r7
 8007fbe:	f7f8 fa5b 	bl	8000478 <__aeabi_dcmpgt>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d15c      	bne.n	8008080 <_dtoa_r+0x734>
 8007fc6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007fc8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fca:	2000      	movs	r0, #0
 8007fcc:	492a      	ldr	r1, [pc, #168]	@ (8008078 <_dtoa_r+0x72c>)
 8007fce:	f7f9 ffa9 	bl	8001f24 <__aeabi_dsub>
 8007fd2:	0002      	movs	r2, r0
 8007fd4:	000b      	movs	r3, r1
 8007fd6:	0030      	movs	r0, r6
 8007fd8:	0039      	movs	r1, r7
 8007fda:	f7f8 fa39 	bl	8000450 <__aeabi_dcmplt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d100      	bne.n	8007fe4 <_dtoa_r+0x698>
 8007fe2:	e6ee      	b.n	8007dc2 <_dtoa_r+0x476>
 8007fe4:	0023      	movs	r3, r4
 8007fe6:	3c01      	subs	r4, #1
 8007fe8:	7822      	ldrb	r2, [r4, #0]
 8007fea:	2a30      	cmp	r2, #48	@ 0x30
 8007fec:	d0fa      	beq.n	8007fe4 <_dtoa_r+0x698>
 8007fee:	001c      	movs	r4, r3
 8007ff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	e73e      	b.n	8007e74 <_dtoa_r+0x528>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8008068 <_dtoa_r+0x71c>)
 8007ffa:	f7f9 fccb 	bl	8001994 <__aeabi_dmul>
 8007ffe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008000:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008002:	e7b9      	b.n	8007f78 <_dtoa_r+0x62c>
 8008004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10c      	bne.n	8008024 <_dtoa_r+0x6d8>
 800800a:	9806      	ldr	r0, [sp, #24]
 800800c:	9907      	ldr	r1, [sp, #28]
 800800e:	2200      	movs	r2, #0
 8008010:	4b18      	ldr	r3, [pc, #96]	@ (8008074 <_dtoa_r+0x728>)
 8008012:	f7f9 fcbf 	bl	8001994 <__aeabi_dmul>
 8008016:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800801a:	f7f8 fa37 	bl	800048c <__aeabi_dcmpge>
 800801e:	2800      	cmp	r0, #0
 8008020:	d100      	bne.n	8008024 <_dtoa_r+0x6d8>
 8008022:	e164      	b.n	80082ee <_dtoa_r+0x9a2>
 8008024:	2600      	movs	r6, #0
 8008026:	0037      	movs	r7, r6
 8008028:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800802a:	9c08      	ldr	r4, [sp, #32]
 800802c:	43db      	mvns	r3, r3
 800802e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008030:	2300      	movs	r3, #0
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	0031      	movs	r1, r6
 8008036:	9803      	ldr	r0, [sp, #12]
 8008038:	f000 fbc6 	bl	80087c8 <_Bfree>
 800803c:	2f00      	cmp	r7, #0
 800803e:	d0d7      	beq.n	8007ff0 <_dtoa_r+0x6a4>
 8008040:	9b04      	ldr	r3, [sp, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <_dtoa_r+0x706>
 8008046:	42bb      	cmp	r3, r7
 8008048:	d003      	beq.n	8008052 <_dtoa_r+0x706>
 800804a:	0019      	movs	r1, r3
 800804c:	9803      	ldr	r0, [sp, #12]
 800804e:	f000 fbbb 	bl	80087c8 <_Bfree>
 8008052:	0039      	movs	r1, r7
 8008054:	9803      	ldr	r0, [sp, #12]
 8008056:	f000 fbb7 	bl	80087c8 <_Bfree>
 800805a:	e7c9      	b.n	8007ff0 <_dtoa_r+0x6a4>
 800805c:	08009798 	.word	0x08009798
 8008060:	08009770 	.word	0x08009770
 8008064:	3ff00000 	.word	0x3ff00000
 8008068:	40240000 	.word	0x40240000
 800806c:	401c0000 	.word	0x401c0000
 8008070:	fcc00000 	.word	0xfcc00000
 8008074:	40140000 	.word	0x40140000
 8008078:	3fe00000 	.word	0x3fe00000
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008080:	0023      	movs	r3, r4
 8008082:	001c      	movs	r4, r3
 8008084:	3b01      	subs	r3, #1
 8008086:	781a      	ldrb	r2, [r3, #0]
 8008088:	2a39      	cmp	r2, #57	@ 0x39
 800808a:	d108      	bne.n	800809e <_dtoa_r+0x752>
 800808c:	9a08      	ldr	r2, [sp, #32]
 800808e:	429a      	cmp	r2, r3
 8008090:	d1f7      	bne.n	8008082 <_dtoa_r+0x736>
 8008092:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008094:	9908      	ldr	r1, [sp, #32]
 8008096:	3201      	adds	r2, #1
 8008098:	920c      	str	r2, [sp, #48]	@ 0x30
 800809a:	2230      	movs	r2, #48	@ 0x30
 800809c:	700a      	strb	r2, [r1, #0]
 800809e:	781a      	ldrb	r2, [r3, #0]
 80080a0:	3201      	adds	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	e7a4      	b.n	8007ff0 <_dtoa_r+0x6a4>
 80080a6:	2200      	movs	r2, #0
 80080a8:	4bc6      	ldr	r3, [pc, #792]	@ (80083c4 <_dtoa_r+0xa78>)
 80080aa:	f7f9 fc73 	bl	8001994 <__aeabi_dmul>
 80080ae:	2200      	movs	r2, #0
 80080b0:	2300      	movs	r3, #0
 80080b2:	0006      	movs	r6, r0
 80080b4:	000f      	movs	r7, r1
 80080b6:	f7f8 f9c5 	bl	8000444 <__aeabi_dcmpeq>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d100      	bne.n	80080c0 <_dtoa_r+0x774>
 80080be:	e6a1      	b.n	8007e04 <_dtoa_r+0x4b8>
 80080c0:	e6d8      	b.n	8007e74 <_dtoa_r+0x528>
 80080c2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80080c4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80080c6:	9c06      	ldr	r4, [sp, #24]
 80080c8:	2f00      	cmp	r7, #0
 80080ca:	d014      	beq.n	80080f6 <_dtoa_r+0x7aa>
 80080cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80080ce:	2a01      	cmp	r2, #1
 80080d0:	dd00      	ble.n	80080d4 <_dtoa_r+0x788>
 80080d2:	e0c8      	b.n	8008266 <_dtoa_r+0x91a>
 80080d4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	d100      	bne.n	80080dc <_dtoa_r+0x790>
 80080da:	e0be      	b.n	800825a <_dtoa_r+0x90e>
 80080dc:	4aba      	ldr	r2, [pc, #744]	@ (80083c8 <_dtoa_r+0xa7c>)
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	9a06      	ldr	r2, [sp, #24]
 80080e2:	2101      	movs	r1, #1
 80080e4:	18d2      	adds	r2, r2, r3
 80080e6:	9206      	str	r2, [sp, #24]
 80080e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80080ea:	9803      	ldr	r0, [sp, #12]
 80080ec:	18d3      	adds	r3, r2, r3
 80080ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80080f0:	f000 fc22 	bl	8008938 <__i2b>
 80080f4:	0007      	movs	r7, r0
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	d00e      	beq.n	8008118 <_dtoa_r+0x7cc>
 80080fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dd0b      	ble.n	8008118 <_dtoa_r+0x7cc>
 8008100:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008102:	0023      	movs	r3, r4
 8008104:	4294      	cmp	r4, r2
 8008106:	dd00      	ble.n	800810a <_dtoa_r+0x7be>
 8008108:	0013      	movs	r3, r2
 800810a:	9a06      	ldr	r2, [sp, #24]
 800810c:	1ae4      	subs	r4, r4, r3
 800810e:	1ad2      	subs	r2, r2, r3
 8008110:	9206      	str	r2, [sp, #24]
 8008112:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	930d      	str	r3, [sp, #52]	@ 0x34
 8008118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d01f      	beq.n	800815e <_dtoa_r+0x812>
 800811e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d100      	bne.n	8008126 <_dtoa_r+0x7da>
 8008124:	e0b5      	b.n	8008292 <_dtoa_r+0x946>
 8008126:	2d00      	cmp	r5, #0
 8008128:	d010      	beq.n	800814c <_dtoa_r+0x800>
 800812a:	0039      	movs	r1, r7
 800812c:	002a      	movs	r2, r5
 800812e:	9803      	ldr	r0, [sp, #12]
 8008130:	f000 fccc 	bl	8008acc <__pow5mult>
 8008134:	9a05      	ldr	r2, [sp, #20]
 8008136:	0001      	movs	r1, r0
 8008138:	0007      	movs	r7, r0
 800813a:	9803      	ldr	r0, [sp, #12]
 800813c:	f000 fc14 	bl	8008968 <__multiply>
 8008140:	0006      	movs	r6, r0
 8008142:	9905      	ldr	r1, [sp, #20]
 8008144:	9803      	ldr	r0, [sp, #12]
 8008146:	f000 fb3f 	bl	80087c8 <_Bfree>
 800814a:	9605      	str	r6, [sp, #20]
 800814c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800814e:	1b5a      	subs	r2, r3, r5
 8008150:	42ab      	cmp	r3, r5
 8008152:	d004      	beq.n	800815e <_dtoa_r+0x812>
 8008154:	9905      	ldr	r1, [sp, #20]
 8008156:	9803      	ldr	r0, [sp, #12]
 8008158:	f000 fcb8 	bl	8008acc <__pow5mult>
 800815c:	9005      	str	r0, [sp, #20]
 800815e:	2101      	movs	r1, #1
 8008160:	9803      	ldr	r0, [sp, #12]
 8008162:	f000 fbe9 	bl	8008938 <__i2b>
 8008166:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008168:	0006      	movs	r6, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d100      	bne.n	8008170 <_dtoa_r+0x824>
 800816e:	e1bc      	b.n	80084ea <_dtoa_r+0xb9e>
 8008170:	001a      	movs	r2, r3
 8008172:	0001      	movs	r1, r0
 8008174:	9803      	ldr	r0, [sp, #12]
 8008176:	f000 fca9 	bl	8008acc <__pow5mult>
 800817a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800817c:	0006      	movs	r6, r0
 800817e:	2500      	movs	r5, #0
 8008180:	2b01      	cmp	r3, #1
 8008182:	dc16      	bgt.n	80081b2 <_dtoa_r+0x866>
 8008184:	2500      	movs	r5, #0
 8008186:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008188:	42ab      	cmp	r3, r5
 800818a:	d10e      	bne.n	80081aa <_dtoa_r+0x85e>
 800818c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800818e:	031b      	lsls	r3, r3, #12
 8008190:	42ab      	cmp	r3, r5
 8008192:	d10a      	bne.n	80081aa <_dtoa_r+0x85e>
 8008194:	4b8d      	ldr	r3, [pc, #564]	@ (80083cc <_dtoa_r+0xa80>)
 8008196:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008198:	4213      	tst	r3, r2
 800819a:	d006      	beq.n	80081aa <_dtoa_r+0x85e>
 800819c:	9b06      	ldr	r3, [sp, #24]
 800819e:	3501      	adds	r5, #1
 80081a0:	3301      	adds	r3, #1
 80081a2:	9306      	str	r3, [sp, #24]
 80081a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081a6:	3301      	adds	r3, #1
 80081a8:	930d      	str	r3, [sp, #52]	@ 0x34
 80081aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081ac:	2001      	movs	r0, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <_dtoa_r+0x878>
 80081b2:	6933      	ldr	r3, [r6, #16]
 80081b4:	3303      	adds	r3, #3
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	18f3      	adds	r3, r6, r3
 80081ba:	6858      	ldr	r0, [r3, #4]
 80081bc:	f000 fb6c 	bl	8008898 <__hi0bits>
 80081c0:	2320      	movs	r3, #32
 80081c2:	1a18      	subs	r0, r3, r0
 80081c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081c6:	1818      	adds	r0, r3, r0
 80081c8:	0002      	movs	r2, r0
 80081ca:	231f      	movs	r3, #31
 80081cc:	401a      	ands	r2, r3
 80081ce:	4218      	tst	r0, r3
 80081d0:	d065      	beq.n	800829e <_dtoa_r+0x952>
 80081d2:	3301      	adds	r3, #1
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	dd5d      	ble.n	8008296 <_dtoa_r+0x94a>
 80081da:	231c      	movs	r3, #28
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	9a06      	ldr	r2, [sp, #24]
 80081e0:	18e4      	adds	r4, r4, r3
 80081e2:	18d2      	adds	r2, r2, r3
 80081e4:	9206      	str	r2, [sp, #24]
 80081e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081e8:	18d3      	adds	r3, r2, r3
 80081ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80081ec:	9b06      	ldr	r3, [sp, #24]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dd05      	ble.n	80081fe <_dtoa_r+0x8b2>
 80081f2:	001a      	movs	r2, r3
 80081f4:	9905      	ldr	r1, [sp, #20]
 80081f6:	9803      	ldr	r0, [sp, #12]
 80081f8:	f000 fcc4 	bl	8008b84 <__lshift>
 80081fc:	9005      	str	r0, [sp, #20]
 80081fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008200:	2b00      	cmp	r3, #0
 8008202:	dd05      	ble.n	8008210 <_dtoa_r+0x8c4>
 8008204:	0031      	movs	r1, r6
 8008206:	001a      	movs	r2, r3
 8008208:	9803      	ldr	r0, [sp, #12]
 800820a:	f000 fcbb 	bl	8008b84 <__lshift>
 800820e:	0006      	movs	r6, r0
 8008210:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008212:	2b00      	cmp	r3, #0
 8008214:	d045      	beq.n	80082a2 <_dtoa_r+0x956>
 8008216:	0031      	movs	r1, r6
 8008218:	9805      	ldr	r0, [sp, #20]
 800821a:	f000 fd1f 	bl	8008c5c <__mcmp>
 800821e:	2800      	cmp	r0, #0
 8008220:	da3f      	bge.n	80082a2 <_dtoa_r+0x956>
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	220a      	movs	r2, #10
 8008226:	3b01      	subs	r3, #1
 8008228:	930c      	str	r3, [sp, #48]	@ 0x30
 800822a:	9905      	ldr	r1, [sp, #20]
 800822c:	2300      	movs	r3, #0
 800822e:	9803      	ldr	r0, [sp, #12]
 8008230:	f000 faee 	bl	8008810 <__multadd>
 8008234:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008236:	9005      	str	r0, [sp, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d100      	bne.n	800823e <_dtoa_r+0x8f2>
 800823c:	e15c      	b.n	80084f8 <_dtoa_r+0xbac>
 800823e:	2300      	movs	r3, #0
 8008240:	0039      	movs	r1, r7
 8008242:	220a      	movs	r2, #10
 8008244:	9803      	ldr	r0, [sp, #12]
 8008246:	f000 fae3 	bl	8008810 <__multadd>
 800824a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800824c:	0007      	movs	r7, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	dc55      	bgt.n	80082fe <_dtoa_r+0x9b2>
 8008252:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008254:	2b02      	cmp	r3, #2
 8008256:	dc2d      	bgt.n	80082b4 <_dtoa_r+0x968>
 8008258:	e051      	b.n	80082fe <_dtoa_r+0x9b2>
 800825a:	2336      	movs	r3, #54	@ 0x36
 800825c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800825e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008260:	9c06      	ldr	r4, [sp, #24]
 8008262:	1a9b      	subs	r3, r3, r2
 8008264:	e73c      	b.n	80080e0 <_dtoa_r+0x794>
 8008266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008268:	1e5d      	subs	r5, r3, #1
 800826a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800826c:	42ab      	cmp	r3, r5
 800826e:	db08      	blt.n	8008282 <_dtoa_r+0x936>
 8008270:	1b5d      	subs	r5, r3, r5
 8008272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008274:	9c06      	ldr	r4, [sp, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	db00      	blt.n	800827c <_dtoa_r+0x930>
 800827a:	e731      	b.n	80080e0 <_dtoa_r+0x794>
 800827c:	1ae4      	subs	r4, r4, r3
 800827e:	2300      	movs	r3, #0
 8008280:	e72e      	b.n	80080e0 <_dtoa_r+0x794>
 8008282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008284:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008286:	1aeb      	subs	r3, r5, r3
 8008288:	18d3      	adds	r3, r2, r3
 800828a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800828c:	9314      	str	r3, [sp, #80]	@ 0x50
 800828e:	2500      	movs	r5, #0
 8008290:	e7ef      	b.n	8008272 <_dtoa_r+0x926>
 8008292:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008294:	e75e      	b.n	8008154 <_dtoa_r+0x808>
 8008296:	2b04      	cmp	r3, #4
 8008298:	d0a8      	beq.n	80081ec <_dtoa_r+0x8a0>
 800829a:	331c      	adds	r3, #28
 800829c:	e79f      	b.n	80081de <_dtoa_r+0x892>
 800829e:	0013      	movs	r3, r2
 80082a0:	e7fb      	b.n	800829a <_dtoa_r+0x94e>
 80082a2:	9b04      	ldr	r3, [sp, #16]
 80082a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80082a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dc23      	bgt.n	80082f6 <_dtoa_r+0x9aa>
 80082ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	dd20      	ble.n	80082f6 <_dtoa_r+0x9aa>
 80082b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d000      	beq.n	80082bc <_dtoa_r+0x970>
 80082ba:	e6b5      	b.n	8008028 <_dtoa_r+0x6dc>
 80082bc:	0031      	movs	r1, r6
 80082be:	2205      	movs	r2, #5
 80082c0:	9803      	ldr	r0, [sp, #12]
 80082c2:	f000 faa5 	bl	8008810 <__multadd>
 80082c6:	0006      	movs	r6, r0
 80082c8:	0001      	movs	r1, r0
 80082ca:	9805      	ldr	r0, [sp, #20]
 80082cc:	f000 fcc6 	bl	8008c5c <__mcmp>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	dc00      	bgt.n	80082d6 <_dtoa_r+0x98a>
 80082d4:	e6a8      	b.n	8008028 <_dtoa_r+0x6dc>
 80082d6:	9b08      	ldr	r3, [sp, #32]
 80082d8:	9a08      	ldr	r2, [sp, #32]
 80082da:	1c5c      	adds	r4, r3, #1
 80082dc:	2331      	movs	r3, #49	@ 0x31
 80082de:	7013      	strb	r3, [r2, #0]
 80082e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082e2:	3301      	adds	r3, #1
 80082e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80082e6:	e6a3      	b.n	8008030 <_dtoa_r+0x6e4>
 80082e8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80082ea:	0037      	movs	r7, r6
 80082ec:	e7f3      	b.n	80082d6 <_dtoa_r+0x98a>
 80082ee:	9b04      	ldr	r3, [sp, #16]
 80082f0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80082f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80082f4:	e7f9      	b.n	80082ea <_dtoa_r+0x99e>
 80082f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d100      	bne.n	80082fe <_dtoa_r+0x9b2>
 80082fc:	e100      	b.n	8008500 <_dtoa_r+0xbb4>
 80082fe:	2c00      	cmp	r4, #0
 8008300:	dd05      	ble.n	800830e <_dtoa_r+0x9c2>
 8008302:	0039      	movs	r1, r7
 8008304:	0022      	movs	r2, r4
 8008306:	9803      	ldr	r0, [sp, #12]
 8008308:	f000 fc3c 	bl	8008b84 <__lshift>
 800830c:	0007      	movs	r7, r0
 800830e:	0038      	movs	r0, r7
 8008310:	2d00      	cmp	r5, #0
 8008312:	d018      	beq.n	8008346 <_dtoa_r+0x9fa>
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	9803      	ldr	r0, [sp, #12]
 8008318:	f000 fa12 	bl	8008740 <_Balloc>
 800831c:	1e04      	subs	r4, r0, #0
 800831e:	d105      	bne.n	800832c <_dtoa_r+0x9e0>
 8008320:	0022      	movs	r2, r4
 8008322:	4b2b      	ldr	r3, [pc, #172]	@ (80083d0 <_dtoa_r+0xa84>)
 8008324:	482b      	ldr	r0, [pc, #172]	@ (80083d4 <_dtoa_r+0xa88>)
 8008326:	492c      	ldr	r1, [pc, #176]	@ (80083d8 <_dtoa_r+0xa8c>)
 8008328:	f7ff fb25 	bl	8007976 <_dtoa_r+0x2a>
 800832c:	0039      	movs	r1, r7
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	310c      	adds	r1, #12
 8008332:	3202      	adds	r2, #2
 8008334:	0092      	lsls	r2, r2, #2
 8008336:	300c      	adds	r0, #12
 8008338:	f000 fefa 	bl	8009130 <memcpy>
 800833c:	2201      	movs	r2, #1
 800833e:	0021      	movs	r1, r4
 8008340:	9803      	ldr	r0, [sp, #12]
 8008342:	f000 fc1f 	bl	8008b84 <__lshift>
 8008346:	9b08      	ldr	r3, [sp, #32]
 8008348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800834a:	9306      	str	r3, [sp, #24]
 800834c:	3b01      	subs	r3, #1
 800834e:	189b      	adds	r3, r3, r2
 8008350:	2201      	movs	r2, #1
 8008352:	9704      	str	r7, [sp, #16]
 8008354:	0007      	movs	r7, r0
 8008356:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800835a:	4013      	ands	r3, r2
 800835c:	930e      	str	r3, [sp, #56]	@ 0x38
 800835e:	0031      	movs	r1, r6
 8008360:	9805      	ldr	r0, [sp, #20]
 8008362:	f7ff fa65 	bl	8007830 <quorem>
 8008366:	9904      	ldr	r1, [sp, #16]
 8008368:	0005      	movs	r5, r0
 800836a:	900a      	str	r0, [sp, #40]	@ 0x28
 800836c:	9805      	ldr	r0, [sp, #20]
 800836e:	f000 fc75 	bl	8008c5c <__mcmp>
 8008372:	003a      	movs	r2, r7
 8008374:	900d      	str	r0, [sp, #52]	@ 0x34
 8008376:	0031      	movs	r1, r6
 8008378:	9803      	ldr	r0, [sp, #12]
 800837a:	f000 fc8b 	bl	8008c94 <__mdiff>
 800837e:	2201      	movs	r2, #1
 8008380:	68c3      	ldr	r3, [r0, #12]
 8008382:	0004      	movs	r4, r0
 8008384:	3530      	adds	r5, #48	@ 0x30
 8008386:	9209      	str	r2, [sp, #36]	@ 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <_dtoa_r+0xa4a>
 800838c:	0001      	movs	r1, r0
 800838e:	9805      	ldr	r0, [sp, #20]
 8008390:	f000 fc64 	bl	8008c5c <__mcmp>
 8008394:	9009      	str	r0, [sp, #36]	@ 0x24
 8008396:	0021      	movs	r1, r4
 8008398:	9803      	ldr	r0, [sp, #12]
 800839a:	f000 fa15 	bl	80087c8 <_Bfree>
 800839e:	9b06      	ldr	r3, [sp, #24]
 80083a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083a2:	1c5c      	adds	r4, r3, #1
 80083a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80083a6:	4313      	orrs	r3, r2
 80083a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083aa:	4313      	orrs	r3, r2
 80083ac:	d116      	bne.n	80083dc <_dtoa_r+0xa90>
 80083ae:	2d39      	cmp	r5, #57	@ 0x39
 80083b0:	d02f      	beq.n	8008412 <_dtoa_r+0xac6>
 80083b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd01      	ble.n	80083bc <_dtoa_r+0xa70>
 80083b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80083ba:	3531      	adds	r5, #49	@ 0x31
 80083bc:	9b06      	ldr	r3, [sp, #24]
 80083be:	701d      	strb	r5, [r3, #0]
 80083c0:	e638      	b.n	8008034 <_dtoa_r+0x6e8>
 80083c2:	46c0      	nop			@ (mov r8, r8)
 80083c4:	40240000 	.word	0x40240000
 80083c8:	00000433 	.word	0x00000433
 80083cc:	7ff00000 	.word	0x7ff00000
 80083d0:	080096f8 	.word	0x080096f8
 80083d4:	080096a0 	.word	0x080096a0
 80083d8:	000002ef 	.word	0x000002ef
 80083dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083de:	2b00      	cmp	r3, #0
 80083e0:	db04      	blt.n	80083ec <_dtoa_r+0xaa0>
 80083e2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80083e4:	4313      	orrs	r3, r2
 80083e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083e8:	4313      	orrs	r3, r2
 80083ea:	d11e      	bne.n	800842a <_dtoa_r+0xade>
 80083ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dde4      	ble.n	80083bc <_dtoa_r+0xa70>
 80083f2:	9905      	ldr	r1, [sp, #20]
 80083f4:	2201      	movs	r2, #1
 80083f6:	9803      	ldr	r0, [sp, #12]
 80083f8:	f000 fbc4 	bl	8008b84 <__lshift>
 80083fc:	0031      	movs	r1, r6
 80083fe:	9005      	str	r0, [sp, #20]
 8008400:	f000 fc2c 	bl	8008c5c <__mcmp>
 8008404:	2800      	cmp	r0, #0
 8008406:	dc02      	bgt.n	800840e <_dtoa_r+0xac2>
 8008408:	d1d8      	bne.n	80083bc <_dtoa_r+0xa70>
 800840a:	07eb      	lsls	r3, r5, #31
 800840c:	d5d6      	bpl.n	80083bc <_dtoa_r+0xa70>
 800840e:	2d39      	cmp	r5, #57	@ 0x39
 8008410:	d1d2      	bne.n	80083b8 <_dtoa_r+0xa6c>
 8008412:	2339      	movs	r3, #57	@ 0x39
 8008414:	9a06      	ldr	r2, [sp, #24]
 8008416:	7013      	strb	r3, [r2, #0]
 8008418:	0023      	movs	r3, r4
 800841a:	001c      	movs	r4, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	781a      	ldrb	r2, [r3, #0]
 8008420:	2a39      	cmp	r2, #57	@ 0x39
 8008422:	d04f      	beq.n	80084c4 <_dtoa_r+0xb78>
 8008424:	3201      	adds	r2, #1
 8008426:	701a      	strb	r2, [r3, #0]
 8008428:	e604      	b.n	8008034 <_dtoa_r+0x6e8>
 800842a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	dd03      	ble.n	8008438 <_dtoa_r+0xaec>
 8008430:	2d39      	cmp	r5, #57	@ 0x39
 8008432:	d0ee      	beq.n	8008412 <_dtoa_r+0xac6>
 8008434:	3501      	adds	r5, #1
 8008436:	e7c1      	b.n	80083bc <_dtoa_r+0xa70>
 8008438:	9b06      	ldr	r3, [sp, #24]
 800843a:	9a06      	ldr	r2, [sp, #24]
 800843c:	701d      	strb	r5, [r3, #0]
 800843e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008440:	4293      	cmp	r3, r2
 8008442:	d02a      	beq.n	800849a <_dtoa_r+0xb4e>
 8008444:	2300      	movs	r3, #0
 8008446:	220a      	movs	r2, #10
 8008448:	9905      	ldr	r1, [sp, #20]
 800844a:	9803      	ldr	r0, [sp, #12]
 800844c:	f000 f9e0 	bl	8008810 <__multadd>
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	9005      	str	r0, [sp, #20]
 8008454:	42bb      	cmp	r3, r7
 8008456:	d109      	bne.n	800846c <_dtoa_r+0xb20>
 8008458:	2300      	movs	r3, #0
 800845a:	220a      	movs	r2, #10
 800845c:	9904      	ldr	r1, [sp, #16]
 800845e:	9803      	ldr	r0, [sp, #12]
 8008460:	f000 f9d6 	bl	8008810 <__multadd>
 8008464:	9004      	str	r0, [sp, #16]
 8008466:	0007      	movs	r7, r0
 8008468:	9406      	str	r4, [sp, #24]
 800846a:	e778      	b.n	800835e <_dtoa_r+0xa12>
 800846c:	9904      	ldr	r1, [sp, #16]
 800846e:	2300      	movs	r3, #0
 8008470:	220a      	movs	r2, #10
 8008472:	9803      	ldr	r0, [sp, #12]
 8008474:	f000 f9cc 	bl	8008810 <__multadd>
 8008478:	2300      	movs	r3, #0
 800847a:	9004      	str	r0, [sp, #16]
 800847c:	220a      	movs	r2, #10
 800847e:	0039      	movs	r1, r7
 8008480:	9803      	ldr	r0, [sp, #12]
 8008482:	f000 f9c5 	bl	8008810 <__multadd>
 8008486:	e7ee      	b.n	8008466 <_dtoa_r+0xb1a>
 8008488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800848a:	2401      	movs	r4, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	dd00      	ble.n	8008492 <_dtoa_r+0xb46>
 8008490:	001c      	movs	r4, r3
 8008492:	9b08      	ldr	r3, [sp, #32]
 8008494:	191c      	adds	r4, r3, r4
 8008496:	2300      	movs	r3, #0
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	9905      	ldr	r1, [sp, #20]
 800849c:	2201      	movs	r2, #1
 800849e:	9803      	ldr	r0, [sp, #12]
 80084a0:	f000 fb70 	bl	8008b84 <__lshift>
 80084a4:	0031      	movs	r1, r6
 80084a6:	9005      	str	r0, [sp, #20]
 80084a8:	f000 fbd8 	bl	8008c5c <__mcmp>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	dcb3      	bgt.n	8008418 <_dtoa_r+0xacc>
 80084b0:	d101      	bne.n	80084b6 <_dtoa_r+0xb6a>
 80084b2:	07ed      	lsls	r5, r5, #31
 80084b4:	d4b0      	bmi.n	8008418 <_dtoa_r+0xacc>
 80084b6:	0023      	movs	r3, r4
 80084b8:	001c      	movs	r4, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	781a      	ldrb	r2, [r3, #0]
 80084be:	2a30      	cmp	r2, #48	@ 0x30
 80084c0:	d0fa      	beq.n	80084b8 <_dtoa_r+0xb6c>
 80084c2:	e5b7      	b.n	8008034 <_dtoa_r+0x6e8>
 80084c4:	9a08      	ldr	r2, [sp, #32]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d1a7      	bne.n	800841a <_dtoa_r+0xace>
 80084ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084cc:	3301      	adds	r3, #1
 80084ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80084d0:	2331      	movs	r3, #49	@ 0x31
 80084d2:	7013      	strb	r3, [r2, #0]
 80084d4:	e5ae      	b.n	8008034 <_dtoa_r+0x6e8>
 80084d6:	4b15      	ldr	r3, [pc, #84]	@ (800852c <_dtoa_r+0xbe0>)
 80084d8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80084da:	9308      	str	r3, [sp, #32]
 80084dc:	4b14      	ldr	r3, [pc, #80]	@ (8008530 <_dtoa_r+0xbe4>)
 80084de:	2a00      	cmp	r2, #0
 80084e0:	d001      	beq.n	80084e6 <_dtoa_r+0xb9a>
 80084e2:	f7ff fa7b 	bl	80079dc <_dtoa_r+0x90>
 80084e6:	f7ff fa7b 	bl	80079e0 <_dtoa_r+0x94>
 80084ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	dc00      	bgt.n	80084f2 <_dtoa_r+0xba6>
 80084f0:	e648      	b.n	8008184 <_dtoa_r+0x838>
 80084f2:	2001      	movs	r0, #1
 80084f4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80084f6:	e665      	b.n	80081c4 <_dtoa_r+0x878>
 80084f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dc00      	bgt.n	8008500 <_dtoa_r+0xbb4>
 80084fe:	e6d6      	b.n	80082ae <_dtoa_r+0x962>
 8008500:	2400      	movs	r4, #0
 8008502:	0031      	movs	r1, r6
 8008504:	9805      	ldr	r0, [sp, #20]
 8008506:	f7ff f993 	bl	8007830 <quorem>
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	3030      	adds	r0, #48	@ 0x30
 800850e:	5518      	strb	r0, [r3, r4]
 8008510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008512:	3401      	adds	r4, #1
 8008514:	0005      	movs	r5, r0
 8008516:	429c      	cmp	r4, r3
 8008518:	dab6      	bge.n	8008488 <_dtoa_r+0xb3c>
 800851a:	2300      	movs	r3, #0
 800851c:	220a      	movs	r2, #10
 800851e:	9905      	ldr	r1, [sp, #20]
 8008520:	9803      	ldr	r0, [sp, #12]
 8008522:	f000 f975 	bl	8008810 <__multadd>
 8008526:	9005      	str	r0, [sp, #20]
 8008528:	e7eb      	b.n	8008502 <_dtoa_r+0xbb6>
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	0800967c 	.word	0x0800967c
 8008530:	08009684 	.word	0x08009684

08008534 <_free_r>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	0005      	movs	r5, r0
 8008538:	1e0c      	subs	r4, r1, #0
 800853a:	d010      	beq.n	800855e <_free_r+0x2a>
 800853c:	3c04      	subs	r4, #4
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	da00      	bge.n	8008546 <_free_r+0x12>
 8008544:	18e4      	adds	r4, r4, r3
 8008546:	0028      	movs	r0, r5
 8008548:	f000 f8ea 	bl	8008720 <__malloc_lock>
 800854c:	4a1d      	ldr	r2, [pc, #116]	@ (80085c4 <_free_r+0x90>)
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d105      	bne.n	8008560 <_free_r+0x2c>
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	6014      	str	r4, [r2, #0]
 8008558:	0028      	movs	r0, r5
 800855a:	f000 f8e9 	bl	8008730 <__malloc_unlock>
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	42a3      	cmp	r3, r4
 8008562:	d908      	bls.n	8008576 <_free_r+0x42>
 8008564:	6820      	ldr	r0, [r4, #0]
 8008566:	1821      	adds	r1, r4, r0
 8008568:	428b      	cmp	r3, r1
 800856a:	d1f3      	bne.n	8008554 <_free_r+0x20>
 800856c:	6819      	ldr	r1, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	1809      	adds	r1, r1, r0
 8008572:	6021      	str	r1, [r4, #0]
 8008574:	e7ee      	b.n	8008554 <_free_r+0x20>
 8008576:	001a      	movs	r2, r3
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <_free_r+0x4e>
 800857e:	42a3      	cmp	r3, r4
 8008580:	d9f9      	bls.n	8008576 <_free_r+0x42>
 8008582:	6811      	ldr	r1, [r2, #0]
 8008584:	1850      	adds	r0, r2, r1
 8008586:	42a0      	cmp	r0, r4
 8008588:	d10b      	bne.n	80085a2 <_free_r+0x6e>
 800858a:	6820      	ldr	r0, [r4, #0]
 800858c:	1809      	adds	r1, r1, r0
 800858e:	1850      	adds	r0, r2, r1
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	4283      	cmp	r3, r0
 8008594:	d1e0      	bne.n	8008558 <_free_r+0x24>
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	1841      	adds	r1, r0, r1
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	6053      	str	r3, [r2, #4]
 80085a0:	e7da      	b.n	8008558 <_free_r+0x24>
 80085a2:	42a0      	cmp	r0, r4
 80085a4:	d902      	bls.n	80085ac <_free_r+0x78>
 80085a6:	230c      	movs	r3, #12
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	e7d5      	b.n	8008558 <_free_r+0x24>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	1821      	adds	r1, r4, r0
 80085b0:	428b      	cmp	r3, r1
 80085b2:	d103      	bne.n	80085bc <_free_r+0x88>
 80085b4:	6819      	ldr	r1, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	1809      	adds	r1, r1, r0
 80085ba:	6021      	str	r1, [r4, #0]
 80085bc:	6063      	str	r3, [r4, #4]
 80085be:	6054      	str	r4, [r2, #4]
 80085c0:	e7ca      	b.n	8008558 <_free_r+0x24>
 80085c2:	46c0      	nop			@ (mov r8, r8)
 80085c4:	200004bc 	.word	0x200004bc

080085c8 <malloc>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	4b03      	ldr	r3, [pc, #12]	@ (80085d8 <malloc+0x10>)
 80085cc:	0001      	movs	r1, r0
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	f000 f826 	bl	8008620 <_malloc_r>
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	46c0      	nop			@ (mov r8, r8)
 80085d8:	2000001c 	.word	0x2000001c

080085dc <sbrk_aligned>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	4e0f      	ldr	r6, [pc, #60]	@ (800861c <sbrk_aligned+0x40>)
 80085e0:	000d      	movs	r5, r1
 80085e2:	6831      	ldr	r1, [r6, #0]
 80085e4:	0004      	movs	r4, r0
 80085e6:	2900      	cmp	r1, #0
 80085e8:	d102      	bne.n	80085f0 <sbrk_aligned+0x14>
 80085ea:	f000 fd8f 	bl	800910c <_sbrk_r>
 80085ee:	6030      	str	r0, [r6, #0]
 80085f0:	0029      	movs	r1, r5
 80085f2:	0020      	movs	r0, r4
 80085f4:	f000 fd8a 	bl	800910c <_sbrk_r>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d103      	bne.n	8008604 <sbrk_aligned+0x28>
 80085fc:	2501      	movs	r5, #1
 80085fe:	426d      	negs	r5, r5
 8008600:	0028      	movs	r0, r5
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	2303      	movs	r3, #3
 8008606:	1cc5      	adds	r5, r0, #3
 8008608:	439d      	bics	r5, r3
 800860a:	42a8      	cmp	r0, r5
 800860c:	d0f8      	beq.n	8008600 <sbrk_aligned+0x24>
 800860e:	1a29      	subs	r1, r5, r0
 8008610:	0020      	movs	r0, r4
 8008612:	f000 fd7b 	bl	800910c <_sbrk_r>
 8008616:	3001      	adds	r0, #1
 8008618:	d1f2      	bne.n	8008600 <sbrk_aligned+0x24>
 800861a:	e7ef      	b.n	80085fc <sbrk_aligned+0x20>
 800861c:	200004b8 	.word	0x200004b8

08008620 <_malloc_r>:
 8008620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008622:	2203      	movs	r2, #3
 8008624:	1ccb      	adds	r3, r1, #3
 8008626:	4393      	bics	r3, r2
 8008628:	3308      	adds	r3, #8
 800862a:	0005      	movs	r5, r0
 800862c:	001f      	movs	r7, r3
 800862e:	2b0c      	cmp	r3, #12
 8008630:	d234      	bcs.n	800869c <_malloc_r+0x7c>
 8008632:	270c      	movs	r7, #12
 8008634:	42b9      	cmp	r1, r7
 8008636:	d833      	bhi.n	80086a0 <_malloc_r+0x80>
 8008638:	0028      	movs	r0, r5
 800863a:	f000 f871 	bl	8008720 <__malloc_lock>
 800863e:	4e37      	ldr	r6, [pc, #220]	@ (800871c <_malloc_r+0xfc>)
 8008640:	6833      	ldr	r3, [r6, #0]
 8008642:	001c      	movs	r4, r3
 8008644:	2c00      	cmp	r4, #0
 8008646:	d12f      	bne.n	80086a8 <_malloc_r+0x88>
 8008648:	0039      	movs	r1, r7
 800864a:	0028      	movs	r0, r5
 800864c:	f7ff ffc6 	bl	80085dc <sbrk_aligned>
 8008650:	0004      	movs	r4, r0
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d15f      	bne.n	8008716 <_malloc_r+0xf6>
 8008656:	6834      	ldr	r4, [r6, #0]
 8008658:	9400      	str	r4, [sp, #0]
 800865a:	9b00      	ldr	r3, [sp, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d14a      	bne.n	80086f6 <_malloc_r+0xd6>
 8008660:	2c00      	cmp	r4, #0
 8008662:	d052      	beq.n	800870a <_malloc_r+0xea>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	0028      	movs	r0, r5
 8008668:	18e3      	adds	r3, r4, r3
 800866a:	9900      	ldr	r1, [sp, #0]
 800866c:	9301      	str	r3, [sp, #4]
 800866e:	f000 fd4d 	bl	800910c <_sbrk_r>
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	4283      	cmp	r3, r0
 8008676:	d148      	bne.n	800870a <_malloc_r+0xea>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	0028      	movs	r0, r5
 800867c:	1aff      	subs	r7, r7, r3
 800867e:	0039      	movs	r1, r7
 8008680:	f7ff ffac 	bl	80085dc <sbrk_aligned>
 8008684:	3001      	adds	r0, #1
 8008686:	d040      	beq.n	800870a <_malloc_r+0xea>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	19db      	adds	r3, r3, r7
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	6833      	ldr	r3, [r6, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	2a00      	cmp	r2, #0
 8008694:	d133      	bne.n	80086fe <_malloc_r+0xde>
 8008696:	9b00      	ldr	r3, [sp, #0]
 8008698:	6033      	str	r3, [r6, #0]
 800869a:	e019      	b.n	80086d0 <_malloc_r+0xb0>
 800869c:	2b00      	cmp	r3, #0
 800869e:	dac9      	bge.n	8008634 <_malloc_r+0x14>
 80086a0:	230c      	movs	r3, #12
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	2000      	movs	r0, #0
 80086a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086a8:	6821      	ldr	r1, [r4, #0]
 80086aa:	1bc9      	subs	r1, r1, r7
 80086ac:	d420      	bmi.n	80086f0 <_malloc_r+0xd0>
 80086ae:	290b      	cmp	r1, #11
 80086b0:	d90a      	bls.n	80086c8 <_malloc_r+0xa8>
 80086b2:	19e2      	adds	r2, r4, r7
 80086b4:	6027      	str	r7, [r4, #0]
 80086b6:	42a3      	cmp	r3, r4
 80086b8:	d104      	bne.n	80086c4 <_malloc_r+0xa4>
 80086ba:	6032      	str	r2, [r6, #0]
 80086bc:	6863      	ldr	r3, [r4, #4]
 80086be:	6011      	str	r1, [r2, #0]
 80086c0:	6053      	str	r3, [r2, #4]
 80086c2:	e005      	b.n	80086d0 <_malloc_r+0xb0>
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	e7f9      	b.n	80086bc <_malloc_r+0x9c>
 80086c8:	6862      	ldr	r2, [r4, #4]
 80086ca:	42a3      	cmp	r3, r4
 80086cc:	d10e      	bne.n	80086ec <_malloc_r+0xcc>
 80086ce:	6032      	str	r2, [r6, #0]
 80086d0:	0028      	movs	r0, r5
 80086d2:	f000 f82d 	bl	8008730 <__malloc_unlock>
 80086d6:	0020      	movs	r0, r4
 80086d8:	2207      	movs	r2, #7
 80086da:	300b      	adds	r0, #11
 80086dc:	1d23      	adds	r3, r4, #4
 80086de:	4390      	bics	r0, r2
 80086e0:	1ac2      	subs	r2, r0, r3
 80086e2:	4298      	cmp	r0, r3
 80086e4:	d0df      	beq.n	80086a6 <_malloc_r+0x86>
 80086e6:	1a1b      	subs	r3, r3, r0
 80086e8:	50a3      	str	r3, [r4, r2]
 80086ea:	e7dc      	b.n	80086a6 <_malloc_r+0x86>
 80086ec:	605a      	str	r2, [r3, #4]
 80086ee:	e7ef      	b.n	80086d0 <_malloc_r+0xb0>
 80086f0:	0023      	movs	r3, r4
 80086f2:	6864      	ldr	r4, [r4, #4]
 80086f4:	e7a6      	b.n	8008644 <_malloc_r+0x24>
 80086f6:	9c00      	ldr	r4, [sp, #0]
 80086f8:	6863      	ldr	r3, [r4, #4]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	e7ad      	b.n	800865a <_malloc_r+0x3a>
 80086fe:	001a      	movs	r2, r3
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	42a3      	cmp	r3, r4
 8008704:	d1fb      	bne.n	80086fe <_malloc_r+0xde>
 8008706:	2300      	movs	r3, #0
 8008708:	e7da      	b.n	80086c0 <_malloc_r+0xa0>
 800870a:	230c      	movs	r3, #12
 800870c:	0028      	movs	r0, r5
 800870e:	602b      	str	r3, [r5, #0]
 8008710:	f000 f80e 	bl	8008730 <__malloc_unlock>
 8008714:	e7c6      	b.n	80086a4 <_malloc_r+0x84>
 8008716:	6007      	str	r7, [r0, #0]
 8008718:	e7da      	b.n	80086d0 <_malloc_r+0xb0>
 800871a:	46c0      	nop			@ (mov r8, r8)
 800871c:	200004bc 	.word	0x200004bc

08008720 <__malloc_lock>:
 8008720:	b510      	push	{r4, lr}
 8008722:	4802      	ldr	r0, [pc, #8]	@ (800872c <__malloc_lock+0xc>)
 8008724:	f7ff f877 	bl	8007816 <__retarget_lock_acquire_recursive>
 8008728:	bd10      	pop	{r4, pc}
 800872a:	46c0      	nop			@ (mov r8, r8)
 800872c:	200004b4 	.word	0x200004b4

08008730 <__malloc_unlock>:
 8008730:	b510      	push	{r4, lr}
 8008732:	4802      	ldr	r0, [pc, #8]	@ (800873c <__malloc_unlock+0xc>)
 8008734:	f7ff f870 	bl	8007818 <__retarget_lock_release_recursive>
 8008738:	bd10      	pop	{r4, pc}
 800873a:	46c0      	nop			@ (mov r8, r8)
 800873c:	200004b4 	.word	0x200004b4

08008740 <_Balloc>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	69c5      	ldr	r5, [r0, #28]
 8008744:	0006      	movs	r6, r0
 8008746:	000c      	movs	r4, r1
 8008748:	2d00      	cmp	r5, #0
 800874a:	d10e      	bne.n	800876a <_Balloc+0x2a>
 800874c:	2010      	movs	r0, #16
 800874e:	f7ff ff3b 	bl	80085c8 <malloc>
 8008752:	1e02      	subs	r2, r0, #0
 8008754:	61f0      	str	r0, [r6, #28]
 8008756:	d104      	bne.n	8008762 <_Balloc+0x22>
 8008758:	216b      	movs	r1, #107	@ 0x6b
 800875a:	4b19      	ldr	r3, [pc, #100]	@ (80087c0 <_Balloc+0x80>)
 800875c:	4819      	ldr	r0, [pc, #100]	@ (80087c4 <_Balloc+0x84>)
 800875e:	f000 fcf1 	bl	8009144 <__assert_func>
 8008762:	6045      	str	r5, [r0, #4]
 8008764:	6085      	str	r5, [r0, #8]
 8008766:	6005      	str	r5, [r0, #0]
 8008768:	60c5      	str	r5, [r0, #12]
 800876a:	69f5      	ldr	r5, [r6, #28]
 800876c:	68eb      	ldr	r3, [r5, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d013      	beq.n	800879a <_Balloc+0x5a>
 8008772:	69f3      	ldr	r3, [r6, #28]
 8008774:	00a2      	lsls	r2, r4, #2
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	189b      	adds	r3, r3, r2
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	2800      	cmp	r0, #0
 800877e:	d118      	bne.n	80087b2 <_Balloc+0x72>
 8008780:	2101      	movs	r1, #1
 8008782:	000d      	movs	r5, r1
 8008784:	40a5      	lsls	r5, r4
 8008786:	1d6a      	adds	r2, r5, #5
 8008788:	0030      	movs	r0, r6
 800878a:	0092      	lsls	r2, r2, #2
 800878c:	f000 fcf8 	bl	8009180 <_calloc_r>
 8008790:	2800      	cmp	r0, #0
 8008792:	d00c      	beq.n	80087ae <_Balloc+0x6e>
 8008794:	6044      	str	r4, [r0, #4]
 8008796:	6085      	str	r5, [r0, #8]
 8008798:	e00d      	b.n	80087b6 <_Balloc+0x76>
 800879a:	2221      	movs	r2, #33	@ 0x21
 800879c:	2104      	movs	r1, #4
 800879e:	0030      	movs	r0, r6
 80087a0:	f000 fcee 	bl	8009180 <_calloc_r>
 80087a4:	69f3      	ldr	r3, [r6, #28]
 80087a6:	60e8      	str	r0, [r5, #12]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e1      	bne.n	8008772 <_Balloc+0x32>
 80087ae:	2000      	movs	r0, #0
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
 80087b2:	6802      	ldr	r2, [r0, #0]
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	2300      	movs	r3, #0
 80087b8:	6103      	str	r3, [r0, #16]
 80087ba:	60c3      	str	r3, [r0, #12]
 80087bc:	e7f8      	b.n	80087b0 <_Balloc+0x70>
 80087be:	46c0      	nop			@ (mov r8, r8)
 80087c0:	08009689 	.word	0x08009689
 80087c4:	08009709 	.word	0x08009709

080087c8 <_Bfree>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	69c6      	ldr	r6, [r0, #28]
 80087cc:	0005      	movs	r5, r0
 80087ce:	000c      	movs	r4, r1
 80087d0:	2e00      	cmp	r6, #0
 80087d2:	d10e      	bne.n	80087f2 <_Bfree+0x2a>
 80087d4:	2010      	movs	r0, #16
 80087d6:	f7ff fef7 	bl	80085c8 <malloc>
 80087da:	1e02      	subs	r2, r0, #0
 80087dc:	61e8      	str	r0, [r5, #28]
 80087de:	d104      	bne.n	80087ea <_Bfree+0x22>
 80087e0:	218f      	movs	r1, #143	@ 0x8f
 80087e2:	4b09      	ldr	r3, [pc, #36]	@ (8008808 <_Bfree+0x40>)
 80087e4:	4809      	ldr	r0, [pc, #36]	@ (800880c <_Bfree+0x44>)
 80087e6:	f000 fcad 	bl	8009144 <__assert_func>
 80087ea:	6046      	str	r6, [r0, #4]
 80087ec:	6086      	str	r6, [r0, #8]
 80087ee:	6006      	str	r6, [r0, #0]
 80087f0:	60c6      	str	r6, [r0, #12]
 80087f2:	2c00      	cmp	r4, #0
 80087f4:	d007      	beq.n	8008806 <_Bfree+0x3e>
 80087f6:	69eb      	ldr	r3, [r5, #28]
 80087f8:	6862      	ldr	r2, [r4, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	0092      	lsls	r2, r2, #2
 80087fe:	189b      	adds	r3, r3, r2
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	6022      	str	r2, [r4, #0]
 8008804:	601c      	str	r4, [r3, #0]
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	08009689 	.word	0x08009689
 800880c:	08009709 	.word	0x08009709

08008810 <__multadd>:
 8008810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008812:	000f      	movs	r7, r1
 8008814:	9001      	str	r0, [sp, #4]
 8008816:	000c      	movs	r4, r1
 8008818:	001e      	movs	r6, r3
 800881a:	2000      	movs	r0, #0
 800881c:	690d      	ldr	r5, [r1, #16]
 800881e:	3714      	adds	r7, #20
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	3001      	adds	r0, #1
 8008824:	b299      	uxth	r1, r3
 8008826:	4351      	muls	r1, r2
 8008828:	0c1b      	lsrs	r3, r3, #16
 800882a:	4353      	muls	r3, r2
 800882c:	1989      	adds	r1, r1, r6
 800882e:	0c0e      	lsrs	r6, r1, #16
 8008830:	199b      	adds	r3, r3, r6
 8008832:	0c1e      	lsrs	r6, r3, #16
 8008834:	b289      	uxth	r1, r1
 8008836:	041b      	lsls	r3, r3, #16
 8008838:	185b      	adds	r3, r3, r1
 800883a:	c708      	stmia	r7!, {r3}
 800883c:	4285      	cmp	r5, r0
 800883e:	dcef      	bgt.n	8008820 <__multadd+0x10>
 8008840:	2e00      	cmp	r6, #0
 8008842:	d022      	beq.n	800888a <__multadd+0x7a>
 8008844:	68a3      	ldr	r3, [r4, #8]
 8008846:	42ab      	cmp	r3, r5
 8008848:	dc19      	bgt.n	800887e <__multadd+0x6e>
 800884a:	6861      	ldr	r1, [r4, #4]
 800884c:	9801      	ldr	r0, [sp, #4]
 800884e:	3101      	adds	r1, #1
 8008850:	f7ff ff76 	bl	8008740 <_Balloc>
 8008854:	1e07      	subs	r7, r0, #0
 8008856:	d105      	bne.n	8008864 <__multadd+0x54>
 8008858:	003a      	movs	r2, r7
 800885a:	21ba      	movs	r1, #186	@ 0xba
 800885c:	4b0c      	ldr	r3, [pc, #48]	@ (8008890 <__multadd+0x80>)
 800885e:	480d      	ldr	r0, [pc, #52]	@ (8008894 <__multadd+0x84>)
 8008860:	f000 fc70 	bl	8009144 <__assert_func>
 8008864:	0021      	movs	r1, r4
 8008866:	6922      	ldr	r2, [r4, #16]
 8008868:	310c      	adds	r1, #12
 800886a:	3202      	adds	r2, #2
 800886c:	0092      	lsls	r2, r2, #2
 800886e:	300c      	adds	r0, #12
 8008870:	f000 fc5e 	bl	8009130 <memcpy>
 8008874:	0021      	movs	r1, r4
 8008876:	9801      	ldr	r0, [sp, #4]
 8008878:	f7ff ffa6 	bl	80087c8 <_Bfree>
 800887c:	003c      	movs	r4, r7
 800887e:	1d2b      	adds	r3, r5, #4
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	18e3      	adds	r3, r4, r3
 8008884:	3501      	adds	r5, #1
 8008886:	605e      	str	r6, [r3, #4]
 8008888:	6125      	str	r5, [r4, #16]
 800888a:	0020      	movs	r0, r4
 800888c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800888e:	46c0      	nop			@ (mov r8, r8)
 8008890:	080096f8 	.word	0x080096f8
 8008894:	08009709 	.word	0x08009709

08008898 <__hi0bits>:
 8008898:	2280      	movs	r2, #128	@ 0x80
 800889a:	0003      	movs	r3, r0
 800889c:	0252      	lsls	r2, r2, #9
 800889e:	2000      	movs	r0, #0
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d201      	bcs.n	80088a8 <__hi0bits+0x10>
 80088a4:	041b      	lsls	r3, r3, #16
 80088a6:	3010      	adds	r0, #16
 80088a8:	2280      	movs	r2, #128	@ 0x80
 80088aa:	0452      	lsls	r2, r2, #17
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d201      	bcs.n	80088b4 <__hi0bits+0x1c>
 80088b0:	3008      	adds	r0, #8
 80088b2:	021b      	lsls	r3, r3, #8
 80088b4:	2280      	movs	r2, #128	@ 0x80
 80088b6:	0552      	lsls	r2, r2, #21
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d201      	bcs.n	80088c0 <__hi0bits+0x28>
 80088bc:	3004      	adds	r0, #4
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	2280      	movs	r2, #128	@ 0x80
 80088c2:	05d2      	lsls	r2, r2, #23
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d201      	bcs.n	80088cc <__hi0bits+0x34>
 80088c8:	3002      	adds	r0, #2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	db03      	blt.n	80088d8 <__hi0bits+0x40>
 80088d0:	3001      	adds	r0, #1
 80088d2:	4213      	tst	r3, r2
 80088d4:	d100      	bne.n	80088d8 <__hi0bits+0x40>
 80088d6:	2020      	movs	r0, #32
 80088d8:	4770      	bx	lr

080088da <__lo0bits>:
 80088da:	6803      	ldr	r3, [r0, #0]
 80088dc:	0001      	movs	r1, r0
 80088de:	2207      	movs	r2, #7
 80088e0:	0018      	movs	r0, r3
 80088e2:	4010      	ands	r0, r2
 80088e4:	4213      	tst	r3, r2
 80088e6:	d00d      	beq.n	8008904 <__lo0bits+0x2a>
 80088e8:	3a06      	subs	r2, #6
 80088ea:	2000      	movs	r0, #0
 80088ec:	4213      	tst	r3, r2
 80088ee:	d105      	bne.n	80088fc <__lo0bits+0x22>
 80088f0:	3002      	adds	r0, #2
 80088f2:	4203      	tst	r3, r0
 80088f4:	d003      	beq.n	80088fe <__lo0bits+0x24>
 80088f6:	40d3      	lsrs	r3, r2
 80088f8:	0010      	movs	r0, r2
 80088fa:	600b      	str	r3, [r1, #0]
 80088fc:	4770      	bx	lr
 80088fe:	089b      	lsrs	r3, r3, #2
 8008900:	600b      	str	r3, [r1, #0]
 8008902:	e7fb      	b.n	80088fc <__lo0bits+0x22>
 8008904:	b29a      	uxth	r2, r3
 8008906:	2a00      	cmp	r2, #0
 8008908:	d101      	bne.n	800890e <__lo0bits+0x34>
 800890a:	2010      	movs	r0, #16
 800890c:	0c1b      	lsrs	r3, r3, #16
 800890e:	b2da      	uxtb	r2, r3
 8008910:	2a00      	cmp	r2, #0
 8008912:	d101      	bne.n	8008918 <__lo0bits+0x3e>
 8008914:	3008      	adds	r0, #8
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	071a      	lsls	r2, r3, #28
 800891a:	d101      	bne.n	8008920 <__lo0bits+0x46>
 800891c:	3004      	adds	r0, #4
 800891e:	091b      	lsrs	r3, r3, #4
 8008920:	079a      	lsls	r2, r3, #30
 8008922:	d101      	bne.n	8008928 <__lo0bits+0x4e>
 8008924:	3002      	adds	r0, #2
 8008926:	089b      	lsrs	r3, r3, #2
 8008928:	07da      	lsls	r2, r3, #31
 800892a:	d4e9      	bmi.n	8008900 <__lo0bits+0x26>
 800892c:	3001      	adds	r0, #1
 800892e:	085b      	lsrs	r3, r3, #1
 8008930:	d1e6      	bne.n	8008900 <__lo0bits+0x26>
 8008932:	2020      	movs	r0, #32
 8008934:	e7e2      	b.n	80088fc <__lo0bits+0x22>
	...

08008938 <__i2b>:
 8008938:	b510      	push	{r4, lr}
 800893a:	000c      	movs	r4, r1
 800893c:	2101      	movs	r1, #1
 800893e:	f7ff feff 	bl	8008740 <_Balloc>
 8008942:	2800      	cmp	r0, #0
 8008944:	d107      	bne.n	8008956 <__i2b+0x1e>
 8008946:	2146      	movs	r1, #70	@ 0x46
 8008948:	4c05      	ldr	r4, [pc, #20]	@ (8008960 <__i2b+0x28>)
 800894a:	0002      	movs	r2, r0
 800894c:	4b05      	ldr	r3, [pc, #20]	@ (8008964 <__i2b+0x2c>)
 800894e:	0020      	movs	r0, r4
 8008950:	31ff      	adds	r1, #255	@ 0xff
 8008952:	f000 fbf7 	bl	8009144 <__assert_func>
 8008956:	2301      	movs	r3, #1
 8008958:	6144      	str	r4, [r0, #20]
 800895a:	6103      	str	r3, [r0, #16]
 800895c:	bd10      	pop	{r4, pc}
 800895e:	46c0      	nop			@ (mov r8, r8)
 8008960:	08009709 	.word	0x08009709
 8008964:	080096f8 	.word	0x080096f8

08008968 <__multiply>:
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	0014      	movs	r4, r2
 800896c:	690a      	ldr	r2, [r1, #16]
 800896e:	6923      	ldr	r3, [r4, #16]
 8008970:	000d      	movs	r5, r1
 8008972:	b08b      	sub	sp, #44	@ 0x2c
 8008974:	429a      	cmp	r2, r3
 8008976:	db02      	blt.n	800897e <__multiply+0x16>
 8008978:	0023      	movs	r3, r4
 800897a:	000c      	movs	r4, r1
 800897c:	001d      	movs	r5, r3
 800897e:	6927      	ldr	r7, [r4, #16]
 8008980:	692e      	ldr	r6, [r5, #16]
 8008982:	6861      	ldr	r1, [r4, #4]
 8008984:	19bb      	adds	r3, r7, r6
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	68a3      	ldr	r3, [r4, #8]
 800898a:	19ba      	adds	r2, r7, r6
 800898c:	4293      	cmp	r3, r2
 800898e:	da00      	bge.n	8008992 <__multiply+0x2a>
 8008990:	3101      	adds	r1, #1
 8008992:	f7ff fed5 	bl	8008740 <_Balloc>
 8008996:	9002      	str	r0, [sp, #8]
 8008998:	2800      	cmp	r0, #0
 800899a:	d106      	bne.n	80089aa <__multiply+0x42>
 800899c:	21b1      	movs	r1, #177	@ 0xb1
 800899e:	4b49      	ldr	r3, [pc, #292]	@ (8008ac4 <__multiply+0x15c>)
 80089a0:	4849      	ldr	r0, [pc, #292]	@ (8008ac8 <__multiply+0x160>)
 80089a2:	9a02      	ldr	r2, [sp, #8]
 80089a4:	0049      	lsls	r1, r1, #1
 80089a6:	f000 fbcd 	bl	8009144 <__assert_func>
 80089aa:	9b02      	ldr	r3, [sp, #8]
 80089ac:	2200      	movs	r2, #0
 80089ae:	3314      	adds	r3, #20
 80089b0:	469c      	mov	ip, r3
 80089b2:	19bb      	adds	r3, r7, r6
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4463      	add	r3, ip
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	4663      	mov	r3, ip
 80089bc:	9904      	ldr	r1, [sp, #16]
 80089be:	428b      	cmp	r3, r1
 80089c0:	d32a      	bcc.n	8008a18 <__multiply+0xb0>
 80089c2:	0023      	movs	r3, r4
 80089c4:	00bf      	lsls	r7, r7, #2
 80089c6:	3314      	adds	r3, #20
 80089c8:	3514      	adds	r5, #20
 80089ca:	9308      	str	r3, [sp, #32]
 80089cc:	00b6      	lsls	r6, r6, #2
 80089ce:	19db      	adds	r3, r3, r7
 80089d0:	9305      	str	r3, [sp, #20]
 80089d2:	19ab      	adds	r3, r5, r6
 80089d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089d6:	2304      	movs	r3, #4
 80089d8:	9306      	str	r3, [sp, #24]
 80089da:	0023      	movs	r3, r4
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	3315      	adds	r3, #21
 80089e0:	9501      	str	r5, [sp, #4]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d305      	bcc.n	80089f2 <__multiply+0x8a>
 80089e6:	1b13      	subs	r3, r2, r4
 80089e8:	3b15      	subs	r3, #21
 80089ea:	089b      	lsrs	r3, r3, #2
 80089ec:	3301      	adds	r3, #1
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	9306      	str	r3, [sp, #24]
 80089f2:	9b01      	ldr	r3, [sp, #4]
 80089f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d310      	bcc.n	8008a1c <__multiply+0xb4>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dd05      	ble.n	8008a0c <__multiply+0xa4>
 8008a00:	9b04      	ldr	r3, [sp, #16]
 8008a02:	3b04      	subs	r3, #4
 8008a04:	9304      	str	r3, [sp, #16]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d056      	beq.n	8008aba <__multiply+0x152>
 8008a0c:	9b02      	ldr	r3, [sp, #8]
 8008a0e:	9a03      	ldr	r2, [sp, #12]
 8008a10:	0018      	movs	r0, r3
 8008a12:	611a      	str	r2, [r3, #16]
 8008a14:	b00b      	add	sp, #44	@ 0x2c
 8008a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a18:	c304      	stmia	r3!, {r2}
 8008a1a:	e7cf      	b.n	80089bc <__multiply+0x54>
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	b280      	uxth	r0, r0
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d01e      	beq.n	8008a64 <__multiply+0xfc>
 8008a26:	4667      	mov	r7, ip
 8008a28:	2500      	movs	r5, #0
 8008a2a:	9e08      	ldr	r6, [sp, #32]
 8008a2c:	ce02      	ldmia	r6!, {r1}
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	9307      	str	r3, [sp, #28]
 8008a32:	b28b      	uxth	r3, r1
 8008a34:	4343      	muls	r3, r0
 8008a36:	001a      	movs	r2, r3
 8008a38:	466b      	mov	r3, sp
 8008a3a:	0c09      	lsrs	r1, r1, #16
 8008a3c:	8b9b      	ldrh	r3, [r3, #28]
 8008a3e:	4341      	muls	r1, r0
 8008a40:	18d3      	adds	r3, r2, r3
 8008a42:	9a07      	ldr	r2, [sp, #28]
 8008a44:	195b      	adds	r3, r3, r5
 8008a46:	0c12      	lsrs	r2, r2, #16
 8008a48:	1889      	adds	r1, r1, r2
 8008a4a:	0c1a      	lsrs	r2, r3, #16
 8008a4c:	188a      	adds	r2, r1, r2
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	0c15      	lsrs	r5, r2, #16
 8008a52:	0412      	lsls	r2, r2, #16
 8008a54:	431a      	orrs	r2, r3
 8008a56:	9b05      	ldr	r3, [sp, #20]
 8008a58:	c704      	stmia	r7!, {r2}
 8008a5a:	42b3      	cmp	r3, r6
 8008a5c:	d8e6      	bhi.n	8008a2c <__multiply+0xc4>
 8008a5e:	4663      	mov	r3, ip
 8008a60:	9a06      	ldr	r2, [sp, #24]
 8008a62:	509d      	str	r5, [r3, r2]
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	0c00      	lsrs	r0, r0, #16
 8008a6a:	d020      	beq.n	8008aae <__multiply+0x146>
 8008a6c:	4663      	mov	r3, ip
 8008a6e:	0025      	movs	r5, r4
 8008a70:	4661      	mov	r1, ip
 8008a72:	2700      	movs	r7, #0
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3514      	adds	r5, #20
 8008a78:	682a      	ldr	r2, [r5, #0]
 8008a7a:	680e      	ldr	r6, [r1, #0]
 8008a7c:	b292      	uxth	r2, r2
 8008a7e:	4342      	muls	r2, r0
 8008a80:	0c36      	lsrs	r6, r6, #16
 8008a82:	1992      	adds	r2, r2, r6
 8008a84:	19d2      	adds	r2, r2, r7
 8008a86:	0416      	lsls	r6, r2, #16
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	431e      	orrs	r6, r3
 8008a8c:	600e      	str	r6, [r1, #0]
 8008a8e:	cd40      	ldmia	r5!, {r6}
 8008a90:	684b      	ldr	r3, [r1, #4]
 8008a92:	0c36      	lsrs	r6, r6, #16
 8008a94:	4346      	muls	r6, r0
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	0c12      	lsrs	r2, r2, #16
 8008a9a:	18f3      	adds	r3, r6, r3
 8008a9c:	189b      	adds	r3, r3, r2
 8008a9e:	9a05      	ldr	r2, [sp, #20]
 8008aa0:	0c1f      	lsrs	r7, r3, #16
 8008aa2:	3104      	adds	r1, #4
 8008aa4:	42aa      	cmp	r2, r5
 8008aa6:	d8e7      	bhi.n	8008a78 <__multiply+0x110>
 8008aa8:	4662      	mov	r2, ip
 8008aaa:	9906      	ldr	r1, [sp, #24]
 8008aac:	5053      	str	r3, [r2, r1]
 8008aae:	9b01      	ldr	r3, [sp, #4]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	2304      	movs	r3, #4
 8008ab6:	449c      	add	ip, r3
 8008ab8:	e79b      	b.n	80089f2 <__multiply+0x8a>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	9303      	str	r3, [sp, #12]
 8008ac0:	e79b      	b.n	80089fa <__multiply+0x92>
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	080096f8 	.word	0x080096f8
 8008ac8:	08009709 	.word	0x08009709

08008acc <__pow5mult>:
 8008acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ace:	2303      	movs	r3, #3
 8008ad0:	0015      	movs	r5, r2
 8008ad2:	0007      	movs	r7, r0
 8008ad4:	000e      	movs	r6, r1
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	421d      	tst	r5, r3
 8008ada:	d008      	beq.n	8008aee <__pow5mult+0x22>
 8008adc:	4925      	ldr	r1, [pc, #148]	@ (8008b74 <__pow5mult+0xa8>)
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	0092      	lsls	r2, r2, #2
 8008ae2:	5852      	ldr	r2, [r2, r1]
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	0031      	movs	r1, r6
 8008ae8:	f7ff fe92 	bl	8008810 <__multadd>
 8008aec:	0006      	movs	r6, r0
 8008aee:	10ad      	asrs	r5, r5, #2
 8008af0:	d03d      	beq.n	8008b6e <__pow5mult+0xa2>
 8008af2:	69fc      	ldr	r4, [r7, #28]
 8008af4:	2c00      	cmp	r4, #0
 8008af6:	d10f      	bne.n	8008b18 <__pow5mult+0x4c>
 8008af8:	2010      	movs	r0, #16
 8008afa:	f7ff fd65 	bl	80085c8 <malloc>
 8008afe:	1e02      	subs	r2, r0, #0
 8008b00:	61f8      	str	r0, [r7, #28]
 8008b02:	d105      	bne.n	8008b10 <__pow5mult+0x44>
 8008b04:	21b4      	movs	r1, #180	@ 0xb4
 8008b06:	4b1c      	ldr	r3, [pc, #112]	@ (8008b78 <__pow5mult+0xac>)
 8008b08:	481c      	ldr	r0, [pc, #112]	@ (8008b7c <__pow5mult+0xb0>)
 8008b0a:	31ff      	adds	r1, #255	@ 0xff
 8008b0c:	f000 fb1a 	bl	8009144 <__assert_func>
 8008b10:	6044      	str	r4, [r0, #4]
 8008b12:	6084      	str	r4, [r0, #8]
 8008b14:	6004      	str	r4, [r0, #0]
 8008b16:	60c4      	str	r4, [r0, #12]
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	689c      	ldr	r4, [r3, #8]
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	2c00      	cmp	r4, #0
 8008b20:	d108      	bne.n	8008b34 <__pow5mult+0x68>
 8008b22:	0038      	movs	r0, r7
 8008b24:	4916      	ldr	r1, [pc, #88]	@ (8008b80 <__pow5mult+0xb4>)
 8008b26:	f7ff ff07 	bl	8008938 <__i2b>
 8008b2a:	9b01      	ldr	r3, [sp, #4]
 8008b2c:	0004      	movs	r4, r0
 8008b2e:	6098      	str	r0, [r3, #8]
 8008b30:	2300      	movs	r3, #0
 8008b32:	6003      	str	r3, [r0, #0]
 8008b34:	2301      	movs	r3, #1
 8008b36:	421d      	tst	r5, r3
 8008b38:	d00a      	beq.n	8008b50 <__pow5mult+0x84>
 8008b3a:	0031      	movs	r1, r6
 8008b3c:	0022      	movs	r2, r4
 8008b3e:	0038      	movs	r0, r7
 8008b40:	f7ff ff12 	bl	8008968 <__multiply>
 8008b44:	0031      	movs	r1, r6
 8008b46:	9001      	str	r0, [sp, #4]
 8008b48:	0038      	movs	r0, r7
 8008b4a:	f7ff fe3d 	bl	80087c8 <_Bfree>
 8008b4e:	9e01      	ldr	r6, [sp, #4]
 8008b50:	106d      	asrs	r5, r5, #1
 8008b52:	d00c      	beq.n	8008b6e <__pow5mult+0xa2>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d107      	bne.n	8008b6a <__pow5mult+0x9e>
 8008b5a:	0022      	movs	r2, r4
 8008b5c:	0021      	movs	r1, r4
 8008b5e:	0038      	movs	r0, r7
 8008b60:	f7ff ff02 	bl	8008968 <__multiply>
 8008b64:	2300      	movs	r3, #0
 8008b66:	6020      	str	r0, [r4, #0]
 8008b68:	6003      	str	r3, [r0, #0]
 8008b6a:	0004      	movs	r4, r0
 8008b6c:	e7e2      	b.n	8008b34 <__pow5mult+0x68>
 8008b6e:	0030      	movs	r0, r6
 8008b70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b72:	46c0      	nop			@ (mov r8, r8)
 8008b74:	08009764 	.word	0x08009764
 8008b78:	08009689 	.word	0x08009689
 8008b7c:	08009709 	.word	0x08009709
 8008b80:	00000271 	.word	0x00000271

08008b84 <__lshift>:
 8008b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b86:	000c      	movs	r4, r1
 8008b88:	0016      	movs	r6, r2
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	1157      	asrs	r7, r2, #5
 8008b8e:	b085      	sub	sp, #20
 8008b90:	18fb      	adds	r3, r7, r3
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	3301      	adds	r3, #1
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	6849      	ldr	r1, [r1, #4]
 8008b9a:	68a3      	ldr	r3, [r4, #8]
 8008b9c:	9002      	str	r0, [sp, #8]
 8008b9e:	9a00      	ldr	r2, [sp, #0]
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	db10      	blt.n	8008bc6 <__lshift+0x42>
 8008ba4:	9802      	ldr	r0, [sp, #8]
 8008ba6:	f7ff fdcb 	bl	8008740 <_Balloc>
 8008baa:	2300      	movs	r3, #0
 8008bac:	0001      	movs	r1, r0
 8008bae:	0005      	movs	r5, r0
 8008bb0:	001a      	movs	r2, r3
 8008bb2:	3114      	adds	r1, #20
 8008bb4:	4298      	cmp	r0, r3
 8008bb6:	d10c      	bne.n	8008bd2 <__lshift+0x4e>
 8008bb8:	21ef      	movs	r1, #239	@ 0xef
 8008bba:	002a      	movs	r2, r5
 8008bbc:	4b25      	ldr	r3, [pc, #148]	@ (8008c54 <__lshift+0xd0>)
 8008bbe:	4826      	ldr	r0, [pc, #152]	@ (8008c58 <__lshift+0xd4>)
 8008bc0:	0049      	lsls	r1, r1, #1
 8008bc2:	f000 fabf 	bl	8009144 <__assert_func>
 8008bc6:	3101      	adds	r1, #1
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	e7e8      	b.n	8008b9e <__lshift+0x1a>
 8008bcc:	0098      	lsls	r0, r3, #2
 8008bce:	500a      	str	r2, [r1, r0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	42bb      	cmp	r3, r7
 8008bd4:	dbfa      	blt.n	8008bcc <__lshift+0x48>
 8008bd6:	43fb      	mvns	r3, r7
 8008bd8:	17db      	asrs	r3, r3, #31
 8008bda:	401f      	ands	r7, r3
 8008bdc:	00bf      	lsls	r7, r7, #2
 8008bde:	0023      	movs	r3, r4
 8008be0:	201f      	movs	r0, #31
 8008be2:	19c9      	adds	r1, r1, r7
 8008be4:	0037      	movs	r7, r6
 8008be6:	6922      	ldr	r2, [r4, #16]
 8008be8:	3314      	adds	r3, #20
 8008bea:	0092      	lsls	r2, r2, #2
 8008bec:	189a      	adds	r2, r3, r2
 8008bee:	4007      	ands	r7, r0
 8008bf0:	4206      	tst	r6, r0
 8008bf2:	d029      	beq.n	8008c48 <__lshift+0xc4>
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	1bc0      	subs	r0, r0, r7
 8008bf8:	9003      	str	r0, [sp, #12]
 8008bfa:	468c      	mov	ip, r1
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	681e      	ldr	r6, [r3, #0]
 8008c00:	40be      	lsls	r6, r7
 8008c02:	4306      	orrs	r6, r0
 8008c04:	4660      	mov	r0, ip
 8008c06:	c040      	stmia	r0!, {r6}
 8008c08:	4684      	mov	ip, r0
 8008c0a:	9e03      	ldr	r6, [sp, #12]
 8008c0c:	cb01      	ldmia	r3!, {r0}
 8008c0e:	40f0      	lsrs	r0, r6
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d8f4      	bhi.n	8008bfe <__lshift+0x7a>
 8008c14:	0026      	movs	r6, r4
 8008c16:	3615      	adds	r6, #21
 8008c18:	2304      	movs	r3, #4
 8008c1a:	42b2      	cmp	r2, r6
 8008c1c:	d304      	bcc.n	8008c28 <__lshift+0xa4>
 8008c1e:	1b13      	subs	r3, r2, r4
 8008c20:	3b15      	subs	r3, #21
 8008c22:	089b      	lsrs	r3, r3, #2
 8008c24:	3301      	adds	r3, #1
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	50c8      	str	r0, [r1, r3]
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d002      	beq.n	8008c34 <__lshift+0xb0>
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	3302      	adds	r3, #2
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	9b00      	ldr	r3, [sp, #0]
 8008c36:	9802      	ldr	r0, [sp, #8]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	0021      	movs	r1, r4
 8008c3c:	612b      	str	r3, [r5, #16]
 8008c3e:	f7ff fdc3 	bl	80087c8 <_Bfree>
 8008c42:	0028      	movs	r0, r5
 8008c44:	b005      	add	sp, #20
 8008c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c48:	cb01      	ldmia	r3!, {r0}
 8008c4a:	c101      	stmia	r1!, {r0}
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d8fb      	bhi.n	8008c48 <__lshift+0xc4>
 8008c50:	e7f0      	b.n	8008c34 <__lshift+0xb0>
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	080096f8 	.word	0x080096f8
 8008c58:	08009709 	.word	0x08009709

08008c5c <__mcmp>:
 8008c5c:	b530      	push	{r4, r5, lr}
 8008c5e:	690b      	ldr	r3, [r1, #16]
 8008c60:	6904      	ldr	r4, [r0, #16]
 8008c62:	0002      	movs	r2, r0
 8008c64:	1ae0      	subs	r0, r4, r3
 8008c66:	429c      	cmp	r4, r3
 8008c68:	d10f      	bne.n	8008c8a <__mcmp+0x2e>
 8008c6a:	3214      	adds	r2, #20
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	3114      	adds	r1, #20
 8008c70:	0014      	movs	r4, r2
 8008c72:	18c9      	adds	r1, r1, r3
 8008c74:	18d2      	adds	r2, r2, r3
 8008c76:	3a04      	subs	r2, #4
 8008c78:	3904      	subs	r1, #4
 8008c7a:	6815      	ldr	r5, [r2, #0]
 8008c7c:	680b      	ldr	r3, [r1, #0]
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	d004      	beq.n	8008c8c <__mcmp+0x30>
 8008c82:	2001      	movs	r0, #1
 8008c84:	429d      	cmp	r5, r3
 8008c86:	d200      	bcs.n	8008c8a <__mcmp+0x2e>
 8008c88:	3802      	subs	r0, #2
 8008c8a:	bd30      	pop	{r4, r5, pc}
 8008c8c:	4294      	cmp	r4, r2
 8008c8e:	d3f2      	bcc.n	8008c76 <__mcmp+0x1a>
 8008c90:	e7fb      	b.n	8008c8a <__mcmp+0x2e>
	...

08008c94 <__mdiff>:
 8008c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c96:	000c      	movs	r4, r1
 8008c98:	b087      	sub	sp, #28
 8008c9a:	9000      	str	r0, [sp, #0]
 8008c9c:	0011      	movs	r1, r2
 8008c9e:	0020      	movs	r0, r4
 8008ca0:	0017      	movs	r7, r2
 8008ca2:	f7ff ffdb 	bl	8008c5c <__mcmp>
 8008ca6:	1e05      	subs	r5, r0, #0
 8008ca8:	d110      	bne.n	8008ccc <__mdiff+0x38>
 8008caa:	0001      	movs	r1, r0
 8008cac:	9800      	ldr	r0, [sp, #0]
 8008cae:	f7ff fd47 	bl	8008740 <_Balloc>
 8008cb2:	1e02      	subs	r2, r0, #0
 8008cb4:	d104      	bne.n	8008cc0 <__mdiff+0x2c>
 8008cb6:	4b40      	ldr	r3, [pc, #256]	@ (8008db8 <__mdiff+0x124>)
 8008cb8:	4840      	ldr	r0, [pc, #256]	@ (8008dbc <__mdiff+0x128>)
 8008cba:	4941      	ldr	r1, [pc, #260]	@ (8008dc0 <__mdiff+0x12c>)
 8008cbc:	f000 fa42 	bl	8009144 <__assert_func>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	6145      	str	r5, [r0, #20]
 8008cc4:	6103      	str	r3, [r0, #16]
 8008cc6:	0010      	movs	r0, r2
 8008cc8:	b007      	add	sp, #28
 8008cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ccc:	2600      	movs	r6, #0
 8008cce:	42b0      	cmp	r0, r6
 8008cd0:	da03      	bge.n	8008cda <__mdiff+0x46>
 8008cd2:	0023      	movs	r3, r4
 8008cd4:	003c      	movs	r4, r7
 8008cd6:	001f      	movs	r7, r3
 8008cd8:	3601      	adds	r6, #1
 8008cda:	6861      	ldr	r1, [r4, #4]
 8008cdc:	9800      	ldr	r0, [sp, #0]
 8008cde:	f7ff fd2f 	bl	8008740 <_Balloc>
 8008ce2:	1e02      	subs	r2, r0, #0
 8008ce4:	d103      	bne.n	8008cee <__mdiff+0x5a>
 8008ce6:	4b34      	ldr	r3, [pc, #208]	@ (8008db8 <__mdiff+0x124>)
 8008ce8:	4834      	ldr	r0, [pc, #208]	@ (8008dbc <__mdiff+0x128>)
 8008cea:	4936      	ldr	r1, [pc, #216]	@ (8008dc4 <__mdiff+0x130>)
 8008cec:	e7e6      	b.n	8008cbc <__mdiff+0x28>
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	3414      	adds	r4, #20
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	18e3      	adds	r3, r4, r3
 8008cf8:	0021      	movs	r1, r4
 8008cfa:	9401      	str	r4, [sp, #4]
 8008cfc:	003c      	movs	r4, r7
 8008cfe:	9302      	str	r3, [sp, #8]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	3414      	adds	r4, #20
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	18e3      	adds	r3, r4, r3
 8008d08:	9303      	str	r3, [sp, #12]
 8008d0a:	0003      	movs	r3, r0
 8008d0c:	60c6      	str	r6, [r0, #12]
 8008d0e:	468c      	mov	ip, r1
 8008d10:	2000      	movs	r0, #0
 8008d12:	3314      	adds	r3, #20
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	4663      	mov	r3, ip
 8008d1a:	cb20      	ldmia	r3!, {r5}
 8008d1c:	b2a9      	uxth	r1, r5
 8008d1e:	000e      	movs	r6, r1
 8008d20:	469c      	mov	ip, r3
 8008d22:	cc08      	ldmia	r4!, {r3}
 8008d24:	0c2d      	lsrs	r5, r5, #16
 8008d26:	b299      	uxth	r1, r3
 8008d28:	1a71      	subs	r1, r6, r1
 8008d2a:	1809      	adds	r1, r1, r0
 8008d2c:	0c1b      	lsrs	r3, r3, #16
 8008d2e:	1408      	asrs	r0, r1, #16
 8008d30:	1aeb      	subs	r3, r5, r3
 8008d32:	181b      	adds	r3, r3, r0
 8008d34:	1418      	asrs	r0, r3, #16
 8008d36:	b289      	uxth	r1, r1
 8008d38:	041b      	lsls	r3, r3, #16
 8008d3a:	4319      	orrs	r1, r3
 8008d3c:	9b05      	ldr	r3, [sp, #20]
 8008d3e:	c302      	stmia	r3!, {r1}
 8008d40:	9305      	str	r3, [sp, #20]
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	d8e7      	bhi.n	8008d18 <__mdiff+0x84>
 8008d48:	0039      	movs	r1, r7
 8008d4a:	9c03      	ldr	r4, [sp, #12]
 8008d4c:	3115      	adds	r1, #21
 8008d4e:	2304      	movs	r3, #4
 8008d50:	428c      	cmp	r4, r1
 8008d52:	d304      	bcc.n	8008d5e <__mdiff+0xca>
 8008d54:	1be3      	subs	r3, r4, r7
 8008d56:	3b15      	subs	r3, #21
 8008d58:	089b      	lsrs	r3, r3, #2
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	9901      	ldr	r1, [sp, #4]
 8008d60:	18cd      	adds	r5, r1, r3
 8008d62:	9904      	ldr	r1, [sp, #16]
 8008d64:	002e      	movs	r6, r5
 8008d66:	18cb      	adds	r3, r1, r3
 8008d68:	001f      	movs	r7, r3
 8008d6a:	9902      	ldr	r1, [sp, #8]
 8008d6c:	428e      	cmp	r6, r1
 8008d6e:	d311      	bcc.n	8008d94 <__mdiff+0x100>
 8008d70:	9c02      	ldr	r4, [sp, #8]
 8008d72:	1ee9      	subs	r1, r5, #3
 8008d74:	2000      	movs	r0, #0
 8008d76:	428c      	cmp	r4, r1
 8008d78:	d304      	bcc.n	8008d84 <__mdiff+0xf0>
 8008d7a:	0021      	movs	r1, r4
 8008d7c:	3103      	adds	r1, #3
 8008d7e:	1b49      	subs	r1, r1, r5
 8008d80:	0889      	lsrs	r1, r1, #2
 8008d82:	0088      	lsls	r0, r1, #2
 8008d84:	181b      	adds	r3, r3, r0
 8008d86:	3b04      	subs	r3, #4
 8008d88:	6819      	ldr	r1, [r3, #0]
 8008d8a:	2900      	cmp	r1, #0
 8008d8c:	d010      	beq.n	8008db0 <__mdiff+0x11c>
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	6113      	str	r3, [r2, #16]
 8008d92:	e798      	b.n	8008cc6 <__mdiff+0x32>
 8008d94:	4684      	mov	ip, r0
 8008d96:	ce02      	ldmia	r6!, {r1}
 8008d98:	b288      	uxth	r0, r1
 8008d9a:	4460      	add	r0, ip
 8008d9c:	1400      	asrs	r0, r0, #16
 8008d9e:	0c0c      	lsrs	r4, r1, #16
 8008da0:	1904      	adds	r4, r0, r4
 8008da2:	4461      	add	r1, ip
 8008da4:	1420      	asrs	r0, r4, #16
 8008da6:	b289      	uxth	r1, r1
 8008da8:	0424      	lsls	r4, r4, #16
 8008daa:	4321      	orrs	r1, r4
 8008dac:	c702      	stmia	r7!, {r1}
 8008dae:	e7dc      	b.n	8008d6a <__mdiff+0xd6>
 8008db0:	9900      	ldr	r1, [sp, #0]
 8008db2:	3901      	subs	r1, #1
 8008db4:	9100      	str	r1, [sp, #0]
 8008db6:	e7e6      	b.n	8008d86 <__mdiff+0xf2>
 8008db8:	080096f8 	.word	0x080096f8
 8008dbc:	08009709 	.word	0x08009709
 8008dc0:	00000237 	.word	0x00000237
 8008dc4:	00000245 	.word	0x00000245

08008dc8 <__d2b>:
 8008dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dca:	2101      	movs	r1, #1
 8008dcc:	0016      	movs	r6, r2
 8008dce:	001f      	movs	r7, r3
 8008dd0:	f7ff fcb6 	bl	8008740 <_Balloc>
 8008dd4:	1e04      	subs	r4, r0, #0
 8008dd6:	d105      	bne.n	8008de4 <__d2b+0x1c>
 8008dd8:	0022      	movs	r2, r4
 8008dda:	4b25      	ldr	r3, [pc, #148]	@ (8008e70 <__d2b+0xa8>)
 8008ddc:	4825      	ldr	r0, [pc, #148]	@ (8008e74 <__d2b+0xac>)
 8008dde:	4926      	ldr	r1, [pc, #152]	@ (8008e78 <__d2b+0xb0>)
 8008de0:	f000 f9b0 	bl	8009144 <__assert_func>
 8008de4:	033b      	lsls	r3, r7, #12
 8008de6:	007d      	lsls	r5, r7, #1
 8008de8:	0b1b      	lsrs	r3, r3, #12
 8008dea:	0d6d      	lsrs	r5, r5, #21
 8008dec:	d002      	beq.n	8008df4 <__d2b+0x2c>
 8008dee:	2280      	movs	r2, #128	@ 0x80
 8008df0:	0352      	lsls	r2, r2, #13
 8008df2:	4313      	orrs	r3, r2
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	2e00      	cmp	r6, #0
 8008df8:	d025      	beq.n	8008e46 <__d2b+0x7e>
 8008dfa:	4668      	mov	r0, sp
 8008dfc:	9600      	str	r6, [sp, #0]
 8008dfe:	f7ff fd6c 	bl	80088da <__lo0bits>
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	9900      	ldr	r1, [sp, #0]
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d01b      	beq.n	8008e42 <__d2b+0x7a>
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	001e      	movs	r6, r3
 8008e0e:	1a12      	subs	r2, r2, r0
 8008e10:	4096      	lsls	r6, r2
 8008e12:	0032      	movs	r2, r6
 8008e14:	40c3      	lsrs	r3, r0
 8008e16:	430a      	orrs	r2, r1
 8008e18:	6162      	str	r2, [r4, #20]
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	9e01      	ldr	r6, [sp, #4]
 8008e1e:	61a6      	str	r6, [r4, #24]
 8008e20:	1e73      	subs	r3, r6, #1
 8008e22:	419e      	sbcs	r6, r3
 8008e24:	3601      	adds	r6, #1
 8008e26:	6126      	str	r6, [r4, #16]
 8008e28:	2d00      	cmp	r5, #0
 8008e2a:	d014      	beq.n	8008e56 <__d2b+0x8e>
 8008e2c:	2635      	movs	r6, #53	@ 0x35
 8008e2e:	4b13      	ldr	r3, [pc, #76]	@ (8008e7c <__d2b+0xb4>)
 8008e30:	18ed      	adds	r5, r5, r3
 8008e32:	9b08      	ldr	r3, [sp, #32]
 8008e34:	182d      	adds	r5, r5, r0
 8008e36:	601d      	str	r5, [r3, #0]
 8008e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3a:	1a36      	subs	r6, r6, r0
 8008e3c:	601e      	str	r6, [r3, #0]
 8008e3e:	0020      	movs	r0, r4
 8008e40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e42:	6161      	str	r1, [r4, #20]
 8008e44:	e7ea      	b.n	8008e1c <__d2b+0x54>
 8008e46:	a801      	add	r0, sp, #4
 8008e48:	f7ff fd47 	bl	80088da <__lo0bits>
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	2601      	movs	r6, #1
 8008e50:	6163      	str	r3, [r4, #20]
 8008e52:	3020      	adds	r0, #32
 8008e54:	e7e7      	b.n	8008e26 <__d2b+0x5e>
 8008e56:	4b0a      	ldr	r3, [pc, #40]	@ (8008e80 <__d2b+0xb8>)
 8008e58:	18c0      	adds	r0, r0, r3
 8008e5a:	9b08      	ldr	r3, [sp, #32]
 8008e5c:	6018      	str	r0, [r3, #0]
 8008e5e:	4b09      	ldr	r3, [pc, #36]	@ (8008e84 <__d2b+0xbc>)
 8008e60:	18f3      	adds	r3, r6, r3
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	18e3      	adds	r3, r4, r3
 8008e66:	6958      	ldr	r0, [r3, #20]
 8008e68:	f7ff fd16 	bl	8008898 <__hi0bits>
 8008e6c:	0176      	lsls	r6, r6, #5
 8008e6e:	e7e3      	b.n	8008e38 <__d2b+0x70>
 8008e70:	080096f8 	.word	0x080096f8
 8008e74:	08009709 	.word	0x08009709
 8008e78:	0000030f 	.word	0x0000030f
 8008e7c:	fffffbcd 	.word	0xfffffbcd
 8008e80:	fffffbce 	.word	0xfffffbce
 8008e84:	3fffffff 	.word	0x3fffffff

08008e88 <__sflush_r>:
 8008e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e8a:	220c      	movs	r2, #12
 8008e8c:	5e8b      	ldrsh	r3, [r1, r2]
 8008e8e:	0005      	movs	r5, r0
 8008e90:	000c      	movs	r4, r1
 8008e92:	071a      	lsls	r2, r3, #28
 8008e94:	d456      	bmi.n	8008f44 <__sflush_r+0xbc>
 8008e96:	684a      	ldr	r2, [r1, #4]
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	dc02      	bgt.n	8008ea2 <__sflush_r+0x1a>
 8008e9c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	dd4e      	ble.n	8008f40 <__sflush_r+0xb8>
 8008ea2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008ea4:	2f00      	cmp	r7, #0
 8008ea6:	d04b      	beq.n	8008f40 <__sflush_r+0xb8>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2080      	movs	r0, #128	@ 0x80
 8008eac:	682e      	ldr	r6, [r5, #0]
 8008eae:	602a      	str	r2, [r5, #0]
 8008eb0:	001a      	movs	r2, r3
 8008eb2:	0140      	lsls	r0, r0, #5
 8008eb4:	6a21      	ldr	r1, [r4, #32]
 8008eb6:	4002      	ands	r2, r0
 8008eb8:	4203      	tst	r3, r0
 8008eba:	d033      	beq.n	8008f24 <__sflush_r+0x9c>
 8008ebc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	075b      	lsls	r3, r3, #29
 8008ec2:	d506      	bpl.n	8008ed2 <__sflush_r+0x4a>
 8008ec4:	6863      	ldr	r3, [r4, #4]
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <__sflush_r+0x4a>
 8008ece:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ed0:	1ad2      	subs	r2, r2, r3
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	0028      	movs	r0, r5
 8008ed6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008ed8:	6a21      	ldr	r1, [r4, #32]
 8008eda:	47b8      	blx	r7
 8008edc:	89a2      	ldrh	r2, [r4, #12]
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d106      	bne.n	8008ef0 <__sflush_r+0x68>
 8008ee2:	6829      	ldr	r1, [r5, #0]
 8008ee4:	291d      	cmp	r1, #29
 8008ee6:	d846      	bhi.n	8008f76 <__sflush_r+0xee>
 8008ee8:	4b29      	ldr	r3, [pc, #164]	@ (8008f90 <__sflush_r+0x108>)
 8008eea:	410b      	asrs	r3, r1
 8008eec:	07db      	lsls	r3, r3, #31
 8008eee:	d442      	bmi.n	8008f76 <__sflush_r+0xee>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	6063      	str	r3, [r4, #4]
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	04d2      	lsls	r2, r2, #19
 8008efa:	d505      	bpl.n	8008f08 <__sflush_r+0x80>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <__sflush_r+0x7e>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d100      	bne.n	8008f08 <__sflush_r+0x80>
 8008f06:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f0a:	602e      	str	r6, [r5, #0]
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d017      	beq.n	8008f40 <__sflush_r+0xb8>
 8008f10:	0023      	movs	r3, r4
 8008f12:	3344      	adds	r3, #68	@ 0x44
 8008f14:	4299      	cmp	r1, r3
 8008f16:	d002      	beq.n	8008f1e <__sflush_r+0x96>
 8008f18:	0028      	movs	r0, r5
 8008f1a:	f7ff fb0b 	bl	8008534 <_free_r>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f22:	e00d      	b.n	8008f40 <__sflush_r+0xb8>
 8008f24:	2301      	movs	r3, #1
 8008f26:	0028      	movs	r0, r5
 8008f28:	47b8      	blx	r7
 8008f2a:	0002      	movs	r2, r0
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d1c6      	bne.n	8008ebe <__sflush_r+0x36>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0c3      	beq.n	8008ebe <__sflush_r+0x36>
 8008f36:	2b1d      	cmp	r3, #29
 8008f38:	d001      	beq.n	8008f3e <__sflush_r+0xb6>
 8008f3a:	2b16      	cmp	r3, #22
 8008f3c:	d11a      	bne.n	8008f74 <__sflush_r+0xec>
 8008f3e:	602e      	str	r6, [r5, #0]
 8008f40:	2000      	movs	r0, #0
 8008f42:	e01e      	b.n	8008f82 <__sflush_r+0xfa>
 8008f44:	690e      	ldr	r6, [r1, #16]
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	d0fa      	beq.n	8008f40 <__sflush_r+0xb8>
 8008f4a:	680f      	ldr	r7, [r1, #0]
 8008f4c:	600e      	str	r6, [r1, #0]
 8008f4e:	1bba      	subs	r2, r7, r6
 8008f50:	9201      	str	r2, [sp, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	079b      	lsls	r3, r3, #30
 8008f56:	d100      	bne.n	8008f5a <__sflush_r+0xd2>
 8008f58:	694a      	ldr	r2, [r1, #20]
 8008f5a:	60a2      	str	r2, [r4, #8]
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	ddee      	ble.n	8008f40 <__sflush_r+0xb8>
 8008f62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008f64:	0032      	movs	r2, r6
 8008f66:	001f      	movs	r7, r3
 8008f68:	0028      	movs	r0, r5
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	6a21      	ldr	r1, [r4, #32]
 8008f6e:	47b8      	blx	r7
 8008f70:	2800      	cmp	r0, #0
 8008f72:	dc07      	bgt.n	8008f84 <__sflush_r+0xfc>
 8008f74:	89a2      	ldrh	r2, [r4, #12]
 8008f76:	2340      	movs	r3, #64	@ 0x40
 8008f78:	2001      	movs	r0, #1
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	b21b      	sxth	r3, r3
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	4240      	negs	r0, r0
 8008f82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	1836      	adds	r6, r6, r0
 8008f88:	1a1b      	subs	r3, r3, r0
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	e7e6      	b.n	8008f5c <__sflush_r+0xd4>
 8008f8e:	46c0      	nop			@ (mov r8, r8)
 8008f90:	dfbffffe 	.word	0xdfbffffe

08008f94 <_fflush_r>:
 8008f94:	690b      	ldr	r3, [r1, #16]
 8008f96:	b570      	push	{r4, r5, r6, lr}
 8008f98:	0005      	movs	r5, r0
 8008f9a:	000c      	movs	r4, r1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d102      	bne.n	8008fa6 <_fflush_r+0x12>
 8008fa0:	2500      	movs	r5, #0
 8008fa2:	0028      	movs	r0, r5
 8008fa4:	bd70      	pop	{r4, r5, r6, pc}
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d004      	beq.n	8008fb4 <_fflush_r+0x20>
 8008faa:	6a03      	ldr	r3, [r0, #32]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <_fflush_r+0x20>
 8008fb0:	f7fe fa2c 	bl	800740c <__sinit>
 8008fb4:	220c      	movs	r2, #12
 8008fb6:	5ea3      	ldrsh	r3, [r4, r2]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0f1      	beq.n	8008fa0 <_fflush_r+0xc>
 8008fbc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008fbe:	07d2      	lsls	r2, r2, #31
 8008fc0:	d404      	bmi.n	8008fcc <_fflush_r+0x38>
 8008fc2:	059b      	lsls	r3, r3, #22
 8008fc4:	d402      	bmi.n	8008fcc <_fflush_r+0x38>
 8008fc6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fc8:	f7fe fc25 	bl	8007816 <__retarget_lock_acquire_recursive>
 8008fcc:	0028      	movs	r0, r5
 8008fce:	0021      	movs	r1, r4
 8008fd0:	f7ff ff5a 	bl	8008e88 <__sflush_r>
 8008fd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fd6:	0005      	movs	r5, r0
 8008fd8:	07db      	lsls	r3, r3, #31
 8008fda:	d4e2      	bmi.n	8008fa2 <_fflush_r+0xe>
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	059b      	lsls	r3, r3, #22
 8008fe0:	d4df      	bmi.n	8008fa2 <_fflush_r+0xe>
 8008fe2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fe4:	f7fe fc18 	bl	8007818 <__retarget_lock_release_recursive>
 8008fe8:	e7db      	b.n	8008fa2 <_fflush_r+0xe>
	...

08008fec <__swhatbuf_r>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	000e      	movs	r6, r1
 8008ff0:	001d      	movs	r5, r3
 8008ff2:	230e      	movs	r3, #14
 8008ff4:	5ec9      	ldrsh	r1, [r1, r3]
 8008ff6:	0014      	movs	r4, r2
 8008ff8:	b096      	sub	sp, #88	@ 0x58
 8008ffa:	2900      	cmp	r1, #0
 8008ffc:	da0c      	bge.n	8009018 <__swhatbuf_r+0x2c>
 8008ffe:	89b2      	ldrh	r2, [r6, #12]
 8009000:	2380      	movs	r3, #128	@ 0x80
 8009002:	0011      	movs	r1, r2
 8009004:	4019      	ands	r1, r3
 8009006:	421a      	tst	r2, r3
 8009008:	d114      	bne.n	8009034 <__swhatbuf_r+0x48>
 800900a:	2380      	movs	r3, #128	@ 0x80
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	2000      	movs	r0, #0
 8009010:	6029      	str	r1, [r5, #0]
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	b016      	add	sp, #88	@ 0x58
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	466a      	mov	r2, sp
 800901a:	f000 f853 	bl	80090c4 <_fstat_r>
 800901e:	2800      	cmp	r0, #0
 8009020:	dbed      	blt.n	8008ffe <__swhatbuf_r+0x12>
 8009022:	23f0      	movs	r3, #240	@ 0xf0
 8009024:	9901      	ldr	r1, [sp, #4]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	4019      	ands	r1, r3
 800902a:	4b04      	ldr	r3, [pc, #16]	@ (800903c <__swhatbuf_r+0x50>)
 800902c:	18c9      	adds	r1, r1, r3
 800902e:	424b      	negs	r3, r1
 8009030:	4159      	adcs	r1, r3
 8009032:	e7ea      	b.n	800900a <__swhatbuf_r+0x1e>
 8009034:	2100      	movs	r1, #0
 8009036:	2340      	movs	r3, #64	@ 0x40
 8009038:	e7e9      	b.n	800900e <__swhatbuf_r+0x22>
 800903a:	46c0      	nop			@ (mov r8, r8)
 800903c:	ffffe000 	.word	0xffffe000

08009040 <__smakebuf_r>:
 8009040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009042:	2602      	movs	r6, #2
 8009044:	898b      	ldrh	r3, [r1, #12]
 8009046:	0005      	movs	r5, r0
 8009048:	000c      	movs	r4, r1
 800904a:	b085      	sub	sp, #20
 800904c:	4233      	tst	r3, r6
 800904e:	d007      	beq.n	8009060 <__smakebuf_r+0x20>
 8009050:	0023      	movs	r3, r4
 8009052:	3347      	adds	r3, #71	@ 0x47
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	2301      	movs	r3, #1
 800905a:	6163      	str	r3, [r4, #20]
 800905c:	b005      	add	sp, #20
 800905e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009060:	ab03      	add	r3, sp, #12
 8009062:	aa02      	add	r2, sp, #8
 8009064:	f7ff ffc2 	bl	8008fec <__swhatbuf_r>
 8009068:	9f02      	ldr	r7, [sp, #8]
 800906a:	9001      	str	r0, [sp, #4]
 800906c:	0039      	movs	r1, r7
 800906e:	0028      	movs	r0, r5
 8009070:	f7ff fad6 	bl	8008620 <_malloc_r>
 8009074:	2800      	cmp	r0, #0
 8009076:	d108      	bne.n	800908a <__smakebuf_r+0x4a>
 8009078:	220c      	movs	r2, #12
 800907a:	5ea3      	ldrsh	r3, [r4, r2]
 800907c:	059a      	lsls	r2, r3, #22
 800907e:	d4ed      	bmi.n	800905c <__smakebuf_r+0x1c>
 8009080:	2203      	movs	r2, #3
 8009082:	4393      	bics	r3, r2
 8009084:	431e      	orrs	r6, r3
 8009086:	81a6      	strh	r6, [r4, #12]
 8009088:	e7e2      	b.n	8009050 <__smakebuf_r+0x10>
 800908a:	2380      	movs	r3, #128	@ 0x80
 800908c:	89a2      	ldrh	r2, [r4, #12]
 800908e:	6020      	str	r0, [r4, #0]
 8009090:	4313      	orrs	r3, r2
 8009092:	81a3      	strh	r3, [r4, #12]
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	6120      	str	r0, [r4, #16]
 8009098:	6167      	str	r7, [r4, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <__smakebuf_r+0x78>
 800909e:	0028      	movs	r0, r5
 80090a0:	230e      	movs	r3, #14
 80090a2:	5ee1      	ldrsh	r1, [r4, r3]
 80090a4:	f000 f820 	bl	80090e8 <_isatty_r>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d005      	beq.n	80090b8 <__smakebuf_r+0x78>
 80090ac:	2303      	movs	r3, #3
 80090ae:	89a2      	ldrh	r2, [r4, #12]
 80090b0:	439a      	bics	r2, r3
 80090b2:	3b02      	subs	r3, #2
 80090b4:	4313      	orrs	r3, r2
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	9a01      	ldr	r2, [sp, #4]
 80090bc:	4313      	orrs	r3, r2
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	e7cc      	b.n	800905c <__smakebuf_r+0x1c>
	...

080090c4 <_fstat_r>:
 80090c4:	2300      	movs	r3, #0
 80090c6:	b570      	push	{r4, r5, r6, lr}
 80090c8:	4d06      	ldr	r5, [pc, #24]	@ (80090e4 <_fstat_r+0x20>)
 80090ca:	0004      	movs	r4, r0
 80090cc:	0008      	movs	r0, r1
 80090ce:	0011      	movs	r1, r2
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	f7fa f809 	bl	80030e8 <_fstat>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	d103      	bne.n	80090e2 <_fstat_r+0x1e>
 80090da:	682b      	ldr	r3, [r5, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d000      	beq.n	80090e2 <_fstat_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	200004b0 	.word	0x200004b0

080090e8 <_isatty_r>:
 80090e8:	2300      	movs	r3, #0
 80090ea:	b570      	push	{r4, r5, r6, lr}
 80090ec:	4d06      	ldr	r5, [pc, #24]	@ (8009108 <_isatty_r+0x20>)
 80090ee:	0004      	movs	r4, r0
 80090f0:	0008      	movs	r0, r1
 80090f2:	602b      	str	r3, [r5, #0]
 80090f4:	f7fa f806 	bl	8003104 <_isatty>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d103      	bne.n	8009104 <_isatty_r+0x1c>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d000      	beq.n	8009104 <_isatty_r+0x1c>
 8009102:	6023      	str	r3, [r4, #0]
 8009104:	bd70      	pop	{r4, r5, r6, pc}
 8009106:	46c0      	nop			@ (mov r8, r8)
 8009108:	200004b0 	.word	0x200004b0

0800910c <_sbrk_r>:
 800910c:	2300      	movs	r3, #0
 800910e:	b570      	push	{r4, r5, r6, lr}
 8009110:	4d06      	ldr	r5, [pc, #24]	@ (800912c <_sbrk_r+0x20>)
 8009112:	0004      	movs	r4, r0
 8009114:	0008      	movs	r0, r1
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	f7fa f808 	bl	800312c <_sbrk>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d103      	bne.n	8009128 <_sbrk_r+0x1c>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d000      	beq.n	8009128 <_sbrk_r+0x1c>
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	bd70      	pop	{r4, r5, r6, pc}
 800912a:	46c0      	nop			@ (mov r8, r8)
 800912c:	200004b0 	.word	0x200004b0

08009130 <memcpy>:
 8009130:	2300      	movs	r3, #0
 8009132:	b510      	push	{r4, lr}
 8009134:	429a      	cmp	r2, r3
 8009136:	d100      	bne.n	800913a <memcpy+0xa>
 8009138:	bd10      	pop	{r4, pc}
 800913a:	5ccc      	ldrb	r4, [r1, r3]
 800913c:	54c4      	strb	r4, [r0, r3]
 800913e:	3301      	adds	r3, #1
 8009140:	e7f8      	b.n	8009134 <memcpy+0x4>
	...

08009144 <__assert_func>:
 8009144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009146:	0014      	movs	r4, r2
 8009148:	001a      	movs	r2, r3
 800914a:	4b09      	ldr	r3, [pc, #36]	@ (8009170 <__assert_func+0x2c>)
 800914c:	0005      	movs	r5, r0
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	000e      	movs	r6, r1
 8009152:	68d8      	ldr	r0, [r3, #12]
 8009154:	4b07      	ldr	r3, [pc, #28]	@ (8009174 <__assert_func+0x30>)
 8009156:	2c00      	cmp	r4, #0
 8009158:	d101      	bne.n	800915e <__assert_func+0x1a>
 800915a:	4b07      	ldr	r3, [pc, #28]	@ (8009178 <__assert_func+0x34>)
 800915c:	001c      	movs	r4, r3
 800915e:	4907      	ldr	r1, [pc, #28]	@ (800917c <__assert_func+0x38>)
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	9402      	str	r4, [sp, #8]
 8009164:	002b      	movs	r3, r5
 8009166:	9600      	str	r6, [sp, #0]
 8009168:	f000 f856 	bl	8009218 <fiprintf>
 800916c:	f000 f864 	bl	8009238 <abort>
 8009170:	2000001c 	.word	0x2000001c
 8009174:	0800986a 	.word	0x0800986a
 8009178:	080098a5 	.word	0x080098a5
 800917c:	08009877 	.word	0x08009877

08009180 <_calloc_r>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	0c0b      	lsrs	r3, r1, #16
 8009184:	0c15      	lsrs	r5, r2, #16
 8009186:	2b00      	cmp	r3, #0
 8009188:	d11e      	bne.n	80091c8 <_calloc_r+0x48>
 800918a:	2d00      	cmp	r5, #0
 800918c:	d10c      	bne.n	80091a8 <_calloc_r+0x28>
 800918e:	b289      	uxth	r1, r1
 8009190:	b294      	uxth	r4, r2
 8009192:	434c      	muls	r4, r1
 8009194:	0021      	movs	r1, r4
 8009196:	f7ff fa43 	bl	8008620 <_malloc_r>
 800919a:	1e05      	subs	r5, r0, #0
 800919c:	d01a      	beq.n	80091d4 <_calloc_r+0x54>
 800919e:	0022      	movs	r2, r4
 80091a0:	2100      	movs	r1, #0
 80091a2:	f7fe fab3 	bl	800770c <memset>
 80091a6:	e016      	b.n	80091d6 <_calloc_r+0x56>
 80091a8:	1c2b      	adds	r3, r5, #0
 80091aa:	1c0c      	adds	r4, r1, #0
 80091ac:	b289      	uxth	r1, r1
 80091ae:	b292      	uxth	r2, r2
 80091b0:	434a      	muls	r2, r1
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	b2a1      	uxth	r1, r4
 80091b6:	4359      	muls	r1, r3
 80091b8:	0c14      	lsrs	r4, r2, #16
 80091ba:	190c      	adds	r4, r1, r4
 80091bc:	0c23      	lsrs	r3, r4, #16
 80091be:	d107      	bne.n	80091d0 <_calloc_r+0x50>
 80091c0:	0424      	lsls	r4, r4, #16
 80091c2:	b292      	uxth	r2, r2
 80091c4:	4314      	orrs	r4, r2
 80091c6:	e7e5      	b.n	8009194 <_calloc_r+0x14>
 80091c8:	2d00      	cmp	r5, #0
 80091ca:	d101      	bne.n	80091d0 <_calloc_r+0x50>
 80091cc:	1c14      	adds	r4, r2, #0
 80091ce:	e7ed      	b.n	80091ac <_calloc_r+0x2c>
 80091d0:	230c      	movs	r3, #12
 80091d2:	6003      	str	r3, [r0, #0]
 80091d4:	2500      	movs	r5, #0
 80091d6:	0028      	movs	r0, r5
 80091d8:	bd70      	pop	{r4, r5, r6, pc}

080091da <__ascii_mbtowc>:
 80091da:	b082      	sub	sp, #8
 80091dc:	2900      	cmp	r1, #0
 80091de:	d100      	bne.n	80091e2 <__ascii_mbtowc+0x8>
 80091e0:	a901      	add	r1, sp, #4
 80091e2:	1e10      	subs	r0, r2, #0
 80091e4:	d006      	beq.n	80091f4 <__ascii_mbtowc+0x1a>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d006      	beq.n	80091f8 <__ascii_mbtowc+0x1e>
 80091ea:	7813      	ldrb	r3, [r2, #0]
 80091ec:	600b      	str	r3, [r1, #0]
 80091ee:	7810      	ldrb	r0, [r2, #0]
 80091f0:	1e43      	subs	r3, r0, #1
 80091f2:	4198      	sbcs	r0, r3
 80091f4:	b002      	add	sp, #8
 80091f6:	4770      	bx	lr
 80091f8:	2002      	movs	r0, #2
 80091fa:	4240      	negs	r0, r0
 80091fc:	e7fa      	b.n	80091f4 <__ascii_mbtowc+0x1a>

080091fe <__ascii_wctomb>:
 80091fe:	0003      	movs	r3, r0
 8009200:	1e08      	subs	r0, r1, #0
 8009202:	d005      	beq.n	8009210 <__ascii_wctomb+0x12>
 8009204:	2aff      	cmp	r2, #255	@ 0xff
 8009206:	d904      	bls.n	8009212 <__ascii_wctomb+0x14>
 8009208:	228a      	movs	r2, #138	@ 0x8a
 800920a:	2001      	movs	r0, #1
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	4240      	negs	r0, r0
 8009210:	4770      	bx	lr
 8009212:	2001      	movs	r0, #1
 8009214:	700a      	strb	r2, [r1, #0]
 8009216:	e7fb      	b.n	8009210 <__ascii_wctomb+0x12>

08009218 <fiprintf>:
 8009218:	b40e      	push	{r1, r2, r3}
 800921a:	b517      	push	{r0, r1, r2, r4, lr}
 800921c:	4c05      	ldr	r4, [pc, #20]	@ (8009234 <fiprintf+0x1c>)
 800921e:	ab05      	add	r3, sp, #20
 8009220:	cb04      	ldmia	r3!, {r2}
 8009222:	0001      	movs	r1, r0
 8009224:	6820      	ldr	r0, [r4, #0]
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	f000 f834 	bl	8009294 <_vfiprintf_r>
 800922c:	bc1e      	pop	{r1, r2, r3, r4}
 800922e:	bc08      	pop	{r3}
 8009230:	b003      	add	sp, #12
 8009232:	4718      	bx	r3
 8009234:	2000001c 	.word	0x2000001c

08009238 <abort>:
 8009238:	2006      	movs	r0, #6
 800923a:	b510      	push	{r4, lr}
 800923c:	f000 f970 	bl	8009520 <raise>
 8009240:	2001      	movs	r0, #1
 8009242:	f7f9 ff1d 	bl	8003080 <_exit>

08009246 <__sfputc_r>:
 8009246:	6893      	ldr	r3, [r2, #8]
 8009248:	b510      	push	{r4, lr}
 800924a:	3b01      	subs	r3, #1
 800924c:	6093      	str	r3, [r2, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	da04      	bge.n	800925c <__sfputc_r+0x16>
 8009252:	6994      	ldr	r4, [r2, #24]
 8009254:	42a3      	cmp	r3, r4
 8009256:	db07      	blt.n	8009268 <__sfputc_r+0x22>
 8009258:	290a      	cmp	r1, #10
 800925a:	d005      	beq.n	8009268 <__sfputc_r+0x22>
 800925c:	6813      	ldr	r3, [r2, #0]
 800925e:	1c58      	adds	r0, r3, #1
 8009260:	6010      	str	r0, [r2, #0]
 8009262:	7019      	strb	r1, [r3, #0]
 8009264:	0008      	movs	r0, r1
 8009266:	bd10      	pop	{r4, pc}
 8009268:	f7fe f9b0 	bl	80075cc <__swbuf_r>
 800926c:	0001      	movs	r1, r0
 800926e:	e7f9      	b.n	8009264 <__sfputc_r+0x1e>

08009270 <__sfputs_r>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	0006      	movs	r6, r0
 8009274:	000f      	movs	r7, r1
 8009276:	0014      	movs	r4, r2
 8009278:	18d5      	adds	r5, r2, r3
 800927a:	42ac      	cmp	r4, r5
 800927c:	d101      	bne.n	8009282 <__sfputs_r+0x12>
 800927e:	2000      	movs	r0, #0
 8009280:	e007      	b.n	8009292 <__sfputs_r+0x22>
 8009282:	7821      	ldrb	r1, [r4, #0]
 8009284:	003a      	movs	r2, r7
 8009286:	0030      	movs	r0, r6
 8009288:	f7ff ffdd 	bl	8009246 <__sfputc_r>
 800928c:	3401      	adds	r4, #1
 800928e:	1c43      	adds	r3, r0, #1
 8009290:	d1f3      	bne.n	800927a <__sfputs_r+0xa>
 8009292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009294 <_vfiprintf_r>:
 8009294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009296:	b0a1      	sub	sp, #132	@ 0x84
 8009298:	000f      	movs	r7, r1
 800929a:	0015      	movs	r5, r2
 800929c:	001e      	movs	r6, r3
 800929e:	9003      	str	r0, [sp, #12]
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d004      	beq.n	80092ae <_vfiprintf_r+0x1a>
 80092a4:	6a03      	ldr	r3, [r0, #32]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <_vfiprintf_r+0x1a>
 80092aa:	f7fe f8af 	bl	800740c <__sinit>
 80092ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092b0:	07db      	lsls	r3, r3, #31
 80092b2:	d405      	bmi.n	80092c0 <_vfiprintf_r+0x2c>
 80092b4:	89bb      	ldrh	r3, [r7, #12]
 80092b6:	059b      	lsls	r3, r3, #22
 80092b8:	d402      	bmi.n	80092c0 <_vfiprintf_r+0x2c>
 80092ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80092bc:	f7fe faab 	bl	8007816 <__retarget_lock_acquire_recursive>
 80092c0:	89bb      	ldrh	r3, [r7, #12]
 80092c2:	071b      	lsls	r3, r3, #28
 80092c4:	d502      	bpl.n	80092cc <_vfiprintf_r+0x38>
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d113      	bne.n	80092f4 <_vfiprintf_r+0x60>
 80092cc:	0039      	movs	r1, r7
 80092ce:	9803      	ldr	r0, [sp, #12]
 80092d0:	f7fe f9be 	bl	8007650 <__swsetup_r>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d00d      	beq.n	80092f4 <_vfiprintf_r+0x60>
 80092d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092da:	07db      	lsls	r3, r3, #31
 80092dc:	d503      	bpl.n	80092e6 <_vfiprintf_r+0x52>
 80092de:	2001      	movs	r0, #1
 80092e0:	4240      	negs	r0, r0
 80092e2:	b021      	add	sp, #132	@ 0x84
 80092e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e6:	89bb      	ldrh	r3, [r7, #12]
 80092e8:	059b      	lsls	r3, r3, #22
 80092ea:	d4f8      	bmi.n	80092de <_vfiprintf_r+0x4a>
 80092ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80092ee:	f7fe fa93 	bl	8007818 <__retarget_lock_release_recursive>
 80092f2:	e7f4      	b.n	80092de <_vfiprintf_r+0x4a>
 80092f4:	2300      	movs	r3, #0
 80092f6:	ac08      	add	r4, sp, #32
 80092f8:	6163      	str	r3, [r4, #20]
 80092fa:	3320      	adds	r3, #32
 80092fc:	7663      	strb	r3, [r4, #25]
 80092fe:	3310      	adds	r3, #16
 8009300:	76a3      	strb	r3, [r4, #26]
 8009302:	9607      	str	r6, [sp, #28]
 8009304:	002e      	movs	r6, r5
 8009306:	7833      	ldrb	r3, [r6, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <_vfiprintf_r+0x7c>
 800930c:	2b25      	cmp	r3, #37	@ 0x25
 800930e:	d148      	bne.n	80093a2 <_vfiprintf_r+0x10e>
 8009310:	1b73      	subs	r3, r6, r5
 8009312:	9305      	str	r3, [sp, #20]
 8009314:	42ae      	cmp	r6, r5
 8009316:	d00b      	beq.n	8009330 <_vfiprintf_r+0x9c>
 8009318:	002a      	movs	r2, r5
 800931a:	0039      	movs	r1, r7
 800931c:	9803      	ldr	r0, [sp, #12]
 800931e:	f7ff ffa7 	bl	8009270 <__sfputs_r>
 8009322:	3001      	adds	r0, #1
 8009324:	d100      	bne.n	8009328 <_vfiprintf_r+0x94>
 8009326:	e0ae      	b.n	8009486 <_vfiprintf_r+0x1f2>
 8009328:	6963      	ldr	r3, [r4, #20]
 800932a:	9a05      	ldr	r2, [sp, #20]
 800932c:	189b      	adds	r3, r3, r2
 800932e:	6163      	str	r3, [r4, #20]
 8009330:	7833      	ldrb	r3, [r6, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d100      	bne.n	8009338 <_vfiprintf_r+0xa4>
 8009336:	e0a6      	b.n	8009486 <_vfiprintf_r+0x1f2>
 8009338:	2201      	movs	r2, #1
 800933a:	2300      	movs	r3, #0
 800933c:	4252      	negs	r2, r2
 800933e:	6062      	str	r2, [r4, #4]
 8009340:	a904      	add	r1, sp, #16
 8009342:	3254      	adds	r2, #84	@ 0x54
 8009344:	1852      	adds	r2, r2, r1
 8009346:	1c75      	adds	r5, r6, #1
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	60e3      	str	r3, [r4, #12]
 800934c:	60a3      	str	r3, [r4, #8]
 800934e:	7013      	strb	r3, [r2, #0]
 8009350:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009352:	4b59      	ldr	r3, [pc, #356]	@ (80094b8 <_vfiprintf_r+0x224>)
 8009354:	2205      	movs	r2, #5
 8009356:	0018      	movs	r0, r3
 8009358:	7829      	ldrb	r1, [r5, #0]
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	f7fe fa5d 	bl	800781a <memchr>
 8009360:	1c6e      	adds	r6, r5, #1
 8009362:	2800      	cmp	r0, #0
 8009364:	d11f      	bne.n	80093a6 <_vfiprintf_r+0x112>
 8009366:	6822      	ldr	r2, [r4, #0]
 8009368:	06d3      	lsls	r3, r2, #27
 800936a:	d504      	bpl.n	8009376 <_vfiprintf_r+0xe2>
 800936c:	2353      	movs	r3, #83	@ 0x53
 800936e:	a904      	add	r1, sp, #16
 8009370:	185b      	adds	r3, r3, r1
 8009372:	2120      	movs	r1, #32
 8009374:	7019      	strb	r1, [r3, #0]
 8009376:	0713      	lsls	r3, r2, #28
 8009378:	d504      	bpl.n	8009384 <_vfiprintf_r+0xf0>
 800937a:	2353      	movs	r3, #83	@ 0x53
 800937c:	a904      	add	r1, sp, #16
 800937e:	185b      	adds	r3, r3, r1
 8009380:	212b      	movs	r1, #43	@ 0x2b
 8009382:	7019      	strb	r1, [r3, #0]
 8009384:	782b      	ldrb	r3, [r5, #0]
 8009386:	2b2a      	cmp	r3, #42	@ 0x2a
 8009388:	d016      	beq.n	80093b8 <_vfiprintf_r+0x124>
 800938a:	002e      	movs	r6, r5
 800938c:	2100      	movs	r1, #0
 800938e:	200a      	movs	r0, #10
 8009390:	68e3      	ldr	r3, [r4, #12]
 8009392:	7832      	ldrb	r2, [r6, #0]
 8009394:	1c75      	adds	r5, r6, #1
 8009396:	3a30      	subs	r2, #48	@ 0x30
 8009398:	2a09      	cmp	r2, #9
 800939a:	d950      	bls.n	800943e <_vfiprintf_r+0x1aa>
 800939c:	2900      	cmp	r1, #0
 800939e:	d111      	bne.n	80093c4 <_vfiprintf_r+0x130>
 80093a0:	e017      	b.n	80093d2 <_vfiprintf_r+0x13e>
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7af      	b.n	8009306 <_vfiprintf_r+0x72>
 80093a6:	9b05      	ldr	r3, [sp, #20]
 80093a8:	6822      	ldr	r2, [r4, #0]
 80093aa:	1ac0      	subs	r0, r0, r3
 80093ac:	2301      	movs	r3, #1
 80093ae:	4083      	lsls	r3, r0
 80093b0:	4313      	orrs	r3, r2
 80093b2:	0035      	movs	r5, r6
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	e7cc      	b.n	8009352 <_vfiprintf_r+0xbe>
 80093b8:	9b07      	ldr	r3, [sp, #28]
 80093ba:	1d19      	adds	r1, r3, #4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	9107      	str	r1, [sp, #28]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db01      	blt.n	80093c8 <_vfiprintf_r+0x134>
 80093c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093c6:	e004      	b.n	80093d2 <_vfiprintf_r+0x13e>
 80093c8:	425b      	negs	r3, r3
 80093ca:	60e3      	str	r3, [r4, #12]
 80093cc:	2302      	movs	r3, #2
 80093ce:	4313      	orrs	r3, r2
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	7833      	ldrb	r3, [r6, #0]
 80093d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80093d6:	d10c      	bne.n	80093f2 <_vfiprintf_r+0x15e>
 80093d8:	7873      	ldrb	r3, [r6, #1]
 80093da:	2b2a      	cmp	r3, #42	@ 0x2a
 80093dc:	d134      	bne.n	8009448 <_vfiprintf_r+0x1b4>
 80093de:	9b07      	ldr	r3, [sp, #28]
 80093e0:	3602      	adds	r6, #2
 80093e2:	1d1a      	adds	r2, r3, #4
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	9207      	str	r2, [sp, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	da01      	bge.n	80093f0 <_vfiprintf_r+0x15c>
 80093ec:	2301      	movs	r3, #1
 80093ee:	425b      	negs	r3, r3
 80093f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f2:	4d32      	ldr	r5, [pc, #200]	@ (80094bc <_vfiprintf_r+0x228>)
 80093f4:	2203      	movs	r2, #3
 80093f6:	0028      	movs	r0, r5
 80093f8:	7831      	ldrb	r1, [r6, #0]
 80093fa:	f7fe fa0e 	bl	800781a <memchr>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d006      	beq.n	8009410 <_vfiprintf_r+0x17c>
 8009402:	2340      	movs	r3, #64	@ 0x40
 8009404:	1b40      	subs	r0, r0, r5
 8009406:	4083      	lsls	r3, r0
 8009408:	6822      	ldr	r2, [r4, #0]
 800940a:	3601      	adds	r6, #1
 800940c:	4313      	orrs	r3, r2
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	7831      	ldrb	r1, [r6, #0]
 8009412:	2206      	movs	r2, #6
 8009414:	482a      	ldr	r0, [pc, #168]	@ (80094c0 <_vfiprintf_r+0x22c>)
 8009416:	1c75      	adds	r5, r6, #1
 8009418:	7621      	strb	r1, [r4, #24]
 800941a:	f7fe f9fe 	bl	800781a <memchr>
 800941e:	2800      	cmp	r0, #0
 8009420:	d040      	beq.n	80094a4 <_vfiprintf_r+0x210>
 8009422:	4b28      	ldr	r3, [pc, #160]	@ (80094c4 <_vfiprintf_r+0x230>)
 8009424:	2b00      	cmp	r3, #0
 8009426:	d122      	bne.n	800946e <_vfiprintf_r+0x1da>
 8009428:	2207      	movs	r2, #7
 800942a:	9b07      	ldr	r3, [sp, #28]
 800942c:	3307      	adds	r3, #7
 800942e:	4393      	bics	r3, r2
 8009430:	3308      	adds	r3, #8
 8009432:	9307      	str	r3, [sp, #28]
 8009434:	6963      	ldr	r3, [r4, #20]
 8009436:	9a04      	ldr	r2, [sp, #16]
 8009438:	189b      	adds	r3, r3, r2
 800943a:	6163      	str	r3, [r4, #20]
 800943c:	e762      	b.n	8009304 <_vfiprintf_r+0x70>
 800943e:	4343      	muls	r3, r0
 8009440:	002e      	movs	r6, r5
 8009442:	2101      	movs	r1, #1
 8009444:	189b      	adds	r3, r3, r2
 8009446:	e7a4      	b.n	8009392 <_vfiprintf_r+0xfe>
 8009448:	2300      	movs	r3, #0
 800944a:	200a      	movs	r0, #10
 800944c:	0019      	movs	r1, r3
 800944e:	3601      	adds	r6, #1
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	7832      	ldrb	r2, [r6, #0]
 8009454:	1c75      	adds	r5, r6, #1
 8009456:	3a30      	subs	r2, #48	@ 0x30
 8009458:	2a09      	cmp	r2, #9
 800945a:	d903      	bls.n	8009464 <_vfiprintf_r+0x1d0>
 800945c:	2b00      	cmp	r3, #0
 800945e:	d0c8      	beq.n	80093f2 <_vfiprintf_r+0x15e>
 8009460:	9109      	str	r1, [sp, #36]	@ 0x24
 8009462:	e7c6      	b.n	80093f2 <_vfiprintf_r+0x15e>
 8009464:	4341      	muls	r1, r0
 8009466:	002e      	movs	r6, r5
 8009468:	2301      	movs	r3, #1
 800946a:	1889      	adds	r1, r1, r2
 800946c:	e7f1      	b.n	8009452 <_vfiprintf_r+0x1be>
 800946e:	aa07      	add	r2, sp, #28
 8009470:	9200      	str	r2, [sp, #0]
 8009472:	0021      	movs	r1, r4
 8009474:	003a      	movs	r2, r7
 8009476:	4b14      	ldr	r3, [pc, #80]	@ (80094c8 <_vfiprintf_r+0x234>)
 8009478:	9803      	ldr	r0, [sp, #12]
 800947a:	f7fd fb7b 	bl	8006b74 <_printf_float>
 800947e:	9004      	str	r0, [sp, #16]
 8009480:	9b04      	ldr	r3, [sp, #16]
 8009482:	3301      	adds	r3, #1
 8009484:	d1d6      	bne.n	8009434 <_vfiprintf_r+0x1a0>
 8009486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009488:	07db      	lsls	r3, r3, #31
 800948a:	d405      	bmi.n	8009498 <_vfiprintf_r+0x204>
 800948c:	89bb      	ldrh	r3, [r7, #12]
 800948e:	059b      	lsls	r3, r3, #22
 8009490:	d402      	bmi.n	8009498 <_vfiprintf_r+0x204>
 8009492:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009494:	f7fe f9c0 	bl	8007818 <__retarget_lock_release_recursive>
 8009498:	89bb      	ldrh	r3, [r7, #12]
 800949a:	065b      	lsls	r3, r3, #25
 800949c:	d500      	bpl.n	80094a0 <_vfiprintf_r+0x20c>
 800949e:	e71e      	b.n	80092de <_vfiprintf_r+0x4a>
 80094a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80094a2:	e71e      	b.n	80092e2 <_vfiprintf_r+0x4e>
 80094a4:	aa07      	add	r2, sp, #28
 80094a6:	9200      	str	r2, [sp, #0]
 80094a8:	0021      	movs	r1, r4
 80094aa:	003a      	movs	r2, r7
 80094ac:	4b06      	ldr	r3, [pc, #24]	@ (80094c8 <_vfiprintf_r+0x234>)
 80094ae:	9803      	ldr	r0, [sp, #12]
 80094b0:	f7fd fe0e 	bl	80070d0 <_printf_i>
 80094b4:	e7e3      	b.n	800947e <_vfiprintf_r+0x1ea>
 80094b6:	46c0      	nop			@ (mov r8, r8)
 80094b8:	080099a7 	.word	0x080099a7
 80094bc:	080099ad 	.word	0x080099ad
 80094c0:	080099b1 	.word	0x080099b1
 80094c4:	08006b75 	.word	0x08006b75
 80094c8:	08009271 	.word	0x08009271

080094cc <_raise_r>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	0004      	movs	r4, r0
 80094d0:	000d      	movs	r5, r1
 80094d2:	291f      	cmp	r1, #31
 80094d4:	d904      	bls.n	80094e0 <_raise_r+0x14>
 80094d6:	2316      	movs	r3, #22
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	2001      	movs	r0, #1
 80094dc:	4240      	negs	r0, r0
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d004      	beq.n	80094f0 <_raise_r+0x24>
 80094e6:	008a      	lsls	r2, r1, #2
 80094e8:	189b      	adds	r3, r3, r2
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	2a00      	cmp	r2, #0
 80094ee:	d108      	bne.n	8009502 <_raise_r+0x36>
 80094f0:	0020      	movs	r0, r4
 80094f2:	f000 f831 	bl	8009558 <_getpid_r>
 80094f6:	002a      	movs	r2, r5
 80094f8:	0001      	movs	r1, r0
 80094fa:	0020      	movs	r0, r4
 80094fc:	f000 f81a 	bl	8009534 <_kill_r>
 8009500:	e7ed      	b.n	80094de <_raise_r+0x12>
 8009502:	2a01      	cmp	r2, #1
 8009504:	d009      	beq.n	800951a <_raise_r+0x4e>
 8009506:	1c51      	adds	r1, r2, #1
 8009508:	d103      	bne.n	8009512 <_raise_r+0x46>
 800950a:	2316      	movs	r3, #22
 800950c:	6003      	str	r3, [r0, #0]
 800950e:	2001      	movs	r0, #1
 8009510:	e7e5      	b.n	80094de <_raise_r+0x12>
 8009512:	2100      	movs	r1, #0
 8009514:	0028      	movs	r0, r5
 8009516:	6019      	str	r1, [r3, #0]
 8009518:	4790      	blx	r2
 800951a:	2000      	movs	r0, #0
 800951c:	e7df      	b.n	80094de <_raise_r+0x12>
	...

08009520 <raise>:
 8009520:	b510      	push	{r4, lr}
 8009522:	4b03      	ldr	r3, [pc, #12]	@ (8009530 <raise+0x10>)
 8009524:	0001      	movs	r1, r0
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	f7ff ffd0 	bl	80094cc <_raise_r>
 800952c:	bd10      	pop	{r4, pc}
 800952e:	46c0      	nop			@ (mov r8, r8)
 8009530:	2000001c 	.word	0x2000001c

08009534 <_kill_r>:
 8009534:	2300      	movs	r3, #0
 8009536:	b570      	push	{r4, r5, r6, lr}
 8009538:	4d06      	ldr	r5, [pc, #24]	@ (8009554 <_kill_r+0x20>)
 800953a:	0004      	movs	r4, r0
 800953c:	0008      	movs	r0, r1
 800953e:	0011      	movs	r1, r2
 8009540:	602b      	str	r3, [r5, #0]
 8009542:	f7f9 fd8d 	bl	8003060 <_kill>
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	d103      	bne.n	8009552 <_kill_r+0x1e>
 800954a:	682b      	ldr	r3, [r5, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d000      	beq.n	8009552 <_kill_r+0x1e>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	200004b0 	.word	0x200004b0

08009558 <_getpid_r>:
 8009558:	b510      	push	{r4, lr}
 800955a:	f7f9 fd7b 	bl	8003054 <_getpid>
 800955e:	bd10      	pop	{r4, pc}

08009560 <_init>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	46c0      	nop			@ (mov r8, r8)
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr

0800956c <_fini>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	46c0      	nop			@ (mov r8, r8)
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr
