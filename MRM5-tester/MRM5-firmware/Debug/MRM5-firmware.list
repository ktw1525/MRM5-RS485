
MRM5-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7f8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  0800c8b0  0800c8b0  0000d8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d250  0800d250  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d250  0800d250  0000e250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d258  0800d258  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d258  0800d258  0000e258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d25c  0800d25c  0000e25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d260  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001d8  0800d438  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800d438  0000f730  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020530  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041a9  00000000  00000000  0002f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ef1b  00000000  00000000  000338d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000427f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000198a  00000000  00000000  000439b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a94b  00000000  00000000  0004533a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000228ac  00000000  00000000  0005fc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a83e9  00000000  00000000  00082531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a91a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004814  00000000  00000000  0012a960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0012f174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d8 	.word	0x200001d8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800c898 	.word	0x0800c898

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001dc 	.word	0x200001dc
 80000fc:	0800c898 	.word	0x0800c898

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f002 f815 	bl	8002464 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 ff55 	bl	80022f4 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f002 f807 	bl	8002464 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fffd 	bl	8002464 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 ff7f 	bl	800237c <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 ff75 	bl	800237c <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fcc7 	bl	8000e3c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fc47 	bl	8000d4c <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fcb9 	bl	8000e3c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fcaf 	bl	8000e3c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fc55 	bl	8000d9c <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fc4b 	bl	8000d9c <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_uldivmod>:
 8000514:	2b00      	cmp	r3, #0
 8000516:	d111      	bne.n	800053c <__aeabi_uldivmod+0x28>
 8000518:	2a00      	cmp	r2, #0
 800051a:	d10f      	bne.n	800053c <__aeabi_uldivmod+0x28>
 800051c:	2900      	cmp	r1, #0
 800051e:	d100      	bne.n	8000522 <__aeabi_uldivmod+0xe>
 8000520:	2800      	cmp	r0, #0
 8000522:	d002      	beq.n	800052a <__aeabi_uldivmod+0x16>
 8000524:	2100      	movs	r1, #0
 8000526:	43c9      	mvns	r1, r1
 8000528:	0008      	movs	r0, r1
 800052a:	b407      	push	{r0, r1, r2}
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <__aeabi_uldivmod+0x24>)
 800052e:	a102      	add	r1, pc, #8	@ (adr r1, 8000538 <__aeabi_uldivmod+0x24>)
 8000530:	1840      	adds	r0, r0, r1
 8000532:	9002      	str	r0, [sp, #8]
 8000534:	bd03      	pop	{r0, r1, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	fffffee9 	.word	0xfffffee9
 800053c:	b403      	push	{r0, r1}
 800053e:	4668      	mov	r0, sp
 8000540:	b501      	push	{r0, lr}
 8000542:	9802      	ldr	r0, [sp, #8]
 8000544:	f000 f88c 	bl	8000660 <__udivmoddi4>
 8000548:	9b01      	ldr	r3, [sp, #4]
 800054a:	469e      	mov	lr, r3
 800054c:	b002      	add	sp, #8
 800054e:	bc0c      	pop	{r2, r3}
 8000550:	4770      	bx	lr
 8000552:	46c0      	nop			@ (mov r8, r8)

08000554 <__aeabi_f2uiz>:
 8000554:	219e      	movs	r1, #158	@ 0x9e
 8000556:	b510      	push	{r4, lr}
 8000558:	05c9      	lsls	r1, r1, #23
 800055a:	1c04      	adds	r4, r0, #0
 800055c:	f7ff ffd0 	bl	8000500 <__aeabi_fcmpge>
 8000560:	2800      	cmp	r0, #0
 8000562:	d103      	bne.n	800056c <__aeabi_f2uiz+0x18>
 8000564:	1c20      	adds	r0, r4, #0
 8000566:	f000 ff99 	bl	800149c <__aeabi_f2iz>
 800056a:	bd10      	pop	{r4, pc}
 800056c:	219e      	movs	r1, #158	@ 0x9e
 800056e:	1c20      	adds	r0, r4, #0
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	f000 fdef 	bl	8001154 <__aeabi_fsub>
 8000576:	f000 ff91 	bl	800149c <__aeabi_f2iz>
 800057a:	2380      	movs	r3, #128	@ 0x80
 800057c:	061b      	lsls	r3, r3, #24
 800057e:	469c      	mov	ip, r3
 8000580:	4460      	add	r0, ip
 8000582:	e7f2      	b.n	800056a <__aeabi_f2uiz+0x16>

08000584 <__aeabi_d2uiz>:
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	2200      	movs	r2, #0
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <__aeabi_d2uiz+0x38>)
 800058a:	0004      	movs	r4, r0
 800058c:	000d      	movs	r5, r1
 800058e:	f7ff ff7d 	bl	800048c <__aeabi_dcmpge>
 8000592:	2800      	cmp	r0, #0
 8000594:	d104      	bne.n	80005a0 <__aeabi_d2uiz+0x1c>
 8000596:	0020      	movs	r0, r4
 8000598:	0029      	movs	r1, r5
 800059a:	f002 fe5b 	bl	8003254 <__aeabi_d2iz>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <__aeabi_d2uiz+0x38>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	0020      	movs	r0, r4
 80005a6:	0029      	movs	r1, r5
 80005a8:	f002 fa96 	bl	8002ad8 <__aeabi_dsub>
 80005ac:	f002 fe52 	bl	8003254 <__aeabi_d2iz>
 80005b0:	2380      	movs	r3, #128	@ 0x80
 80005b2:	061b      	lsls	r3, r3, #24
 80005b4:	469c      	mov	ip, r3
 80005b6:	4460      	add	r0, ip
 80005b8:	e7f1      	b.n	800059e <__aeabi_d2uiz+0x1a>
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	41e00000 	.word	0x41e00000

080005c0 <__aeabi_d2lz>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	2200      	movs	r2, #0
 80005c4:	2300      	movs	r3, #0
 80005c6:	0004      	movs	r4, r0
 80005c8:	000d      	movs	r5, r1
 80005ca:	f7ff ff41 	bl	8000450 <__aeabi_dcmplt>
 80005ce:	2800      	cmp	r0, #0
 80005d0:	d108      	bne.n	80005e4 <__aeabi_d2lz+0x24>
 80005d2:	0020      	movs	r0, r4
 80005d4:	0029      	movs	r1, r5
 80005d6:	f000 f80f 	bl	80005f8 <__aeabi_d2ulz>
 80005da:	0002      	movs	r2, r0
 80005dc:	000b      	movs	r3, r1
 80005de:	0010      	movs	r0, r2
 80005e0:	0019      	movs	r1, r3
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	18e9      	adds	r1, r5, r3
 80005ea:	0020      	movs	r0, r4
 80005ec:	f000 f804 	bl	80005f8 <__aeabi_d2ulz>
 80005f0:	2300      	movs	r3, #0
 80005f2:	4242      	negs	r2, r0
 80005f4:	418b      	sbcs	r3, r1
 80005f6:	e7f2      	b.n	80005de <__aeabi_d2lz+0x1e>

080005f8 <__aeabi_d2ulz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2200      	movs	r2, #0
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <__aeabi_d2ulz+0x34>)
 80005fe:	000d      	movs	r5, r1
 8000600:	0004      	movs	r4, r0
 8000602:	f001 ffa1 	bl	8002548 <__aeabi_dmul>
 8000606:	f7ff ffbd 	bl	8000584 <__aeabi_d2uiz>
 800060a:	0006      	movs	r6, r0
 800060c:	f002 fe8c 	bl	8003328 <__aeabi_ui2d>
 8000610:	2200      	movs	r2, #0
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <__aeabi_d2ulz+0x38>)
 8000614:	f001 ff98 	bl	8002548 <__aeabi_dmul>
 8000618:	0002      	movs	r2, r0
 800061a:	000b      	movs	r3, r1
 800061c:	0020      	movs	r0, r4
 800061e:	0029      	movs	r1, r5
 8000620:	f002 fa5a 	bl	8002ad8 <__aeabi_dsub>
 8000624:	f7ff ffae 	bl	8000584 <__aeabi_d2uiz>
 8000628:	0031      	movs	r1, r6
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	3df00000 	.word	0x3df00000
 8000630:	41f00000 	.word	0x41f00000

08000634 <__aeabi_l2d>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	0006      	movs	r6, r0
 8000638:	0008      	movs	r0, r1
 800063a:	f002 fe47 	bl	80032cc <__aeabi_i2d>
 800063e:	2200      	movs	r2, #0
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <__aeabi_l2d+0x28>)
 8000642:	f001 ff81 	bl	8002548 <__aeabi_dmul>
 8000646:	000d      	movs	r5, r1
 8000648:	0004      	movs	r4, r0
 800064a:	0030      	movs	r0, r6
 800064c:	f002 fe6c 	bl	8003328 <__aeabi_ui2d>
 8000650:	002b      	movs	r3, r5
 8000652:	0022      	movs	r2, r4
 8000654:	f000 ffd0 	bl	80015f8 <__aeabi_dadd>
 8000658:	bd70      	pop	{r4, r5, r6, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	41f00000 	.word	0x41f00000

08000660 <__udivmoddi4>:
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000662:	4657      	mov	r7, sl
 8000664:	464e      	mov	r6, r9
 8000666:	4645      	mov	r5, r8
 8000668:	46de      	mov	lr, fp
 800066a:	b5e0      	push	{r5, r6, r7, lr}
 800066c:	0004      	movs	r4, r0
 800066e:	000d      	movs	r5, r1
 8000670:	4692      	mov	sl, r2
 8000672:	4699      	mov	r9, r3
 8000674:	b083      	sub	sp, #12
 8000676:	428b      	cmp	r3, r1
 8000678:	d830      	bhi.n	80006dc <__udivmoddi4+0x7c>
 800067a:	d02d      	beq.n	80006d8 <__udivmoddi4+0x78>
 800067c:	4649      	mov	r1, r9
 800067e:	4650      	mov	r0, sl
 8000680:	f002 ff60 	bl	8003544 <__clzdi2>
 8000684:	0029      	movs	r1, r5
 8000686:	0006      	movs	r6, r0
 8000688:	0020      	movs	r0, r4
 800068a:	f002 ff5b 	bl	8003544 <__clzdi2>
 800068e:	1a33      	subs	r3, r6, r0
 8000690:	4698      	mov	r8, r3
 8000692:	3b20      	subs	r3, #32
 8000694:	d434      	bmi.n	8000700 <__udivmoddi4+0xa0>
 8000696:	469b      	mov	fp, r3
 8000698:	4653      	mov	r3, sl
 800069a:	465a      	mov	r2, fp
 800069c:	4093      	lsls	r3, r2
 800069e:	4642      	mov	r2, r8
 80006a0:	001f      	movs	r7, r3
 80006a2:	4653      	mov	r3, sl
 80006a4:	4093      	lsls	r3, r2
 80006a6:	001e      	movs	r6, r3
 80006a8:	42af      	cmp	r7, r5
 80006aa:	d83b      	bhi.n	8000724 <__udivmoddi4+0xc4>
 80006ac:	42af      	cmp	r7, r5
 80006ae:	d100      	bne.n	80006b2 <__udivmoddi4+0x52>
 80006b0:	e079      	b.n	80007a6 <__udivmoddi4+0x146>
 80006b2:	465b      	mov	r3, fp
 80006b4:	1ba4      	subs	r4, r4, r6
 80006b6:	41bd      	sbcs	r5, r7
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	da00      	bge.n	80006be <__udivmoddi4+0x5e>
 80006bc:	e076      	b.n	80007ac <__udivmoddi4+0x14c>
 80006be:	2200      	movs	r2, #0
 80006c0:	2300      	movs	r3, #0
 80006c2:	9200      	str	r2, [sp, #0]
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	465a      	mov	r2, fp
 80006ca:	4093      	lsls	r3, r2
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2301      	movs	r3, #1
 80006d0:	4642      	mov	r2, r8
 80006d2:	4093      	lsls	r3, r2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	e029      	b.n	800072c <__udivmoddi4+0xcc>
 80006d8:	4282      	cmp	r2, r0
 80006da:	d9cf      	bls.n	800067c <__udivmoddi4+0x1c>
 80006dc:	2200      	movs	r2, #0
 80006de:	2300      	movs	r3, #0
 80006e0:	9200      	str	r2, [sp, #0]
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <__udivmoddi4+0x8e>
 80006ea:	601c      	str	r4, [r3, #0]
 80006ec:	605d      	str	r5, [r3, #4]
 80006ee:	9800      	ldr	r0, [sp, #0]
 80006f0:	9901      	ldr	r1, [sp, #4]
 80006f2:	b003      	add	sp, #12
 80006f4:	bcf0      	pop	{r4, r5, r6, r7}
 80006f6:	46bb      	mov	fp, r7
 80006f8:	46b2      	mov	sl, r6
 80006fa:	46a9      	mov	r9, r5
 80006fc:	46a0      	mov	r8, r4
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000700:	4642      	mov	r2, r8
 8000702:	469b      	mov	fp, r3
 8000704:	2320      	movs	r3, #32
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	4652      	mov	r2, sl
 800070a:	40da      	lsrs	r2, r3
 800070c:	4641      	mov	r1, r8
 800070e:	0013      	movs	r3, r2
 8000710:	464a      	mov	r2, r9
 8000712:	408a      	lsls	r2, r1
 8000714:	0017      	movs	r7, r2
 8000716:	4642      	mov	r2, r8
 8000718:	431f      	orrs	r7, r3
 800071a:	4653      	mov	r3, sl
 800071c:	4093      	lsls	r3, r2
 800071e:	001e      	movs	r6, r3
 8000720:	42af      	cmp	r7, r5
 8000722:	d9c3      	bls.n	80006ac <__udivmoddi4+0x4c>
 8000724:	2200      	movs	r2, #0
 8000726:	2300      	movs	r3, #0
 8000728:	9200      	str	r2, [sp, #0]
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	4643      	mov	r3, r8
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0d8      	beq.n	80006e4 <__udivmoddi4+0x84>
 8000732:	07fb      	lsls	r3, r7, #31
 8000734:	0872      	lsrs	r2, r6, #1
 8000736:	431a      	orrs	r2, r3
 8000738:	4646      	mov	r6, r8
 800073a:	087b      	lsrs	r3, r7, #1
 800073c:	e00e      	b.n	800075c <__udivmoddi4+0xfc>
 800073e:	42ab      	cmp	r3, r5
 8000740:	d101      	bne.n	8000746 <__udivmoddi4+0xe6>
 8000742:	42a2      	cmp	r2, r4
 8000744:	d80c      	bhi.n	8000760 <__udivmoddi4+0x100>
 8000746:	1aa4      	subs	r4, r4, r2
 8000748:	419d      	sbcs	r5, r3
 800074a:	2001      	movs	r0, #1
 800074c:	1924      	adds	r4, r4, r4
 800074e:	416d      	adcs	r5, r5
 8000750:	2100      	movs	r1, #0
 8000752:	3e01      	subs	r6, #1
 8000754:	1824      	adds	r4, r4, r0
 8000756:	414d      	adcs	r5, r1
 8000758:	2e00      	cmp	r6, #0
 800075a:	d006      	beq.n	800076a <__udivmoddi4+0x10a>
 800075c:	42ab      	cmp	r3, r5
 800075e:	d9ee      	bls.n	800073e <__udivmoddi4+0xde>
 8000760:	3e01      	subs	r6, #1
 8000762:	1924      	adds	r4, r4, r4
 8000764:	416d      	adcs	r5, r5
 8000766:	2e00      	cmp	r6, #0
 8000768:	d1f8      	bne.n	800075c <__udivmoddi4+0xfc>
 800076a:	9800      	ldr	r0, [sp, #0]
 800076c:	9901      	ldr	r1, [sp, #4]
 800076e:	465b      	mov	r3, fp
 8000770:	1900      	adds	r0, r0, r4
 8000772:	4169      	adcs	r1, r5
 8000774:	2b00      	cmp	r3, #0
 8000776:	db24      	blt.n	80007c2 <__udivmoddi4+0x162>
 8000778:	002b      	movs	r3, r5
 800077a:	465a      	mov	r2, fp
 800077c:	4644      	mov	r4, r8
 800077e:	40d3      	lsrs	r3, r2
 8000780:	002a      	movs	r2, r5
 8000782:	40e2      	lsrs	r2, r4
 8000784:	001c      	movs	r4, r3
 8000786:	465b      	mov	r3, fp
 8000788:	0015      	movs	r5, r2
 800078a:	2b00      	cmp	r3, #0
 800078c:	db2a      	blt.n	80007e4 <__udivmoddi4+0x184>
 800078e:	0026      	movs	r6, r4
 8000790:	409e      	lsls	r6, r3
 8000792:	0033      	movs	r3, r6
 8000794:	0026      	movs	r6, r4
 8000796:	4647      	mov	r7, r8
 8000798:	40be      	lsls	r6, r7
 800079a:	0032      	movs	r2, r6
 800079c:	1a80      	subs	r0, r0, r2
 800079e:	4199      	sbcs	r1, r3
 80007a0:	9000      	str	r0, [sp, #0]
 80007a2:	9101      	str	r1, [sp, #4]
 80007a4:	e79e      	b.n	80006e4 <__udivmoddi4+0x84>
 80007a6:	42a3      	cmp	r3, r4
 80007a8:	d8bc      	bhi.n	8000724 <__udivmoddi4+0xc4>
 80007aa:	e782      	b.n	80006b2 <__udivmoddi4+0x52>
 80007ac:	4642      	mov	r2, r8
 80007ae:	2320      	movs	r3, #32
 80007b0:	2100      	movs	r1, #0
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	2200      	movs	r2, #0
 80007b6:	9100      	str	r1, [sp, #0]
 80007b8:	9201      	str	r2, [sp, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	40da      	lsrs	r2, r3
 80007be:	9201      	str	r2, [sp, #4]
 80007c0:	e785      	b.n	80006ce <__udivmoddi4+0x6e>
 80007c2:	4642      	mov	r2, r8
 80007c4:	2320      	movs	r3, #32
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	002a      	movs	r2, r5
 80007ca:	4646      	mov	r6, r8
 80007cc:	409a      	lsls	r2, r3
 80007ce:	0023      	movs	r3, r4
 80007d0:	40f3      	lsrs	r3, r6
 80007d2:	4644      	mov	r4, r8
 80007d4:	4313      	orrs	r3, r2
 80007d6:	002a      	movs	r2, r5
 80007d8:	40e2      	lsrs	r2, r4
 80007da:	001c      	movs	r4, r3
 80007dc:	465b      	mov	r3, fp
 80007de:	0015      	movs	r5, r2
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dad4      	bge.n	800078e <__udivmoddi4+0x12e>
 80007e4:	4642      	mov	r2, r8
 80007e6:	002f      	movs	r7, r5
 80007e8:	2320      	movs	r3, #32
 80007ea:	0026      	movs	r6, r4
 80007ec:	4097      	lsls	r7, r2
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	40de      	lsrs	r6, r3
 80007f2:	003b      	movs	r3, r7
 80007f4:	4333      	orrs	r3, r6
 80007f6:	e7cd      	b.n	8000794 <__udivmoddi4+0x134>

080007f8 <__aeabi_fadd>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	46ce      	mov	lr, r9
 80007fc:	4647      	mov	r7, r8
 80007fe:	0243      	lsls	r3, r0, #9
 8000800:	0a5a      	lsrs	r2, r3, #9
 8000802:	024e      	lsls	r6, r1, #9
 8000804:	0045      	lsls	r5, r0, #1
 8000806:	0fc4      	lsrs	r4, r0, #31
 8000808:	0048      	lsls	r0, r1, #1
 800080a:	4691      	mov	r9, r2
 800080c:	0e2d      	lsrs	r5, r5, #24
 800080e:	0a72      	lsrs	r2, r6, #9
 8000810:	0e00      	lsrs	r0, r0, #24
 8000812:	4694      	mov	ip, r2
 8000814:	b580      	push	{r7, lr}
 8000816:	099b      	lsrs	r3, r3, #6
 8000818:	0fc9      	lsrs	r1, r1, #31
 800081a:	09b6      	lsrs	r6, r6, #6
 800081c:	1a2a      	subs	r2, r5, r0
 800081e:	428c      	cmp	r4, r1
 8000820:	d021      	beq.n	8000866 <__aeabi_fadd+0x6e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	dd0d      	ble.n	8000842 <__aeabi_fadd+0x4a>
 8000826:	2800      	cmp	r0, #0
 8000828:	d12d      	bne.n	8000886 <__aeabi_fadd+0x8e>
 800082a:	2e00      	cmp	r6, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0x38>
 800082e:	e08d      	b.n	800094c <__aeabi_fadd+0x154>
 8000830:	1e51      	subs	r1, r2, #1
 8000832:	2a01      	cmp	r2, #1
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x40>
 8000836:	e11d      	b.n	8000a74 <__aeabi_fadd+0x27c>
 8000838:	2aff      	cmp	r2, #255	@ 0xff
 800083a:	d100      	bne.n	800083e <__aeabi_fadd+0x46>
 800083c:	e0ab      	b.n	8000996 <__aeabi_fadd+0x19e>
 800083e:	000a      	movs	r2, r1
 8000840:	e027      	b.n	8000892 <__aeabi_fadd+0x9a>
 8000842:	2a00      	cmp	r2, #0
 8000844:	d04d      	beq.n	80008e2 <__aeabi_fadd+0xea>
 8000846:	1b42      	subs	r2, r0, r5
 8000848:	2d00      	cmp	r5, #0
 800084a:	d000      	beq.n	800084e <__aeabi_fadd+0x56>
 800084c:	e0cc      	b.n	80009e8 <__aeabi_fadd+0x1f0>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_fadd+0x5c>
 8000852:	e079      	b.n	8000948 <__aeabi_fadd+0x150>
 8000854:	1e54      	subs	r4, r2, #1
 8000856:	2a01      	cmp	r2, #1
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x64>
 800085a:	e128      	b.n	8000aae <__aeabi_fadd+0x2b6>
 800085c:	2aff      	cmp	r2, #255	@ 0xff
 800085e:	d100      	bne.n	8000862 <__aeabi_fadd+0x6a>
 8000860:	e097      	b.n	8000992 <__aeabi_fadd+0x19a>
 8000862:	0022      	movs	r2, r4
 8000864:	e0c5      	b.n	80009f2 <__aeabi_fadd+0x1fa>
 8000866:	2a00      	cmp	r2, #0
 8000868:	dc00      	bgt.n	800086c <__aeabi_fadd+0x74>
 800086a:	e096      	b.n	800099a <__aeabi_fadd+0x1a2>
 800086c:	2800      	cmp	r0, #0
 800086e:	d04f      	beq.n	8000910 <__aeabi_fadd+0x118>
 8000870:	2dff      	cmp	r5, #255	@ 0xff
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x7e>
 8000874:	e08f      	b.n	8000996 <__aeabi_fadd+0x19e>
 8000876:	2180      	movs	r1, #128	@ 0x80
 8000878:	04c9      	lsls	r1, r1, #19
 800087a:	430e      	orrs	r6, r1
 800087c:	2a1b      	cmp	r2, #27
 800087e:	dd51      	ble.n	8000924 <__aeabi_fadd+0x12c>
 8000880:	002a      	movs	r2, r5
 8000882:	3301      	adds	r3, #1
 8000884:	e018      	b.n	80008b8 <__aeabi_fadd+0xc0>
 8000886:	2dff      	cmp	r5, #255	@ 0xff
 8000888:	d100      	bne.n	800088c <__aeabi_fadd+0x94>
 800088a:	e084      	b.n	8000996 <__aeabi_fadd+0x19e>
 800088c:	2180      	movs	r1, #128	@ 0x80
 800088e:	04c9      	lsls	r1, r1, #19
 8000890:	430e      	orrs	r6, r1
 8000892:	2101      	movs	r1, #1
 8000894:	2a1b      	cmp	r2, #27
 8000896:	dc08      	bgt.n	80008aa <__aeabi_fadd+0xb2>
 8000898:	0031      	movs	r1, r6
 800089a:	2020      	movs	r0, #32
 800089c:	40d1      	lsrs	r1, r2
 800089e:	1a82      	subs	r2, r0, r2
 80008a0:	4096      	lsls	r6, r2
 80008a2:	0032      	movs	r2, r6
 80008a4:	1e50      	subs	r0, r2, #1
 80008a6:	4182      	sbcs	r2, r0
 80008a8:	4311      	orrs	r1, r2
 80008aa:	1a5b      	subs	r3, r3, r1
 80008ac:	015a      	lsls	r2, r3, #5
 80008ae:	d459      	bmi.n	8000964 <__aeabi_fadd+0x16c>
 80008b0:	2107      	movs	r1, #7
 80008b2:	002a      	movs	r2, r5
 80008b4:	4019      	ands	r1, r3
 80008b6:	d049      	beq.n	800094c <__aeabi_fadd+0x154>
 80008b8:	210f      	movs	r1, #15
 80008ba:	4019      	ands	r1, r3
 80008bc:	2904      	cmp	r1, #4
 80008be:	d000      	beq.n	80008c2 <__aeabi_fadd+0xca>
 80008c0:	3304      	adds	r3, #4
 80008c2:	0159      	lsls	r1, r3, #5
 80008c4:	d542      	bpl.n	800094c <__aeabi_fadd+0x154>
 80008c6:	1c50      	adds	r0, r2, #1
 80008c8:	2afe      	cmp	r2, #254	@ 0xfe
 80008ca:	d03a      	beq.n	8000942 <__aeabi_fadd+0x14a>
 80008cc:	019b      	lsls	r3, r3, #6
 80008ce:	b2c0      	uxtb	r0, r0
 80008d0:	0a5b      	lsrs	r3, r3, #9
 80008d2:	05c0      	lsls	r0, r0, #23
 80008d4:	4318      	orrs	r0, r3
 80008d6:	07e4      	lsls	r4, r4, #31
 80008d8:	4320      	orrs	r0, r4
 80008da:	bcc0      	pop	{r6, r7}
 80008dc:	46b9      	mov	r9, r7
 80008de:	46b0      	mov	r8, r6
 80008e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008e2:	20fe      	movs	r0, #254	@ 0xfe
 80008e4:	4680      	mov	r8, r0
 80008e6:	1c6f      	adds	r7, r5, #1
 80008e8:	0038      	movs	r0, r7
 80008ea:	4647      	mov	r7, r8
 80008ec:	4207      	tst	r7, r0
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fadd+0xfa>
 80008f0:	e08e      	b.n	8000a10 <__aeabi_fadd+0x218>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fadd+0x100>
 80008f6:	e0b4      	b.n	8000a62 <__aeabi_fadd+0x26a>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x106>
 80008fc:	e0db      	b.n	8000ab6 <__aeabi_fadd+0x2be>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d06c      	beq.n	80009dc <__aeabi_fadd+0x1e4>
 8000902:	1b98      	subs	r0, r3, r6
 8000904:	0145      	lsls	r5, r0, #5
 8000906:	d400      	bmi.n	800090a <__aeabi_fadd+0x112>
 8000908:	e0f7      	b.n	8000afa <__aeabi_fadd+0x302>
 800090a:	000c      	movs	r4, r1
 800090c:	1af3      	subs	r3, r6, r3
 800090e:	e03d      	b.n	800098c <__aeabi_fadd+0x194>
 8000910:	2e00      	cmp	r6, #0
 8000912:	d01b      	beq.n	800094c <__aeabi_fadd+0x154>
 8000914:	1e51      	subs	r1, r2, #1
 8000916:	2a01      	cmp	r2, #1
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x124>
 800091a:	e082      	b.n	8000a22 <__aeabi_fadd+0x22a>
 800091c:	2aff      	cmp	r2, #255	@ 0xff
 800091e:	d03a      	beq.n	8000996 <__aeabi_fadd+0x19e>
 8000920:	000a      	movs	r2, r1
 8000922:	e7ab      	b.n	800087c <__aeabi_fadd+0x84>
 8000924:	0031      	movs	r1, r6
 8000926:	2020      	movs	r0, #32
 8000928:	40d1      	lsrs	r1, r2
 800092a:	1a82      	subs	r2, r0, r2
 800092c:	4096      	lsls	r6, r2
 800092e:	0032      	movs	r2, r6
 8000930:	1e50      	subs	r0, r2, #1
 8000932:	4182      	sbcs	r2, r0
 8000934:	430a      	orrs	r2, r1
 8000936:	189b      	adds	r3, r3, r2
 8000938:	015a      	lsls	r2, r3, #5
 800093a:	d5b9      	bpl.n	80008b0 <__aeabi_fadd+0xb8>
 800093c:	1c6a      	adds	r2, r5, #1
 800093e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000940:	d175      	bne.n	8000a2e <__aeabi_fadd+0x236>
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	2300      	movs	r3, #0
 8000946:	e7c4      	b.n	80008d2 <__aeabi_fadd+0xda>
 8000948:	000c      	movs	r4, r1
 800094a:	0033      	movs	r3, r6
 800094c:	08db      	lsrs	r3, r3, #3
 800094e:	2aff      	cmp	r2, #255	@ 0xff
 8000950:	d146      	bne.n	80009e0 <__aeabi_fadd+0x1e8>
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0f5      	beq.n	8000942 <__aeabi_fadd+0x14a>
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	03d2      	lsls	r2, r2, #15
 800095a:	4313      	orrs	r3, r2
 800095c:	025b      	lsls	r3, r3, #9
 800095e:	20ff      	movs	r0, #255	@ 0xff
 8000960:	0a5b      	lsrs	r3, r3, #9
 8000962:	e7b6      	b.n	80008d2 <__aeabi_fadd+0xda>
 8000964:	019f      	lsls	r7, r3, #6
 8000966:	09bf      	lsrs	r7, r7, #6
 8000968:	0038      	movs	r0, r7
 800096a:	f002 fdcd 	bl	8003508 <__clzsi2>
 800096e:	3805      	subs	r0, #5
 8000970:	4087      	lsls	r7, r0
 8000972:	4285      	cmp	r5, r0
 8000974:	dc24      	bgt.n	80009c0 <__aeabi_fadd+0x1c8>
 8000976:	003b      	movs	r3, r7
 8000978:	2120      	movs	r1, #32
 800097a:	1b42      	subs	r2, r0, r5
 800097c:	3201      	adds	r2, #1
 800097e:	40d3      	lsrs	r3, r2
 8000980:	1a8a      	subs	r2, r1, r2
 8000982:	4097      	lsls	r7, r2
 8000984:	1e7a      	subs	r2, r7, #1
 8000986:	4197      	sbcs	r7, r2
 8000988:	2200      	movs	r2, #0
 800098a:	433b      	orrs	r3, r7
 800098c:	0759      	lsls	r1, r3, #29
 800098e:	d193      	bne.n	80008b8 <__aeabi_fadd+0xc0>
 8000990:	e797      	b.n	80008c2 <__aeabi_fadd+0xca>
 8000992:	000c      	movs	r4, r1
 8000994:	0033      	movs	r3, r6
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	e7db      	b.n	8000952 <__aeabi_fadd+0x15a>
 800099a:	2a00      	cmp	r2, #0
 800099c:	d014      	beq.n	80009c8 <__aeabi_fadd+0x1d0>
 800099e:	1b42      	subs	r2, r0, r5
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d14b      	bne.n	8000a3c <__aeabi_fadd+0x244>
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0d0      	beq.n	800094a <__aeabi_fadd+0x152>
 80009a8:	1e51      	subs	r1, r2, #1
 80009aa:	2a01      	cmp	r2, #1
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fadd+0x1b8>
 80009ae:	e09e      	b.n	8000aee <__aeabi_fadd+0x2f6>
 80009b0:	2aff      	cmp	r2, #255	@ 0xff
 80009b2:	d0ef      	beq.n	8000994 <__aeabi_fadd+0x19c>
 80009b4:	000a      	movs	r2, r1
 80009b6:	2a1b      	cmp	r2, #27
 80009b8:	dd5f      	ble.n	8000a7a <__aeabi_fadd+0x282>
 80009ba:	0002      	movs	r2, r0
 80009bc:	1c73      	adds	r3, r6, #1
 80009be:	e77b      	b.n	80008b8 <__aeabi_fadd+0xc0>
 80009c0:	4b50      	ldr	r3, [pc, #320]	@ (8000b04 <__aeabi_fadd+0x30c>)
 80009c2:	1a2a      	subs	r2, r5, r0
 80009c4:	403b      	ands	r3, r7
 80009c6:	e7e1      	b.n	800098c <__aeabi_fadd+0x194>
 80009c8:	21fe      	movs	r1, #254	@ 0xfe
 80009ca:	1c6a      	adds	r2, r5, #1
 80009cc:	4211      	tst	r1, r2
 80009ce:	d13b      	bne.n	8000a48 <__aeabi_fadd+0x250>
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d15d      	bne.n	8000a90 <__aeabi_fadd+0x298>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d07f      	beq.n	8000ad8 <__aeabi_fadd+0x2e0>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d17f      	bne.n	8000adc <__aeabi_fadd+0x2e4>
 80009dc:	2200      	movs	r2, #0
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	025b      	lsls	r3, r3, #9
 80009e2:	0a5b      	lsrs	r3, r3, #9
 80009e4:	b2d0      	uxtb	r0, r2
 80009e6:	e774      	b.n	80008d2 <__aeabi_fadd+0xda>
 80009e8:	28ff      	cmp	r0, #255	@ 0xff
 80009ea:	d0d2      	beq.n	8000992 <__aeabi_fadd+0x19a>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	04e4      	lsls	r4, r4, #19
 80009f0:	4323      	orrs	r3, r4
 80009f2:	2401      	movs	r4, #1
 80009f4:	2a1b      	cmp	r2, #27
 80009f6:	dc07      	bgt.n	8000a08 <__aeabi_fadd+0x210>
 80009f8:	001c      	movs	r4, r3
 80009fa:	2520      	movs	r5, #32
 80009fc:	40d4      	lsrs	r4, r2
 80009fe:	1aaa      	subs	r2, r5, r2
 8000a00:	4093      	lsls	r3, r2
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	4193      	sbcs	r3, r2
 8000a06:	431c      	orrs	r4, r3
 8000a08:	1b33      	subs	r3, r6, r4
 8000a0a:	0005      	movs	r5, r0
 8000a0c:	000c      	movs	r4, r1
 8000a0e:	e74d      	b.n	80008ac <__aeabi_fadd+0xb4>
 8000a10:	1b9f      	subs	r7, r3, r6
 8000a12:	017a      	lsls	r2, r7, #5
 8000a14:	d422      	bmi.n	8000a5c <__aeabi_fadd+0x264>
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d1a6      	bne.n	8000968 <__aeabi_fadd+0x170>
 8000a1a:	2400      	movs	r4, #0
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e757      	b.n	80008d2 <__aeabi_fadd+0xda>
 8000a22:	199b      	adds	r3, r3, r6
 8000a24:	2501      	movs	r5, #1
 8000a26:	3201      	adds	r2, #1
 8000a28:	0159      	lsls	r1, r3, #5
 8000a2a:	d400      	bmi.n	8000a2e <__aeabi_fadd+0x236>
 8000a2c:	e740      	b.n	80008b0 <__aeabi_fadd+0xb8>
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4835      	ldr	r0, [pc, #212]	@ (8000b08 <__aeabi_fadd+0x310>)
 8000a32:	4019      	ands	r1, r3
 8000a34:	085b      	lsrs	r3, r3, #1
 8000a36:	4003      	ands	r3, r0
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	e7a7      	b.n	800098c <__aeabi_fadd+0x194>
 8000a3c:	28ff      	cmp	r0, #255	@ 0xff
 8000a3e:	d0a9      	beq.n	8000994 <__aeabi_fadd+0x19c>
 8000a40:	2180      	movs	r1, #128	@ 0x80
 8000a42:	04c9      	lsls	r1, r1, #19
 8000a44:	430b      	orrs	r3, r1
 8000a46:	e7b6      	b.n	80009b6 <__aeabi_fadd+0x1be>
 8000a48:	2aff      	cmp	r2, #255	@ 0xff
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fadd+0x256>
 8000a4c:	e779      	b.n	8000942 <__aeabi_fadd+0x14a>
 8000a4e:	199b      	adds	r3, r3, r6
 8000a50:	085b      	lsrs	r3, r3, #1
 8000a52:	0759      	lsls	r1, r3, #29
 8000a54:	d000      	beq.n	8000a58 <__aeabi_fadd+0x260>
 8000a56:	e72f      	b.n	80008b8 <__aeabi_fadd+0xc0>
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	e7c1      	b.n	80009e0 <__aeabi_fadd+0x1e8>
 8000a5c:	000c      	movs	r4, r1
 8000a5e:	1af7      	subs	r7, r6, r3
 8000a60:	e782      	b.n	8000968 <__aeabi_fadd+0x170>
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d12c      	bne.n	8000ac0 <__aeabi_fadd+0x2c8>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d193      	bne.n	8000992 <__aeabi_fadd+0x19a>
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	20ff      	movs	r0, #255	@ 0xff
 8000a70:	03db      	lsls	r3, r3, #15
 8000a72:	e72e      	b.n	80008d2 <__aeabi_fadd+0xda>
 8000a74:	2501      	movs	r5, #1
 8000a76:	1b9b      	subs	r3, r3, r6
 8000a78:	e718      	b.n	80008ac <__aeabi_fadd+0xb4>
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	2520      	movs	r5, #32
 8000a7e:	40d1      	lsrs	r1, r2
 8000a80:	1aaa      	subs	r2, r5, r2
 8000a82:	4093      	lsls	r3, r2
 8000a84:	1e5a      	subs	r2, r3, #1
 8000a86:	4193      	sbcs	r3, r2
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	0005      	movs	r5, r0
 8000a8c:	199b      	adds	r3, r3, r6
 8000a8e:	e753      	b.n	8000938 <__aeabi_fadd+0x140>
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fadd+0x29e>
 8000a94:	e77e      	b.n	8000994 <__aeabi_fadd+0x19c>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fadd+0x2a4>
 8000a9a:	e77c      	b.n	8000996 <__aeabi_fadd+0x19e>
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	03d2      	lsls	r2, r2, #15
 8000aa0:	4591      	cmp	r9, r2
 8000aa2:	d302      	bcc.n	8000aaa <__aeabi_fadd+0x2b2>
 8000aa4:	4594      	cmp	ip, r2
 8000aa6:	d200      	bcs.n	8000aaa <__aeabi_fadd+0x2b2>
 8000aa8:	0033      	movs	r3, r6
 8000aaa:	08db      	lsrs	r3, r3, #3
 8000aac:	e753      	b.n	8000956 <__aeabi_fadd+0x15e>
 8000aae:	000c      	movs	r4, r1
 8000ab0:	1af3      	subs	r3, r6, r3
 8000ab2:	3501      	adds	r5, #1
 8000ab4:	e6fa      	b.n	80008ac <__aeabi_fadd+0xb4>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d0af      	beq.n	8000a1a <__aeabi_fadd+0x222>
 8000aba:	000c      	movs	r4, r1
 8000abc:	0033      	movs	r3, r6
 8000abe:	e78d      	b.n	80009dc <__aeabi_fadd+0x1e4>
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fadd+0x2ce>
 8000ac4:	e767      	b.n	8000996 <__aeabi_fadd+0x19e>
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	03d2      	lsls	r2, r2, #15
 8000aca:	4591      	cmp	r9, r2
 8000acc:	d3ed      	bcc.n	8000aaa <__aeabi_fadd+0x2b2>
 8000ace:	4594      	cmp	ip, r2
 8000ad0:	d2eb      	bcs.n	8000aaa <__aeabi_fadd+0x2b2>
 8000ad2:	000c      	movs	r4, r1
 8000ad4:	0033      	movs	r3, r6
 8000ad6:	e7e8      	b.n	8000aaa <__aeabi_fadd+0x2b2>
 8000ad8:	0033      	movs	r3, r6
 8000ada:	e77f      	b.n	80009dc <__aeabi_fadd+0x1e4>
 8000adc:	199b      	adds	r3, r3, r6
 8000ade:	2200      	movs	r2, #0
 8000ae0:	0159      	lsls	r1, r3, #5
 8000ae2:	d5b9      	bpl.n	8000a58 <__aeabi_fadd+0x260>
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <__aeabi_fadd+0x30c>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	2201      	movs	r2, #1
 8000aec:	e778      	b.n	80009e0 <__aeabi_fadd+0x1e8>
 8000aee:	199b      	adds	r3, r3, r6
 8000af0:	3201      	adds	r2, #1
 8000af2:	3501      	adds	r5, #1
 8000af4:	0159      	lsls	r1, r3, #5
 8000af6:	d49a      	bmi.n	8000a2e <__aeabi_fadd+0x236>
 8000af8:	e6da      	b.n	80008b0 <__aeabi_fadd+0xb8>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d08d      	beq.n	8000a1a <__aeabi_fadd+0x222>
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	e76e      	b.n	80009e0 <__aeabi_fadd+0x1e8>
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	fbffffff 	.word	0xfbffffff
 8000b08:	7dffffff 	.word	0x7dffffff

08000b0c <__aeabi_fdiv>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	464f      	mov	r7, r9
 8000b10:	4646      	mov	r6, r8
 8000b12:	46d6      	mov	lr, sl
 8000b14:	0244      	lsls	r4, r0, #9
 8000b16:	b5c0      	push	{r6, r7, lr}
 8000b18:	0047      	lsls	r7, r0, #1
 8000b1a:	1c0e      	adds	r6, r1, #0
 8000b1c:	0a64      	lsrs	r4, r4, #9
 8000b1e:	0e3f      	lsrs	r7, r7, #24
 8000b20:	0fc5      	lsrs	r5, r0, #31
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d03c      	beq.n	8000ba0 <__aeabi_fdiv+0x94>
 8000b26:	2fff      	cmp	r7, #255	@ 0xff
 8000b28:	d042      	beq.n	8000bb0 <__aeabi_fdiv+0xa4>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	4699      	mov	r9, r3
 8000b30:	469a      	mov	sl, r3
 8000b32:	00e4      	lsls	r4, r4, #3
 8000b34:	04d2      	lsls	r2, r2, #19
 8000b36:	4314      	orrs	r4, r2
 8000b38:	3f7f      	subs	r7, #127	@ 0x7f
 8000b3a:	0273      	lsls	r3, r6, #9
 8000b3c:	0a5b      	lsrs	r3, r3, #9
 8000b3e:	4698      	mov	r8, r3
 8000b40:	0073      	lsls	r3, r6, #1
 8000b42:	0e1b      	lsrs	r3, r3, #24
 8000b44:	0ff6      	lsrs	r6, r6, #31
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d01b      	beq.n	8000b82 <__aeabi_fdiv+0x76>
 8000b4a:	2bff      	cmp	r3, #255	@ 0xff
 8000b4c:	d013      	beq.n	8000b76 <__aeabi_fdiv+0x6a>
 8000b4e:	4642      	mov	r2, r8
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	00d2      	lsls	r2, r2, #3
 8000b54:	04c9      	lsls	r1, r1, #19
 8000b56:	4311      	orrs	r1, r2
 8000b58:	4688      	mov	r8, r1
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	3b7f      	subs	r3, #127	@ 0x7f
 8000b5e:	0029      	movs	r1, r5
 8000b60:	1aff      	subs	r7, r7, r3
 8000b62:	464b      	mov	r3, r9
 8000b64:	4071      	eors	r1, r6
 8000b66:	b2c9      	uxtb	r1, r1
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d900      	bls.n	8000b6e <__aeabi_fdiv+0x62>
 8000b6c:	e0b5      	b.n	8000cda <__aeabi_fdiv+0x1ce>
 8000b6e:	4a74      	ldr	r2, [pc, #464]	@ (8000d40 <__aeabi_fdiv+0x234>)
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	58d3      	ldr	r3, [r2, r3]
 8000b74:	469f      	mov	pc, r3
 8000b76:	4643      	mov	r3, r8
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d13f      	bne.n	8000bfc <__aeabi_fdiv+0xf0>
 8000b7c:	3fff      	subs	r7, #255	@ 0xff
 8000b7e:	3302      	adds	r3, #2
 8000b80:	e003      	b.n	8000b8a <__aeabi_fdiv+0x7e>
 8000b82:	4643      	mov	r3, r8
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d12d      	bne.n	8000be4 <__aeabi_fdiv+0xd8>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	0029      	movs	r1, r5
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	4071      	eors	r1, r6
 8000b90:	b2c9      	uxtb	r1, r1
 8000b92:	431a      	orrs	r2, r3
 8000b94:	2a0e      	cmp	r2, #14
 8000b96:	d838      	bhi.n	8000c0a <__aeabi_fdiv+0xfe>
 8000b98:	486a      	ldr	r0, [pc, #424]	@ (8000d44 <__aeabi_fdiv+0x238>)
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	5882      	ldr	r2, [r0, r2]
 8000b9e:	4697      	mov	pc, r2
 8000ba0:	2c00      	cmp	r4, #0
 8000ba2:	d113      	bne.n	8000bcc <__aeabi_fdiv+0xc0>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	2700      	movs	r7, #0
 8000bac:	469a      	mov	sl, r3
 8000bae:	e7c4      	b.n	8000b3a <__aeabi_fdiv+0x2e>
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_fdiv+0xb4>
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	3b06      	subs	r3, #6
 8000bba:	27ff      	movs	r7, #255	@ 0xff
 8000bbc:	469a      	mov	sl, r3
 8000bbe:	e7bc      	b.n	8000b3a <__aeabi_fdiv+0x2e>
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	3b09      	subs	r3, #9
 8000bc6:	27ff      	movs	r7, #255	@ 0xff
 8000bc8:	469a      	mov	sl, r3
 8000bca:	e7b6      	b.n	8000b3a <__aeabi_fdiv+0x2e>
 8000bcc:	0020      	movs	r0, r4
 8000bce:	f002 fc9b 	bl	8003508 <__clzsi2>
 8000bd2:	2776      	movs	r7, #118	@ 0x76
 8000bd4:	1f43      	subs	r3, r0, #5
 8000bd6:	409c      	lsls	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	427f      	negs	r7, r7
 8000bdc:	4699      	mov	r9, r3
 8000bde:	469a      	mov	sl, r3
 8000be0:	1a3f      	subs	r7, r7, r0
 8000be2:	e7aa      	b.n	8000b3a <__aeabi_fdiv+0x2e>
 8000be4:	4640      	mov	r0, r8
 8000be6:	f002 fc8f 	bl	8003508 <__clzsi2>
 8000bea:	4642      	mov	r2, r8
 8000bec:	1f43      	subs	r3, r0, #5
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	2376      	movs	r3, #118	@ 0x76
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	1a1b      	subs	r3, r3, r0
 8000bf6:	4690      	mov	r8, r2
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	e7b0      	b.n	8000b5e <__aeabi_fdiv+0x52>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	464a      	mov	r2, r9
 8000c00:	431a      	orrs	r2, r3
 8000c02:	4691      	mov	r9, r2
 8000c04:	2003      	movs	r0, #3
 8000c06:	33fc      	adds	r3, #252	@ 0xfc
 8000c08:	e7a9      	b.n	8000b5e <__aeabi_fdiv+0x52>
 8000c0a:	000d      	movs	r5, r1
 8000c0c:	20ff      	movs	r0, #255	@ 0xff
 8000c0e:	2200      	movs	r2, #0
 8000c10:	05c0      	lsls	r0, r0, #23
 8000c12:	07ed      	lsls	r5, r5, #31
 8000c14:	4310      	orrs	r0, r2
 8000c16:	4328      	orrs	r0, r5
 8000c18:	bce0      	pop	{r5, r6, r7}
 8000c1a:	46ba      	mov	sl, r7
 8000c1c:	46b1      	mov	r9, r6
 8000c1e:	46a8      	mov	r8, r5
 8000c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c22:	000d      	movs	r5, r1
 8000c24:	2000      	movs	r0, #0
 8000c26:	2200      	movs	r2, #0
 8000c28:	e7f2      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d0ed      	beq.n	8000c0c <__aeabi_fdiv+0x100>
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d033      	beq.n	8000c9c <__aeabi_fdiv+0x190>
 8000c34:	46a0      	mov	r8, r4
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d105      	bne.n	8000c46 <__aeabi_fdiv+0x13a>
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e7e7      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000c40:	0035      	movs	r5, r6
 8000c42:	2803      	cmp	r0, #3
 8000c44:	d07a      	beq.n	8000d3c <__aeabi_fdiv+0x230>
 8000c46:	003b      	movs	r3, r7
 8000c48:	337f      	adds	r3, #127	@ 0x7f
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	dd2d      	ble.n	8000caa <__aeabi_fdiv+0x19e>
 8000c4e:	4642      	mov	r2, r8
 8000c50:	0752      	lsls	r2, r2, #29
 8000c52:	d007      	beq.n	8000c64 <__aeabi_fdiv+0x158>
 8000c54:	220f      	movs	r2, #15
 8000c56:	4641      	mov	r1, r8
 8000c58:	400a      	ands	r2, r1
 8000c5a:	2a04      	cmp	r2, #4
 8000c5c:	d002      	beq.n	8000c64 <__aeabi_fdiv+0x158>
 8000c5e:	2204      	movs	r2, #4
 8000c60:	4694      	mov	ip, r2
 8000c62:	44e0      	add	r8, ip
 8000c64:	4642      	mov	r2, r8
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	d505      	bpl.n	8000c76 <__aeabi_fdiv+0x16a>
 8000c6a:	4642      	mov	r2, r8
 8000c6c:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <__aeabi_fdiv+0x23c>)
 8000c6e:	401a      	ands	r2, r3
 8000c70:	003b      	movs	r3, r7
 8000c72:	4690      	mov	r8, r2
 8000c74:	3380      	adds	r3, #128	@ 0x80
 8000c76:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c78:	dcc8      	bgt.n	8000c0c <__aeabi_fdiv+0x100>
 8000c7a:	4642      	mov	r2, r8
 8000c7c:	0192      	lsls	r2, r2, #6
 8000c7e:	0a52      	lsrs	r2, r2, #9
 8000c80:	b2d8      	uxtb	r0, r3
 8000c82:	e7c5      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000c84:	2280      	movs	r2, #128	@ 0x80
 8000c86:	2500      	movs	r5, #0
 8000c88:	20ff      	movs	r0, #255	@ 0xff
 8000c8a:	03d2      	lsls	r2, r2, #15
 8000c8c:	e7c0      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	03d2      	lsls	r2, r2, #15
 8000c92:	4214      	tst	r4, r2
 8000c94:	d002      	beq.n	8000c9c <__aeabi_fdiv+0x190>
 8000c96:	4643      	mov	r3, r8
 8000c98:	4213      	tst	r3, r2
 8000c9a:	d049      	beq.n	8000d30 <__aeabi_fdiv+0x224>
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	03d2      	lsls	r2, r2, #15
 8000ca0:	4322      	orrs	r2, r4
 8000ca2:	0252      	lsls	r2, r2, #9
 8000ca4:	20ff      	movs	r0, #255	@ 0xff
 8000ca6:	0a52      	lsrs	r2, r2, #9
 8000ca8:	e7b2      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000caa:	2201      	movs	r2, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b1b      	cmp	r3, #27
 8000cb0:	dcc3      	bgt.n	8000c3a <__aeabi_fdiv+0x12e>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	40da      	lsrs	r2, r3
 8000cb6:	4643      	mov	r3, r8
 8000cb8:	379e      	adds	r7, #158	@ 0x9e
 8000cba:	40bb      	lsls	r3, r7
 8000cbc:	1e59      	subs	r1, r3, #1
 8000cbe:	418b      	sbcs	r3, r1
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	0753      	lsls	r3, r2, #29
 8000cc4:	d004      	beq.n	8000cd0 <__aeabi_fdiv+0x1c4>
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_fdiv+0x1c4>
 8000cce:	3204      	adds	r2, #4
 8000cd0:	0153      	lsls	r3, r2, #5
 8000cd2:	d529      	bpl.n	8000d28 <__aeabi_fdiv+0x21c>
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	e79a      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000cda:	4642      	mov	r2, r8
 8000cdc:	0163      	lsls	r3, r4, #5
 8000cde:	0155      	lsls	r5, r2, #5
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	d215      	bcs.n	8000d10 <__aeabi_fdiv+0x204>
 8000ce4:	201b      	movs	r0, #27
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	3f01      	subs	r7, #1
 8000cea:	2601      	movs	r6, #1
 8000cec:	001c      	movs	r4, r3
 8000cee:	0052      	lsls	r2, r2, #1
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2c00      	cmp	r4, #0
 8000cf4:	db01      	blt.n	8000cfa <__aeabi_fdiv+0x1ee>
 8000cf6:	429d      	cmp	r5, r3
 8000cf8:	d801      	bhi.n	8000cfe <__aeabi_fdiv+0x1f2>
 8000cfa:	1b5b      	subs	r3, r3, r5
 8000cfc:	4332      	orrs	r2, r6
 8000cfe:	3801      	subs	r0, #1
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d1f3      	bne.n	8000cec <__aeabi_fdiv+0x1e0>
 8000d04:	1e58      	subs	r0, r3, #1
 8000d06:	4183      	sbcs	r3, r0
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	4698      	mov	r8, r3
 8000d0c:	000d      	movs	r5, r1
 8000d0e:	e79a      	b.n	8000c46 <__aeabi_fdiv+0x13a>
 8000d10:	201a      	movs	r0, #26
 8000d12:	2201      	movs	r2, #1
 8000d14:	1b5b      	subs	r3, r3, r5
 8000d16:	e7e8      	b.n	8000cea <__aeabi_fdiv+0x1de>
 8000d18:	3b02      	subs	r3, #2
 8000d1a:	425a      	negs	r2, r3
 8000d1c:	4153      	adcs	r3, r2
 8000d1e:	425b      	negs	r3, r3
 8000d20:	0035      	movs	r5, r6
 8000d22:	2200      	movs	r2, #0
 8000d24:	b2d8      	uxtb	r0, r3
 8000d26:	e773      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000d28:	0192      	lsls	r2, r2, #6
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	0a52      	lsrs	r2, r2, #9
 8000d2e:	e76f      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000d30:	431a      	orrs	r2, r3
 8000d32:	0252      	lsls	r2, r2, #9
 8000d34:	0035      	movs	r5, r6
 8000d36:	20ff      	movs	r0, #255	@ 0xff
 8000d38:	0a52      	lsrs	r2, r2, #9
 8000d3a:	e769      	b.n	8000c10 <__aeabi_fdiv+0x104>
 8000d3c:	4644      	mov	r4, r8
 8000d3e:	e7ad      	b.n	8000c9c <__aeabi_fdiv+0x190>
 8000d40:	0800c8b0 	.word	0x0800c8b0
 8000d44:	0800c8f0 	.word	0x0800c8f0
 8000d48:	f7ffffff 	.word	0xf7ffffff

08000d4c <__eqsf2>:
 8000d4c:	b570      	push	{r4, r5, r6, lr}
 8000d4e:	0042      	lsls	r2, r0, #1
 8000d50:	024e      	lsls	r6, r1, #9
 8000d52:	004c      	lsls	r4, r1, #1
 8000d54:	0245      	lsls	r5, r0, #9
 8000d56:	0a6d      	lsrs	r5, r5, #9
 8000d58:	0e12      	lsrs	r2, r2, #24
 8000d5a:	0fc3      	lsrs	r3, r0, #31
 8000d5c:	0a76      	lsrs	r6, r6, #9
 8000d5e:	0e24      	lsrs	r4, r4, #24
 8000d60:	0fc9      	lsrs	r1, r1, #31
 8000d62:	2aff      	cmp	r2, #255	@ 0xff
 8000d64:	d010      	beq.n	8000d88 <__eqsf2+0x3c>
 8000d66:	2cff      	cmp	r4, #255	@ 0xff
 8000d68:	d00c      	beq.n	8000d84 <__eqsf2+0x38>
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	42a2      	cmp	r2, r4
 8000d6e:	d10a      	bne.n	8000d86 <__eqsf2+0x3a>
 8000d70:	42b5      	cmp	r5, r6
 8000d72:	d108      	bne.n	8000d86 <__eqsf2+0x3a>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d00f      	beq.n	8000d98 <__eqsf2+0x4c>
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	d104      	bne.n	8000d86 <__eqsf2+0x3a>
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	1e43      	subs	r3, r0, #1
 8000d80:	4198      	sbcs	r0, r3
 8000d82:	e000      	b.n	8000d86 <__eqsf2+0x3a>
 8000d84:	2001      	movs	r0, #1
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
 8000d88:	2001      	movs	r0, #1
 8000d8a:	2cff      	cmp	r4, #255	@ 0xff
 8000d8c:	d1fb      	bne.n	8000d86 <__eqsf2+0x3a>
 8000d8e:	4335      	orrs	r5, r6
 8000d90:	d1f9      	bne.n	8000d86 <__eqsf2+0x3a>
 8000d92:	404b      	eors	r3, r1
 8000d94:	0018      	movs	r0, r3
 8000d96:	e7f6      	b.n	8000d86 <__eqsf2+0x3a>
 8000d98:	2000      	movs	r0, #0
 8000d9a:	e7f4      	b.n	8000d86 <__eqsf2+0x3a>

08000d9c <__gesf2>:
 8000d9c:	b530      	push	{r4, r5, lr}
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0244      	lsls	r4, r0, #9
 8000da2:	024d      	lsls	r5, r1, #9
 8000da4:	0fc3      	lsrs	r3, r0, #31
 8000da6:	0048      	lsls	r0, r1, #1
 8000da8:	0a64      	lsrs	r4, r4, #9
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	0a6d      	lsrs	r5, r5, #9
 8000dae:	0e00      	lsrs	r0, r0, #24
 8000db0:	0fc9      	lsrs	r1, r1, #31
 8000db2:	2aff      	cmp	r2, #255	@ 0xff
 8000db4:	d019      	beq.n	8000dea <__gesf2+0x4e>
 8000db6:	28ff      	cmp	r0, #255	@ 0xff
 8000db8:	d00b      	beq.n	8000dd2 <__gesf2+0x36>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d11e      	bne.n	8000dfc <__gesf2+0x60>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d10b      	bne.n	8000dda <__gesf2+0x3e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d027      	beq.n	8000e16 <__gesf2+0x7a>
 8000dc6:	2c00      	cmp	r4, #0
 8000dc8:	d134      	bne.n	8000e34 <__gesf2+0x98>
 8000dca:	2900      	cmp	r1, #0
 8000dcc:	d02f      	beq.n	8000e2e <__gesf2+0x92>
 8000dce:	0008      	movs	r0, r1
 8000dd0:	bd30      	pop	{r4, r5, pc}
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d128      	bne.n	8000e28 <__gesf2+0x8c>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d101      	bne.n	8000dde <__gesf2+0x42>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0f5      	beq.n	8000dca <__gesf2+0x2e>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d107      	bne.n	8000df2 <__gesf2+0x56>
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d023      	beq.n	8000e2e <__gesf2+0x92>
 8000de6:	0018      	movs	r0, r3
 8000de8:	e7f2      	b.n	8000dd0 <__gesf2+0x34>
 8000dea:	2c00      	cmp	r4, #0
 8000dec:	d11c      	bne.n	8000e28 <__gesf2+0x8c>
 8000dee:	28ff      	cmp	r0, #255	@ 0xff
 8000df0:	d014      	beq.n	8000e1c <__gesf2+0x80>
 8000df2:	1e58      	subs	r0, r3, #1
 8000df4:	2302      	movs	r3, #2
 8000df6:	4018      	ands	r0, r3
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7e9      	b.n	8000dd0 <__gesf2+0x34>
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d0f8      	beq.n	8000df2 <__gesf2+0x56>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d1f6      	bne.n	8000df2 <__gesf2+0x56>
 8000e04:	4282      	cmp	r2, r0
 8000e06:	dcf4      	bgt.n	8000df2 <__gesf2+0x56>
 8000e08:	dbeb      	blt.n	8000de2 <__gesf2+0x46>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d8f1      	bhi.n	8000df2 <__gesf2+0x56>
 8000e0e:	2000      	movs	r0, #0
 8000e10:	42ac      	cmp	r4, r5
 8000e12:	d2dd      	bcs.n	8000dd0 <__gesf2+0x34>
 8000e14:	e7e5      	b.n	8000de2 <__gesf2+0x46>
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d0da      	beq.n	8000dd0 <__gesf2+0x34>
 8000e1a:	e7ea      	b.n	8000df2 <__gesf2+0x56>
 8000e1c:	2d00      	cmp	r5, #0
 8000e1e:	d103      	bne.n	8000e28 <__gesf2+0x8c>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d1e6      	bne.n	8000df2 <__gesf2+0x56>
 8000e24:	2000      	movs	r0, #0
 8000e26:	e7d3      	b.n	8000dd0 <__gesf2+0x34>
 8000e28:	2002      	movs	r0, #2
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	e7d0      	b.n	8000dd0 <__gesf2+0x34>
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4240      	negs	r0, r0
 8000e32:	e7cd      	b.n	8000dd0 <__gesf2+0x34>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d0e8      	beq.n	8000e0a <__gesf2+0x6e>
 8000e38:	e7db      	b.n	8000df2 <__gesf2+0x56>
 8000e3a:	46c0      	nop			@ (mov r8, r8)

08000e3c <__lesf2>:
 8000e3c:	b530      	push	{r4, r5, lr}
 8000e3e:	0042      	lsls	r2, r0, #1
 8000e40:	0244      	lsls	r4, r0, #9
 8000e42:	024d      	lsls	r5, r1, #9
 8000e44:	0fc3      	lsrs	r3, r0, #31
 8000e46:	0048      	lsls	r0, r1, #1
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	0e12      	lsrs	r2, r2, #24
 8000e4c:	0a6d      	lsrs	r5, r5, #9
 8000e4e:	0e00      	lsrs	r0, r0, #24
 8000e50:	0fc9      	lsrs	r1, r1, #31
 8000e52:	2aff      	cmp	r2, #255	@ 0xff
 8000e54:	d01a      	beq.n	8000e8c <__lesf2+0x50>
 8000e56:	28ff      	cmp	r0, #255	@ 0xff
 8000e58:	d00e      	beq.n	8000e78 <__lesf2+0x3c>
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	d11e      	bne.n	8000e9c <__lesf2+0x60>
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d10e      	bne.n	8000e80 <__lesf2+0x44>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d02a      	beq.n	8000ebc <__lesf2+0x80>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d00c      	beq.n	8000e84 <__lesf2+0x48>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d01d      	beq.n	8000eaa <__lesf2+0x6e>
 8000e6e:	1e58      	subs	r0, r3, #1
 8000e70:	2302      	movs	r3, #2
 8000e72:	4018      	ands	r0, r3
 8000e74:	3801      	subs	r0, #1
 8000e76:	e010      	b.n	8000e9a <__lesf2+0x5e>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d10d      	bne.n	8000e98 <__lesf2+0x5c>
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	d120      	bne.n	8000ec2 <__lesf2+0x86>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d11e      	bne.n	8000ec2 <__lesf2+0x86>
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d023      	beq.n	8000ed0 <__lesf2+0x94>
 8000e88:	0008      	movs	r0, r1
 8000e8a:	e006      	b.n	8000e9a <__lesf2+0x5e>
 8000e8c:	2c00      	cmp	r4, #0
 8000e8e:	d103      	bne.n	8000e98 <__lesf2+0x5c>
 8000e90:	28ff      	cmp	r0, #255	@ 0xff
 8000e92:	d1ec      	bne.n	8000e6e <__lesf2+0x32>
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d017      	beq.n	8000ec8 <__lesf2+0x8c>
 8000e98:	2002      	movs	r0, #2
 8000e9a:	bd30      	pop	{r4, r5, pc}
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d0e6      	beq.n	8000e6e <__lesf2+0x32>
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d1e4      	bne.n	8000e6e <__lesf2+0x32>
 8000ea4:	4282      	cmp	r2, r0
 8000ea6:	dce2      	bgt.n	8000e6e <__lesf2+0x32>
 8000ea8:	db04      	blt.n	8000eb4 <__lesf2+0x78>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d8df      	bhi.n	8000e6e <__lesf2+0x32>
 8000eae:	2000      	movs	r0, #0
 8000eb0:	42ac      	cmp	r4, r5
 8000eb2:	d2f2      	bcs.n	8000e9a <__lesf2+0x5e>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00b      	beq.n	8000ed0 <__lesf2+0x94>
 8000eb8:	0018      	movs	r0, r3
 8000eba:	e7ee      	b.n	8000e9a <__lesf2+0x5e>
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	d0ec      	beq.n	8000e9a <__lesf2+0x5e>
 8000ec0:	e7d5      	b.n	8000e6e <__lesf2+0x32>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d1d3      	bne.n	8000e6e <__lesf2+0x32>
 8000ec6:	e7f5      	b.n	8000eb4 <__lesf2+0x78>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d0e5      	beq.n	8000e9a <__lesf2+0x5e>
 8000ece:	e7ce      	b.n	8000e6e <__lesf2+0x32>
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	4240      	negs	r0, r0
 8000ed4:	e7e1      	b.n	8000e9a <__lesf2+0x5e>
 8000ed6:	46c0      	nop			@ (mov r8, r8)

08000ed8 <__aeabi_fmul>:
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	464f      	mov	r7, r9
 8000edc:	4646      	mov	r6, r8
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	0243      	lsls	r3, r0, #9
 8000ee2:	0a5b      	lsrs	r3, r3, #9
 8000ee4:	0045      	lsls	r5, r0, #1
 8000ee6:	b5c0      	push	{r6, r7, lr}
 8000ee8:	4699      	mov	r9, r3
 8000eea:	1c0f      	adds	r7, r1, #0
 8000eec:	0e2d      	lsrs	r5, r5, #24
 8000eee:	0fc6      	lsrs	r6, r0, #31
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_fmul+0x1e>
 8000ef4:	e088      	b.n	8001008 <__aeabi_fmul+0x130>
 8000ef6:	2dff      	cmp	r5, #255	@ 0xff
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fmul+0x24>
 8000efa:	e08d      	b.n	8001018 <__aeabi_fmul+0x140>
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	04d2      	lsls	r2, r2, #19
 8000f02:	431a      	orrs	r2, r3
 8000f04:	2300      	movs	r3, #0
 8000f06:	4691      	mov	r9, r2
 8000f08:	4698      	mov	r8, r3
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	3d7f      	subs	r5, #127	@ 0x7f
 8000f0e:	027c      	lsls	r4, r7, #9
 8000f10:	007b      	lsls	r3, r7, #1
 8000f12:	0a64      	lsrs	r4, r4, #9
 8000f14:	0e1b      	lsrs	r3, r3, #24
 8000f16:	0fff      	lsrs	r7, r7, #31
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d068      	beq.n	8000fee <__aeabi_fmul+0x116>
 8000f1c:	2bff      	cmp	r3, #255	@ 0xff
 8000f1e:	d021      	beq.n	8000f64 <__aeabi_fmul+0x8c>
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	00e4      	lsls	r4, r4, #3
 8000f24:	04d2      	lsls	r2, r2, #19
 8000f26:	4314      	orrs	r4, r2
 8000f28:	4642      	mov	r2, r8
 8000f2a:	3b7f      	subs	r3, #127	@ 0x7f
 8000f2c:	195b      	adds	r3, r3, r5
 8000f2e:	2100      	movs	r1, #0
 8000f30:	1c5d      	adds	r5, r3, #1
 8000f32:	2a0a      	cmp	r2, #10
 8000f34:	dc2e      	bgt.n	8000f94 <__aeabi_fmul+0xbc>
 8000f36:	407e      	eors	r6, r7
 8000f38:	4642      	mov	r2, r8
 8000f3a:	2a02      	cmp	r2, #2
 8000f3c:	dc23      	bgt.n	8000f86 <__aeabi_fmul+0xae>
 8000f3e:	3a01      	subs	r2, #1
 8000f40:	2a01      	cmp	r2, #1
 8000f42:	d900      	bls.n	8000f46 <__aeabi_fmul+0x6e>
 8000f44:	e0bd      	b.n	80010c2 <__aeabi_fmul+0x1ea>
 8000f46:	2902      	cmp	r1, #2
 8000f48:	d06e      	beq.n	8001028 <__aeabi_fmul+0x150>
 8000f4a:	2901      	cmp	r1, #1
 8000f4c:	d12c      	bne.n	8000fa8 <__aeabi_fmul+0xd0>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	2200      	movs	r2, #0
 8000f52:	05c0      	lsls	r0, r0, #23
 8000f54:	07f6      	lsls	r6, r6, #31
 8000f56:	4310      	orrs	r0, r2
 8000f58:	4330      	orrs	r0, r6
 8000f5a:	bce0      	pop	{r5, r6, r7}
 8000f5c:	46ba      	mov	sl, r7
 8000f5e:	46b1      	mov	r9, r6
 8000f60:	46a8      	mov	r8, r5
 8000f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f64:	002b      	movs	r3, r5
 8000f66:	33ff      	adds	r3, #255	@ 0xff
 8000f68:	2c00      	cmp	r4, #0
 8000f6a:	d065      	beq.n	8001038 <__aeabi_fmul+0x160>
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4641      	mov	r1, r8
 8000f70:	4311      	orrs	r1, r2
 8000f72:	0032      	movs	r2, r6
 8000f74:	3501      	adds	r5, #1
 8000f76:	4688      	mov	r8, r1
 8000f78:	407a      	eors	r2, r7
 8000f7a:	35ff      	adds	r5, #255	@ 0xff
 8000f7c:	290a      	cmp	r1, #10
 8000f7e:	dd00      	ble.n	8000f82 <__aeabi_fmul+0xaa>
 8000f80:	e0d8      	b.n	8001134 <__aeabi_fmul+0x25c>
 8000f82:	0016      	movs	r6, r2
 8000f84:	2103      	movs	r1, #3
 8000f86:	4640      	mov	r0, r8
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4082      	lsls	r2, r0
 8000f8c:	20a6      	movs	r0, #166	@ 0xa6
 8000f8e:	00c0      	lsls	r0, r0, #3
 8000f90:	4202      	tst	r2, r0
 8000f92:	d020      	beq.n	8000fd6 <__aeabi_fmul+0xfe>
 8000f94:	4653      	mov	r3, sl
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d046      	beq.n	8001028 <__aeabi_fmul+0x150>
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fmul+0xc8>
 8000f9e:	e0bb      	b.n	8001118 <__aeabi_fmul+0x240>
 8000fa0:	4651      	mov	r1, sl
 8000fa2:	464c      	mov	r4, r9
 8000fa4:	2901      	cmp	r1, #1
 8000fa6:	d0d2      	beq.n	8000f4e <__aeabi_fmul+0x76>
 8000fa8:	002b      	movs	r3, r5
 8000faa:	337f      	adds	r3, #127	@ 0x7f
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dd70      	ble.n	8001092 <__aeabi_fmul+0x1ba>
 8000fb0:	0762      	lsls	r2, r4, #29
 8000fb2:	d004      	beq.n	8000fbe <__aeabi_fmul+0xe6>
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	4022      	ands	r2, r4
 8000fb8:	2a04      	cmp	r2, #4
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fmul+0xe6>
 8000fbc:	3404      	adds	r4, #4
 8000fbe:	0122      	lsls	r2, r4, #4
 8000fc0:	d503      	bpl.n	8000fca <__aeabi_fmul+0xf2>
 8000fc2:	4b63      	ldr	r3, [pc, #396]	@ (8001150 <__aeabi_fmul+0x278>)
 8000fc4:	401c      	ands	r4, r3
 8000fc6:	002b      	movs	r3, r5
 8000fc8:	3380      	adds	r3, #128	@ 0x80
 8000fca:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fcc:	dc2c      	bgt.n	8001028 <__aeabi_fmul+0x150>
 8000fce:	01a2      	lsls	r2, r4, #6
 8000fd0:	0a52      	lsrs	r2, r2, #9
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	e7bd      	b.n	8000f52 <__aeabi_fmul+0x7a>
 8000fd6:	2090      	movs	r0, #144	@ 0x90
 8000fd8:	0080      	lsls	r0, r0, #2
 8000fda:	4202      	tst	r2, r0
 8000fdc:	d127      	bne.n	800102e <__aeabi_fmul+0x156>
 8000fde:	38b9      	subs	r0, #185	@ 0xb9
 8000fe0:	38ff      	subs	r0, #255	@ 0xff
 8000fe2:	4210      	tst	r0, r2
 8000fe4:	d06d      	beq.n	80010c2 <__aeabi_fmul+0x1ea>
 8000fe6:	003e      	movs	r6, r7
 8000fe8:	46a1      	mov	r9, r4
 8000fea:	468a      	mov	sl, r1
 8000fec:	e7d2      	b.n	8000f94 <__aeabi_fmul+0xbc>
 8000fee:	2c00      	cmp	r4, #0
 8000ff0:	d141      	bne.n	8001076 <__aeabi_fmul+0x19e>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	4642      	mov	r2, r8
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	4690      	mov	r8, r2
 8000ffa:	002b      	movs	r3, r5
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	2101      	movs	r1, #1
 8001000:	1c5d      	adds	r5, r3, #1
 8001002:	2a0a      	cmp	r2, #10
 8001004:	dd97      	ble.n	8000f36 <__aeabi_fmul+0x5e>
 8001006:	e7c5      	b.n	8000f94 <__aeabi_fmul+0xbc>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d126      	bne.n	800105a <__aeabi_fmul+0x182>
 800100c:	2304      	movs	r3, #4
 800100e:	4698      	mov	r8, r3
 8001010:	3b03      	subs	r3, #3
 8001012:	2500      	movs	r5, #0
 8001014:	469a      	mov	sl, r3
 8001016:	e77a      	b.n	8000f0e <__aeabi_fmul+0x36>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d118      	bne.n	800104e <__aeabi_fmul+0x176>
 800101c:	2308      	movs	r3, #8
 800101e:	4698      	mov	r8, r3
 8001020:	3b06      	subs	r3, #6
 8001022:	25ff      	movs	r5, #255	@ 0xff
 8001024:	469a      	mov	sl, r3
 8001026:	e772      	b.n	8000f0e <__aeabi_fmul+0x36>
 8001028:	20ff      	movs	r0, #255	@ 0xff
 800102a:	2200      	movs	r2, #0
 800102c:	e791      	b.n	8000f52 <__aeabi_fmul+0x7a>
 800102e:	2280      	movs	r2, #128	@ 0x80
 8001030:	2600      	movs	r6, #0
 8001032:	20ff      	movs	r0, #255	@ 0xff
 8001034:	03d2      	lsls	r2, r2, #15
 8001036:	e78c      	b.n	8000f52 <__aeabi_fmul+0x7a>
 8001038:	4641      	mov	r1, r8
 800103a:	2202      	movs	r2, #2
 800103c:	3501      	adds	r5, #1
 800103e:	4311      	orrs	r1, r2
 8001040:	4688      	mov	r8, r1
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dca5      	bgt.n	8000f94 <__aeabi_fmul+0xbc>
 8001048:	2102      	movs	r1, #2
 800104a:	407e      	eors	r6, r7
 800104c:	e774      	b.n	8000f38 <__aeabi_fmul+0x60>
 800104e:	230c      	movs	r3, #12
 8001050:	4698      	mov	r8, r3
 8001052:	3b09      	subs	r3, #9
 8001054:	25ff      	movs	r5, #255	@ 0xff
 8001056:	469a      	mov	sl, r3
 8001058:	e759      	b.n	8000f0e <__aeabi_fmul+0x36>
 800105a:	0018      	movs	r0, r3
 800105c:	f002 fa54 	bl	8003508 <__clzsi2>
 8001060:	464a      	mov	r2, r9
 8001062:	1f43      	subs	r3, r0, #5
 8001064:	2576      	movs	r5, #118	@ 0x76
 8001066:	409a      	lsls	r2, r3
 8001068:	2300      	movs	r3, #0
 800106a:	426d      	negs	r5, r5
 800106c:	4691      	mov	r9, r2
 800106e:	4698      	mov	r8, r3
 8001070:	469a      	mov	sl, r3
 8001072:	1a2d      	subs	r5, r5, r0
 8001074:	e74b      	b.n	8000f0e <__aeabi_fmul+0x36>
 8001076:	0020      	movs	r0, r4
 8001078:	f002 fa46 	bl	8003508 <__clzsi2>
 800107c:	4642      	mov	r2, r8
 800107e:	1f43      	subs	r3, r0, #5
 8001080:	409c      	lsls	r4, r3
 8001082:	1a2b      	subs	r3, r5, r0
 8001084:	3b76      	subs	r3, #118	@ 0x76
 8001086:	2100      	movs	r1, #0
 8001088:	1c5d      	adds	r5, r3, #1
 800108a:	2a0a      	cmp	r2, #10
 800108c:	dc00      	bgt.n	8001090 <__aeabi_fmul+0x1b8>
 800108e:	e752      	b.n	8000f36 <__aeabi_fmul+0x5e>
 8001090:	e780      	b.n	8000f94 <__aeabi_fmul+0xbc>
 8001092:	2201      	movs	r2, #1
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b1b      	cmp	r3, #27
 8001098:	dd00      	ble.n	800109c <__aeabi_fmul+0x1c4>
 800109a:	e758      	b.n	8000f4e <__aeabi_fmul+0x76>
 800109c:	359e      	adds	r5, #158	@ 0x9e
 800109e:	0022      	movs	r2, r4
 80010a0:	40ac      	lsls	r4, r5
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	1e63      	subs	r3, r4, #1
 80010a6:	419c      	sbcs	r4, r3
 80010a8:	4322      	orrs	r2, r4
 80010aa:	0753      	lsls	r3, r2, #29
 80010ac:	d004      	beq.n	80010b8 <__aeabi_fmul+0x1e0>
 80010ae:	230f      	movs	r3, #15
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fmul+0x1e0>
 80010b6:	3204      	adds	r2, #4
 80010b8:	0153      	lsls	r3, r2, #5
 80010ba:	d537      	bpl.n	800112c <__aeabi_fmul+0x254>
 80010bc:	2001      	movs	r0, #1
 80010be:	2200      	movs	r2, #0
 80010c0:	e747      	b.n	8000f52 <__aeabi_fmul+0x7a>
 80010c2:	0c21      	lsrs	r1, r4, #16
 80010c4:	464a      	mov	r2, r9
 80010c6:	0424      	lsls	r4, r4, #16
 80010c8:	0c24      	lsrs	r4, r4, #16
 80010ca:	0027      	movs	r7, r4
 80010cc:	0c10      	lsrs	r0, r2, #16
 80010ce:	0412      	lsls	r2, r2, #16
 80010d0:	0c12      	lsrs	r2, r2, #16
 80010d2:	4344      	muls	r4, r0
 80010d4:	4357      	muls	r7, r2
 80010d6:	4348      	muls	r0, r1
 80010d8:	4351      	muls	r1, r2
 80010da:	0c3a      	lsrs	r2, r7, #16
 80010dc:	1909      	adds	r1, r1, r4
 80010de:	1852      	adds	r2, r2, r1
 80010e0:	4294      	cmp	r4, r2
 80010e2:	d903      	bls.n	80010ec <__aeabi_fmul+0x214>
 80010e4:	2180      	movs	r1, #128	@ 0x80
 80010e6:	0249      	lsls	r1, r1, #9
 80010e8:	468c      	mov	ip, r1
 80010ea:	4460      	add	r0, ip
 80010ec:	043f      	lsls	r7, r7, #16
 80010ee:	0411      	lsls	r1, r2, #16
 80010f0:	0c3f      	lsrs	r7, r7, #16
 80010f2:	19c9      	adds	r1, r1, r7
 80010f4:	018c      	lsls	r4, r1, #6
 80010f6:	1e67      	subs	r7, r4, #1
 80010f8:	41bc      	sbcs	r4, r7
 80010fa:	0c12      	lsrs	r2, r2, #16
 80010fc:	0e89      	lsrs	r1, r1, #26
 80010fe:	1812      	adds	r2, r2, r0
 8001100:	430c      	orrs	r4, r1
 8001102:	0192      	lsls	r2, r2, #6
 8001104:	4314      	orrs	r4, r2
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	d50e      	bpl.n	8001128 <__aeabi_fmul+0x250>
 800110a:	2301      	movs	r3, #1
 800110c:	0862      	lsrs	r2, r4, #1
 800110e:	401c      	ands	r4, r3
 8001110:	4314      	orrs	r4, r2
 8001112:	e749      	b.n	8000fa8 <__aeabi_fmul+0xd0>
 8001114:	003e      	movs	r6, r7
 8001116:	46a1      	mov	r9, r4
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	464b      	mov	r3, r9
 800111c:	03d2      	lsls	r2, r2, #15
 800111e:	431a      	orrs	r2, r3
 8001120:	0252      	lsls	r2, r2, #9
 8001122:	20ff      	movs	r0, #255	@ 0xff
 8001124:	0a52      	lsrs	r2, r2, #9
 8001126:	e714      	b.n	8000f52 <__aeabi_fmul+0x7a>
 8001128:	001d      	movs	r5, r3
 800112a:	e73d      	b.n	8000fa8 <__aeabi_fmul+0xd0>
 800112c:	0192      	lsls	r2, r2, #6
 800112e:	2000      	movs	r0, #0
 8001130:	0a52      	lsrs	r2, r2, #9
 8001132:	e70e      	b.n	8000f52 <__aeabi_fmul+0x7a>
 8001134:	290f      	cmp	r1, #15
 8001136:	d1ed      	bne.n	8001114 <__aeabi_fmul+0x23c>
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	464b      	mov	r3, r9
 800113c:	03d2      	lsls	r2, r2, #15
 800113e:	4213      	tst	r3, r2
 8001140:	d0ea      	beq.n	8001118 <__aeabi_fmul+0x240>
 8001142:	4214      	tst	r4, r2
 8001144:	d1e8      	bne.n	8001118 <__aeabi_fmul+0x240>
 8001146:	003e      	movs	r6, r7
 8001148:	20ff      	movs	r0, #255	@ 0xff
 800114a:	4322      	orrs	r2, r4
 800114c:	e701      	b.n	8000f52 <__aeabi_fmul+0x7a>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	f7ffffff 	.word	0xf7ffffff

08001154 <__aeabi_fsub>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	4647      	mov	r7, r8
 8001158:	46ce      	mov	lr, r9
 800115a:	024e      	lsls	r6, r1, #9
 800115c:	0243      	lsls	r3, r0, #9
 800115e:	0045      	lsls	r5, r0, #1
 8001160:	0a72      	lsrs	r2, r6, #9
 8001162:	0fc4      	lsrs	r4, r0, #31
 8001164:	0048      	lsls	r0, r1, #1
 8001166:	b580      	push	{r7, lr}
 8001168:	4694      	mov	ip, r2
 800116a:	0a5f      	lsrs	r7, r3, #9
 800116c:	0e2d      	lsrs	r5, r5, #24
 800116e:	099b      	lsrs	r3, r3, #6
 8001170:	0e00      	lsrs	r0, r0, #24
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	09b6      	lsrs	r6, r6, #6
 8001176:	28ff      	cmp	r0, #255	@ 0xff
 8001178:	d024      	beq.n	80011c4 <__aeabi_fsub+0x70>
 800117a:	2201      	movs	r2, #1
 800117c:	4051      	eors	r1, r2
 800117e:	1a2a      	subs	r2, r5, r0
 8001180:	428c      	cmp	r4, r1
 8001182:	d00f      	beq.n	80011a4 <__aeabi_fsub+0x50>
 8001184:	2a00      	cmp	r2, #0
 8001186:	dc00      	bgt.n	800118a <__aeabi_fsub+0x36>
 8001188:	e16a      	b.n	8001460 <__aeabi_fsub+0x30c>
 800118a:	2800      	cmp	r0, #0
 800118c:	d135      	bne.n	80011fa <__aeabi_fsub+0xa6>
 800118e:	2e00      	cmp	r6, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_fsub+0x40>
 8001192:	e0a2      	b.n	80012da <__aeabi_fsub+0x186>
 8001194:	1e51      	subs	r1, r2, #1
 8001196:	2a01      	cmp	r2, #1
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x48>
 800119a:	e124      	b.n	80013e6 <__aeabi_fsub+0x292>
 800119c:	2aff      	cmp	r2, #255	@ 0xff
 800119e:	d021      	beq.n	80011e4 <__aeabi_fsub+0x90>
 80011a0:	000a      	movs	r2, r1
 80011a2:	e02f      	b.n	8001204 <__aeabi_fsub+0xb0>
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_fsub+0x56>
 80011a8:	e167      	b.n	800147a <__aeabi_fsub+0x326>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d05e      	beq.n	800126c <__aeabi_fsub+0x118>
 80011ae:	2dff      	cmp	r5, #255	@ 0xff
 80011b0:	d018      	beq.n	80011e4 <__aeabi_fsub+0x90>
 80011b2:	2180      	movs	r1, #128	@ 0x80
 80011b4:	04c9      	lsls	r1, r1, #19
 80011b6:	430e      	orrs	r6, r1
 80011b8:	2a1b      	cmp	r2, #27
 80011ba:	dc00      	bgt.n	80011be <__aeabi_fsub+0x6a>
 80011bc:	e076      	b.n	80012ac <__aeabi_fsub+0x158>
 80011be:	002a      	movs	r2, r5
 80011c0:	3301      	adds	r3, #1
 80011c2:	e032      	b.n	800122a <__aeabi_fsub+0xd6>
 80011c4:	002a      	movs	r2, r5
 80011c6:	3aff      	subs	r2, #255	@ 0xff
 80011c8:	4691      	mov	r9, r2
 80011ca:	2e00      	cmp	r6, #0
 80011cc:	d042      	beq.n	8001254 <__aeabi_fsub+0x100>
 80011ce:	428c      	cmp	r4, r1
 80011d0:	d055      	beq.n	800127e <__aeabi_fsub+0x12a>
 80011d2:	464a      	mov	r2, r9
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_fsub+0x86>
 80011d8:	e09c      	b.n	8001314 <__aeabi_fsub+0x1c0>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_fsub+0x8c>
 80011de:	e077      	b.n	80012d0 <__aeabi_fsub+0x17c>
 80011e0:	000c      	movs	r4, r1
 80011e2:	0033      	movs	r3, r6
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x98>
 80011ea:	e06e      	b.n	80012ca <__aeabi_fsub+0x176>
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	03d2      	lsls	r2, r2, #15
 80011f0:	4313      	orrs	r3, r2
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	20ff      	movs	r0, #255	@ 0xff
 80011f6:	0a5b      	lsrs	r3, r3, #9
 80011f8:	e024      	b.n	8001244 <__aeabi_fsub+0xf0>
 80011fa:	2dff      	cmp	r5, #255	@ 0xff
 80011fc:	d0f2      	beq.n	80011e4 <__aeabi_fsub+0x90>
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	04c9      	lsls	r1, r1, #19
 8001202:	430e      	orrs	r6, r1
 8001204:	2101      	movs	r1, #1
 8001206:	2a1b      	cmp	r2, #27
 8001208:	dc08      	bgt.n	800121c <__aeabi_fsub+0xc8>
 800120a:	0031      	movs	r1, r6
 800120c:	2020      	movs	r0, #32
 800120e:	40d1      	lsrs	r1, r2
 8001210:	1a82      	subs	r2, r0, r2
 8001212:	4096      	lsls	r6, r2
 8001214:	0032      	movs	r2, r6
 8001216:	1e50      	subs	r0, r2, #1
 8001218:	4182      	sbcs	r2, r0
 800121a:	4311      	orrs	r1, r2
 800121c:	1a5b      	subs	r3, r3, r1
 800121e:	015a      	lsls	r2, r3, #5
 8001220:	d460      	bmi.n	80012e4 <__aeabi_fsub+0x190>
 8001222:	2107      	movs	r1, #7
 8001224:	002a      	movs	r2, r5
 8001226:	4019      	ands	r1, r3
 8001228:	d057      	beq.n	80012da <__aeabi_fsub+0x186>
 800122a:	210f      	movs	r1, #15
 800122c:	4019      	ands	r1, r3
 800122e:	2904      	cmp	r1, #4
 8001230:	d000      	beq.n	8001234 <__aeabi_fsub+0xe0>
 8001232:	3304      	adds	r3, #4
 8001234:	0159      	lsls	r1, r3, #5
 8001236:	d550      	bpl.n	80012da <__aeabi_fsub+0x186>
 8001238:	1c50      	adds	r0, r2, #1
 800123a:	2afe      	cmp	r2, #254	@ 0xfe
 800123c:	d045      	beq.n	80012ca <__aeabi_fsub+0x176>
 800123e:	019b      	lsls	r3, r3, #6
 8001240:	b2c0      	uxtb	r0, r0
 8001242:	0a5b      	lsrs	r3, r3, #9
 8001244:	05c0      	lsls	r0, r0, #23
 8001246:	4318      	orrs	r0, r3
 8001248:	07e4      	lsls	r4, r4, #31
 800124a:	4320      	orrs	r0, r4
 800124c:	bcc0      	pop	{r6, r7}
 800124e:	46b9      	mov	r9, r7
 8001250:	46b0      	mov	r8, r6
 8001252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001254:	2201      	movs	r2, #1
 8001256:	4051      	eors	r1, r2
 8001258:	428c      	cmp	r4, r1
 800125a:	d1ba      	bne.n	80011d2 <__aeabi_fsub+0x7e>
 800125c:	464a      	mov	r2, r9
 800125e:	2a00      	cmp	r2, #0
 8001260:	d010      	beq.n	8001284 <__aeabi_fsub+0x130>
 8001262:	2d00      	cmp	r5, #0
 8001264:	d100      	bne.n	8001268 <__aeabi_fsub+0x114>
 8001266:	e098      	b.n	800139a <__aeabi_fsub+0x246>
 8001268:	2300      	movs	r3, #0
 800126a:	e7bb      	b.n	80011e4 <__aeabi_fsub+0x90>
 800126c:	2e00      	cmp	r6, #0
 800126e:	d034      	beq.n	80012da <__aeabi_fsub+0x186>
 8001270:	1e51      	subs	r1, r2, #1
 8001272:	2a01      	cmp	r2, #1
 8001274:	d06e      	beq.n	8001354 <__aeabi_fsub+0x200>
 8001276:	2aff      	cmp	r2, #255	@ 0xff
 8001278:	d0b4      	beq.n	80011e4 <__aeabi_fsub+0x90>
 800127a:	000a      	movs	r2, r1
 800127c:	e79c      	b.n	80011b8 <__aeabi_fsub+0x64>
 800127e:	2a00      	cmp	r2, #0
 8001280:	d000      	beq.n	8001284 <__aeabi_fsub+0x130>
 8001282:	e088      	b.n	8001396 <__aeabi_fsub+0x242>
 8001284:	20fe      	movs	r0, #254	@ 0xfe
 8001286:	1c6a      	adds	r2, r5, #1
 8001288:	4210      	tst	r0, r2
 800128a:	d000      	beq.n	800128e <__aeabi_fsub+0x13a>
 800128c:	e092      	b.n	80013b4 <__aeabi_fsub+0x260>
 800128e:	2d00      	cmp	r5, #0
 8001290:	d000      	beq.n	8001294 <__aeabi_fsub+0x140>
 8001292:	e0a4      	b.n	80013de <__aeabi_fsub+0x28a>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d100      	bne.n	800129a <__aeabi_fsub+0x146>
 8001298:	e0cb      	b.n	8001432 <__aeabi_fsub+0x2de>
 800129a:	2e00      	cmp	r6, #0
 800129c:	d000      	beq.n	80012a0 <__aeabi_fsub+0x14c>
 800129e:	e0ca      	b.n	8001436 <__aeabi_fsub+0x2e2>
 80012a0:	2200      	movs	r2, #0
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	025b      	lsls	r3, r3, #9
 80012a6:	0a5b      	lsrs	r3, r3, #9
 80012a8:	b2d0      	uxtb	r0, r2
 80012aa:	e7cb      	b.n	8001244 <__aeabi_fsub+0xf0>
 80012ac:	0031      	movs	r1, r6
 80012ae:	2020      	movs	r0, #32
 80012b0:	40d1      	lsrs	r1, r2
 80012b2:	1a82      	subs	r2, r0, r2
 80012b4:	4096      	lsls	r6, r2
 80012b6:	0032      	movs	r2, r6
 80012b8:	1e50      	subs	r0, r2, #1
 80012ba:	4182      	sbcs	r2, r0
 80012bc:	430a      	orrs	r2, r1
 80012be:	189b      	adds	r3, r3, r2
 80012c0:	015a      	lsls	r2, r3, #5
 80012c2:	d5ae      	bpl.n	8001222 <__aeabi_fsub+0xce>
 80012c4:	1c6a      	adds	r2, r5, #1
 80012c6:	2dfe      	cmp	r5, #254	@ 0xfe
 80012c8:	d14a      	bne.n	8001360 <__aeabi_fsub+0x20c>
 80012ca:	20ff      	movs	r0, #255	@ 0xff
 80012cc:	2300      	movs	r3, #0
 80012ce:	e7b9      	b.n	8001244 <__aeabi_fsub+0xf0>
 80012d0:	22ff      	movs	r2, #255	@ 0xff
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d14b      	bne.n	800136e <__aeabi_fsub+0x21a>
 80012d6:	000c      	movs	r4, r1
 80012d8:	0033      	movs	r3, r6
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	2aff      	cmp	r2, #255	@ 0xff
 80012de:	d100      	bne.n	80012e2 <__aeabi_fsub+0x18e>
 80012e0:	e781      	b.n	80011e6 <__aeabi_fsub+0x92>
 80012e2:	e7df      	b.n	80012a4 <__aeabi_fsub+0x150>
 80012e4:	019f      	lsls	r7, r3, #6
 80012e6:	09bf      	lsrs	r7, r7, #6
 80012e8:	0038      	movs	r0, r7
 80012ea:	f002 f90d 	bl	8003508 <__clzsi2>
 80012ee:	3805      	subs	r0, #5
 80012f0:	4087      	lsls	r7, r0
 80012f2:	4285      	cmp	r5, r0
 80012f4:	dc21      	bgt.n	800133a <__aeabi_fsub+0x1e6>
 80012f6:	003b      	movs	r3, r7
 80012f8:	2120      	movs	r1, #32
 80012fa:	1b42      	subs	r2, r0, r5
 80012fc:	3201      	adds	r2, #1
 80012fe:	40d3      	lsrs	r3, r2
 8001300:	1a8a      	subs	r2, r1, r2
 8001302:	4097      	lsls	r7, r2
 8001304:	1e7a      	subs	r2, r7, #1
 8001306:	4197      	sbcs	r7, r2
 8001308:	2200      	movs	r2, #0
 800130a:	433b      	orrs	r3, r7
 800130c:	0759      	lsls	r1, r3, #29
 800130e:	d000      	beq.n	8001312 <__aeabi_fsub+0x1be>
 8001310:	e78b      	b.n	800122a <__aeabi_fsub+0xd6>
 8001312:	e78f      	b.n	8001234 <__aeabi_fsub+0xe0>
 8001314:	20fe      	movs	r0, #254	@ 0xfe
 8001316:	1c6a      	adds	r2, r5, #1
 8001318:	4210      	tst	r0, r2
 800131a:	d112      	bne.n	8001342 <__aeabi_fsub+0x1ee>
 800131c:	2d00      	cmp	r5, #0
 800131e:	d152      	bne.n	80013c6 <__aeabi_fsub+0x272>
 8001320:	2b00      	cmp	r3, #0
 8001322:	d07c      	beq.n	800141e <__aeabi_fsub+0x2ca>
 8001324:	2e00      	cmp	r6, #0
 8001326:	d0bb      	beq.n	80012a0 <__aeabi_fsub+0x14c>
 8001328:	1b9a      	subs	r2, r3, r6
 800132a:	0150      	lsls	r0, r2, #5
 800132c:	d400      	bmi.n	8001330 <__aeabi_fsub+0x1dc>
 800132e:	e08b      	b.n	8001448 <__aeabi_fsub+0x2f4>
 8001330:	2401      	movs	r4, #1
 8001332:	2200      	movs	r2, #0
 8001334:	1af3      	subs	r3, r6, r3
 8001336:	400c      	ands	r4, r1
 8001338:	e7e8      	b.n	800130c <__aeabi_fsub+0x1b8>
 800133a:	4b56      	ldr	r3, [pc, #344]	@ (8001494 <__aeabi_fsub+0x340>)
 800133c:	1a2a      	subs	r2, r5, r0
 800133e:	403b      	ands	r3, r7
 8001340:	e7e4      	b.n	800130c <__aeabi_fsub+0x1b8>
 8001342:	1b9f      	subs	r7, r3, r6
 8001344:	017a      	lsls	r2, r7, #5
 8001346:	d446      	bmi.n	80013d6 <__aeabi_fsub+0x282>
 8001348:	2f00      	cmp	r7, #0
 800134a:	d1cd      	bne.n	80012e8 <__aeabi_fsub+0x194>
 800134c:	2400      	movs	r4, #0
 800134e:	2000      	movs	r0, #0
 8001350:	2300      	movs	r3, #0
 8001352:	e777      	b.n	8001244 <__aeabi_fsub+0xf0>
 8001354:	199b      	adds	r3, r3, r6
 8001356:	2501      	movs	r5, #1
 8001358:	3201      	adds	r2, #1
 800135a:	0159      	lsls	r1, r3, #5
 800135c:	d400      	bmi.n	8001360 <__aeabi_fsub+0x20c>
 800135e:	e760      	b.n	8001222 <__aeabi_fsub+0xce>
 8001360:	2101      	movs	r1, #1
 8001362:	484d      	ldr	r0, [pc, #308]	@ (8001498 <__aeabi_fsub+0x344>)
 8001364:	4019      	ands	r1, r3
 8001366:	085b      	lsrs	r3, r3, #1
 8001368:	4003      	ands	r3, r0
 800136a:	430b      	orrs	r3, r1
 800136c:	e7ce      	b.n	800130c <__aeabi_fsub+0x1b8>
 800136e:	1e57      	subs	r7, r2, #1
 8001370:	2a01      	cmp	r2, #1
 8001372:	d05a      	beq.n	800142a <__aeabi_fsub+0x2d6>
 8001374:	000c      	movs	r4, r1
 8001376:	2aff      	cmp	r2, #255	@ 0xff
 8001378:	d033      	beq.n	80013e2 <__aeabi_fsub+0x28e>
 800137a:	2201      	movs	r2, #1
 800137c:	2f1b      	cmp	r7, #27
 800137e:	dc07      	bgt.n	8001390 <__aeabi_fsub+0x23c>
 8001380:	2120      	movs	r1, #32
 8001382:	1bc9      	subs	r1, r1, r7
 8001384:	001a      	movs	r2, r3
 8001386:	408b      	lsls	r3, r1
 8001388:	40fa      	lsrs	r2, r7
 800138a:	1e59      	subs	r1, r3, #1
 800138c:	418b      	sbcs	r3, r1
 800138e:	431a      	orrs	r2, r3
 8001390:	0005      	movs	r5, r0
 8001392:	1ab3      	subs	r3, r6, r2
 8001394:	e743      	b.n	800121e <__aeabi_fsub+0xca>
 8001396:	2d00      	cmp	r5, #0
 8001398:	d123      	bne.n	80013e2 <__aeabi_fsub+0x28e>
 800139a:	22ff      	movs	r2, #255	@ 0xff
 800139c:	2b00      	cmp	r3, #0
 800139e:	d09b      	beq.n	80012d8 <__aeabi_fsub+0x184>
 80013a0:	1e51      	subs	r1, r2, #1
 80013a2:	2a01      	cmp	r2, #1
 80013a4:	d0d6      	beq.n	8001354 <__aeabi_fsub+0x200>
 80013a6:	2aff      	cmp	r2, #255	@ 0xff
 80013a8:	d01b      	beq.n	80013e2 <__aeabi_fsub+0x28e>
 80013aa:	291b      	cmp	r1, #27
 80013ac:	dd2c      	ble.n	8001408 <__aeabi_fsub+0x2b4>
 80013ae:	0002      	movs	r2, r0
 80013b0:	1c73      	adds	r3, r6, #1
 80013b2:	e73a      	b.n	800122a <__aeabi_fsub+0xd6>
 80013b4:	2aff      	cmp	r2, #255	@ 0xff
 80013b6:	d088      	beq.n	80012ca <__aeabi_fsub+0x176>
 80013b8:	199b      	adds	r3, r3, r6
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	0759      	lsls	r1, r3, #29
 80013be:	d000      	beq.n	80013c2 <__aeabi_fsub+0x26e>
 80013c0:	e733      	b.n	800122a <__aeabi_fsub+0xd6>
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	e76e      	b.n	80012a4 <__aeabi_fsub+0x150>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d110      	bne.n	80013ec <__aeabi_fsub+0x298>
 80013ca:	2e00      	cmp	r6, #0
 80013cc:	d043      	beq.n	8001456 <__aeabi_fsub+0x302>
 80013ce:	2401      	movs	r4, #1
 80013d0:	0033      	movs	r3, r6
 80013d2:	400c      	ands	r4, r1
 80013d4:	e706      	b.n	80011e4 <__aeabi_fsub+0x90>
 80013d6:	2401      	movs	r4, #1
 80013d8:	1af7      	subs	r7, r6, r3
 80013da:	400c      	ands	r4, r1
 80013dc:	e784      	b.n	80012e8 <__aeabi_fsub+0x194>
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d104      	bne.n	80013ec <__aeabi_fsub+0x298>
 80013e2:	0033      	movs	r3, r6
 80013e4:	e6fe      	b.n	80011e4 <__aeabi_fsub+0x90>
 80013e6:	2501      	movs	r5, #1
 80013e8:	1b9b      	subs	r3, r3, r6
 80013ea:	e718      	b.n	800121e <__aeabi_fsub+0xca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d100      	bne.n	80013f2 <__aeabi_fsub+0x29e>
 80013f0:	e6f8      	b.n	80011e4 <__aeabi_fsub+0x90>
 80013f2:	2280      	movs	r2, #128	@ 0x80
 80013f4:	03d2      	lsls	r2, r2, #15
 80013f6:	4297      	cmp	r7, r2
 80013f8:	d304      	bcc.n	8001404 <__aeabi_fsub+0x2b0>
 80013fa:	4594      	cmp	ip, r2
 80013fc:	d202      	bcs.n	8001404 <__aeabi_fsub+0x2b0>
 80013fe:	2401      	movs	r4, #1
 8001400:	0033      	movs	r3, r6
 8001402:	400c      	ands	r4, r1
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	e6f1      	b.n	80011ec <__aeabi_fsub+0x98>
 8001408:	001a      	movs	r2, r3
 800140a:	2520      	movs	r5, #32
 800140c:	40ca      	lsrs	r2, r1
 800140e:	1a69      	subs	r1, r5, r1
 8001410:	408b      	lsls	r3, r1
 8001412:	1e59      	subs	r1, r3, #1
 8001414:	418b      	sbcs	r3, r1
 8001416:	4313      	orrs	r3, r2
 8001418:	0005      	movs	r5, r0
 800141a:	199b      	adds	r3, r3, r6
 800141c:	e750      	b.n	80012c0 <__aeabi_fsub+0x16c>
 800141e:	2e00      	cmp	r6, #0
 8001420:	d094      	beq.n	800134c <__aeabi_fsub+0x1f8>
 8001422:	2401      	movs	r4, #1
 8001424:	0033      	movs	r3, r6
 8001426:	400c      	ands	r4, r1
 8001428:	e73a      	b.n	80012a0 <__aeabi_fsub+0x14c>
 800142a:	000c      	movs	r4, r1
 800142c:	2501      	movs	r5, #1
 800142e:	1af3      	subs	r3, r6, r3
 8001430:	e6f5      	b.n	800121e <__aeabi_fsub+0xca>
 8001432:	0033      	movs	r3, r6
 8001434:	e734      	b.n	80012a0 <__aeabi_fsub+0x14c>
 8001436:	199b      	adds	r3, r3, r6
 8001438:	2200      	movs	r2, #0
 800143a:	0159      	lsls	r1, r3, #5
 800143c:	d5c1      	bpl.n	80013c2 <__aeabi_fsub+0x26e>
 800143e:	4a15      	ldr	r2, [pc, #84]	@ (8001494 <__aeabi_fsub+0x340>)
 8001440:	4013      	ands	r3, r2
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	2201      	movs	r2, #1
 8001446:	e72d      	b.n	80012a4 <__aeabi_fsub+0x150>
 8001448:	2a00      	cmp	r2, #0
 800144a:	d100      	bne.n	800144e <__aeabi_fsub+0x2fa>
 800144c:	e77e      	b.n	800134c <__aeabi_fsub+0x1f8>
 800144e:	0013      	movs	r3, r2
 8001450:	2200      	movs	r2, #0
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	e726      	b.n	80012a4 <__aeabi_fsub+0x150>
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	2400      	movs	r4, #0
 800145a:	20ff      	movs	r0, #255	@ 0xff
 800145c:	03db      	lsls	r3, r3, #15
 800145e:	e6f1      	b.n	8001244 <__aeabi_fsub+0xf0>
 8001460:	2a00      	cmp	r2, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x312>
 8001464:	e756      	b.n	8001314 <__aeabi_fsub+0x1c0>
 8001466:	1b47      	subs	r7, r0, r5
 8001468:	003a      	movs	r2, r7
 800146a:	2d00      	cmp	r5, #0
 800146c:	d100      	bne.n	8001470 <__aeabi_fsub+0x31c>
 800146e:	e730      	b.n	80012d2 <__aeabi_fsub+0x17e>
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	04d2      	lsls	r2, r2, #19
 8001474:	000c      	movs	r4, r1
 8001476:	4313      	orrs	r3, r2
 8001478:	e77f      	b.n	800137a <__aeabi_fsub+0x226>
 800147a:	2a00      	cmp	r2, #0
 800147c:	d100      	bne.n	8001480 <__aeabi_fsub+0x32c>
 800147e:	e701      	b.n	8001284 <__aeabi_fsub+0x130>
 8001480:	1b41      	subs	r1, r0, r5
 8001482:	2d00      	cmp	r5, #0
 8001484:	d101      	bne.n	800148a <__aeabi_fsub+0x336>
 8001486:	000a      	movs	r2, r1
 8001488:	e788      	b.n	800139c <__aeabi_fsub+0x248>
 800148a:	2280      	movs	r2, #128	@ 0x80
 800148c:	04d2      	lsls	r2, r2, #19
 800148e:	4313      	orrs	r3, r2
 8001490:	e78b      	b.n	80013aa <__aeabi_fsub+0x256>
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	fbffffff 	.word	0xfbffffff
 8001498:	7dffffff 	.word	0x7dffffff

0800149c <__aeabi_f2iz>:
 800149c:	0241      	lsls	r1, r0, #9
 800149e:	0042      	lsls	r2, r0, #1
 80014a0:	0fc3      	lsrs	r3, r0, #31
 80014a2:	0a49      	lsrs	r1, r1, #9
 80014a4:	2000      	movs	r0, #0
 80014a6:	0e12      	lsrs	r2, r2, #24
 80014a8:	2a7e      	cmp	r2, #126	@ 0x7e
 80014aa:	dd03      	ble.n	80014b4 <__aeabi_f2iz+0x18>
 80014ac:	2a9d      	cmp	r2, #157	@ 0x9d
 80014ae:	dd02      	ble.n	80014b6 <__aeabi_f2iz+0x1a>
 80014b0:	4a09      	ldr	r2, [pc, #36]	@ (80014d8 <__aeabi_f2iz+0x3c>)
 80014b2:	1898      	adds	r0, r3, r2
 80014b4:	4770      	bx	lr
 80014b6:	2080      	movs	r0, #128	@ 0x80
 80014b8:	0400      	lsls	r0, r0, #16
 80014ba:	4301      	orrs	r1, r0
 80014bc:	2a95      	cmp	r2, #149	@ 0x95
 80014be:	dc07      	bgt.n	80014d0 <__aeabi_f2iz+0x34>
 80014c0:	2096      	movs	r0, #150	@ 0x96
 80014c2:	1a82      	subs	r2, r0, r2
 80014c4:	40d1      	lsrs	r1, r2
 80014c6:	4248      	negs	r0, r1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f3      	bne.n	80014b4 <__aeabi_f2iz+0x18>
 80014cc:	0008      	movs	r0, r1
 80014ce:	e7f1      	b.n	80014b4 <__aeabi_f2iz+0x18>
 80014d0:	3a96      	subs	r2, #150	@ 0x96
 80014d2:	4091      	lsls	r1, r2
 80014d4:	e7f7      	b.n	80014c6 <__aeabi_f2iz+0x2a>
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	7fffffff 	.word	0x7fffffff

080014dc <__aeabi_i2f>:
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	2800      	cmp	r0, #0
 80014e0:	d013      	beq.n	800150a <__aeabi_i2f+0x2e>
 80014e2:	17c3      	asrs	r3, r0, #31
 80014e4:	18c5      	adds	r5, r0, r3
 80014e6:	405d      	eors	r5, r3
 80014e8:	0fc4      	lsrs	r4, r0, #31
 80014ea:	0028      	movs	r0, r5
 80014ec:	f002 f80c 	bl	8003508 <__clzsi2>
 80014f0:	239e      	movs	r3, #158	@ 0x9e
 80014f2:	0001      	movs	r1, r0
 80014f4:	1a1b      	subs	r3, r3, r0
 80014f6:	2b96      	cmp	r3, #150	@ 0x96
 80014f8:	dc0f      	bgt.n	800151a <__aeabi_i2f+0x3e>
 80014fa:	2808      	cmp	r0, #8
 80014fc:	d034      	beq.n	8001568 <__aeabi_i2f+0x8c>
 80014fe:	3908      	subs	r1, #8
 8001500:	408d      	lsls	r5, r1
 8001502:	026d      	lsls	r5, r5, #9
 8001504:	0a6d      	lsrs	r5, r5, #9
 8001506:	b2d8      	uxtb	r0, r3
 8001508:	e002      	b.n	8001510 <__aeabi_i2f+0x34>
 800150a:	2400      	movs	r4, #0
 800150c:	2000      	movs	r0, #0
 800150e:	2500      	movs	r5, #0
 8001510:	05c0      	lsls	r0, r0, #23
 8001512:	4328      	orrs	r0, r5
 8001514:	07e4      	lsls	r4, r4, #31
 8001516:	4320      	orrs	r0, r4
 8001518:	bd70      	pop	{r4, r5, r6, pc}
 800151a:	2b99      	cmp	r3, #153	@ 0x99
 800151c:	dc16      	bgt.n	800154c <__aeabi_i2f+0x70>
 800151e:	1f42      	subs	r2, r0, #5
 8001520:	2805      	cmp	r0, #5
 8001522:	d000      	beq.n	8001526 <__aeabi_i2f+0x4a>
 8001524:	4095      	lsls	r5, r2
 8001526:	002a      	movs	r2, r5
 8001528:	4811      	ldr	r0, [pc, #68]	@ (8001570 <__aeabi_i2f+0x94>)
 800152a:	4002      	ands	r2, r0
 800152c:	076e      	lsls	r6, r5, #29
 800152e:	d009      	beq.n	8001544 <__aeabi_i2f+0x68>
 8001530:	260f      	movs	r6, #15
 8001532:	4035      	ands	r5, r6
 8001534:	2d04      	cmp	r5, #4
 8001536:	d005      	beq.n	8001544 <__aeabi_i2f+0x68>
 8001538:	3204      	adds	r2, #4
 800153a:	0155      	lsls	r5, r2, #5
 800153c:	d502      	bpl.n	8001544 <__aeabi_i2f+0x68>
 800153e:	239f      	movs	r3, #159	@ 0x9f
 8001540:	4002      	ands	r2, r0
 8001542:	1a5b      	subs	r3, r3, r1
 8001544:	0192      	lsls	r2, r2, #6
 8001546:	0a55      	lsrs	r5, r2, #9
 8001548:	b2d8      	uxtb	r0, r3
 800154a:	e7e1      	b.n	8001510 <__aeabi_i2f+0x34>
 800154c:	2205      	movs	r2, #5
 800154e:	1a12      	subs	r2, r2, r0
 8001550:	0028      	movs	r0, r5
 8001552:	40d0      	lsrs	r0, r2
 8001554:	0002      	movs	r2, r0
 8001556:	0008      	movs	r0, r1
 8001558:	301b      	adds	r0, #27
 800155a:	4085      	lsls	r5, r0
 800155c:	0028      	movs	r0, r5
 800155e:	1e45      	subs	r5, r0, #1
 8001560:	41a8      	sbcs	r0, r5
 8001562:	4302      	orrs	r2, r0
 8001564:	0015      	movs	r5, r2
 8001566:	e7de      	b.n	8001526 <__aeabi_i2f+0x4a>
 8001568:	026d      	lsls	r5, r5, #9
 800156a:	2096      	movs	r0, #150	@ 0x96
 800156c:	0a6d      	lsrs	r5, r5, #9
 800156e:	e7cf      	b.n	8001510 <__aeabi_i2f+0x34>
 8001570:	fbffffff 	.word	0xfbffffff

08001574 <__aeabi_ui2f>:
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	1e04      	subs	r4, r0, #0
 8001578:	d00e      	beq.n	8001598 <__aeabi_ui2f+0x24>
 800157a:	f001 ffc5 	bl	8003508 <__clzsi2>
 800157e:	239e      	movs	r3, #158	@ 0x9e
 8001580:	0001      	movs	r1, r0
 8001582:	1a1b      	subs	r3, r3, r0
 8001584:	2b96      	cmp	r3, #150	@ 0x96
 8001586:	dc0c      	bgt.n	80015a2 <__aeabi_ui2f+0x2e>
 8001588:	2808      	cmp	r0, #8
 800158a:	d02f      	beq.n	80015ec <__aeabi_ui2f+0x78>
 800158c:	3908      	subs	r1, #8
 800158e:	408c      	lsls	r4, r1
 8001590:	0264      	lsls	r4, r4, #9
 8001592:	0a64      	lsrs	r4, r4, #9
 8001594:	b2d8      	uxtb	r0, r3
 8001596:	e001      	b.n	800159c <__aeabi_ui2f+0x28>
 8001598:	2000      	movs	r0, #0
 800159a:	2400      	movs	r4, #0
 800159c:	05c0      	lsls	r0, r0, #23
 800159e:	4320      	orrs	r0, r4
 80015a0:	bd70      	pop	{r4, r5, r6, pc}
 80015a2:	2b99      	cmp	r3, #153	@ 0x99
 80015a4:	dc16      	bgt.n	80015d4 <__aeabi_ui2f+0x60>
 80015a6:	1f42      	subs	r2, r0, #5
 80015a8:	2805      	cmp	r0, #5
 80015aa:	d000      	beq.n	80015ae <__aeabi_ui2f+0x3a>
 80015ac:	4094      	lsls	r4, r2
 80015ae:	0022      	movs	r2, r4
 80015b0:	4810      	ldr	r0, [pc, #64]	@ (80015f4 <__aeabi_ui2f+0x80>)
 80015b2:	4002      	ands	r2, r0
 80015b4:	0765      	lsls	r5, r4, #29
 80015b6:	d009      	beq.n	80015cc <__aeabi_ui2f+0x58>
 80015b8:	250f      	movs	r5, #15
 80015ba:	402c      	ands	r4, r5
 80015bc:	2c04      	cmp	r4, #4
 80015be:	d005      	beq.n	80015cc <__aeabi_ui2f+0x58>
 80015c0:	3204      	adds	r2, #4
 80015c2:	0154      	lsls	r4, r2, #5
 80015c4:	d502      	bpl.n	80015cc <__aeabi_ui2f+0x58>
 80015c6:	239f      	movs	r3, #159	@ 0x9f
 80015c8:	4002      	ands	r2, r0
 80015ca:	1a5b      	subs	r3, r3, r1
 80015cc:	0192      	lsls	r2, r2, #6
 80015ce:	0a54      	lsrs	r4, r2, #9
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	e7e3      	b.n	800159c <__aeabi_ui2f+0x28>
 80015d4:	0002      	movs	r2, r0
 80015d6:	0020      	movs	r0, r4
 80015d8:	321b      	adds	r2, #27
 80015da:	4090      	lsls	r0, r2
 80015dc:	0002      	movs	r2, r0
 80015de:	1e50      	subs	r0, r2, #1
 80015e0:	4182      	sbcs	r2, r0
 80015e2:	2005      	movs	r0, #5
 80015e4:	1a40      	subs	r0, r0, r1
 80015e6:	40c4      	lsrs	r4, r0
 80015e8:	4314      	orrs	r4, r2
 80015ea:	e7e0      	b.n	80015ae <__aeabi_ui2f+0x3a>
 80015ec:	0264      	lsls	r4, r4, #9
 80015ee:	2096      	movs	r0, #150	@ 0x96
 80015f0:	0a64      	lsrs	r4, r4, #9
 80015f2:	e7d3      	b.n	800159c <__aeabi_ui2f+0x28>
 80015f4:	fbffffff 	.word	0xfbffffff

080015f8 <__aeabi_dadd>:
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	4657      	mov	r7, sl
 80015fc:	464e      	mov	r6, r9
 80015fe:	4645      	mov	r5, r8
 8001600:	46de      	mov	lr, fp
 8001602:	b5e0      	push	{r5, r6, r7, lr}
 8001604:	b083      	sub	sp, #12
 8001606:	9000      	str	r0, [sp, #0]
 8001608:	9101      	str	r1, [sp, #4]
 800160a:	030c      	lsls	r4, r1, #12
 800160c:	004f      	lsls	r7, r1, #1
 800160e:	0fce      	lsrs	r6, r1, #31
 8001610:	0a61      	lsrs	r1, r4, #9
 8001612:	9c00      	ldr	r4, [sp, #0]
 8001614:	031d      	lsls	r5, r3, #12
 8001616:	0f64      	lsrs	r4, r4, #29
 8001618:	430c      	orrs	r4, r1
 800161a:	9900      	ldr	r1, [sp, #0]
 800161c:	9200      	str	r2, [sp, #0]
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	00c8      	lsls	r0, r1, #3
 8001622:	0059      	lsls	r1, r3, #1
 8001624:	0d4b      	lsrs	r3, r1, #21
 8001626:	4699      	mov	r9, r3
 8001628:	9a00      	ldr	r2, [sp, #0]
 800162a:	9b01      	ldr	r3, [sp, #4]
 800162c:	0a6d      	lsrs	r5, r5, #9
 800162e:	0fd9      	lsrs	r1, r3, #31
 8001630:	0f53      	lsrs	r3, r2, #29
 8001632:	432b      	orrs	r3, r5
 8001634:	469a      	mov	sl, r3
 8001636:	9b00      	ldr	r3, [sp, #0]
 8001638:	0d7f      	lsrs	r7, r7, #21
 800163a:	00da      	lsls	r2, r3, #3
 800163c:	4694      	mov	ip, r2
 800163e:	464a      	mov	r2, r9
 8001640:	46b0      	mov	r8, r6
 8001642:	1aba      	subs	r2, r7, r2
 8001644:	428e      	cmp	r6, r1
 8001646:	d100      	bne.n	800164a <__aeabi_dadd+0x52>
 8001648:	e0b0      	b.n	80017ac <__aeabi_dadd+0x1b4>
 800164a:	2a00      	cmp	r2, #0
 800164c:	dc00      	bgt.n	8001650 <__aeabi_dadd+0x58>
 800164e:	e078      	b.n	8001742 <__aeabi_dadd+0x14a>
 8001650:	4649      	mov	r1, r9
 8001652:	2900      	cmp	r1, #0
 8001654:	d100      	bne.n	8001658 <__aeabi_dadd+0x60>
 8001656:	e0e9      	b.n	800182c <__aeabi_dadd+0x234>
 8001658:	49c9      	ldr	r1, [pc, #804]	@ (8001980 <__aeabi_dadd+0x388>)
 800165a:	428f      	cmp	r7, r1
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0x68>
 800165e:	e195      	b.n	800198c <__aeabi_dadd+0x394>
 8001660:	2501      	movs	r5, #1
 8001662:	2a38      	cmp	r2, #56	@ 0x38
 8001664:	dc16      	bgt.n	8001694 <__aeabi_dadd+0x9c>
 8001666:	2180      	movs	r1, #128	@ 0x80
 8001668:	4653      	mov	r3, sl
 800166a:	0409      	lsls	r1, r1, #16
 800166c:	430b      	orrs	r3, r1
 800166e:	469a      	mov	sl, r3
 8001670:	2a1f      	cmp	r2, #31
 8001672:	dd00      	ble.n	8001676 <__aeabi_dadd+0x7e>
 8001674:	e1e7      	b.n	8001a46 <__aeabi_dadd+0x44e>
 8001676:	2120      	movs	r1, #32
 8001678:	4655      	mov	r5, sl
 800167a:	1a8b      	subs	r3, r1, r2
 800167c:	4661      	mov	r1, ip
 800167e:	409d      	lsls	r5, r3
 8001680:	40d1      	lsrs	r1, r2
 8001682:	430d      	orrs	r5, r1
 8001684:	4661      	mov	r1, ip
 8001686:	4099      	lsls	r1, r3
 8001688:	1e4b      	subs	r3, r1, #1
 800168a:	4199      	sbcs	r1, r3
 800168c:	4653      	mov	r3, sl
 800168e:	40d3      	lsrs	r3, r2
 8001690:	430d      	orrs	r5, r1
 8001692:	1ae4      	subs	r4, r4, r3
 8001694:	1b45      	subs	r5, r0, r5
 8001696:	42a8      	cmp	r0, r5
 8001698:	4180      	sbcs	r0, r0
 800169a:	4240      	negs	r0, r0
 800169c:	1a24      	subs	r4, r4, r0
 800169e:	0223      	lsls	r3, r4, #8
 80016a0:	d400      	bmi.n	80016a4 <__aeabi_dadd+0xac>
 80016a2:	e10f      	b.n	80018c4 <__aeabi_dadd+0x2cc>
 80016a4:	0264      	lsls	r4, r4, #9
 80016a6:	0a64      	lsrs	r4, r4, #9
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d100      	bne.n	80016ae <__aeabi_dadd+0xb6>
 80016ac:	e139      	b.n	8001922 <__aeabi_dadd+0x32a>
 80016ae:	0020      	movs	r0, r4
 80016b0:	f001 ff2a 	bl	8003508 <__clzsi2>
 80016b4:	0003      	movs	r3, r0
 80016b6:	3b08      	subs	r3, #8
 80016b8:	2120      	movs	r1, #32
 80016ba:	0028      	movs	r0, r5
 80016bc:	1aca      	subs	r2, r1, r3
 80016be:	40d0      	lsrs	r0, r2
 80016c0:	409c      	lsls	r4, r3
 80016c2:	0002      	movs	r2, r0
 80016c4:	409d      	lsls	r5, r3
 80016c6:	4322      	orrs	r2, r4
 80016c8:	429f      	cmp	r7, r3
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dadd+0xd6>
 80016cc:	e173      	b.n	80019b6 <__aeabi_dadd+0x3be>
 80016ce:	1bd8      	subs	r0, r3, r7
 80016d0:	3001      	adds	r0, #1
 80016d2:	1a09      	subs	r1, r1, r0
 80016d4:	002c      	movs	r4, r5
 80016d6:	408d      	lsls	r5, r1
 80016d8:	40c4      	lsrs	r4, r0
 80016da:	1e6b      	subs	r3, r5, #1
 80016dc:	419d      	sbcs	r5, r3
 80016de:	0013      	movs	r3, r2
 80016e0:	40c2      	lsrs	r2, r0
 80016e2:	408b      	lsls	r3, r1
 80016e4:	4325      	orrs	r5, r4
 80016e6:	2700      	movs	r7, #0
 80016e8:	0014      	movs	r4, r2
 80016ea:	431d      	orrs	r5, r3
 80016ec:	076b      	lsls	r3, r5, #29
 80016ee:	d009      	beq.n	8001704 <__aeabi_dadd+0x10c>
 80016f0:	230f      	movs	r3, #15
 80016f2:	402b      	ands	r3, r5
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d005      	beq.n	8001704 <__aeabi_dadd+0x10c>
 80016f8:	1d2b      	adds	r3, r5, #4
 80016fa:	42ab      	cmp	r3, r5
 80016fc:	41ad      	sbcs	r5, r5
 80016fe:	426d      	negs	r5, r5
 8001700:	1964      	adds	r4, r4, r5
 8001702:	001d      	movs	r5, r3
 8001704:	0223      	lsls	r3, r4, #8
 8001706:	d400      	bmi.n	800170a <__aeabi_dadd+0x112>
 8001708:	e12d      	b.n	8001966 <__aeabi_dadd+0x36e>
 800170a:	4a9d      	ldr	r2, [pc, #628]	@ (8001980 <__aeabi_dadd+0x388>)
 800170c:	3701      	adds	r7, #1
 800170e:	4297      	cmp	r7, r2
 8001710:	d100      	bne.n	8001714 <__aeabi_dadd+0x11c>
 8001712:	e0d3      	b.n	80018bc <__aeabi_dadd+0x2c4>
 8001714:	4646      	mov	r6, r8
 8001716:	499b      	ldr	r1, [pc, #620]	@ (8001984 <__aeabi_dadd+0x38c>)
 8001718:	08ed      	lsrs	r5, r5, #3
 800171a:	4021      	ands	r1, r4
 800171c:	074a      	lsls	r2, r1, #29
 800171e:	432a      	orrs	r2, r5
 8001720:	057c      	lsls	r4, r7, #21
 8001722:	024d      	lsls	r5, r1, #9
 8001724:	0b2d      	lsrs	r5, r5, #12
 8001726:	0d64      	lsrs	r4, r4, #21
 8001728:	0524      	lsls	r4, r4, #20
 800172a:	432c      	orrs	r4, r5
 800172c:	07f6      	lsls	r6, r6, #31
 800172e:	4334      	orrs	r4, r6
 8001730:	0010      	movs	r0, r2
 8001732:	0021      	movs	r1, r4
 8001734:	b003      	add	sp, #12
 8001736:	bcf0      	pop	{r4, r5, r6, r7}
 8001738:	46bb      	mov	fp, r7
 800173a:	46b2      	mov	sl, r6
 800173c:	46a9      	mov	r9, r5
 800173e:	46a0      	mov	r8, r4
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001742:	2a00      	cmp	r2, #0
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x150>
 8001746:	e084      	b.n	8001852 <__aeabi_dadd+0x25a>
 8001748:	464a      	mov	r2, r9
 800174a:	1bd2      	subs	r2, r2, r7
 800174c:	2f00      	cmp	r7, #0
 800174e:	d000      	beq.n	8001752 <__aeabi_dadd+0x15a>
 8001750:	e16d      	b.n	8001a2e <__aeabi_dadd+0x436>
 8001752:	0025      	movs	r5, r4
 8001754:	4305      	orrs	r5, r0
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x162>
 8001758:	e127      	b.n	80019aa <__aeabi_dadd+0x3b2>
 800175a:	1e56      	subs	r6, r2, #1
 800175c:	2a01      	cmp	r2, #1
 800175e:	d100      	bne.n	8001762 <__aeabi_dadd+0x16a>
 8001760:	e23b      	b.n	8001bda <__aeabi_dadd+0x5e2>
 8001762:	4d87      	ldr	r5, [pc, #540]	@ (8001980 <__aeabi_dadd+0x388>)
 8001764:	42aa      	cmp	r2, r5
 8001766:	d100      	bne.n	800176a <__aeabi_dadd+0x172>
 8001768:	e26a      	b.n	8001c40 <__aeabi_dadd+0x648>
 800176a:	2501      	movs	r5, #1
 800176c:	2e38      	cmp	r6, #56	@ 0x38
 800176e:	dc12      	bgt.n	8001796 <__aeabi_dadd+0x19e>
 8001770:	0032      	movs	r2, r6
 8001772:	2a1f      	cmp	r2, #31
 8001774:	dd00      	ble.n	8001778 <__aeabi_dadd+0x180>
 8001776:	e1f8      	b.n	8001b6a <__aeabi_dadd+0x572>
 8001778:	2620      	movs	r6, #32
 800177a:	0025      	movs	r5, r4
 800177c:	1ab6      	subs	r6, r6, r2
 800177e:	0007      	movs	r7, r0
 8001780:	4653      	mov	r3, sl
 8001782:	40b0      	lsls	r0, r6
 8001784:	40d4      	lsrs	r4, r2
 8001786:	40b5      	lsls	r5, r6
 8001788:	40d7      	lsrs	r7, r2
 800178a:	1e46      	subs	r6, r0, #1
 800178c:	41b0      	sbcs	r0, r6
 800178e:	1b1b      	subs	r3, r3, r4
 8001790:	469a      	mov	sl, r3
 8001792:	433d      	orrs	r5, r7
 8001794:	4305      	orrs	r5, r0
 8001796:	4662      	mov	r2, ip
 8001798:	1b55      	subs	r5, r2, r5
 800179a:	45ac      	cmp	ip, r5
 800179c:	4192      	sbcs	r2, r2
 800179e:	4653      	mov	r3, sl
 80017a0:	4252      	negs	r2, r2
 80017a2:	000e      	movs	r6, r1
 80017a4:	464f      	mov	r7, r9
 80017a6:	4688      	mov	r8, r1
 80017a8:	1a9c      	subs	r4, r3, r2
 80017aa:	e778      	b.n	800169e <__aeabi_dadd+0xa6>
 80017ac:	2a00      	cmp	r2, #0
 80017ae:	dc00      	bgt.n	80017b2 <__aeabi_dadd+0x1ba>
 80017b0:	e08e      	b.n	80018d0 <__aeabi_dadd+0x2d8>
 80017b2:	4649      	mov	r1, r9
 80017b4:	2900      	cmp	r1, #0
 80017b6:	d175      	bne.n	80018a4 <__aeabi_dadd+0x2ac>
 80017b8:	4661      	mov	r1, ip
 80017ba:	4653      	mov	r3, sl
 80017bc:	4319      	orrs	r1, r3
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1ca>
 80017c0:	e0f6      	b.n	80019b0 <__aeabi_dadd+0x3b8>
 80017c2:	1e51      	subs	r1, r2, #1
 80017c4:	2a01      	cmp	r2, #1
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x1d2>
 80017c8:	e191      	b.n	8001aee <__aeabi_dadd+0x4f6>
 80017ca:	4d6d      	ldr	r5, [pc, #436]	@ (8001980 <__aeabi_dadd+0x388>)
 80017cc:	42aa      	cmp	r2, r5
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dadd+0x1da>
 80017d0:	e0dc      	b.n	800198c <__aeabi_dadd+0x394>
 80017d2:	2501      	movs	r5, #1
 80017d4:	2938      	cmp	r1, #56	@ 0x38
 80017d6:	dc14      	bgt.n	8001802 <__aeabi_dadd+0x20a>
 80017d8:	000a      	movs	r2, r1
 80017da:	2a1f      	cmp	r2, #31
 80017dc:	dd00      	ble.n	80017e0 <__aeabi_dadd+0x1e8>
 80017de:	e1a2      	b.n	8001b26 <__aeabi_dadd+0x52e>
 80017e0:	2120      	movs	r1, #32
 80017e2:	4653      	mov	r3, sl
 80017e4:	1a89      	subs	r1, r1, r2
 80017e6:	408b      	lsls	r3, r1
 80017e8:	001d      	movs	r5, r3
 80017ea:	4663      	mov	r3, ip
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	431d      	orrs	r5, r3
 80017f0:	4663      	mov	r3, ip
 80017f2:	408b      	lsls	r3, r1
 80017f4:	0019      	movs	r1, r3
 80017f6:	1e4b      	subs	r3, r1, #1
 80017f8:	4199      	sbcs	r1, r3
 80017fa:	4653      	mov	r3, sl
 80017fc:	40d3      	lsrs	r3, r2
 80017fe:	430d      	orrs	r5, r1
 8001800:	18e4      	adds	r4, r4, r3
 8001802:	182d      	adds	r5, r5, r0
 8001804:	4285      	cmp	r5, r0
 8001806:	4180      	sbcs	r0, r0
 8001808:	4240      	negs	r0, r0
 800180a:	1824      	adds	r4, r4, r0
 800180c:	0223      	lsls	r3, r4, #8
 800180e:	d559      	bpl.n	80018c4 <__aeabi_dadd+0x2cc>
 8001810:	4b5b      	ldr	r3, [pc, #364]	@ (8001980 <__aeabi_dadd+0x388>)
 8001812:	3701      	adds	r7, #1
 8001814:	429f      	cmp	r7, r3
 8001816:	d051      	beq.n	80018bc <__aeabi_dadd+0x2c4>
 8001818:	2101      	movs	r1, #1
 800181a:	4b5a      	ldr	r3, [pc, #360]	@ (8001984 <__aeabi_dadd+0x38c>)
 800181c:	086a      	lsrs	r2, r5, #1
 800181e:	401c      	ands	r4, r3
 8001820:	4029      	ands	r1, r5
 8001822:	430a      	orrs	r2, r1
 8001824:	07e5      	lsls	r5, r4, #31
 8001826:	4315      	orrs	r5, r2
 8001828:	0864      	lsrs	r4, r4, #1
 800182a:	e75f      	b.n	80016ec <__aeabi_dadd+0xf4>
 800182c:	4661      	mov	r1, ip
 800182e:	4653      	mov	r3, sl
 8001830:	4319      	orrs	r1, r3
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x23e>
 8001834:	e0bc      	b.n	80019b0 <__aeabi_dadd+0x3b8>
 8001836:	1e51      	subs	r1, r2, #1
 8001838:	2a01      	cmp	r2, #1
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x246>
 800183c:	e164      	b.n	8001b08 <__aeabi_dadd+0x510>
 800183e:	4d50      	ldr	r5, [pc, #320]	@ (8001980 <__aeabi_dadd+0x388>)
 8001840:	42aa      	cmp	r2, r5
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x24e>
 8001844:	e16a      	b.n	8001b1c <__aeabi_dadd+0x524>
 8001846:	2501      	movs	r5, #1
 8001848:	2938      	cmp	r1, #56	@ 0x38
 800184a:	dd00      	ble.n	800184e <__aeabi_dadd+0x256>
 800184c:	e722      	b.n	8001694 <__aeabi_dadd+0x9c>
 800184e:	000a      	movs	r2, r1
 8001850:	e70e      	b.n	8001670 <__aeabi_dadd+0x78>
 8001852:	4a4d      	ldr	r2, [pc, #308]	@ (8001988 <__aeabi_dadd+0x390>)
 8001854:	1c7d      	adds	r5, r7, #1
 8001856:	4215      	tst	r5, r2
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x264>
 800185a:	e0d0      	b.n	80019fe <__aeabi_dadd+0x406>
 800185c:	0025      	movs	r5, r4
 800185e:	4662      	mov	r2, ip
 8001860:	4653      	mov	r3, sl
 8001862:	4305      	orrs	r5, r0
 8001864:	431a      	orrs	r2, r3
 8001866:	2f00      	cmp	r7, #0
 8001868:	d000      	beq.n	800186c <__aeabi_dadd+0x274>
 800186a:	e137      	b.n	8001adc <__aeabi_dadd+0x4e4>
 800186c:	2d00      	cmp	r5, #0
 800186e:	d100      	bne.n	8001872 <__aeabi_dadd+0x27a>
 8001870:	e1a8      	b.n	8001bc4 <__aeabi_dadd+0x5cc>
 8001872:	2a00      	cmp	r2, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_dadd+0x280>
 8001876:	e16a      	b.n	8001b4e <__aeabi_dadd+0x556>
 8001878:	4663      	mov	r3, ip
 800187a:	1ac5      	subs	r5, r0, r3
 800187c:	4653      	mov	r3, sl
 800187e:	1ae2      	subs	r2, r4, r3
 8001880:	42a8      	cmp	r0, r5
 8001882:	419b      	sbcs	r3, r3
 8001884:	425b      	negs	r3, r3
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	021a      	lsls	r2, r3, #8
 800188a:	d400      	bmi.n	800188e <__aeabi_dadd+0x296>
 800188c:	e203      	b.n	8001c96 <__aeabi_dadd+0x69e>
 800188e:	4663      	mov	r3, ip
 8001890:	1a1d      	subs	r5, r3, r0
 8001892:	45ac      	cmp	ip, r5
 8001894:	4192      	sbcs	r2, r2
 8001896:	4653      	mov	r3, sl
 8001898:	4252      	negs	r2, r2
 800189a:	1b1c      	subs	r4, r3, r4
 800189c:	000e      	movs	r6, r1
 800189e:	4688      	mov	r8, r1
 80018a0:	1aa4      	subs	r4, r4, r2
 80018a2:	e723      	b.n	80016ec <__aeabi_dadd+0xf4>
 80018a4:	4936      	ldr	r1, [pc, #216]	@ (8001980 <__aeabi_dadd+0x388>)
 80018a6:	428f      	cmp	r7, r1
 80018a8:	d070      	beq.n	800198c <__aeabi_dadd+0x394>
 80018aa:	2501      	movs	r5, #1
 80018ac:	2a38      	cmp	r2, #56	@ 0x38
 80018ae:	dca8      	bgt.n	8001802 <__aeabi_dadd+0x20a>
 80018b0:	2180      	movs	r1, #128	@ 0x80
 80018b2:	4653      	mov	r3, sl
 80018b4:	0409      	lsls	r1, r1, #16
 80018b6:	430b      	orrs	r3, r1
 80018b8:	469a      	mov	sl, r3
 80018ba:	e78e      	b.n	80017da <__aeabi_dadd+0x1e2>
 80018bc:	003c      	movs	r4, r7
 80018be:	2500      	movs	r5, #0
 80018c0:	2200      	movs	r2, #0
 80018c2:	e731      	b.n	8001728 <__aeabi_dadd+0x130>
 80018c4:	2307      	movs	r3, #7
 80018c6:	402b      	ands	r3, r5
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d000      	beq.n	80018ce <__aeabi_dadd+0x2d6>
 80018cc:	e710      	b.n	80016f0 <__aeabi_dadd+0xf8>
 80018ce:	e093      	b.n	80019f8 <__aeabi_dadd+0x400>
 80018d0:	2a00      	cmp	r2, #0
 80018d2:	d074      	beq.n	80019be <__aeabi_dadd+0x3c6>
 80018d4:	464a      	mov	r2, r9
 80018d6:	1bd2      	subs	r2, r2, r7
 80018d8:	2f00      	cmp	r7, #0
 80018da:	d100      	bne.n	80018de <__aeabi_dadd+0x2e6>
 80018dc:	e0c7      	b.n	8001a6e <__aeabi_dadd+0x476>
 80018de:	4928      	ldr	r1, [pc, #160]	@ (8001980 <__aeabi_dadd+0x388>)
 80018e0:	4589      	cmp	r9, r1
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x2ee>
 80018e4:	e185      	b.n	8001bf2 <__aeabi_dadd+0x5fa>
 80018e6:	2501      	movs	r5, #1
 80018e8:	2a38      	cmp	r2, #56	@ 0x38
 80018ea:	dc12      	bgt.n	8001912 <__aeabi_dadd+0x31a>
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	0409      	lsls	r1, r1, #16
 80018f0:	430c      	orrs	r4, r1
 80018f2:	2a1f      	cmp	r2, #31
 80018f4:	dd00      	ble.n	80018f8 <__aeabi_dadd+0x300>
 80018f6:	e1ab      	b.n	8001c50 <__aeabi_dadd+0x658>
 80018f8:	2120      	movs	r1, #32
 80018fa:	0025      	movs	r5, r4
 80018fc:	1a89      	subs	r1, r1, r2
 80018fe:	0007      	movs	r7, r0
 8001900:	4088      	lsls	r0, r1
 8001902:	408d      	lsls	r5, r1
 8001904:	40d7      	lsrs	r7, r2
 8001906:	1e41      	subs	r1, r0, #1
 8001908:	4188      	sbcs	r0, r1
 800190a:	40d4      	lsrs	r4, r2
 800190c:	433d      	orrs	r5, r7
 800190e:	4305      	orrs	r5, r0
 8001910:	44a2      	add	sl, r4
 8001912:	4465      	add	r5, ip
 8001914:	4565      	cmp	r5, ip
 8001916:	4192      	sbcs	r2, r2
 8001918:	4252      	negs	r2, r2
 800191a:	4452      	add	r2, sl
 800191c:	0014      	movs	r4, r2
 800191e:	464f      	mov	r7, r9
 8001920:	e774      	b.n	800180c <__aeabi_dadd+0x214>
 8001922:	0028      	movs	r0, r5
 8001924:	f001 fdf0 	bl	8003508 <__clzsi2>
 8001928:	0003      	movs	r3, r0
 800192a:	3318      	adds	r3, #24
 800192c:	2b1f      	cmp	r3, #31
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dadd+0x33a>
 8001930:	e6c2      	b.n	80016b8 <__aeabi_dadd+0xc0>
 8001932:	002a      	movs	r2, r5
 8001934:	3808      	subs	r0, #8
 8001936:	4082      	lsls	r2, r0
 8001938:	429f      	cmp	r7, r3
 800193a:	dd00      	ble.n	800193e <__aeabi_dadd+0x346>
 800193c:	e0a9      	b.n	8001a92 <__aeabi_dadd+0x49a>
 800193e:	1bdb      	subs	r3, r3, r7
 8001940:	1c58      	adds	r0, r3, #1
 8001942:	281f      	cmp	r0, #31
 8001944:	dc00      	bgt.n	8001948 <__aeabi_dadd+0x350>
 8001946:	e1ac      	b.n	8001ca2 <__aeabi_dadd+0x6aa>
 8001948:	0015      	movs	r5, r2
 800194a:	3b1f      	subs	r3, #31
 800194c:	40dd      	lsrs	r5, r3
 800194e:	2820      	cmp	r0, #32
 8001950:	d005      	beq.n	800195e <__aeabi_dadd+0x366>
 8001952:	2340      	movs	r3, #64	@ 0x40
 8001954:	1a1b      	subs	r3, r3, r0
 8001956:	409a      	lsls	r2, r3
 8001958:	1e53      	subs	r3, r2, #1
 800195a:	419a      	sbcs	r2, r3
 800195c:	4315      	orrs	r5, r2
 800195e:	2307      	movs	r3, #7
 8001960:	2700      	movs	r7, #0
 8001962:	402b      	ands	r3, r5
 8001964:	e7b0      	b.n	80018c8 <__aeabi_dadd+0x2d0>
 8001966:	08ed      	lsrs	r5, r5, #3
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <__aeabi_dadd+0x388>)
 800196a:	0762      	lsls	r2, r4, #29
 800196c:	432a      	orrs	r2, r5
 800196e:	08e4      	lsrs	r4, r4, #3
 8001970:	429f      	cmp	r7, r3
 8001972:	d00f      	beq.n	8001994 <__aeabi_dadd+0x39c>
 8001974:	0324      	lsls	r4, r4, #12
 8001976:	0b25      	lsrs	r5, r4, #12
 8001978:	057c      	lsls	r4, r7, #21
 800197a:	0d64      	lsrs	r4, r4, #21
 800197c:	e6d4      	b.n	8001728 <__aeabi_dadd+0x130>
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	000007ff 	.word	0x000007ff
 8001984:	ff7fffff 	.word	0xff7fffff
 8001988:	000007fe 	.word	0x000007fe
 800198c:	08c0      	lsrs	r0, r0, #3
 800198e:	0762      	lsls	r2, r4, #29
 8001990:	4302      	orrs	r2, r0
 8001992:	08e4      	lsrs	r4, r4, #3
 8001994:	0013      	movs	r3, r2
 8001996:	4323      	orrs	r3, r4
 8001998:	d100      	bne.n	800199c <__aeabi_dadd+0x3a4>
 800199a:	e186      	b.n	8001caa <__aeabi_dadd+0x6b2>
 800199c:	2580      	movs	r5, #128	@ 0x80
 800199e:	032d      	lsls	r5, r5, #12
 80019a0:	4325      	orrs	r5, r4
 80019a2:	032d      	lsls	r5, r5, #12
 80019a4:	4cc3      	ldr	r4, [pc, #780]	@ (8001cb4 <__aeabi_dadd+0x6bc>)
 80019a6:	0b2d      	lsrs	r5, r5, #12
 80019a8:	e6be      	b.n	8001728 <__aeabi_dadd+0x130>
 80019aa:	4660      	mov	r0, ip
 80019ac:	4654      	mov	r4, sl
 80019ae:	000e      	movs	r6, r1
 80019b0:	0017      	movs	r7, r2
 80019b2:	08c5      	lsrs	r5, r0, #3
 80019b4:	e7d8      	b.n	8001968 <__aeabi_dadd+0x370>
 80019b6:	4cc0      	ldr	r4, [pc, #768]	@ (8001cb8 <__aeabi_dadd+0x6c0>)
 80019b8:	1aff      	subs	r7, r7, r3
 80019ba:	4014      	ands	r4, r2
 80019bc:	e696      	b.n	80016ec <__aeabi_dadd+0xf4>
 80019be:	4abf      	ldr	r2, [pc, #764]	@ (8001cbc <__aeabi_dadd+0x6c4>)
 80019c0:	1c79      	adds	r1, r7, #1
 80019c2:	4211      	tst	r1, r2
 80019c4:	d16b      	bne.n	8001a9e <__aeabi_dadd+0x4a6>
 80019c6:	0022      	movs	r2, r4
 80019c8:	4302      	orrs	r2, r0
 80019ca:	2f00      	cmp	r7, #0
 80019cc:	d000      	beq.n	80019d0 <__aeabi_dadd+0x3d8>
 80019ce:	e0db      	b.n	8001b88 <__aeabi_dadd+0x590>
 80019d0:	2a00      	cmp	r2, #0
 80019d2:	d100      	bne.n	80019d6 <__aeabi_dadd+0x3de>
 80019d4:	e12d      	b.n	8001c32 <__aeabi_dadd+0x63a>
 80019d6:	4662      	mov	r2, ip
 80019d8:	4653      	mov	r3, sl
 80019da:	431a      	orrs	r2, r3
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dadd+0x3e8>
 80019de:	e0b6      	b.n	8001b4e <__aeabi_dadd+0x556>
 80019e0:	4663      	mov	r3, ip
 80019e2:	18c5      	adds	r5, r0, r3
 80019e4:	4285      	cmp	r5, r0
 80019e6:	4180      	sbcs	r0, r0
 80019e8:	4454      	add	r4, sl
 80019ea:	4240      	negs	r0, r0
 80019ec:	1824      	adds	r4, r4, r0
 80019ee:	0223      	lsls	r3, r4, #8
 80019f0:	d502      	bpl.n	80019f8 <__aeabi_dadd+0x400>
 80019f2:	000f      	movs	r7, r1
 80019f4:	4bb0      	ldr	r3, [pc, #704]	@ (8001cb8 <__aeabi_dadd+0x6c0>)
 80019f6:	401c      	ands	r4, r3
 80019f8:	003a      	movs	r2, r7
 80019fa:	0028      	movs	r0, r5
 80019fc:	e7d8      	b.n	80019b0 <__aeabi_dadd+0x3b8>
 80019fe:	4662      	mov	r2, ip
 8001a00:	1a85      	subs	r5, r0, r2
 8001a02:	42a8      	cmp	r0, r5
 8001a04:	4192      	sbcs	r2, r2
 8001a06:	4653      	mov	r3, sl
 8001a08:	4252      	negs	r2, r2
 8001a0a:	4691      	mov	r9, r2
 8001a0c:	1ae3      	subs	r3, r4, r3
 8001a0e:	001a      	movs	r2, r3
 8001a10:	464b      	mov	r3, r9
 8001a12:	1ad2      	subs	r2, r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	4691      	mov	r9, r2
 8001a18:	021a      	lsls	r2, r3, #8
 8001a1a:	d454      	bmi.n	8001ac6 <__aeabi_dadd+0x4ce>
 8001a1c:	464a      	mov	r2, r9
 8001a1e:	464c      	mov	r4, r9
 8001a20:	432a      	orrs	r2, r5
 8001a22:	d000      	beq.n	8001a26 <__aeabi_dadd+0x42e>
 8001a24:	e640      	b.n	80016a8 <__aeabi_dadd+0xb0>
 8001a26:	2600      	movs	r6, #0
 8001a28:	2400      	movs	r4, #0
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	e67c      	b.n	8001728 <__aeabi_dadd+0x130>
 8001a2e:	4da1      	ldr	r5, [pc, #644]	@ (8001cb4 <__aeabi_dadd+0x6bc>)
 8001a30:	45a9      	cmp	r9, r5
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dadd+0x43e>
 8001a34:	e090      	b.n	8001b58 <__aeabi_dadd+0x560>
 8001a36:	2501      	movs	r5, #1
 8001a38:	2a38      	cmp	r2, #56	@ 0x38
 8001a3a:	dd00      	ble.n	8001a3e <__aeabi_dadd+0x446>
 8001a3c:	e6ab      	b.n	8001796 <__aeabi_dadd+0x19e>
 8001a3e:	2580      	movs	r5, #128	@ 0x80
 8001a40:	042d      	lsls	r5, r5, #16
 8001a42:	432c      	orrs	r4, r5
 8001a44:	e695      	b.n	8001772 <__aeabi_dadd+0x17a>
 8001a46:	0011      	movs	r1, r2
 8001a48:	4655      	mov	r5, sl
 8001a4a:	3920      	subs	r1, #32
 8001a4c:	40cd      	lsrs	r5, r1
 8001a4e:	46a9      	mov	r9, r5
 8001a50:	2a20      	cmp	r2, #32
 8001a52:	d006      	beq.n	8001a62 <__aeabi_dadd+0x46a>
 8001a54:	2140      	movs	r1, #64	@ 0x40
 8001a56:	4653      	mov	r3, sl
 8001a58:	1a8a      	subs	r2, r1, r2
 8001a5a:	4093      	lsls	r3, r2
 8001a5c:	4662      	mov	r2, ip
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	4694      	mov	ip, r2
 8001a62:	4665      	mov	r5, ip
 8001a64:	1e6b      	subs	r3, r5, #1
 8001a66:	419d      	sbcs	r5, r3
 8001a68:	464b      	mov	r3, r9
 8001a6a:	431d      	orrs	r5, r3
 8001a6c:	e612      	b.n	8001694 <__aeabi_dadd+0x9c>
 8001a6e:	0021      	movs	r1, r4
 8001a70:	4301      	orrs	r1, r0
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x47e>
 8001a74:	e0c4      	b.n	8001c00 <__aeabi_dadd+0x608>
 8001a76:	1e51      	subs	r1, r2, #1
 8001a78:	2a01      	cmp	r2, #1
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_dadd+0x486>
 8001a7c:	e0fb      	b.n	8001c76 <__aeabi_dadd+0x67e>
 8001a7e:	4d8d      	ldr	r5, [pc, #564]	@ (8001cb4 <__aeabi_dadd+0x6bc>)
 8001a80:	42aa      	cmp	r2, r5
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dadd+0x48e>
 8001a84:	e0b5      	b.n	8001bf2 <__aeabi_dadd+0x5fa>
 8001a86:	2501      	movs	r5, #1
 8001a88:	2938      	cmp	r1, #56	@ 0x38
 8001a8a:	dd00      	ble.n	8001a8e <__aeabi_dadd+0x496>
 8001a8c:	e741      	b.n	8001912 <__aeabi_dadd+0x31a>
 8001a8e:	000a      	movs	r2, r1
 8001a90:	e72f      	b.n	80018f2 <__aeabi_dadd+0x2fa>
 8001a92:	4c89      	ldr	r4, [pc, #548]	@ (8001cb8 <__aeabi_dadd+0x6c0>)
 8001a94:	1aff      	subs	r7, r7, r3
 8001a96:	4014      	ands	r4, r2
 8001a98:	0762      	lsls	r2, r4, #29
 8001a9a:	08e4      	lsrs	r4, r4, #3
 8001a9c:	e76a      	b.n	8001974 <__aeabi_dadd+0x37c>
 8001a9e:	4a85      	ldr	r2, [pc, #532]	@ (8001cb4 <__aeabi_dadd+0x6bc>)
 8001aa0:	4291      	cmp	r1, r2
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x4ae>
 8001aa4:	e0e3      	b.n	8001c6e <__aeabi_dadd+0x676>
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	18c2      	adds	r2, r0, r3
 8001aaa:	4282      	cmp	r2, r0
 8001aac:	4180      	sbcs	r0, r0
 8001aae:	0023      	movs	r3, r4
 8001ab0:	4240      	negs	r0, r0
 8001ab2:	4453      	add	r3, sl
 8001ab4:	181b      	adds	r3, r3, r0
 8001ab6:	07dd      	lsls	r5, r3, #31
 8001ab8:	085c      	lsrs	r4, r3, #1
 8001aba:	2307      	movs	r3, #7
 8001abc:	0852      	lsrs	r2, r2, #1
 8001abe:	4315      	orrs	r5, r2
 8001ac0:	000f      	movs	r7, r1
 8001ac2:	402b      	ands	r3, r5
 8001ac4:	e700      	b.n	80018c8 <__aeabi_dadd+0x2d0>
 8001ac6:	4663      	mov	r3, ip
 8001ac8:	1a1d      	subs	r5, r3, r0
 8001aca:	45ac      	cmp	ip, r5
 8001acc:	4192      	sbcs	r2, r2
 8001ace:	4653      	mov	r3, sl
 8001ad0:	4252      	negs	r2, r2
 8001ad2:	1b1c      	subs	r4, r3, r4
 8001ad4:	000e      	movs	r6, r1
 8001ad6:	4688      	mov	r8, r1
 8001ad8:	1aa4      	subs	r4, r4, r2
 8001ada:	e5e5      	b.n	80016a8 <__aeabi_dadd+0xb0>
 8001adc:	2d00      	cmp	r5, #0
 8001ade:	d000      	beq.n	8001ae2 <__aeabi_dadd+0x4ea>
 8001ae0:	e091      	b.n	8001c06 <__aeabi_dadd+0x60e>
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d138      	bne.n	8001b58 <__aeabi_dadd+0x560>
 8001ae6:	2480      	movs	r4, #128	@ 0x80
 8001ae8:	2600      	movs	r6, #0
 8001aea:	0324      	lsls	r4, r4, #12
 8001aec:	e756      	b.n	800199c <__aeabi_dadd+0x3a4>
 8001aee:	4663      	mov	r3, ip
 8001af0:	18c5      	adds	r5, r0, r3
 8001af2:	4285      	cmp	r5, r0
 8001af4:	4180      	sbcs	r0, r0
 8001af6:	4454      	add	r4, sl
 8001af8:	4240      	negs	r0, r0
 8001afa:	1824      	adds	r4, r4, r0
 8001afc:	2701      	movs	r7, #1
 8001afe:	0223      	lsls	r3, r4, #8
 8001b00:	d400      	bmi.n	8001b04 <__aeabi_dadd+0x50c>
 8001b02:	e6df      	b.n	80018c4 <__aeabi_dadd+0x2cc>
 8001b04:	2702      	movs	r7, #2
 8001b06:	e687      	b.n	8001818 <__aeabi_dadd+0x220>
 8001b08:	4663      	mov	r3, ip
 8001b0a:	1ac5      	subs	r5, r0, r3
 8001b0c:	42a8      	cmp	r0, r5
 8001b0e:	4180      	sbcs	r0, r0
 8001b10:	4653      	mov	r3, sl
 8001b12:	4240      	negs	r0, r0
 8001b14:	1ae4      	subs	r4, r4, r3
 8001b16:	2701      	movs	r7, #1
 8001b18:	1a24      	subs	r4, r4, r0
 8001b1a:	e5c0      	b.n	800169e <__aeabi_dadd+0xa6>
 8001b1c:	0762      	lsls	r2, r4, #29
 8001b1e:	08c0      	lsrs	r0, r0, #3
 8001b20:	4302      	orrs	r2, r0
 8001b22:	08e4      	lsrs	r4, r4, #3
 8001b24:	e736      	b.n	8001994 <__aeabi_dadd+0x39c>
 8001b26:	0011      	movs	r1, r2
 8001b28:	4653      	mov	r3, sl
 8001b2a:	3920      	subs	r1, #32
 8001b2c:	40cb      	lsrs	r3, r1
 8001b2e:	4699      	mov	r9, r3
 8001b30:	2a20      	cmp	r2, #32
 8001b32:	d006      	beq.n	8001b42 <__aeabi_dadd+0x54a>
 8001b34:	2140      	movs	r1, #64	@ 0x40
 8001b36:	4653      	mov	r3, sl
 8001b38:	1a8a      	subs	r2, r1, r2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	4662      	mov	r2, ip
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	4694      	mov	ip, r2
 8001b42:	4665      	mov	r5, ip
 8001b44:	1e6b      	subs	r3, r5, #1
 8001b46:	419d      	sbcs	r5, r3
 8001b48:	464b      	mov	r3, r9
 8001b4a:	431d      	orrs	r5, r3
 8001b4c:	e659      	b.n	8001802 <__aeabi_dadd+0x20a>
 8001b4e:	0762      	lsls	r2, r4, #29
 8001b50:	08c0      	lsrs	r0, r0, #3
 8001b52:	4302      	orrs	r2, r0
 8001b54:	08e4      	lsrs	r4, r4, #3
 8001b56:	e70d      	b.n	8001974 <__aeabi_dadd+0x37c>
 8001b58:	4653      	mov	r3, sl
 8001b5a:	075a      	lsls	r2, r3, #29
 8001b5c:	4663      	mov	r3, ip
 8001b5e:	08d8      	lsrs	r0, r3, #3
 8001b60:	4653      	mov	r3, sl
 8001b62:	000e      	movs	r6, r1
 8001b64:	4302      	orrs	r2, r0
 8001b66:	08dc      	lsrs	r4, r3, #3
 8001b68:	e714      	b.n	8001994 <__aeabi_dadd+0x39c>
 8001b6a:	0015      	movs	r5, r2
 8001b6c:	0026      	movs	r6, r4
 8001b6e:	3d20      	subs	r5, #32
 8001b70:	40ee      	lsrs	r6, r5
 8001b72:	2a20      	cmp	r2, #32
 8001b74:	d003      	beq.n	8001b7e <__aeabi_dadd+0x586>
 8001b76:	2540      	movs	r5, #64	@ 0x40
 8001b78:	1aaa      	subs	r2, r5, r2
 8001b7a:	4094      	lsls	r4, r2
 8001b7c:	4320      	orrs	r0, r4
 8001b7e:	1e42      	subs	r2, r0, #1
 8001b80:	4190      	sbcs	r0, r2
 8001b82:	0005      	movs	r5, r0
 8001b84:	4335      	orrs	r5, r6
 8001b86:	e606      	b.n	8001796 <__aeabi_dadd+0x19e>
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	d07c      	beq.n	8001c86 <__aeabi_dadd+0x68e>
 8001b8c:	4662      	mov	r2, ip
 8001b8e:	4653      	mov	r3, sl
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	431a      	orrs	r2, r3
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dadd+0x5a0>
 8001b96:	e6fa      	b.n	800198e <__aeabi_dadd+0x396>
 8001b98:	0762      	lsls	r2, r4, #29
 8001b9a:	4310      	orrs	r0, r2
 8001b9c:	2280      	movs	r2, #128	@ 0x80
 8001b9e:	08e4      	lsrs	r4, r4, #3
 8001ba0:	0312      	lsls	r2, r2, #12
 8001ba2:	4214      	tst	r4, r2
 8001ba4:	d008      	beq.n	8001bb8 <__aeabi_dadd+0x5c0>
 8001ba6:	08d9      	lsrs	r1, r3, #3
 8001ba8:	4211      	tst	r1, r2
 8001baa:	d105      	bne.n	8001bb8 <__aeabi_dadd+0x5c0>
 8001bac:	4663      	mov	r3, ip
 8001bae:	08d8      	lsrs	r0, r3, #3
 8001bb0:	4653      	mov	r3, sl
 8001bb2:	000c      	movs	r4, r1
 8001bb4:	075b      	lsls	r3, r3, #29
 8001bb6:	4318      	orrs	r0, r3
 8001bb8:	0f42      	lsrs	r2, r0, #29
 8001bba:	00c0      	lsls	r0, r0, #3
 8001bbc:	08c0      	lsrs	r0, r0, #3
 8001bbe:	0752      	lsls	r2, r2, #29
 8001bc0:	4302      	orrs	r2, r0
 8001bc2:	e6e7      	b.n	8001994 <__aeabi_dadd+0x39c>
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dadd+0x5d2>
 8001bc8:	e72d      	b.n	8001a26 <__aeabi_dadd+0x42e>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	08d8      	lsrs	r0, r3, #3
 8001bce:	4653      	mov	r3, sl
 8001bd0:	075a      	lsls	r2, r3, #29
 8001bd2:	000e      	movs	r6, r1
 8001bd4:	4302      	orrs	r2, r0
 8001bd6:	08dc      	lsrs	r4, r3, #3
 8001bd8:	e6cc      	b.n	8001974 <__aeabi_dadd+0x37c>
 8001bda:	4663      	mov	r3, ip
 8001bdc:	1a1d      	subs	r5, r3, r0
 8001bde:	45ac      	cmp	ip, r5
 8001be0:	4192      	sbcs	r2, r2
 8001be2:	4653      	mov	r3, sl
 8001be4:	4252      	negs	r2, r2
 8001be6:	1b1c      	subs	r4, r3, r4
 8001be8:	000e      	movs	r6, r1
 8001bea:	4688      	mov	r8, r1
 8001bec:	1aa4      	subs	r4, r4, r2
 8001bee:	3701      	adds	r7, #1
 8001bf0:	e555      	b.n	800169e <__aeabi_dadd+0xa6>
 8001bf2:	4663      	mov	r3, ip
 8001bf4:	08d9      	lsrs	r1, r3, #3
 8001bf6:	4653      	mov	r3, sl
 8001bf8:	075a      	lsls	r2, r3, #29
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	08dc      	lsrs	r4, r3, #3
 8001bfe:	e6c9      	b.n	8001994 <__aeabi_dadd+0x39c>
 8001c00:	4660      	mov	r0, ip
 8001c02:	4654      	mov	r4, sl
 8001c04:	e6d4      	b.n	80019b0 <__aeabi_dadd+0x3b8>
 8001c06:	08c0      	lsrs	r0, r0, #3
 8001c08:	2a00      	cmp	r2, #0
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_dadd+0x616>
 8001c0c:	e6bf      	b.n	800198e <__aeabi_dadd+0x396>
 8001c0e:	0762      	lsls	r2, r4, #29
 8001c10:	4310      	orrs	r0, r2
 8001c12:	2280      	movs	r2, #128	@ 0x80
 8001c14:	08e4      	lsrs	r4, r4, #3
 8001c16:	0312      	lsls	r2, r2, #12
 8001c18:	4214      	tst	r4, r2
 8001c1a:	d0cd      	beq.n	8001bb8 <__aeabi_dadd+0x5c0>
 8001c1c:	08dd      	lsrs	r5, r3, #3
 8001c1e:	4215      	tst	r5, r2
 8001c20:	d1ca      	bne.n	8001bb8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d8      	lsrs	r0, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075b      	lsls	r3, r3, #29
 8001c2a:	000e      	movs	r6, r1
 8001c2c:	002c      	movs	r4, r5
 8001c2e:	4318      	orrs	r0, r3
 8001c30:	e7c2      	b.n	8001bb8 <__aeabi_dadd+0x5c0>
 8001c32:	4663      	mov	r3, ip
 8001c34:	08d9      	lsrs	r1, r3, #3
 8001c36:	4653      	mov	r3, sl
 8001c38:	075a      	lsls	r2, r3, #29
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e699      	b.n	8001974 <__aeabi_dadd+0x37c>
 8001c40:	4663      	mov	r3, ip
 8001c42:	08d8      	lsrs	r0, r3, #3
 8001c44:	4653      	mov	r3, sl
 8001c46:	075a      	lsls	r2, r3, #29
 8001c48:	000e      	movs	r6, r1
 8001c4a:	4302      	orrs	r2, r0
 8001c4c:	08dc      	lsrs	r4, r3, #3
 8001c4e:	e6a1      	b.n	8001994 <__aeabi_dadd+0x39c>
 8001c50:	0011      	movs	r1, r2
 8001c52:	0027      	movs	r7, r4
 8001c54:	3920      	subs	r1, #32
 8001c56:	40cf      	lsrs	r7, r1
 8001c58:	2a20      	cmp	r2, #32
 8001c5a:	d003      	beq.n	8001c64 <__aeabi_dadd+0x66c>
 8001c5c:	2140      	movs	r1, #64	@ 0x40
 8001c5e:	1a8a      	subs	r2, r1, r2
 8001c60:	4094      	lsls	r4, r2
 8001c62:	4320      	orrs	r0, r4
 8001c64:	1e42      	subs	r2, r0, #1
 8001c66:	4190      	sbcs	r0, r2
 8001c68:	0005      	movs	r5, r0
 8001c6a:	433d      	orrs	r5, r7
 8001c6c:	e651      	b.n	8001912 <__aeabi_dadd+0x31a>
 8001c6e:	000c      	movs	r4, r1
 8001c70:	2500      	movs	r5, #0
 8001c72:	2200      	movs	r2, #0
 8001c74:	e558      	b.n	8001728 <__aeabi_dadd+0x130>
 8001c76:	4460      	add	r0, ip
 8001c78:	4560      	cmp	r0, ip
 8001c7a:	4192      	sbcs	r2, r2
 8001c7c:	4454      	add	r4, sl
 8001c7e:	4252      	negs	r2, r2
 8001c80:	0005      	movs	r5, r0
 8001c82:	18a4      	adds	r4, r4, r2
 8001c84:	e73a      	b.n	8001afc <__aeabi_dadd+0x504>
 8001c86:	4653      	mov	r3, sl
 8001c88:	075a      	lsls	r2, r3, #29
 8001c8a:	4663      	mov	r3, ip
 8001c8c:	08d9      	lsrs	r1, r3, #3
 8001c8e:	4653      	mov	r3, sl
 8001c90:	430a      	orrs	r2, r1
 8001c92:	08dc      	lsrs	r4, r3, #3
 8001c94:	e67e      	b.n	8001994 <__aeabi_dadd+0x39c>
 8001c96:	001a      	movs	r2, r3
 8001c98:	001c      	movs	r4, r3
 8001c9a:	432a      	orrs	r2, r5
 8001c9c:	d000      	beq.n	8001ca0 <__aeabi_dadd+0x6a8>
 8001c9e:	e6ab      	b.n	80019f8 <__aeabi_dadd+0x400>
 8001ca0:	e6c1      	b.n	8001a26 <__aeabi_dadd+0x42e>
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	2500      	movs	r5, #0
 8001ca6:	1a09      	subs	r1, r1, r0
 8001ca8:	e519      	b.n	80016de <__aeabi_dadd+0xe6>
 8001caa:	2200      	movs	r2, #0
 8001cac:	2500      	movs	r5, #0
 8001cae:	4c01      	ldr	r4, [pc, #4]	@ (8001cb4 <__aeabi_dadd+0x6bc>)
 8001cb0:	e53a      	b.n	8001728 <__aeabi_dadd+0x130>
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	000007ff 	.word	0x000007ff
 8001cb8:	ff7fffff 	.word	0xff7fffff
 8001cbc:	000007fe 	.word	0x000007fe

08001cc0 <__aeabi_ddiv>:
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	46de      	mov	lr, fp
 8001cc4:	4645      	mov	r5, r8
 8001cc6:	4657      	mov	r7, sl
 8001cc8:	464e      	mov	r6, r9
 8001cca:	b5e0      	push	{r5, r6, r7, lr}
 8001ccc:	b087      	sub	sp, #28
 8001cce:	9200      	str	r2, [sp, #0]
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	030b      	lsls	r3, r1, #12
 8001cd4:	0b1b      	lsrs	r3, r3, #12
 8001cd6:	469b      	mov	fp, r3
 8001cd8:	0fca      	lsrs	r2, r1, #31
 8001cda:	004b      	lsls	r3, r1, #1
 8001cdc:	0004      	movs	r4, r0
 8001cde:	4680      	mov	r8, r0
 8001ce0:	0d5b      	lsrs	r3, r3, #21
 8001ce2:	9202      	str	r2, [sp, #8]
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_ddiv+0x28>
 8001ce6:	e16a      	b.n	8001fbe <__aeabi_ddiv+0x2fe>
 8001ce8:	4ad4      	ldr	r2, [pc, #848]	@ (800203c <__aeabi_ddiv+0x37c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_ddiv+0x30>
 8001cee:	e18c      	b.n	800200a <__aeabi_ddiv+0x34a>
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	0f42      	lsrs	r2, r0, #29
 8001cf4:	00c9      	lsls	r1, r1, #3
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	2180      	movs	r1, #128	@ 0x80
 8001cfa:	0409      	lsls	r1, r1, #16
 8001cfc:	4311      	orrs	r1, r2
 8001cfe:	00c2      	lsls	r2, r0, #3
 8001d00:	4690      	mov	r8, r2
 8001d02:	4acf      	ldr	r2, [pc, #828]	@ (8002040 <__aeabi_ddiv+0x380>)
 8001d04:	4689      	mov	r9, r1
 8001d06:	4692      	mov	sl, r2
 8001d08:	449a      	add	sl, r3
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2400      	movs	r4, #0
 8001d0e:	9303      	str	r3, [sp, #12]
 8001d10:	9e00      	ldr	r6, [sp, #0]
 8001d12:	9f01      	ldr	r7, [sp, #4]
 8001d14:	033b      	lsls	r3, r7, #12
 8001d16:	0b1b      	lsrs	r3, r3, #12
 8001d18:	469b      	mov	fp, r3
 8001d1a:	007b      	lsls	r3, r7, #1
 8001d1c:	0030      	movs	r0, r6
 8001d1e:	0d5b      	lsrs	r3, r3, #21
 8001d20:	0ffd      	lsrs	r5, r7, #31
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d100      	bne.n	8001d28 <__aeabi_ddiv+0x68>
 8001d26:	e128      	b.n	8001f7a <__aeabi_ddiv+0x2ba>
 8001d28:	4ac4      	ldr	r2, [pc, #784]	@ (800203c <__aeabi_ddiv+0x37c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x70>
 8001d2e:	e177      	b.n	8002020 <__aeabi_ddiv+0x360>
 8001d30:	4659      	mov	r1, fp
 8001d32:	0f72      	lsrs	r2, r6, #29
 8001d34:	00c9      	lsls	r1, r1, #3
 8001d36:	430a      	orrs	r2, r1
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	0409      	lsls	r1, r1, #16
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	468b      	mov	fp, r1
 8001d40:	49bf      	ldr	r1, [pc, #764]	@ (8002040 <__aeabi_ddiv+0x380>)
 8001d42:	00f2      	lsls	r2, r6, #3
 8001d44:	468c      	mov	ip, r1
 8001d46:	4651      	mov	r1, sl
 8001d48:	4463      	add	r3, ip
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	469a      	mov	sl, r3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9e02      	ldr	r6, [sp, #8]
 8001d52:	406e      	eors	r6, r5
 8001d54:	2c0f      	cmp	r4, #15
 8001d56:	d827      	bhi.n	8001da8 <__aeabi_ddiv+0xe8>
 8001d58:	49ba      	ldr	r1, [pc, #744]	@ (8002044 <__aeabi_ddiv+0x384>)
 8001d5a:	00a4      	lsls	r4, r4, #2
 8001d5c:	5909      	ldr	r1, [r1, r4]
 8001d5e:	468f      	mov	pc, r1
 8001d60:	46cb      	mov	fp, r9
 8001d62:	4642      	mov	r2, r8
 8001d64:	9e02      	ldr	r6, [sp, #8]
 8001d66:	9b03      	ldr	r3, [sp, #12]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d016      	beq.n	8001d9a <__aeabi_ddiv+0xda>
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_ddiv+0xb2>
 8001d70:	e2a6      	b.n	80022c0 <__aeabi_ddiv+0x600>
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d000      	beq.n	8001d78 <__aeabi_ddiv+0xb8>
 8001d76:	e0df      	b.n	8001f38 <__aeabi_ddiv+0x278>
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2400      	movs	r4, #0
 8001d7e:	4690      	mov	r8, r2
 8001d80:	051b      	lsls	r3, r3, #20
 8001d82:	4323      	orrs	r3, r4
 8001d84:	07f6      	lsls	r6, r6, #31
 8001d86:	4333      	orrs	r3, r6
 8001d88:	4640      	mov	r0, r8
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	b007      	add	sp, #28
 8001d8e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d90:	46bb      	mov	fp, r7
 8001d92:	46b2      	mov	sl, r6
 8001d94:	46a9      	mov	r9, r5
 8001d96:	46a0      	mov	r8, r4
 8001d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2400      	movs	r4, #0
 8001d9e:	4690      	mov	r8, r2
 8001da0:	4ba6      	ldr	r3, [pc, #664]	@ (800203c <__aeabi_ddiv+0x37c>)
 8001da2:	e7ed      	b.n	8001d80 <__aeabi_ddiv+0xc0>
 8001da4:	002e      	movs	r6, r5
 8001da6:	e7df      	b.n	8001d68 <__aeabi_ddiv+0xa8>
 8001da8:	45cb      	cmp	fp, r9
 8001daa:	d200      	bcs.n	8001dae <__aeabi_ddiv+0xee>
 8001dac:	e1d4      	b.n	8002158 <__aeabi_ddiv+0x498>
 8001dae:	d100      	bne.n	8001db2 <__aeabi_ddiv+0xf2>
 8001db0:	e1cf      	b.n	8002152 <__aeabi_ddiv+0x492>
 8001db2:	2301      	movs	r3, #1
 8001db4:	425b      	negs	r3, r3
 8001db6:	469c      	mov	ip, r3
 8001db8:	4644      	mov	r4, r8
 8001dba:	4648      	mov	r0, r9
 8001dbc:	2700      	movs	r7, #0
 8001dbe:	44e2      	add	sl, ip
 8001dc0:	465b      	mov	r3, fp
 8001dc2:	0e15      	lsrs	r5, r2, #24
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	431d      	orrs	r5, r3
 8001dc8:	0c19      	lsrs	r1, r3, #16
 8001dca:	042b      	lsls	r3, r5, #16
 8001dcc:	0212      	lsls	r2, r2, #8
 8001dce:	9500      	str	r5, [sp, #0]
 8001dd0:	0c1d      	lsrs	r5, r3, #16
 8001dd2:	4691      	mov	r9, r2
 8001dd4:	9102      	str	r1, [sp, #8]
 8001dd6:	9503      	str	r5, [sp, #12]
 8001dd8:	f7fe fa34 	bl	8000244 <__aeabi_uidivmod>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	436a      	muls	r2, r5
 8001de0:	040b      	lsls	r3, r1, #16
 8001de2:	0c21      	lsrs	r1, r4, #16
 8001de4:	4680      	mov	r8, r0
 8001de6:	4319      	orrs	r1, r3
 8001de8:	428a      	cmp	r2, r1
 8001dea:	d909      	bls.n	8001e00 <__aeabi_ddiv+0x140>
 8001dec:	9d00      	ldr	r5, [sp, #0]
 8001dee:	2301      	movs	r3, #1
 8001df0:	46ac      	mov	ip, r5
 8001df2:	425b      	negs	r3, r3
 8001df4:	4461      	add	r1, ip
 8001df6:	469c      	mov	ip, r3
 8001df8:	44e0      	add	r8, ip
 8001dfa:	428d      	cmp	r5, r1
 8001dfc:	d800      	bhi.n	8001e00 <__aeabi_ddiv+0x140>
 8001dfe:	e1fb      	b.n	80021f8 <__aeabi_ddiv+0x538>
 8001e00:	1a88      	subs	r0, r1, r2
 8001e02:	9902      	ldr	r1, [sp, #8]
 8001e04:	f7fe fa1e 	bl	8000244 <__aeabi_uidivmod>
 8001e08:	9a03      	ldr	r2, [sp, #12]
 8001e0a:	0424      	lsls	r4, r4, #16
 8001e0c:	4342      	muls	r2, r0
 8001e0e:	0409      	lsls	r1, r1, #16
 8001e10:	0c24      	lsrs	r4, r4, #16
 8001e12:	0003      	movs	r3, r0
 8001e14:	430c      	orrs	r4, r1
 8001e16:	42a2      	cmp	r2, r4
 8001e18:	d906      	bls.n	8001e28 <__aeabi_ddiv+0x168>
 8001e1a:	9900      	ldr	r1, [sp, #0]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	468c      	mov	ip, r1
 8001e20:	4464      	add	r4, ip
 8001e22:	42a1      	cmp	r1, r4
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x168>
 8001e26:	e1e1      	b.n	80021ec <__aeabi_ddiv+0x52c>
 8001e28:	1aa0      	subs	r0, r4, r2
 8001e2a:	4642      	mov	r2, r8
 8001e2c:	0412      	lsls	r2, r2, #16
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	4693      	mov	fp, r2
 8001e32:	464b      	mov	r3, r9
 8001e34:	4659      	mov	r1, fp
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	001d      	movs	r5, r3
 8001e3a:	9304      	str	r3, [sp, #16]
 8001e3c:	040b      	lsls	r3, r1, #16
 8001e3e:	4649      	mov	r1, r9
 8001e40:	0409      	lsls	r1, r1, #16
 8001e42:	0c09      	lsrs	r1, r1, #16
 8001e44:	000c      	movs	r4, r1
 8001e46:	0c1b      	lsrs	r3, r3, #16
 8001e48:	435c      	muls	r4, r3
 8001e4a:	0c12      	lsrs	r2, r2, #16
 8001e4c:	436b      	muls	r3, r5
 8001e4e:	4688      	mov	r8, r1
 8001e50:	4351      	muls	r1, r2
 8001e52:	436a      	muls	r2, r5
 8001e54:	0c25      	lsrs	r5, r4, #16
 8001e56:	46ac      	mov	ip, r5
 8001e58:	185b      	adds	r3, r3, r1
 8001e5a:	4463      	add	r3, ip
 8001e5c:	4299      	cmp	r1, r3
 8001e5e:	d903      	bls.n	8001e68 <__aeabi_ddiv+0x1a8>
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	0249      	lsls	r1, r1, #9
 8001e64:	468c      	mov	ip, r1
 8001e66:	4462      	add	r2, ip
 8001e68:	0c19      	lsrs	r1, r3, #16
 8001e6a:	0424      	lsls	r4, r4, #16
 8001e6c:	041b      	lsls	r3, r3, #16
 8001e6e:	0c24      	lsrs	r4, r4, #16
 8001e70:	188a      	adds	r2, r1, r2
 8001e72:	191c      	adds	r4, r3, r4
 8001e74:	4290      	cmp	r0, r2
 8001e76:	d302      	bcc.n	8001e7e <__aeabi_ddiv+0x1be>
 8001e78:	d116      	bne.n	8001ea8 <__aeabi_ddiv+0x1e8>
 8001e7a:	42a7      	cmp	r7, r4
 8001e7c:	d214      	bcs.n	8001ea8 <__aeabi_ddiv+0x1e8>
 8001e7e:	465b      	mov	r3, fp
 8001e80:	9d00      	ldr	r5, [sp, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	444f      	add	r7, r9
 8001e86:	9305      	str	r3, [sp, #20]
 8001e88:	454f      	cmp	r7, r9
 8001e8a:	419b      	sbcs	r3, r3
 8001e8c:	46ac      	mov	ip, r5
 8001e8e:	425b      	negs	r3, r3
 8001e90:	4463      	add	r3, ip
 8001e92:	18c0      	adds	r0, r0, r3
 8001e94:	4285      	cmp	r5, r0
 8001e96:	d300      	bcc.n	8001e9a <__aeabi_ddiv+0x1da>
 8001e98:	e1a1      	b.n	80021de <__aeabi_ddiv+0x51e>
 8001e9a:	4282      	cmp	r2, r0
 8001e9c:	d900      	bls.n	8001ea0 <__aeabi_ddiv+0x1e0>
 8001e9e:	e1f6      	b.n	800228e <__aeabi_ddiv+0x5ce>
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_ddiv+0x1e4>
 8001ea2:	e1f1      	b.n	8002288 <__aeabi_ddiv+0x5c8>
 8001ea4:	9b05      	ldr	r3, [sp, #20]
 8001ea6:	469b      	mov	fp, r3
 8001ea8:	1b3c      	subs	r4, r7, r4
 8001eaa:	42a7      	cmp	r7, r4
 8001eac:	41bf      	sbcs	r7, r7
 8001eae:	9d00      	ldr	r5, [sp, #0]
 8001eb0:	1a80      	subs	r0, r0, r2
 8001eb2:	427f      	negs	r7, r7
 8001eb4:	1bc0      	subs	r0, r0, r7
 8001eb6:	4285      	cmp	r5, r0
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_ddiv+0x1fc>
 8001eba:	e1d0      	b.n	800225e <__aeabi_ddiv+0x59e>
 8001ebc:	9902      	ldr	r1, [sp, #8]
 8001ebe:	f7fe f9c1 	bl	8000244 <__aeabi_uidivmod>
 8001ec2:	9a03      	ldr	r2, [sp, #12]
 8001ec4:	040b      	lsls	r3, r1, #16
 8001ec6:	4342      	muls	r2, r0
 8001ec8:	0c21      	lsrs	r1, r4, #16
 8001eca:	0007      	movs	r7, r0
 8001ecc:	4319      	orrs	r1, r3
 8001ece:	428a      	cmp	r2, r1
 8001ed0:	d900      	bls.n	8001ed4 <__aeabi_ddiv+0x214>
 8001ed2:	e178      	b.n	80021c6 <__aeabi_ddiv+0x506>
 8001ed4:	1a88      	subs	r0, r1, r2
 8001ed6:	9902      	ldr	r1, [sp, #8]
 8001ed8:	f7fe f9b4 	bl	8000244 <__aeabi_uidivmod>
 8001edc:	9a03      	ldr	r2, [sp, #12]
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	4342      	muls	r2, r0
 8001ee2:	0409      	lsls	r1, r1, #16
 8001ee4:	0c24      	lsrs	r4, r4, #16
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	430c      	orrs	r4, r1
 8001eea:	42a2      	cmp	r2, r4
 8001eec:	d900      	bls.n	8001ef0 <__aeabi_ddiv+0x230>
 8001eee:	e15d      	b.n	80021ac <__aeabi_ddiv+0x4ec>
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	1aa4      	subs	r4, r4, r2
 8001ef4:	043a      	lsls	r2, r7, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	9d04      	ldr	r5, [sp, #16]
 8001efa:	0413      	lsls	r3, r2, #16
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	4359      	muls	r1, r3
 8001f00:	4647      	mov	r7, r8
 8001f02:	436b      	muls	r3, r5
 8001f04:	469c      	mov	ip, r3
 8001f06:	0c10      	lsrs	r0, r2, #16
 8001f08:	4347      	muls	r7, r0
 8001f0a:	0c0b      	lsrs	r3, r1, #16
 8001f0c:	44bc      	add	ip, r7
 8001f0e:	4463      	add	r3, ip
 8001f10:	4368      	muls	r0, r5
 8001f12:	429f      	cmp	r7, r3
 8001f14:	d903      	bls.n	8001f1e <__aeabi_ddiv+0x25e>
 8001f16:	2580      	movs	r5, #128	@ 0x80
 8001f18:	026d      	lsls	r5, r5, #9
 8001f1a:	46ac      	mov	ip, r5
 8001f1c:	4460      	add	r0, ip
 8001f1e:	0c1f      	lsrs	r7, r3, #16
 8001f20:	0409      	lsls	r1, r1, #16
 8001f22:	041b      	lsls	r3, r3, #16
 8001f24:	0c09      	lsrs	r1, r1, #16
 8001f26:	183f      	adds	r7, r7, r0
 8001f28:	185b      	adds	r3, r3, r1
 8001f2a:	42bc      	cmp	r4, r7
 8001f2c:	d200      	bcs.n	8001f30 <__aeabi_ddiv+0x270>
 8001f2e:	e102      	b.n	8002136 <__aeabi_ddiv+0x476>
 8001f30:	d100      	bne.n	8001f34 <__aeabi_ddiv+0x274>
 8001f32:	e0fd      	b.n	8002130 <__aeabi_ddiv+0x470>
 8001f34:	2301      	movs	r3, #1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	4b43      	ldr	r3, [pc, #268]	@ (8002048 <__aeabi_ddiv+0x388>)
 8001f3a:	4453      	add	r3, sl
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dc00      	bgt.n	8001f42 <__aeabi_ddiv+0x282>
 8001f40:	e0ae      	b.n	80020a0 <__aeabi_ddiv+0x3e0>
 8001f42:	0751      	lsls	r1, r2, #29
 8001f44:	d000      	beq.n	8001f48 <__aeabi_ddiv+0x288>
 8001f46:	e198      	b.n	800227a <__aeabi_ddiv+0x5ba>
 8001f48:	4659      	mov	r1, fp
 8001f4a:	01c9      	lsls	r1, r1, #7
 8001f4c:	d506      	bpl.n	8001f5c <__aeabi_ddiv+0x29c>
 8001f4e:	4659      	mov	r1, fp
 8001f50:	4b3e      	ldr	r3, [pc, #248]	@ (800204c <__aeabi_ddiv+0x38c>)
 8001f52:	4019      	ands	r1, r3
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	468b      	mov	fp, r1
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4453      	add	r3, sl
 8001f5c:	493c      	ldr	r1, [pc, #240]	@ (8002050 <__aeabi_ddiv+0x390>)
 8001f5e:	428b      	cmp	r3, r1
 8001f60:	dd00      	ble.n	8001f64 <__aeabi_ddiv+0x2a4>
 8001f62:	e71a      	b.n	8001d9a <__aeabi_ddiv+0xda>
 8001f64:	4659      	mov	r1, fp
 8001f66:	08d2      	lsrs	r2, r2, #3
 8001f68:	0749      	lsls	r1, r1, #29
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	465a      	mov	r2, fp
 8001f6e:	055b      	lsls	r3, r3, #21
 8001f70:	0254      	lsls	r4, r2, #9
 8001f72:	4688      	mov	r8, r1
 8001f74:	0b24      	lsrs	r4, r4, #12
 8001f76:	0d5b      	lsrs	r3, r3, #21
 8001f78:	e702      	b.n	8001d80 <__aeabi_ddiv+0xc0>
 8001f7a:	465a      	mov	r2, fp
 8001f7c:	9b00      	ldr	r3, [sp, #0]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	d100      	bne.n	8001f84 <__aeabi_ddiv+0x2c4>
 8001f82:	e07e      	b.n	8002082 <__aeabi_ddiv+0x3c2>
 8001f84:	465b      	mov	r3, fp
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d100      	bne.n	8001f8c <__aeabi_ddiv+0x2cc>
 8001f8a:	e100      	b.n	800218e <__aeabi_ddiv+0x4ce>
 8001f8c:	4658      	mov	r0, fp
 8001f8e:	f001 fabb 	bl	8003508 <__clzsi2>
 8001f92:	0002      	movs	r2, r0
 8001f94:	0003      	movs	r3, r0
 8001f96:	3a0b      	subs	r2, #11
 8001f98:	271d      	movs	r7, #29
 8001f9a:	9e00      	ldr	r6, [sp, #0]
 8001f9c:	1aba      	subs	r2, r7, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	4658      	mov	r0, fp
 8001fa2:	40d6      	lsrs	r6, r2
 8001fa4:	3908      	subs	r1, #8
 8001fa6:	4088      	lsls	r0, r1
 8001fa8:	0032      	movs	r2, r6
 8001faa:	4302      	orrs	r2, r0
 8001fac:	4693      	mov	fp, r2
 8001fae:	9a00      	ldr	r2, [sp, #0]
 8001fb0:	408a      	lsls	r2, r1
 8001fb2:	4928      	ldr	r1, [pc, #160]	@ (8002054 <__aeabi_ddiv+0x394>)
 8001fb4:	4453      	add	r3, sl
 8001fb6:	468a      	mov	sl, r1
 8001fb8:	449a      	add	sl, r3
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e6c8      	b.n	8001d50 <__aeabi_ddiv+0x90>
 8001fbe:	465b      	mov	r3, fp
 8001fc0:	4303      	orrs	r3, r0
 8001fc2:	4699      	mov	r9, r3
 8001fc4:	d056      	beq.n	8002074 <__aeabi_ddiv+0x3b4>
 8001fc6:	465b      	mov	r3, fp
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d100      	bne.n	8001fce <__aeabi_ddiv+0x30e>
 8001fcc:	e0cd      	b.n	800216a <__aeabi_ddiv+0x4aa>
 8001fce:	4658      	mov	r0, fp
 8001fd0:	f001 fa9a 	bl	8003508 <__clzsi2>
 8001fd4:	230b      	movs	r3, #11
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	469c      	mov	ip, r3
 8001fda:	0002      	movs	r2, r0
 8001fdc:	4484      	add	ip, r0
 8001fde:	4666      	mov	r6, ip
 8001fe0:	231d      	movs	r3, #29
 8001fe2:	1b9b      	subs	r3, r3, r6
 8001fe4:	0026      	movs	r6, r4
 8001fe6:	0011      	movs	r1, r2
 8001fe8:	4658      	mov	r0, fp
 8001fea:	40de      	lsrs	r6, r3
 8001fec:	3908      	subs	r1, #8
 8001fee:	4088      	lsls	r0, r1
 8001ff0:	0033      	movs	r3, r6
 8001ff2:	4303      	orrs	r3, r0
 8001ff4:	4699      	mov	r9, r3
 8001ff6:	0023      	movs	r3, r4
 8001ff8:	408b      	lsls	r3, r1
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <__aeabi_ddiv+0x398>)
 8001ffe:	2400      	movs	r4, #0
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	469a      	mov	sl, r3
 8002004:	2300      	movs	r3, #0
 8002006:	9303      	str	r3, [sp, #12]
 8002008:	e682      	b.n	8001d10 <__aeabi_ddiv+0x50>
 800200a:	465a      	mov	r2, fp
 800200c:	4302      	orrs	r2, r0
 800200e:	4691      	mov	r9, r2
 8002010:	d12a      	bne.n	8002068 <__aeabi_ddiv+0x3a8>
 8002012:	2200      	movs	r2, #0
 8002014:	469a      	mov	sl, r3
 8002016:	2302      	movs	r3, #2
 8002018:	4690      	mov	r8, r2
 800201a:	2408      	movs	r4, #8
 800201c:	9303      	str	r3, [sp, #12]
 800201e:	e677      	b.n	8001d10 <__aeabi_ddiv+0x50>
 8002020:	465a      	mov	r2, fp
 8002022:	9b00      	ldr	r3, [sp, #0]
 8002024:	431a      	orrs	r2, r3
 8002026:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <__aeabi_ddiv+0x39c>)
 8002028:	469c      	mov	ip, r3
 800202a:	44e2      	add	sl, ip
 800202c:	2a00      	cmp	r2, #0
 800202e:	d117      	bne.n	8002060 <__aeabi_ddiv+0x3a0>
 8002030:	2302      	movs	r3, #2
 8002032:	431c      	orrs	r4, r3
 8002034:	2300      	movs	r3, #0
 8002036:	469b      	mov	fp, r3
 8002038:	3302      	adds	r3, #2
 800203a:	e689      	b.n	8001d50 <__aeabi_ddiv+0x90>
 800203c:	000007ff 	.word	0x000007ff
 8002040:	fffffc01 	.word	0xfffffc01
 8002044:	0800c92c 	.word	0x0800c92c
 8002048:	000003ff 	.word	0x000003ff
 800204c:	feffffff 	.word	0xfeffffff
 8002050:	000007fe 	.word	0x000007fe
 8002054:	000003f3 	.word	0x000003f3
 8002058:	fffffc0d 	.word	0xfffffc0d
 800205c:	fffff801 	.word	0xfffff801
 8002060:	2303      	movs	r3, #3
 8002062:	0032      	movs	r2, r6
 8002064:	431c      	orrs	r4, r3
 8002066:	e673      	b.n	8001d50 <__aeabi_ddiv+0x90>
 8002068:	469a      	mov	sl, r3
 800206a:	2303      	movs	r3, #3
 800206c:	46d9      	mov	r9, fp
 800206e:	240c      	movs	r4, #12
 8002070:	9303      	str	r3, [sp, #12]
 8002072:	e64d      	b.n	8001d10 <__aeabi_ddiv+0x50>
 8002074:	2300      	movs	r3, #0
 8002076:	4698      	mov	r8, r3
 8002078:	469a      	mov	sl, r3
 800207a:	3301      	adds	r3, #1
 800207c:	2404      	movs	r4, #4
 800207e:	9303      	str	r3, [sp, #12]
 8002080:	e646      	b.n	8001d10 <__aeabi_ddiv+0x50>
 8002082:	2301      	movs	r3, #1
 8002084:	431c      	orrs	r4, r3
 8002086:	2300      	movs	r3, #0
 8002088:	469b      	mov	fp, r3
 800208a:	3301      	adds	r3, #1
 800208c:	e660      	b.n	8001d50 <__aeabi_ddiv+0x90>
 800208e:	2300      	movs	r3, #0
 8002090:	2480      	movs	r4, #128	@ 0x80
 8002092:	4698      	mov	r8, r3
 8002094:	2600      	movs	r6, #0
 8002096:	4b92      	ldr	r3, [pc, #584]	@ (80022e0 <__aeabi_ddiv+0x620>)
 8002098:	0324      	lsls	r4, r4, #12
 800209a:	e671      	b.n	8001d80 <__aeabi_ddiv+0xc0>
 800209c:	2201      	movs	r2, #1
 800209e:	4252      	negs	r2, r2
 80020a0:	2101      	movs	r1, #1
 80020a2:	1ac9      	subs	r1, r1, r3
 80020a4:	2938      	cmp	r1, #56	@ 0x38
 80020a6:	dd00      	ble.n	80020aa <__aeabi_ddiv+0x3ea>
 80020a8:	e666      	b.n	8001d78 <__aeabi_ddiv+0xb8>
 80020aa:	291f      	cmp	r1, #31
 80020ac:	dc00      	bgt.n	80020b0 <__aeabi_ddiv+0x3f0>
 80020ae:	e0ab      	b.n	8002208 <__aeabi_ddiv+0x548>
 80020b0:	201f      	movs	r0, #31
 80020b2:	4240      	negs	r0, r0
 80020b4:	1ac3      	subs	r3, r0, r3
 80020b6:	4658      	mov	r0, fp
 80020b8:	40d8      	lsrs	r0, r3
 80020ba:	0003      	movs	r3, r0
 80020bc:	2920      	cmp	r1, #32
 80020be:	d004      	beq.n	80020ca <__aeabi_ddiv+0x40a>
 80020c0:	4658      	mov	r0, fp
 80020c2:	4988      	ldr	r1, [pc, #544]	@ (80022e4 <__aeabi_ddiv+0x624>)
 80020c4:	4451      	add	r1, sl
 80020c6:	4088      	lsls	r0, r1
 80020c8:	4302      	orrs	r2, r0
 80020ca:	1e51      	subs	r1, r2, #1
 80020cc:	418a      	sbcs	r2, r1
 80020ce:	431a      	orrs	r2, r3
 80020d0:	2307      	movs	r3, #7
 80020d2:	0019      	movs	r1, r3
 80020d4:	2400      	movs	r4, #0
 80020d6:	4011      	ands	r1, r2
 80020d8:	4213      	tst	r3, r2
 80020da:	d00c      	beq.n	80020f6 <__aeabi_ddiv+0x436>
 80020dc:	230f      	movs	r3, #15
 80020de:	4013      	ands	r3, r2
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d100      	bne.n	80020e6 <__aeabi_ddiv+0x426>
 80020e4:	e0f9      	b.n	80022da <__aeabi_ddiv+0x61a>
 80020e6:	1d11      	adds	r1, r2, #4
 80020e8:	4291      	cmp	r1, r2
 80020ea:	419b      	sbcs	r3, r3
 80020ec:	000a      	movs	r2, r1
 80020ee:	425b      	negs	r3, r3
 80020f0:	0759      	lsls	r1, r3, #29
 80020f2:	025b      	lsls	r3, r3, #9
 80020f4:	0b1c      	lsrs	r4, r3, #12
 80020f6:	08d2      	lsrs	r2, r2, #3
 80020f8:	430a      	orrs	r2, r1
 80020fa:	4690      	mov	r8, r2
 80020fc:	2300      	movs	r3, #0
 80020fe:	e63f      	b.n	8001d80 <__aeabi_ddiv+0xc0>
 8002100:	2480      	movs	r4, #128	@ 0x80
 8002102:	464b      	mov	r3, r9
 8002104:	0324      	lsls	r4, r4, #12
 8002106:	4223      	tst	r3, r4
 8002108:	d009      	beq.n	800211e <__aeabi_ddiv+0x45e>
 800210a:	465b      	mov	r3, fp
 800210c:	4223      	tst	r3, r4
 800210e:	d106      	bne.n	800211e <__aeabi_ddiv+0x45e>
 8002110:	431c      	orrs	r4, r3
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	002e      	movs	r6, r5
 8002116:	4690      	mov	r8, r2
 8002118:	4b71      	ldr	r3, [pc, #452]	@ (80022e0 <__aeabi_ddiv+0x620>)
 800211a:	0b24      	lsrs	r4, r4, #12
 800211c:	e630      	b.n	8001d80 <__aeabi_ddiv+0xc0>
 800211e:	2480      	movs	r4, #128	@ 0x80
 8002120:	464b      	mov	r3, r9
 8002122:	0324      	lsls	r4, r4, #12
 8002124:	431c      	orrs	r4, r3
 8002126:	0324      	lsls	r4, r4, #12
 8002128:	9e02      	ldr	r6, [sp, #8]
 800212a:	4b6d      	ldr	r3, [pc, #436]	@ (80022e0 <__aeabi_ddiv+0x620>)
 800212c:	0b24      	lsrs	r4, r4, #12
 800212e:	e627      	b.n	8001d80 <__aeabi_ddiv+0xc0>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <__aeabi_ddiv+0x476>
 8002134:	e700      	b.n	8001f38 <__aeabi_ddiv+0x278>
 8002136:	9800      	ldr	r0, [sp, #0]
 8002138:	1e51      	subs	r1, r2, #1
 800213a:	4684      	mov	ip, r0
 800213c:	4464      	add	r4, ip
 800213e:	4284      	cmp	r4, r0
 8002140:	d200      	bcs.n	8002144 <__aeabi_ddiv+0x484>
 8002142:	e084      	b.n	800224e <__aeabi_ddiv+0x58e>
 8002144:	42bc      	cmp	r4, r7
 8002146:	d200      	bcs.n	800214a <__aeabi_ddiv+0x48a>
 8002148:	e0ae      	b.n	80022a8 <__aeabi_ddiv+0x5e8>
 800214a:	d100      	bne.n	800214e <__aeabi_ddiv+0x48e>
 800214c:	e0c1      	b.n	80022d2 <__aeabi_ddiv+0x612>
 800214e:	000a      	movs	r2, r1
 8002150:	e6f0      	b.n	8001f34 <__aeabi_ddiv+0x274>
 8002152:	4542      	cmp	r2, r8
 8002154:	d900      	bls.n	8002158 <__aeabi_ddiv+0x498>
 8002156:	e62c      	b.n	8001db2 <__aeabi_ddiv+0xf2>
 8002158:	464b      	mov	r3, r9
 800215a:	07dc      	lsls	r4, r3, #31
 800215c:	0858      	lsrs	r0, r3, #1
 800215e:	4643      	mov	r3, r8
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	431c      	orrs	r4, r3
 8002164:	4643      	mov	r3, r8
 8002166:	07df      	lsls	r7, r3, #31
 8002168:	e62a      	b.n	8001dc0 <__aeabi_ddiv+0x100>
 800216a:	f001 f9cd 	bl	8003508 <__clzsi2>
 800216e:	2315      	movs	r3, #21
 8002170:	469c      	mov	ip, r3
 8002172:	4484      	add	ip, r0
 8002174:	0002      	movs	r2, r0
 8002176:	4663      	mov	r3, ip
 8002178:	3220      	adds	r2, #32
 800217a:	2b1c      	cmp	r3, #28
 800217c:	dc00      	bgt.n	8002180 <__aeabi_ddiv+0x4c0>
 800217e:	e72e      	b.n	8001fde <__aeabi_ddiv+0x31e>
 8002180:	0023      	movs	r3, r4
 8002182:	3808      	subs	r0, #8
 8002184:	4083      	lsls	r3, r0
 8002186:	4699      	mov	r9, r3
 8002188:	2300      	movs	r3, #0
 800218a:	4698      	mov	r8, r3
 800218c:	e736      	b.n	8001ffc <__aeabi_ddiv+0x33c>
 800218e:	f001 f9bb 	bl	8003508 <__clzsi2>
 8002192:	0002      	movs	r2, r0
 8002194:	0003      	movs	r3, r0
 8002196:	3215      	adds	r2, #21
 8002198:	3320      	adds	r3, #32
 800219a:	2a1c      	cmp	r2, #28
 800219c:	dc00      	bgt.n	80021a0 <__aeabi_ddiv+0x4e0>
 800219e:	e6fb      	b.n	8001f98 <__aeabi_ddiv+0x2d8>
 80021a0:	9900      	ldr	r1, [sp, #0]
 80021a2:	3808      	subs	r0, #8
 80021a4:	4081      	lsls	r1, r0
 80021a6:	2200      	movs	r2, #0
 80021a8:	468b      	mov	fp, r1
 80021aa:	e702      	b.n	8001fb2 <__aeabi_ddiv+0x2f2>
 80021ac:	9900      	ldr	r1, [sp, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	468c      	mov	ip, r1
 80021b2:	4464      	add	r4, ip
 80021b4:	42a1      	cmp	r1, r4
 80021b6:	d900      	bls.n	80021ba <__aeabi_ddiv+0x4fa>
 80021b8:	e69a      	b.n	8001ef0 <__aeabi_ddiv+0x230>
 80021ba:	42a2      	cmp	r2, r4
 80021bc:	d800      	bhi.n	80021c0 <__aeabi_ddiv+0x500>
 80021be:	e697      	b.n	8001ef0 <__aeabi_ddiv+0x230>
 80021c0:	1e83      	subs	r3, r0, #2
 80021c2:	4464      	add	r4, ip
 80021c4:	e694      	b.n	8001ef0 <__aeabi_ddiv+0x230>
 80021c6:	46ac      	mov	ip, r5
 80021c8:	4461      	add	r1, ip
 80021ca:	3f01      	subs	r7, #1
 80021cc:	428d      	cmp	r5, r1
 80021ce:	d900      	bls.n	80021d2 <__aeabi_ddiv+0x512>
 80021d0:	e680      	b.n	8001ed4 <__aeabi_ddiv+0x214>
 80021d2:	428a      	cmp	r2, r1
 80021d4:	d800      	bhi.n	80021d8 <__aeabi_ddiv+0x518>
 80021d6:	e67d      	b.n	8001ed4 <__aeabi_ddiv+0x214>
 80021d8:	1e87      	subs	r7, r0, #2
 80021da:	4461      	add	r1, ip
 80021dc:	e67a      	b.n	8001ed4 <__aeabi_ddiv+0x214>
 80021de:	4285      	cmp	r5, r0
 80021e0:	d000      	beq.n	80021e4 <__aeabi_ddiv+0x524>
 80021e2:	e65f      	b.n	8001ea4 <__aeabi_ddiv+0x1e4>
 80021e4:	45b9      	cmp	r9, r7
 80021e6:	d900      	bls.n	80021ea <__aeabi_ddiv+0x52a>
 80021e8:	e65c      	b.n	8001ea4 <__aeabi_ddiv+0x1e4>
 80021ea:	e656      	b.n	8001e9a <__aeabi_ddiv+0x1da>
 80021ec:	42a2      	cmp	r2, r4
 80021ee:	d800      	bhi.n	80021f2 <__aeabi_ddiv+0x532>
 80021f0:	e61a      	b.n	8001e28 <__aeabi_ddiv+0x168>
 80021f2:	1e83      	subs	r3, r0, #2
 80021f4:	4464      	add	r4, ip
 80021f6:	e617      	b.n	8001e28 <__aeabi_ddiv+0x168>
 80021f8:	428a      	cmp	r2, r1
 80021fa:	d800      	bhi.n	80021fe <__aeabi_ddiv+0x53e>
 80021fc:	e600      	b.n	8001e00 <__aeabi_ddiv+0x140>
 80021fe:	46ac      	mov	ip, r5
 8002200:	1e83      	subs	r3, r0, #2
 8002202:	4698      	mov	r8, r3
 8002204:	4461      	add	r1, ip
 8002206:	e5fb      	b.n	8001e00 <__aeabi_ddiv+0x140>
 8002208:	4837      	ldr	r0, [pc, #220]	@ (80022e8 <__aeabi_ddiv+0x628>)
 800220a:	0014      	movs	r4, r2
 800220c:	4450      	add	r0, sl
 800220e:	4082      	lsls	r2, r0
 8002210:	465b      	mov	r3, fp
 8002212:	0017      	movs	r7, r2
 8002214:	4083      	lsls	r3, r0
 8002216:	40cc      	lsrs	r4, r1
 8002218:	1e7a      	subs	r2, r7, #1
 800221a:	4197      	sbcs	r7, r2
 800221c:	4323      	orrs	r3, r4
 800221e:	433b      	orrs	r3, r7
 8002220:	001a      	movs	r2, r3
 8002222:	465b      	mov	r3, fp
 8002224:	40cb      	lsrs	r3, r1
 8002226:	0751      	lsls	r1, r2, #29
 8002228:	d009      	beq.n	800223e <__aeabi_ddiv+0x57e>
 800222a:	210f      	movs	r1, #15
 800222c:	4011      	ands	r1, r2
 800222e:	2904      	cmp	r1, #4
 8002230:	d005      	beq.n	800223e <__aeabi_ddiv+0x57e>
 8002232:	1d11      	adds	r1, r2, #4
 8002234:	4291      	cmp	r1, r2
 8002236:	4192      	sbcs	r2, r2
 8002238:	4252      	negs	r2, r2
 800223a:	189b      	adds	r3, r3, r2
 800223c:	000a      	movs	r2, r1
 800223e:	0219      	lsls	r1, r3, #8
 8002240:	d400      	bmi.n	8002244 <__aeabi_ddiv+0x584>
 8002242:	e755      	b.n	80020f0 <__aeabi_ddiv+0x430>
 8002244:	2200      	movs	r2, #0
 8002246:	2301      	movs	r3, #1
 8002248:	2400      	movs	r4, #0
 800224a:	4690      	mov	r8, r2
 800224c:	e598      	b.n	8001d80 <__aeabi_ddiv+0xc0>
 800224e:	000a      	movs	r2, r1
 8002250:	42bc      	cmp	r4, r7
 8002252:	d000      	beq.n	8002256 <__aeabi_ddiv+0x596>
 8002254:	e66e      	b.n	8001f34 <__aeabi_ddiv+0x274>
 8002256:	454b      	cmp	r3, r9
 8002258:	d000      	beq.n	800225c <__aeabi_ddiv+0x59c>
 800225a:	e66b      	b.n	8001f34 <__aeabi_ddiv+0x274>
 800225c:	e66c      	b.n	8001f38 <__aeabi_ddiv+0x278>
 800225e:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <__aeabi_ddiv+0x62c>)
 8002260:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <__aeabi_ddiv+0x630>)
 8002262:	4453      	add	r3, sl
 8002264:	4592      	cmp	sl, r2
 8002266:	da00      	bge.n	800226a <__aeabi_ddiv+0x5aa>
 8002268:	e718      	b.n	800209c <__aeabi_ddiv+0x3dc>
 800226a:	2101      	movs	r1, #1
 800226c:	4249      	negs	r1, r1
 800226e:	1d0a      	adds	r2, r1, #4
 8002270:	428a      	cmp	r2, r1
 8002272:	4189      	sbcs	r1, r1
 8002274:	4249      	negs	r1, r1
 8002276:	448b      	add	fp, r1
 8002278:	e666      	b.n	8001f48 <__aeabi_ddiv+0x288>
 800227a:	210f      	movs	r1, #15
 800227c:	4011      	ands	r1, r2
 800227e:	2904      	cmp	r1, #4
 8002280:	d100      	bne.n	8002284 <__aeabi_ddiv+0x5c4>
 8002282:	e661      	b.n	8001f48 <__aeabi_ddiv+0x288>
 8002284:	0011      	movs	r1, r2
 8002286:	e7f2      	b.n	800226e <__aeabi_ddiv+0x5ae>
 8002288:	42bc      	cmp	r4, r7
 800228a:	d800      	bhi.n	800228e <__aeabi_ddiv+0x5ce>
 800228c:	e60a      	b.n	8001ea4 <__aeabi_ddiv+0x1e4>
 800228e:	2302      	movs	r3, #2
 8002290:	425b      	negs	r3, r3
 8002292:	469c      	mov	ip, r3
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	444f      	add	r7, r9
 8002298:	454f      	cmp	r7, r9
 800229a:	419b      	sbcs	r3, r3
 800229c:	44e3      	add	fp, ip
 800229e:	468c      	mov	ip, r1
 80022a0:	425b      	negs	r3, r3
 80022a2:	4463      	add	r3, ip
 80022a4:	18c0      	adds	r0, r0, r3
 80022a6:	e5ff      	b.n	8001ea8 <__aeabi_ddiv+0x1e8>
 80022a8:	4649      	mov	r1, r9
 80022aa:	9d00      	ldr	r5, [sp, #0]
 80022ac:	0048      	lsls	r0, r1, #1
 80022ae:	4548      	cmp	r0, r9
 80022b0:	4189      	sbcs	r1, r1
 80022b2:	46ac      	mov	ip, r5
 80022b4:	4249      	negs	r1, r1
 80022b6:	4461      	add	r1, ip
 80022b8:	4681      	mov	r9, r0
 80022ba:	3a02      	subs	r2, #2
 80022bc:	1864      	adds	r4, r4, r1
 80022be:	e7c7      	b.n	8002250 <__aeabi_ddiv+0x590>
 80022c0:	2480      	movs	r4, #128	@ 0x80
 80022c2:	465b      	mov	r3, fp
 80022c4:	0324      	lsls	r4, r4, #12
 80022c6:	431c      	orrs	r4, r3
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	4690      	mov	r8, r2
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <__aeabi_ddiv+0x620>)
 80022ce:	0b24      	lsrs	r4, r4, #12
 80022d0:	e556      	b.n	8001d80 <__aeabi_ddiv+0xc0>
 80022d2:	4599      	cmp	r9, r3
 80022d4:	d3e8      	bcc.n	80022a8 <__aeabi_ddiv+0x5e8>
 80022d6:	000a      	movs	r2, r1
 80022d8:	e7bd      	b.n	8002256 <__aeabi_ddiv+0x596>
 80022da:	2300      	movs	r3, #0
 80022dc:	e708      	b.n	80020f0 <__aeabi_ddiv+0x430>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	0000043e 	.word	0x0000043e
 80022e8:	0000041e 	.word	0x0000041e
 80022ec:	000003ff 	.word	0x000003ff
 80022f0:	fffffc02 	.word	0xfffffc02

080022f4 <__eqdf2>:
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	4657      	mov	r7, sl
 80022f8:	46de      	mov	lr, fp
 80022fa:	464e      	mov	r6, r9
 80022fc:	4645      	mov	r5, r8
 80022fe:	b5e0      	push	{r5, r6, r7, lr}
 8002300:	000d      	movs	r5, r1
 8002302:	0004      	movs	r4, r0
 8002304:	0fe8      	lsrs	r0, r5, #31
 8002306:	4683      	mov	fp, r0
 8002308:	0309      	lsls	r1, r1, #12
 800230a:	0fd8      	lsrs	r0, r3, #31
 800230c:	0b09      	lsrs	r1, r1, #12
 800230e:	4682      	mov	sl, r0
 8002310:	4819      	ldr	r0, [pc, #100]	@ (8002378 <__eqdf2+0x84>)
 8002312:	468c      	mov	ip, r1
 8002314:	031f      	lsls	r7, r3, #12
 8002316:	0069      	lsls	r1, r5, #1
 8002318:	005e      	lsls	r6, r3, #1
 800231a:	0d49      	lsrs	r1, r1, #21
 800231c:	0b3f      	lsrs	r7, r7, #12
 800231e:	0d76      	lsrs	r6, r6, #21
 8002320:	4281      	cmp	r1, r0
 8002322:	d018      	beq.n	8002356 <__eqdf2+0x62>
 8002324:	4286      	cmp	r6, r0
 8002326:	d00f      	beq.n	8002348 <__eqdf2+0x54>
 8002328:	2001      	movs	r0, #1
 800232a:	42b1      	cmp	r1, r6
 800232c:	d10d      	bne.n	800234a <__eqdf2+0x56>
 800232e:	45bc      	cmp	ip, r7
 8002330:	d10b      	bne.n	800234a <__eqdf2+0x56>
 8002332:	4294      	cmp	r4, r2
 8002334:	d109      	bne.n	800234a <__eqdf2+0x56>
 8002336:	45d3      	cmp	fp, sl
 8002338:	d01c      	beq.n	8002374 <__eqdf2+0x80>
 800233a:	2900      	cmp	r1, #0
 800233c:	d105      	bne.n	800234a <__eqdf2+0x56>
 800233e:	4660      	mov	r0, ip
 8002340:	4320      	orrs	r0, r4
 8002342:	1e43      	subs	r3, r0, #1
 8002344:	4198      	sbcs	r0, r3
 8002346:	e000      	b.n	800234a <__eqdf2+0x56>
 8002348:	2001      	movs	r0, #1
 800234a:	bcf0      	pop	{r4, r5, r6, r7}
 800234c:	46bb      	mov	fp, r7
 800234e:	46b2      	mov	sl, r6
 8002350:	46a9      	mov	r9, r5
 8002352:	46a0      	mov	r8, r4
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002356:	2001      	movs	r0, #1
 8002358:	428e      	cmp	r6, r1
 800235a:	d1f6      	bne.n	800234a <__eqdf2+0x56>
 800235c:	4661      	mov	r1, ip
 800235e:	4339      	orrs	r1, r7
 8002360:	000f      	movs	r7, r1
 8002362:	4317      	orrs	r7, r2
 8002364:	4327      	orrs	r7, r4
 8002366:	d1f0      	bne.n	800234a <__eqdf2+0x56>
 8002368:	465b      	mov	r3, fp
 800236a:	4652      	mov	r2, sl
 800236c:	1a98      	subs	r0, r3, r2
 800236e:	1e43      	subs	r3, r0, #1
 8002370:	4198      	sbcs	r0, r3
 8002372:	e7ea      	b.n	800234a <__eqdf2+0x56>
 8002374:	2000      	movs	r0, #0
 8002376:	e7e8      	b.n	800234a <__eqdf2+0x56>
 8002378:	000007ff 	.word	0x000007ff

0800237c <__gedf2>:
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	4657      	mov	r7, sl
 8002380:	464e      	mov	r6, r9
 8002382:	4645      	mov	r5, r8
 8002384:	46de      	mov	lr, fp
 8002386:	b5e0      	push	{r5, r6, r7, lr}
 8002388:	000d      	movs	r5, r1
 800238a:	030f      	lsls	r7, r1, #12
 800238c:	0b39      	lsrs	r1, r7, #12
 800238e:	b083      	sub	sp, #12
 8002390:	0004      	movs	r4, r0
 8002392:	4680      	mov	r8, r0
 8002394:	9101      	str	r1, [sp, #4]
 8002396:	0058      	lsls	r0, r3, #1
 8002398:	0fe9      	lsrs	r1, r5, #31
 800239a:	4f31      	ldr	r7, [pc, #196]	@ (8002460 <__gedf2+0xe4>)
 800239c:	0d40      	lsrs	r0, r0, #21
 800239e:	468c      	mov	ip, r1
 80023a0:	006e      	lsls	r6, r5, #1
 80023a2:	0319      	lsls	r1, r3, #12
 80023a4:	4682      	mov	sl, r0
 80023a6:	4691      	mov	r9, r2
 80023a8:	0d76      	lsrs	r6, r6, #21
 80023aa:	0b09      	lsrs	r1, r1, #12
 80023ac:	0fd8      	lsrs	r0, r3, #31
 80023ae:	42be      	cmp	r6, r7
 80023b0:	d01f      	beq.n	80023f2 <__gedf2+0x76>
 80023b2:	45ba      	cmp	sl, r7
 80023b4:	d00f      	beq.n	80023d6 <__gedf2+0x5a>
 80023b6:	2e00      	cmp	r6, #0
 80023b8:	d12f      	bne.n	800241a <__gedf2+0x9e>
 80023ba:	4655      	mov	r5, sl
 80023bc:	9e01      	ldr	r6, [sp, #4]
 80023be:	4334      	orrs	r4, r6
 80023c0:	2d00      	cmp	r5, #0
 80023c2:	d127      	bne.n	8002414 <__gedf2+0x98>
 80023c4:	430a      	orrs	r2, r1
 80023c6:	d03a      	beq.n	800243e <__gedf2+0xc2>
 80023c8:	2c00      	cmp	r4, #0
 80023ca:	d145      	bne.n	8002458 <__gedf2+0xdc>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d11a      	bne.n	8002406 <__gedf2+0x8a>
 80023d0:	2001      	movs	r0, #1
 80023d2:	4240      	negs	r0, r0
 80023d4:	e017      	b.n	8002406 <__gedf2+0x8a>
 80023d6:	4311      	orrs	r1, r2
 80023d8:	d13b      	bne.n	8002452 <__gedf2+0xd6>
 80023da:	2e00      	cmp	r6, #0
 80023dc:	d102      	bne.n	80023e4 <__gedf2+0x68>
 80023de:	9f01      	ldr	r7, [sp, #4]
 80023e0:	4327      	orrs	r7, r4
 80023e2:	d0f3      	beq.n	80023cc <__gedf2+0x50>
 80023e4:	4584      	cmp	ip, r0
 80023e6:	d109      	bne.n	80023fc <__gedf2+0x80>
 80023e8:	4663      	mov	r3, ip
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <__gedf2+0x54>
 80023ee:	4660      	mov	r0, ip
 80023f0:	e009      	b.n	8002406 <__gedf2+0x8a>
 80023f2:	9f01      	ldr	r7, [sp, #4]
 80023f4:	4327      	orrs	r7, r4
 80023f6:	d12c      	bne.n	8002452 <__gedf2+0xd6>
 80023f8:	45b2      	cmp	sl, r6
 80023fa:	d024      	beq.n	8002446 <__gedf2+0xca>
 80023fc:	4663      	mov	r3, ip
 80023fe:	2002      	movs	r0, #2
 8002400:	3b01      	subs	r3, #1
 8002402:	4018      	ands	r0, r3
 8002404:	3801      	subs	r0, #1
 8002406:	b003      	add	sp, #12
 8002408:	bcf0      	pop	{r4, r5, r6, r7}
 800240a:	46bb      	mov	fp, r7
 800240c:	46b2      	mov	sl, r6
 800240e:	46a9      	mov	r9, r5
 8002410:	46a0      	mov	r8, r4
 8002412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002414:	2c00      	cmp	r4, #0
 8002416:	d0d9      	beq.n	80023cc <__gedf2+0x50>
 8002418:	e7e4      	b.n	80023e4 <__gedf2+0x68>
 800241a:	4654      	mov	r4, sl
 800241c:	2c00      	cmp	r4, #0
 800241e:	d0ed      	beq.n	80023fc <__gedf2+0x80>
 8002420:	4584      	cmp	ip, r0
 8002422:	d1eb      	bne.n	80023fc <__gedf2+0x80>
 8002424:	4556      	cmp	r6, sl
 8002426:	dce9      	bgt.n	80023fc <__gedf2+0x80>
 8002428:	dbde      	blt.n	80023e8 <__gedf2+0x6c>
 800242a:	9b01      	ldr	r3, [sp, #4]
 800242c:	428b      	cmp	r3, r1
 800242e:	d8e5      	bhi.n	80023fc <__gedf2+0x80>
 8002430:	d1da      	bne.n	80023e8 <__gedf2+0x6c>
 8002432:	45c8      	cmp	r8, r9
 8002434:	d8e2      	bhi.n	80023fc <__gedf2+0x80>
 8002436:	2000      	movs	r0, #0
 8002438:	45c8      	cmp	r8, r9
 800243a:	d2e4      	bcs.n	8002406 <__gedf2+0x8a>
 800243c:	e7d4      	b.n	80023e8 <__gedf2+0x6c>
 800243e:	2000      	movs	r0, #0
 8002440:	2c00      	cmp	r4, #0
 8002442:	d0e0      	beq.n	8002406 <__gedf2+0x8a>
 8002444:	e7da      	b.n	80023fc <__gedf2+0x80>
 8002446:	4311      	orrs	r1, r2
 8002448:	d103      	bne.n	8002452 <__gedf2+0xd6>
 800244a:	4584      	cmp	ip, r0
 800244c:	d1d6      	bne.n	80023fc <__gedf2+0x80>
 800244e:	2000      	movs	r0, #0
 8002450:	e7d9      	b.n	8002406 <__gedf2+0x8a>
 8002452:	2002      	movs	r0, #2
 8002454:	4240      	negs	r0, r0
 8002456:	e7d6      	b.n	8002406 <__gedf2+0x8a>
 8002458:	4584      	cmp	ip, r0
 800245a:	d0e6      	beq.n	800242a <__gedf2+0xae>
 800245c:	e7ce      	b.n	80023fc <__gedf2+0x80>
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	000007ff 	.word	0x000007ff

08002464 <__ledf2>:
 8002464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002466:	4657      	mov	r7, sl
 8002468:	464e      	mov	r6, r9
 800246a:	4645      	mov	r5, r8
 800246c:	46de      	mov	lr, fp
 800246e:	b5e0      	push	{r5, r6, r7, lr}
 8002470:	000d      	movs	r5, r1
 8002472:	030f      	lsls	r7, r1, #12
 8002474:	0004      	movs	r4, r0
 8002476:	4680      	mov	r8, r0
 8002478:	0fe8      	lsrs	r0, r5, #31
 800247a:	0b39      	lsrs	r1, r7, #12
 800247c:	4684      	mov	ip, r0
 800247e:	b083      	sub	sp, #12
 8002480:	0058      	lsls	r0, r3, #1
 8002482:	4f30      	ldr	r7, [pc, #192]	@ (8002544 <__ledf2+0xe0>)
 8002484:	0d40      	lsrs	r0, r0, #21
 8002486:	9101      	str	r1, [sp, #4]
 8002488:	031e      	lsls	r6, r3, #12
 800248a:	0069      	lsls	r1, r5, #1
 800248c:	4682      	mov	sl, r0
 800248e:	4691      	mov	r9, r2
 8002490:	0d49      	lsrs	r1, r1, #21
 8002492:	0b36      	lsrs	r6, r6, #12
 8002494:	0fd8      	lsrs	r0, r3, #31
 8002496:	42b9      	cmp	r1, r7
 8002498:	d020      	beq.n	80024dc <__ledf2+0x78>
 800249a:	45ba      	cmp	sl, r7
 800249c:	d00f      	beq.n	80024be <__ledf2+0x5a>
 800249e:	2900      	cmp	r1, #0
 80024a0:	d12b      	bne.n	80024fa <__ledf2+0x96>
 80024a2:	9901      	ldr	r1, [sp, #4]
 80024a4:	430c      	orrs	r4, r1
 80024a6:	4651      	mov	r1, sl
 80024a8:	2900      	cmp	r1, #0
 80024aa:	d137      	bne.n	800251c <__ledf2+0xb8>
 80024ac:	4332      	orrs	r2, r6
 80024ae:	d038      	beq.n	8002522 <__ledf2+0xbe>
 80024b0:	2c00      	cmp	r4, #0
 80024b2:	d144      	bne.n	800253e <__ledf2+0xda>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d119      	bne.n	80024ec <__ledf2+0x88>
 80024b8:	2001      	movs	r0, #1
 80024ba:	4240      	negs	r0, r0
 80024bc:	e016      	b.n	80024ec <__ledf2+0x88>
 80024be:	4316      	orrs	r6, r2
 80024c0:	d113      	bne.n	80024ea <__ledf2+0x86>
 80024c2:	2900      	cmp	r1, #0
 80024c4:	d102      	bne.n	80024cc <__ledf2+0x68>
 80024c6:	9f01      	ldr	r7, [sp, #4]
 80024c8:	4327      	orrs	r7, r4
 80024ca:	d0f3      	beq.n	80024b4 <__ledf2+0x50>
 80024cc:	4584      	cmp	ip, r0
 80024ce:	d020      	beq.n	8002512 <__ledf2+0xae>
 80024d0:	4663      	mov	r3, ip
 80024d2:	2002      	movs	r0, #2
 80024d4:	3b01      	subs	r3, #1
 80024d6:	4018      	ands	r0, r3
 80024d8:	3801      	subs	r0, #1
 80024da:	e007      	b.n	80024ec <__ledf2+0x88>
 80024dc:	9f01      	ldr	r7, [sp, #4]
 80024de:	4327      	orrs	r7, r4
 80024e0:	d103      	bne.n	80024ea <__ledf2+0x86>
 80024e2:	458a      	cmp	sl, r1
 80024e4:	d1f4      	bne.n	80024d0 <__ledf2+0x6c>
 80024e6:	4316      	orrs	r6, r2
 80024e8:	d01f      	beq.n	800252a <__ledf2+0xc6>
 80024ea:	2002      	movs	r0, #2
 80024ec:	b003      	add	sp, #12
 80024ee:	bcf0      	pop	{r4, r5, r6, r7}
 80024f0:	46bb      	mov	fp, r7
 80024f2:	46b2      	mov	sl, r6
 80024f4:	46a9      	mov	r9, r5
 80024f6:	46a0      	mov	r8, r4
 80024f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fa:	4654      	mov	r4, sl
 80024fc:	2c00      	cmp	r4, #0
 80024fe:	d0e7      	beq.n	80024d0 <__ledf2+0x6c>
 8002500:	4584      	cmp	ip, r0
 8002502:	d1e5      	bne.n	80024d0 <__ledf2+0x6c>
 8002504:	4551      	cmp	r1, sl
 8002506:	dce3      	bgt.n	80024d0 <__ledf2+0x6c>
 8002508:	db03      	blt.n	8002512 <__ledf2+0xae>
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	42b3      	cmp	r3, r6
 800250e:	d8df      	bhi.n	80024d0 <__ledf2+0x6c>
 8002510:	d00f      	beq.n	8002532 <__ledf2+0xce>
 8002512:	4663      	mov	r3, ip
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0cf      	beq.n	80024b8 <__ledf2+0x54>
 8002518:	4660      	mov	r0, ip
 800251a:	e7e7      	b.n	80024ec <__ledf2+0x88>
 800251c:	2c00      	cmp	r4, #0
 800251e:	d0c9      	beq.n	80024b4 <__ledf2+0x50>
 8002520:	e7d4      	b.n	80024cc <__ledf2+0x68>
 8002522:	2000      	movs	r0, #0
 8002524:	2c00      	cmp	r4, #0
 8002526:	d0e1      	beq.n	80024ec <__ledf2+0x88>
 8002528:	e7d2      	b.n	80024d0 <__ledf2+0x6c>
 800252a:	4584      	cmp	ip, r0
 800252c:	d1d0      	bne.n	80024d0 <__ledf2+0x6c>
 800252e:	2000      	movs	r0, #0
 8002530:	e7dc      	b.n	80024ec <__ledf2+0x88>
 8002532:	45c8      	cmp	r8, r9
 8002534:	d8cc      	bhi.n	80024d0 <__ledf2+0x6c>
 8002536:	2000      	movs	r0, #0
 8002538:	45c8      	cmp	r8, r9
 800253a:	d2d7      	bcs.n	80024ec <__ledf2+0x88>
 800253c:	e7e9      	b.n	8002512 <__ledf2+0xae>
 800253e:	4584      	cmp	ip, r0
 8002540:	d0e3      	beq.n	800250a <__ledf2+0xa6>
 8002542:	e7c5      	b.n	80024d0 <__ledf2+0x6c>
 8002544:	000007ff 	.word	0x000007ff

08002548 <__aeabi_dmul>:
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	4657      	mov	r7, sl
 800254c:	46de      	mov	lr, fp
 800254e:	464e      	mov	r6, r9
 8002550:	4645      	mov	r5, r8
 8002552:	b5e0      	push	{r5, r6, r7, lr}
 8002554:	001f      	movs	r7, r3
 8002556:	030b      	lsls	r3, r1, #12
 8002558:	0b1b      	lsrs	r3, r3, #12
 800255a:	0016      	movs	r6, r2
 800255c:	469a      	mov	sl, r3
 800255e:	0fca      	lsrs	r2, r1, #31
 8002560:	004b      	lsls	r3, r1, #1
 8002562:	0004      	movs	r4, r0
 8002564:	4693      	mov	fp, r2
 8002566:	b087      	sub	sp, #28
 8002568:	0d5b      	lsrs	r3, r3, #21
 800256a:	d100      	bne.n	800256e <__aeabi_dmul+0x26>
 800256c:	e0d5      	b.n	800271a <__aeabi_dmul+0x1d2>
 800256e:	4abb      	ldr	r2, [pc, #748]	@ (800285c <__aeabi_dmul+0x314>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d100      	bne.n	8002576 <__aeabi_dmul+0x2e>
 8002574:	e0f8      	b.n	8002768 <__aeabi_dmul+0x220>
 8002576:	4651      	mov	r1, sl
 8002578:	0f42      	lsrs	r2, r0, #29
 800257a:	00c9      	lsls	r1, r1, #3
 800257c:	430a      	orrs	r2, r1
 800257e:	2180      	movs	r1, #128	@ 0x80
 8002580:	0409      	lsls	r1, r1, #16
 8002582:	4311      	orrs	r1, r2
 8002584:	00c2      	lsls	r2, r0, #3
 8002586:	4691      	mov	r9, r2
 8002588:	4ab5      	ldr	r2, [pc, #724]	@ (8002860 <__aeabi_dmul+0x318>)
 800258a:	468a      	mov	sl, r1
 800258c:	189d      	adds	r5, r3, r2
 800258e:	2300      	movs	r3, #0
 8002590:	4698      	mov	r8, r3
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	033c      	lsls	r4, r7, #12
 8002596:	007b      	lsls	r3, r7, #1
 8002598:	0ffa      	lsrs	r2, r7, #31
 800259a:	0030      	movs	r0, r6
 800259c:	0b24      	lsrs	r4, r4, #12
 800259e:	0d5b      	lsrs	r3, r3, #21
 80025a0:	9200      	str	r2, [sp, #0]
 80025a2:	d100      	bne.n	80025a6 <__aeabi_dmul+0x5e>
 80025a4:	e096      	b.n	80026d4 <__aeabi_dmul+0x18c>
 80025a6:	4aad      	ldr	r2, [pc, #692]	@ (800285c <__aeabi_dmul+0x314>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d031      	beq.n	8002610 <__aeabi_dmul+0xc8>
 80025ac:	0f72      	lsrs	r2, r6, #29
 80025ae:	00e4      	lsls	r4, r4, #3
 80025b0:	4322      	orrs	r2, r4
 80025b2:	2480      	movs	r4, #128	@ 0x80
 80025b4:	0424      	lsls	r4, r4, #16
 80025b6:	4314      	orrs	r4, r2
 80025b8:	4aa9      	ldr	r2, [pc, #676]	@ (8002860 <__aeabi_dmul+0x318>)
 80025ba:	00f0      	lsls	r0, r6, #3
 80025bc:	4694      	mov	ip, r2
 80025be:	4463      	add	r3, ip
 80025c0:	195b      	adds	r3, r3, r5
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	9201      	str	r2, [sp, #4]
 80025c6:	4642      	mov	r2, r8
 80025c8:	2600      	movs	r6, #0
 80025ca:	2a0a      	cmp	r2, #10
 80025cc:	dc42      	bgt.n	8002654 <__aeabi_dmul+0x10c>
 80025ce:	465a      	mov	r2, fp
 80025d0:	9900      	ldr	r1, [sp, #0]
 80025d2:	404a      	eors	r2, r1
 80025d4:	4693      	mov	fp, r2
 80025d6:	4642      	mov	r2, r8
 80025d8:	2a02      	cmp	r2, #2
 80025da:	dc32      	bgt.n	8002642 <__aeabi_dmul+0xfa>
 80025dc:	3a01      	subs	r2, #1
 80025de:	2a01      	cmp	r2, #1
 80025e0:	d900      	bls.n	80025e4 <__aeabi_dmul+0x9c>
 80025e2:	e149      	b.n	8002878 <__aeabi_dmul+0x330>
 80025e4:	2e02      	cmp	r6, #2
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0xa2>
 80025e8:	e0ca      	b.n	8002780 <__aeabi_dmul+0x238>
 80025ea:	2e01      	cmp	r6, #1
 80025ec:	d13d      	bne.n	800266a <__aeabi_dmul+0x122>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2400      	movs	r4, #0
 80025f2:	2200      	movs	r2, #0
 80025f4:	0010      	movs	r0, r2
 80025f6:	465a      	mov	r2, fp
 80025f8:	051b      	lsls	r3, r3, #20
 80025fa:	4323      	orrs	r3, r4
 80025fc:	07d2      	lsls	r2, r2, #31
 80025fe:	4313      	orrs	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	b007      	add	sp, #28
 8002604:	bcf0      	pop	{r4, r5, r6, r7}
 8002606:	46bb      	mov	fp, r7
 8002608:	46b2      	mov	sl, r6
 800260a:	46a9      	mov	r9, r5
 800260c:	46a0      	mov	r8, r4
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002610:	4b92      	ldr	r3, [pc, #584]	@ (800285c <__aeabi_dmul+0x314>)
 8002612:	4326      	orrs	r6, r4
 8002614:	18eb      	adds	r3, r5, r3
 8002616:	2e00      	cmp	r6, #0
 8002618:	d100      	bne.n	800261c <__aeabi_dmul+0xd4>
 800261a:	e0bb      	b.n	8002794 <__aeabi_dmul+0x24c>
 800261c:	2203      	movs	r2, #3
 800261e:	4641      	mov	r1, r8
 8002620:	4311      	orrs	r1, r2
 8002622:	465a      	mov	r2, fp
 8002624:	4688      	mov	r8, r1
 8002626:	9900      	ldr	r1, [sp, #0]
 8002628:	404a      	eors	r2, r1
 800262a:	2180      	movs	r1, #128	@ 0x80
 800262c:	0109      	lsls	r1, r1, #4
 800262e:	468c      	mov	ip, r1
 8002630:	0029      	movs	r1, r5
 8002632:	4461      	add	r1, ip
 8002634:	9101      	str	r1, [sp, #4]
 8002636:	4641      	mov	r1, r8
 8002638:	290a      	cmp	r1, #10
 800263a:	dd00      	ble.n	800263e <__aeabi_dmul+0xf6>
 800263c:	e233      	b.n	8002aa6 <__aeabi_dmul+0x55e>
 800263e:	4693      	mov	fp, r2
 8002640:	2603      	movs	r6, #3
 8002642:	4642      	mov	r2, r8
 8002644:	2701      	movs	r7, #1
 8002646:	4097      	lsls	r7, r2
 8002648:	21a6      	movs	r1, #166	@ 0xa6
 800264a:	003a      	movs	r2, r7
 800264c:	00c9      	lsls	r1, r1, #3
 800264e:	400a      	ands	r2, r1
 8002650:	420f      	tst	r7, r1
 8002652:	d031      	beq.n	80026b8 <__aeabi_dmul+0x170>
 8002654:	9e02      	ldr	r6, [sp, #8]
 8002656:	2e02      	cmp	r6, #2
 8002658:	d100      	bne.n	800265c <__aeabi_dmul+0x114>
 800265a:	e235      	b.n	8002ac8 <__aeabi_dmul+0x580>
 800265c:	2e03      	cmp	r6, #3
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x11a>
 8002660:	e1d2      	b.n	8002a08 <__aeabi_dmul+0x4c0>
 8002662:	4654      	mov	r4, sl
 8002664:	4648      	mov	r0, r9
 8002666:	2e01      	cmp	r6, #1
 8002668:	d0c1      	beq.n	80025ee <__aeabi_dmul+0xa6>
 800266a:	9a01      	ldr	r2, [sp, #4]
 800266c:	4b7d      	ldr	r3, [pc, #500]	@ (8002864 <__aeabi_dmul+0x31c>)
 800266e:	4694      	mov	ip, r2
 8002670:	4463      	add	r3, ip
 8002672:	2b00      	cmp	r3, #0
 8002674:	dc00      	bgt.n	8002678 <__aeabi_dmul+0x130>
 8002676:	e0c0      	b.n	80027fa <__aeabi_dmul+0x2b2>
 8002678:	0742      	lsls	r2, r0, #29
 800267a:	d009      	beq.n	8002690 <__aeabi_dmul+0x148>
 800267c:	220f      	movs	r2, #15
 800267e:	4002      	ands	r2, r0
 8002680:	2a04      	cmp	r2, #4
 8002682:	d005      	beq.n	8002690 <__aeabi_dmul+0x148>
 8002684:	1d02      	adds	r2, r0, #4
 8002686:	4282      	cmp	r2, r0
 8002688:	4180      	sbcs	r0, r0
 800268a:	4240      	negs	r0, r0
 800268c:	1824      	adds	r4, r4, r0
 800268e:	0010      	movs	r0, r2
 8002690:	01e2      	lsls	r2, r4, #7
 8002692:	d506      	bpl.n	80026a2 <__aeabi_dmul+0x15a>
 8002694:	4b74      	ldr	r3, [pc, #464]	@ (8002868 <__aeabi_dmul+0x320>)
 8002696:	9a01      	ldr	r2, [sp, #4]
 8002698:	401c      	ands	r4, r3
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	4694      	mov	ip, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4463      	add	r3, ip
 80026a2:	4a72      	ldr	r2, [pc, #456]	@ (800286c <__aeabi_dmul+0x324>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	dc6b      	bgt.n	8002780 <__aeabi_dmul+0x238>
 80026a8:	0762      	lsls	r2, r4, #29
 80026aa:	08c0      	lsrs	r0, r0, #3
 80026ac:	0264      	lsls	r4, r4, #9
 80026ae:	055b      	lsls	r3, r3, #21
 80026b0:	4302      	orrs	r2, r0
 80026b2:	0b24      	lsrs	r4, r4, #12
 80026b4:	0d5b      	lsrs	r3, r3, #21
 80026b6:	e79d      	b.n	80025f4 <__aeabi_dmul+0xac>
 80026b8:	2190      	movs	r1, #144	@ 0x90
 80026ba:	0089      	lsls	r1, r1, #2
 80026bc:	420f      	tst	r7, r1
 80026be:	d163      	bne.n	8002788 <__aeabi_dmul+0x240>
 80026c0:	2288      	movs	r2, #136	@ 0x88
 80026c2:	423a      	tst	r2, r7
 80026c4:	d100      	bne.n	80026c8 <__aeabi_dmul+0x180>
 80026c6:	e0d7      	b.n	8002878 <__aeabi_dmul+0x330>
 80026c8:	9b00      	ldr	r3, [sp, #0]
 80026ca:	46a2      	mov	sl, r4
 80026cc:	469b      	mov	fp, r3
 80026ce:	4681      	mov	r9, r0
 80026d0:	9602      	str	r6, [sp, #8]
 80026d2:	e7bf      	b.n	8002654 <__aeabi_dmul+0x10c>
 80026d4:	0023      	movs	r3, r4
 80026d6:	4333      	orrs	r3, r6
 80026d8:	d100      	bne.n	80026dc <__aeabi_dmul+0x194>
 80026da:	e07f      	b.n	80027dc <__aeabi_dmul+0x294>
 80026dc:	2c00      	cmp	r4, #0
 80026de:	d100      	bne.n	80026e2 <__aeabi_dmul+0x19a>
 80026e0:	e1ad      	b.n	8002a3e <__aeabi_dmul+0x4f6>
 80026e2:	0020      	movs	r0, r4
 80026e4:	f000 ff10 	bl	8003508 <__clzsi2>
 80026e8:	0002      	movs	r2, r0
 80026ea:	0003      	movs	r3, r0
 80026ec:	3a0b      	subs	r2, #11
 80026ee:	201d      	movs	r0, #29
 80026f0:	0019      	movs	r1, r3
 80026f2:	1a82      	subs	r2, r0, r2
 80026f4:	0030      	movs	r0, r6
 80026f6:	3908      	subs	r1, #8
 80026f8:	40d0      	lsrs	r0, r2
 80026fa:	408c      	lsls	r4, r1
 80026fc:	4304      	orrs	r4, r0
 80026fe:	0030      	movs	r0, r6
 8002700:	4088      	lsls	r0, r1
 8002702:	4a5b      	ldr	r2, [pc, #364]	@ (8002870 <__aeabi_dmul+0x328>)
 8002704:	1aeb      	subs	r3, r5, r3
 8002706:	4694      	mov	ip, r2
 8002708:	4463      	add	r3, ip
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	9201      	str	r2, [sp, #4]
 800270e:	4642      	mov	r2, r8
 8002710:	2600      	movs	r6, #0
 8002712:	2a0a      	cmp	r2, #10
 8002714:	dc00      	bgt.n	8002718 <__aeabi_dmul+0x1d0>
 8002716:	e75a      	b.n	80025ce <__aeabi_dmul+0x86>
 8002718:	e79c      	b.n	8002654 <__aeabi_dmul+0x10c>
 800271a:	4653      	mov	r3, sl
 800271c:	4303      	orrs	r3, r0
 800271e:	4699      	mov	r9, r3
 8002720:	d054      	beq.n	80027cc <__aeabi_dmul+0x284>
 8002722:	4653      	mov	r3, sl
 8002724:	2b00      	cmp	r3, #0
 8002726:	d100      	bne.n	800272a <__aeabi_dmul+0x1e2>
 8002728:	e177      	b.n	8002a1a <__aeabi_dmul+0x4d2>
 800272a:	4650      	mov	r0, sl
 800272c:	f000 feec 	bl	8003508 <__clzsi2>
 8002730:	230b      	movs	r3, #11
 8002732:	425b      	negs	r3, r3
 8002734:	469c      	mov	ip, r3
 8002736:	0002      	movs	r2, r0
 8002738:	4484      	add	ip, r0
 800273a:	0011      	movs	r1, r2
 800273c:	4650      	mov	r0, sl
 800273e:	3908      	subs	r1, #8
 8002740:	4088      	lsls	r0, r1
 8002742:	231d      	movs	r3, #29
 8002744:	4680      	mov	r8, r0
 8002746:	4660      	mov	r0, ip
 8002748:	1a1b      	subs	r3, r3, r0
 800274a:	0020      	movs	r0, r4
 800274c:	40d8      	lsrs	r0, r3
 800274e:	0003      	movs	r3, r0
 8002750:	4640      	mov	r0, r8
 8002752:	4303      	orrs	r3, r0
 8002754:	469a      	mov	sl, r3
 8002756:	0023      	movs	r3, r4
 8002758:	408b      	lsls	r3, r1
 800275a:	4699      	mov	r9, r3
 800275c:	2300      	movs	r3, #0
 800275e:	4d44      	ldr	r5, [pc, #272]	@ (8002870 <__aeabi_dmul+0x328>)
 8002760:	4698      	mov	r8, r3
 8002762:	1aad      	subs	r5, r5, r2
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	e715      	b.n	8002594 <__aeabi_dmul+0x4c>
 8002768:	4652      	mov	r2, sl
 800276a:	4302      	orrs	r2, r0
 800276c:	4691      	mov	r9, r2
 800276e:	d126      	bne.n	80027be <__aeabi_dmul+0x276>
 8002770:	2200      	movs	r2, #0
 8002772:	001d      	movs	r5, r3
 8002774:	2302      	movs	r3, #2
 8002776:	4692      	mov	sl, r2
 8002778:	3208      	adds	r2, #8
 800277a:	4690      	mov	r8, r2
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	e709      	b.n	8002594 <__aeabi_dmul+0x4c>
 8002780:	2400      	movs	r4, #0
 8002782:	2200      	movs	r2, #0
 8002784:	4b35      	ldr	r3, [pc, #212]	@ (800285c <__aeabi_dmul+0x314>)
 8002786:	e735      	b.n	80025f4 <__aeabi_dmul+0xac>
 8002788:	2300      	movs	r3, #0
 800278a:	2480      	movs	r4, #128	@ 0x80
 800278c:	469b      	mov	fp, r3
 800278e:	0324      	lsls	r4, r4, #12
 8002790:	4b32      	ldr	r3, [pc, #200]	@ (800285c <__aeabi_dmul+0x314>)
 8002792:	e72f      	b.n	80025f4 <__aeabi_dmul+0xac>
 8002794:	2202      	movs	r2, #2
 8002796:	4641      	mov	r1, r8
 8002798:	4311      	orrs	r1, r2
 800279a:	2280      	movs	r2, #128	@ 0x80
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	4694      	mov	ip, r2
 80027a0:	002a      	movs	r2, r5
 80027a2:	4462      	add	r2, ip
 80027a4:	4688      	mov	r8, r1
 80027a6:	9201      	str	r2, [sp, #4]
 80027a8:	290a      	cmp	r1, #10
 80027aa:	dd00      	ble.n	80027ae <__aeabi_dmul+0x266>
 80027ac:	e752      	b.n	8002654 <__aeabi_dmul+0x10c>
 80027ae:	465a      	mov	r2, fp
 80027b0:	2000      	movs	r0, #0
 80027b2:	9900      	ldr	r1, [sp, #0]
 80027b4:	0004      	movs	r4, r0
 80027b6:	404a      	eors	r2, r1
 80027b8:	4693      	mov	fp, r2
 80027ba:	2602      	movs	r6, #2
 80027bc:	e70b      	b.n	80025d6 <__aeabi_dmul+0x8e>
 80027be:	220c      	movs	r2, #12
 80027c0:	001d      	movs	r5, r3
 80027c2:	2303      	movs	r3, #3
 80027c4:	4681      	mov	r9, r0
 80027c6:	4690      	mov	r8, r2
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6e3      	b.n	8002594 <__aeabi_dmul+0x4c>
 80027cc:	2300      	movs	r3, #0
 80027ce:	469a      	mov	sl, r3
 80027d0:	3304      	adds	r3, #4
 80027d2:	4698      	mov	r8, r3
 80027d4:	3b03      	subs	r3, #3
 80027d6:	2500      	movs	r5, #0
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	e6db      	b.n	8002594 <__aeabi_dmul+0x4c>
 80027dc:	4642      	mov	r2, r8
 80027de:	3301      	adds	r3, #1
 80027e0:	431a      	orrs	r2, r3
 80027e2:	002b      	movs	r3, r5
 80027e4:	4690      	mov	r8, r2
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	9201      	str	r2, [sp, #4]
 80027ea:	4642      	mov	r2, r8
 80027ec:	2400      	movs	r4, #0
 80027ee:	2000      	movs	r0, #0
 80027f0:	2601      	movs	r6, #1
 80027f2:	2a0a      	cmp	r2, #10
 80027f4:	dc00      	bgt.n	80027f8 <__aeabi_dmul+0x2b0>
 80027f6:	e6ea      	b.n	80025ce <__aeabi_dmul+0x86>
 80027f8:	e72c      	b.n	8002654 <__aeabi_dmul+0x10c>
 80027fa:	2201      	movs	r2, #1
 80027fc:	1ad2      	subs	r2, r2, r3
 80027fe:	2a38      	cmp	r2, #56	@ 0x38
 8002800:	dd00      	ble.n	8002804 <__aeabi_dmul+0x2bc>
 8002802:	e6f4      	b.n	80025ee <__aeabi_dmul+0xa6>
 8002804:	2a1f      	cmp	r2, #31
 8002806:	dc00      	bgt.n	800280a <__aeabi_dmul+0x2c2>
 8002808:	e12a      	b.n	8002a60 <__aeabi_dmul+0x518>
 800280a:	211f      	movs	r1, #31
 800280c:	4249      	negs	r1, r1
 800280e:	1acb      	subs	r3, r1, r3
 8002810:	0021      	movs	r1, r4
 8002812:	40d9      	lsrs	r1, r3
 8002814:	000b      	movs	r3, r1
 8002816:	2a20      	cmp	r2, #32
 8002818:	d005      	beq.n	8002826 <__aeabi_dmul+0x2de>
 800281a:	4a16      	ldr	r2, [pc, #88]	@ (8002874 <__aeabi_dmul+0x32c>)
 800281c:	9d01      	ldr	r5, [sp, #4]
 800281e:	4694      	mov	ip, r2
 8002820:	4465      	add	r5, ip
 8002822:	40ac      	lsls	r4, r5
 8002824:	4320      	orrs	r0, r4
 8002826:	1e42      	subs	r2, r0, #1
 8002828:	4190      	sbcs	r0, r2
 800282a:	4318      	orrs	r0, r3
 800282c:	2307      	movs	r3, #7
 800282e:	0019      	movs	r1, r3
 8002830:	2400      	movs	r4, #0
 8002832:	4001      	ands	r1, r0
 8002834:	4203      	tst	r3, r0
 8002836:	d00c      	beq.n	8002852 <__aeabi_dmul+0x30a>
 8002838:	230f      	movs	r3, #15
 800283a:	4003      	ands	r3, r0
 800283c:	2b04      	cmp	r3, #4
 800283e:	d100      	bne.n	8002842 <__aeabi_dmul+0x2fa>
 8002840:	e140      	b.n	8002ac4 <__aeabi_dmul+0x57c>
 8002842:	1d03      	adds	r3, r0, #4
 8002844:	4283      	cmp	r3, r0
 8002846:	41a4      	sbcs	r4, r4
 8002848:	0018      	movs	r0, r3
 800284a:	4264      	negs	r4, r4
 800284c:	0761      	lsls	r1, r4, #29
 800284e:	0264      	lsls	r4, r4, #9
 8002850:	0b24      	lsrs	r4, r4, #12
 8002852:	08c2      	lsrs	r2, r0, #3
 8002854:	2300      	movs	r3, #0
 8002856:	430a      	orrs	r2, r1
 8002858:	e6cc      	b.n	80025f4 <__aeabi_dmul+0xac>
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	000007ff 	.word	0x000007ff
 8002860:	fffffc01 	.word	0xfffffc01
 8002864:	000003ff 	.word	0x000003ff
 8002868:	feffffff 	.word	0xfeffffff
 800286c:	000007fe 	.word	0x000007fe
 8002870:	fffffc0d 	.word	0xfffffc0d
 8002874:	0000043e 	.word	0x0000043e
 8002878:	4649      	mov	r1, r9
 800287a:	464a      	mov	r2, r9
 800287c:	0409      	lsls	r1, r1, #16
 800287e:	0c09      	lsrs	r1, r1, #16
 8002880:	000d      	movs	r5, r1
 8002882:	0c16      	lsrs	r6, r2, #16
 8002884:	0c02      	lsrs	r2, r0, #16
 8002886:	0400      	lsls	r0, r0, #16
 8002888:	0c00      	lsrs	r0, r0, #16
 800288a:	4345      	muls	r5, r0
 800288c:	46ac      	mov	ip, r5
 800288e:	0005      	movs	r5, r0
 8002890:	4375      	muls	r5, r6
 8002892:	46a8      	mov	r8, r5
 8002894:	0015      	movs	r5, r2
 8002896:	000f      	movs	r7, r1
 8002898:	4375      	muls	r5, r6
 800289a:	9200      	str	r2, [sp, #0]
 800289c:	9502      	str	r5, [sp, #8]
 800289e:	002a      	movs	r2, r5
 80028a0:	9d00      	ldr	r5, [sp, #0]
 80028a2:	436f      	muls	r7, r5
 80028a4:	4665      	mov	r5, ip
 80028a6:	0c2d      	lsrs	r5, r5, #16
 80028a8:	46a9      	mov	r9, r5
 80028aa:	4447      	add	r7, r8
 80028ac:	444f      	add	r7, r9
 80028ae:	45b8      	cmp	r8, r7
 80028b0:	d905      	bls.n	80028be <__aeabi_dmul+0x376>
 80028b2:	0015      	movs	r5, r2
 80028b4:	2280      	movs	r2, #128	@ 0x80
 80028b6:	0252      	lsls	r2, r2, #9
 80028b8:	4690      	mov	r8, r2
 80028ba:	4445      	add	r5, r8
 80028bc:	9502      	str	r5, [sp, #8]
 80028be:	0c3d      	lsrs	r5, r7, #16
 80028c0:	9503      	str	r5, [sp, #12]
 80028c2:	4665      	mov	r5, ip
 80028c4:	042d      	lsls	r5, r5, #16
 80028c6:	043f      	lsls	r7, r7, #16
 80028c8:	0c2d      	lsrs	r5, r5, #16
 80028ca:	46ac      	mov	ip, r5
 80028cc:	003d      	movs	r5, r7
 80028ce:	4465      	add	r5, ip
 80028d0:	9504      	str	r5, [sp, #16]
 80028d2:	0c25      	lsrs	r5, r4, #16
 80028d4:	0424      	lsls	r4, r4, #16
 80028d6:	0c24      	lsrs	r4, r4, #16
 80028d8:	46ac      	mov	ip, r5
 80028da:	0025      	movs	r5, r4
 80028dc:	4375      	muls	r5, r6
 80028de:	46a8      	mov	r8, r5
 80028e0:	4665      	mov	r5, ip
 80028e2:	000f      	movs	r7, r1
 80028e4:	4369      	muls	r1, r5
 80028e6:	4441      	add	r1, r8
 80028e8:	4689      	mov	r9, r1
 80028ea:	4367      	muls	r7, r4
 80028ec:	0c39      	lsrs	r1, r7, #16
 80028ee:	4449      	add	r1, r9
 80028f0:	436e      	muls	r6, r5
 80028f2:	4588      	cmp	r8, r1
 80028f4:	d903      	bls.n	80028fe <__aeabi_dmul+0x3b6>
 80028f6:	2280      	movs	r2, #128	@ 0x80
 80028f8:	0252      	lsls	r2, r2, #9
 80028fa:	4690      	mov	r8, r2
 80028fc:	4446      	add	r6, r8
 80028fe:	0c0d      	lsrs	r5, r1, #16
 8002900:	46a8      	mov	r8, r5
 8002902:	0035      	movs	r5, r6
 8002904:	4445      	add	r5, r8
 8002906:	9505      	str	r5, [sp, #20]
 8002908:	9d03      	ldr	r5, [sp, #12]
 800290a:	043f      	lsls	r7, r7, #16
 800290c:	46a8      	mov	r8, r5
 800290e:	0c3f      	lsrs	r7, r7, #16
 8002910:	0409      	lsls	r1, r1, #16
 8002912:	19c9      	adds	r1, r1, r7
 8002914:	4488      	add	r8, r1
 8002916:	4645      	mov	r5, r8
 8002918:	9503      	str	r5, [sp, #12]
 800291a:	4655      	mov	r5, sl
 800291c:	042e      	lsls	r6, r5, #16
 800291e:	0c36      	lsrs	r6, r6, #16
 8002920:	0c2f      	lsrs	r7, r5, #16
 8002922:	0035      	movs	r5, r6
 8002924:	4345      	muls	r5, r0
 8002926:	4378      	muls	r0, r7
 8002928:	4681      	mov	r9, r0
 800292a:	0038      	movs	r0, r7
 800292c:	46a8      	mov	r8, r5
 800292e:	0c2d      	lsrs	r5, r5, #16
 8002930:	46aa      	mov	sl, r5
 8002932:	9a00      	ldr	r2, [sp, #0]
 8002934:	4350      	muls	r0, r2
 8002936:	4372      	muls	r2, r6
 8002938:	444a      	add	r2, r9
 800293a:	4452      	add	r2, sl
 800293c:	4591      	cmp	r9, r2
 800293e:	d903      	bls.n	8002948 <__aeabi_dmul+0x400>
 8002940:	2580      	movs	r5, #128	@ 0x80
 8002942:	026d      	lsls	r5, r5, #9
 8002944:	46a9      	mov	r9, r5
 8002946:	4448      	add	r0, r9
 8002948:	0c15      	lsrs	r5, r2, #16
 800294a:	46a9      	mov	r9, r5
 800294c:	4645      	mov	r5, r8
 800294e:	042d      	lsls	r5, r5, #16
 8002950:	0c2d      	lsrs	r5, r5, #16
 8002952:	46a8      	mov	r8, r5
 8002954:	4665      	mov	r5, ip
 8002956:	437d      	muls	r5, r7
 8002958:	0412      	lsls	r2, r2, #16
 800295a:	4448      	add	r0, r9
 800295c:	4490      	add	r8, r2
 800295e:	46a9      	mov	r9, r5
 8002960:	0032      	movs	r2, r6
 8002962:	4665      	mov	r5, ip
 8002964:	4362      	muls	r2, r4
 8002966:	436e      	muls	r6, r5
 8002968:	437c      	muls	r4, r7
 800296a:	0c17      	lsrs	r7, r2, #16
 800296c:	1936      	adds	r6, r6, r4
 800296e:	19bf      	adds	r7, r7, r6
 8002970:	42bc      	cmp	r4, r7
 8002972:	d903      	bls.n	800297c <__aeabi_dmul+0x434>
 8002974:	2480      	movs	r4, #128	@ 0x80
 8002976:	0264      	lsls	r4, r4, #9
 8002978:	46a4      	mov	ip, r4
 800297a:	44e1      	add	r9, ip
 800297c:	9c02      	ldr	r4, [sp, #8]
 800297e:	9e03      	ldr	r6, [sp, #12]
 8002980:	46a4      	mov	ip, r4
 8002982:	9d05      	ldr	r5, [sp, #20]
 8002984:	4466      	add	r6, ip
 8002986:	428e      	cmp	r6, r1
 8002988:	4189      	sbcs	r1, r1
 800298a:	46ac      	mov	ip, r5
 800298c:	0412      	lsls	r2, r2, #16
 800298e:	043c      	lsls	r4, r7, #16
 8002990:	0c12      	lsrs	r2, r2, #16
 8002992:	18a2      	adds	r2, r4, r2
 8002994:	4462      	add	r2, ip
 8002996:	4249      	negs	r1, r1
 8002998:	1854      	adds	r4, r2, r1
 800299a:	4446      	add	r6, r8
 800299c:	46a4      	mov	ip, r4
 800299e:	4546      	cmp	r6, r8
 80029a0:	41a4      	sbcs	r4, r4
 80029a2:	4682      	mov	sl, r0
 80029a4:	4264      	negs	r4, r4
 80029a6:	46a0      	mov	r8, r4
 80029a8:	42aa      	cmp	r2, r5
 80029aa:	4192      	sbcs	r2, r2
 80029ac:	458c      	cmp	ip, r1
 80029ae:	4189      	sbcs	r1, r1
 80029b0:	44e2      	add	sl, ip
 80029b2:	44d0      	add	r8, sl
 80029b4:	4249      	negs	r1, r1
 80029b6:	4252      	negs	r2, r2
 80029b8:	430a      	orrs	r2, r1
 80029ba:	45a0      	cmp	r8, r4
 80029bc:	41a4      	sbcs	r4, r4
 80029be:	4582      	cmp	sl, r0
 80029c0:	4189      	sbcs	r1, r1
 80029c2:	4264      	negs	r4, r4
 80029c4:	4249      	negs	r1, r1
 80029c6:	430c      	orrs	r4, r1
 80029c8:	4641      	mov	r1, r8
 80029ca:	0c3f      	lsrs	r7, r7, #16
 80029cc:	19d2      	adds	r2, r2, r7
 80029ce:	1912      	adds	r2, r2, r4
 80029d0:	0dcc      	lsrs	r4, r1, #23
 80029d2:	9904      	ldr	r1, [sp, #16]
 80029d4:	0270      	lsls	r0, r6, #9
 80029d6:	4308      	orrs	r0, r1
 80029d8:	1e41      	subs	r1, r0, #1
 80029da:	4188      	sbcs	r0, r1
 80029dc:	4641      	mov	r1, r8
 80029de:	444a      	add	r2, r9
 80029e0:	0df6      	lsrs	r6, r6, #23
 80029e2:	0252      	lsls	r2, r2, #9
 80029e4:	4330      	orrs	r0, r6
 80029e6:	0249      	lsls	r1, r1, #9
 80029e8:	4314      	orrs	r4, r2
 80029ea:	4308      	orrs	r0, r1
 80029ec:	01d2      	lsls	r2, r2, #7
 80029ee:	d535      	bpl.n	8002a5c <__aeabi_dmul+0x514>
 80029f0:	2201      	movs	r2, #1
 80029f2:	0843      	lsrs	r3, r0, #1
 80029f4:	4002      	ands	r2, r0
 80029f6:	4313      	orrs	r3, r2
 80029f8:	07e0      	lsls	r0, r4, #31
 80029fa:	4318      	orrs	r0, r3
 80029fc:	0864      	lsrs	r4, r4, #1
 80029fe:	e634      	b.n	800266a <__aeabi_dmul+0x122>
 8002a00:	9b00      	ldr	r3, [sp, #0]
 8002a02:	46a2      	mov	sl, r4
 8002a04:	469b      	mov	fp, r3
 8002a06:	4681      	mov	r9, r0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4653      	mov	r3, sl
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	431c      	orrs	r4, r3
 8002a10:	0324      	lsls	r4, r4, #12
 8002a12:	464a      	mov	r2, r9
 8002a14:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <__aeabi_dmul+0x588>)
 8002a16:	0b24      	lsrs	r4, r4, #12
 8002a18:	e5ec      	b.n	80025f4 <__aeabi_dmul+0xac>
 8002a1a:	f000 fd75 	bl	8003508 <__clzsi2>
 8002a1e:	2315      	movs	r3, #21
 8002a20:	469c      	mov	ip, r3
 8002a22:	4484      	add	ip, r0
 8002a24:	0002      	movs	r2, r0
 8002a26:	4663      	mov	r3, ip
 8002a28:	3220      	adds	r2, #32
 8002a2a:	2b1c      	cmp	r3, #28
 8002a2c:	dc00      	bgt.n	8002a30 <__aeabi_dmul+0x4e8>
 8002a2e:	e684      	b.n	800273a <__aeabi_dmul+0x1f2>
 8002a30:	2300      	movs	r3, #0
 8002a32:	4699      	mov	r9, r3
 8002a34:	0023      	movs	r3, r4
 8002a36:	3808      	subs	r0, #8
 8002a38:	4083      	lsls	r3, r0
 8002a3a:	469a      	mov	sl, r3
 8002a3c:	e68e      	b.n	800275c <__aeabi_dmul+0x214>
 8002a3e:	f000 fd63 	bl	8003508 <__clzsi2>
 8002a42:	0002      	movs	r2, r0
 8002a44:	0003      	movs	r3, r0
 8002a46:	3215      	adds	r2, #21
 8002a48:	3320      	adds	r3, #32
 8002a4a:	2a1c      	cmp	r2, #28
 8002a4c:	dc00      	bgt.n	8002a50 <__aeabi_dmul+0x508>
 8002a4e:	e64e      	b.n	80026ee <__aeabi_dmul+0x1a6>
 8002a50:	0002      	movs	r2, r0
 8002a52:	0034      	movs	r4, r6
 8002a54:	3a08      	subs	r2, #8
 8002a56:	2000      	movs	r0, #0
 8002a58:	4094      	lsls	r4, r2
 8002a5a:	e652      	b.n	8002702 <__aeabi_dmul+0x1ba>
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	e604      	b.n	800266a <__aeabi_dmul+0x122>
 8002a60:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <__aeabi_dmul+0x58c>)
 8002a62:	0021      	movs	r1, r4
 8002a64:	469c      	mov	ip, r3
 8002a66:	0003      	movs	r3, r0
 8002a68:	9d01      	ldr	r5, [sp, #4]
 8002a6a:	40d3      	lsrs	r3, r2
 8002a6c:	4465      	add	r5, ip
 8002a6e:	40a9      	lsls	r1, r5
 8002a70:	4319      	orrs	r1, r3
 8002a72:	0003      	movs	r3, r0
 8002a74:	40ab      	lsls	r3, r5
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	4183      	sbcs	r3, r0
 8002a7a:	4319      	orrs	r1, r3
 8002a7c:	0008      	movs	r0, r1
 8002a7e:	40d4      	lsrs	r4, r2
 8002a80:	074b      	lsls	r3, r1, #29
 8002a82:	d009      	beq.n	8002a98 <__aeabi_dmul+0x550>
 8002a84:	230f      	movs	r3, #15
 8002a86:	400b      	ands	r3, r1
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d005      	beq.n	8002a98 <__aeabi_dmul+0x550>
 8002a8c:	1d0b      	adds	r3, r1, #4
 8002a8e:	428b      	cmp	r3, r1
 8002a90:	4180      	sbcs	r0, r0
 8002a92:	4240      	negs	r0, r0
 8002a94:	1824      	adds	r4, r4, r0
 8002a96:	0018      	movs	r0, r3
 8002a98:	0223      	lsls	r3, r4, #8
 8002a9a:	d400      	bmi.n	8002a9e <__aeabi_dmul+0x556>
 8002a9c:	e6d6      	b.n	800284c <__aeabi_dmul+0x304>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	2400      	movs	r4, #0
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	e5a6      	b.n	80025f4 <__aeabi_dmul+0xac>
 8002aa6:	290f      	cmp	r1, #15
 8002aa8:	d1aa      	bne.n	8002a00 <__aeabi_dmul+0x4b8>
 8002aaa:	2380      	movs	r3, #128	@ 0x80
 8002aac:	4652      	mov	r2, sl
 8002aae:	031b      	lsls	r3, r3, #12
 8002ab0:	421a      	tst	r2, r3
 8002ab2:	d0a9      	beq.n	8002a08 <__aeabi_dmul+0x4c0>
 8002ab4:	421c      	tst	r4, r3
 8002ab6:	d1a7      	bne.n	8002a08 <__aeabi_dmul+0x4c0>
 8002ab8:	431c      	orrs	r4, r3
 8002aba:	9b00      	ldr	r3, [sp, #0]
 8002abc:	0002      	movs	r2, r0
 8002abe:	469b      	mov	fp, r3
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <__aeabi_dmul+0x588>)
 8002ac2:	e597      	b.n	80025f4 <__aeabi_dmul+0xac>
 8002ac4:	2400      	movs	r4, #0
 8002ac6:	e6c1      	b.n	800284c <__aeabi_dmul+0x304>
 8002ac8:	2400      	movs	r4, #0
 8002aca:	4b01      	ldr	r3, [pc, #4]	@ (8002ad0 <__aeabi_dmul+0x588>)
 8002acc:	0022      	movs	r2, r4
 8002ace:	e591      	b.n	80025f4 <__aeabi_dmul+0xac>
 8002ad0:	000007ff 	.word	0x000007ff
 8002ad4:	0000041e 	.word	0x0000041e

08002ad8 <__aeabi_dsub>:
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	464e      	mov	r6, r9
 8002adc:	4645      	mov	r5, r8
 8002ade:	46de      	mov	lr, fp
 8002ae0:	4657      	mov	r7, sl
 8002ae2:	b5e0      	push	{r5, r6, r7, lr}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	9000      	str	r0, [sp, #0]
 8002ae8:	9101      	str	r1, [sp, #4]
 8002aea:	030c      	lsls	r4, r1, #12
 8002aec:	004f      	lsls	r7, r1, #1
 8002aee:	0fce      	lsrs	r6, r1, #31
 8002af0:	0a61      	lsrs	r1, r4, #9
 8002af2:	9c00      	ldr	r4, [sp, #0]
 8002af4:	46b0      	mov	r8, r6
 8002af6:	0f64      	lsrs	r4, r4, #29
 8002af8:	430c      	orrs	r4, r1
 8002afa:	9900      	ldr	r1, [sp, #0]
 8002afc:	0d7f      	lsrs	r7, r7, #21
 8002afe:	00c8      	lsls	r0, r1, #3
 8002b00:	0011      	movs	r1, r2
 8002b02:	001a      	movs	r2, r3
 8002b04:	031b      	lsls	r3, r3, #12
 8002b06:	469c      	mov	ip, r3
 8002b08:	9100      	str	r1, [sp, #0]
 8002b0a:	9201      	str	r2, [sp, #4]
 8002b0c:	0051      	lsls	r1, r2, #1
 8002b0e:	0d4b      	lsrs	r3, r1, #21
 8002b10:	4699      	mov	r9, r3
 8002b12:	9b01      	ldr	r3, [sp, #4]
 8002b14:	9d00      	ldr	r5, [sp, #0]
 8002b16:	0fd9      	lsrs	r1, r3, #31
 8002b18:	4663      	mov	r3, ip
 8002b1a:	0f6a      	lsrs	r2, r5, #29
 8002b1c:	0a5b      	lsrs	r3, r3, #9
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	00ea      	lsls	r2, r5, #3
 8002b22:	4694      	mov	ip, r2
 8002b24:	4693      	mov	fp, r2
 8002b26:	4ac1      	ldr	r2, [pc, #772]	@ (8002e2c <__aeabi_dsub+0x354>)
 8002b28:	9003      	str	r0, [sp, #12]
 8002b2a:	9302      	str	r3, [sp, #8]
 8002b2c:	4591      	cmp	r9, r2
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x5a>
 8002b30:	e0cd      	b.n	8002cce <__aeabi_dsub+0x1f6>
 8002b32:	2501      	movs	r5, #1
 8002b34:	4069      	eors	r1, r5
 8002b36:	464d      	mov	r5, r9
 8002b38:	1b7d      	subs	r5, r7, r5
 8002b3a:	46aa      	mov	sl, r5
 8002b3c:	428e      	cmp	r6, r1
 8002b3e:	d100      	bne.n	8002b42 <__aeabi_dsub+0x6a>
 8002b40:	e080      	b.n	8002c44 <__aeabi_dsub+0x16c>
 8002b42:	2d00      	cmp	r5, #0
 8002b44:	dc00      	bgt.n	8002b48 <__aeabi_dsub+0x70>
 8002b46:	e335      	b.n	80031b4 <__aeabi_dsub+0x6dc>
 8002b48:	4649      	mov	r1, r9
 8002b4a:	2900      	cmp	r1, #0
 8002b4c:	d100      	bne.n	8002b50 <__aeabi_dsub+0x78>
 8002b4e:	e0df      	b.n	8002d10 <__aeabi_dsub+0x238>
 8002b50:	4297      	cmp	r7, r2
 8002b52:	d100      	bne.n	8002b56 <__aeabi_dsub+0x7e>
 8002b54:	e194      	b.n	8002e80 <__aeabi_dsub+0x3a8>
 8002b56:	4652      	mov	r2, sl
 8002b58:	2501      	movs	r5, #1
 8002b5a:	2a38      	cmp	r2, #56	@ 0x38
 8002b5c:	dc19      	bgt.n	8002b92 <__aeabi_dsub+0xba>
 8002b5e:	2280      	movs	r2, #128	@ 0x80
 8002b60:	9b02      	ldr	r3, [sp, #8]
 8002b62:	0412      	lsls	r2, r2, #16
 8002b64:	4313      	orrs	r3, r2
 8002b66:	9302      	str	r3, [sp, #8]
 8002b68:	4652      	mov	r2, sl
 8002b6a:	2a1f      	cmp	r2, #31
 8002b6c:	dd00      	ble.n	8002b70 <__aeabi_dsub+0x98>
 8002b6e:	e1e3      	b.n	8002f38 <__aeabi_dsub+0x460>
 8002b70:	4653      	mov	r3, sl
 8002b72:	2220      	movs	r2, #32
 8002b74:	4661      	mov	r1, ip
 8002b76:	9d02      	ldr	r5, [sp, #8]
 8002b78:	1ad2      	subs	r2, r2, r3
 8002b7a:	4095      	lsls	r5, r2
 8002b7c:	40d9      	lsrs	r1, r3
 8002b7e:	430d      	orrs	r5, r1
 8002b80:	4661      	mov	r1, ip
 8002b82:	4091      	lsls	r1, r2
 8002b84:	000a      	movs	r2, r1
 8002b86:	1e51      	subs	r1, r2, #1
 8002b88:	418a      	sbcs	r2, r1
 8002b8a:	4315      	orrs	r5, r2
 8002b8c:	9a02      	ldr	r2, [sp, #8]
 8002b8e:	40da      	lsrs	r2, r3
 8002b90:	1aa4      	subs	r4, r4, r2
 8002b92:	1b45      	subs	r5, r0, r5
 8002b94:	42a8      	cmp	r0, r5
 8002b96:	4180      	sbcs	r0, r0
 8002b98:	4240      	negs	r0, r0
 8002b9a:	1a24      	subs	r4, r4, r0
 8002b9c:	0223      	lsls	r3, r4, #8
 8002b9e:	d400      	bmi.n	8002ba2 <__aeabi_dsub+0xca>
 8002ba0:	e13d      	b.n	8002e1e <__aeabi_dsub+0x346>
 8002ba2:	0264      	lsls	r4, r4, #9
 8002ba4:	0a64      	lsrs	r4, r4, #9
 8002ba6:	2c00      	cmp	r4, #0
 8002ba8:	d100      	bne.n	8002bac <__aeabi_dsub+0xd4>
 8002baa:	e147      	b.n	8002e3c <__aeabi_dsub+0x364>
 8002bac:	0020      	movs	r0, r4
 8002bae:	f000 fcab 	bl	8003508 <__clzsi2>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	3b08      	subs	r3, #8
 8002bb6:	2120      	movs	r1, #32
 8002bb8:	0028      	movs	r0, r5
 8002bba:	1aca      	subs	r2, r1, r3
 8002bbc:	40d0      	lsrs	r0, r2
 8002bbe:	409c      	lsls	r4, r3
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	409d      	lsls	r5, r3
 8002bc4:	4322      	orrs	r2, r4
 8002bc6:	429f      	cmp	r7, r3
 8002bc8:	dd00      	ble.n	8002bcc <__aeabi_dsub+0xf4>
 8002bca:	e177      	b.n	8002ebc <__aeabi_dsub+0x3e4>
 8002bcc:	1bd8      	subs	r0, r3, r7
 8002bce:	3001      	adds	r0, #1
 8002bd0:	1a09      	subs	r1, r1, r0
 8002bd2:	002c      	movs	r4, r5
 8002bd4:	408d      	lsls	r5, r1
 8002bd6:	40c4      	lsrs	r4, r0
 8002bd8:	1e6b      	subs	r3, r5, #1
 8002bda:	419d      	sbcs	r5, r3
 8002bdc:	0013      	movs	r3, r2
 8002bde:	40c2      	lsrs	r2, r0
 8002be0:	408b      	lsls	r3, r1
 8002be2:	4325      	orrs	r5, r4
 8002be4:	2700      	movs	r7, #0
 8002be6:	0014      	movs	r4, r2
 8002be8:	431d      	orrs	r5, r3
 8002bea:	076b      	lsls	r3, r5, #29
 8002bec:	d009      	beq.n	8002c02 <__aeabi_dsub+0x12a>
 8002bee:	230f      	movs	r3, #15
 8002bf0:	402b      	ands	r3, r5
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d005      	beq.n	8002c02 <__aeabi_dsub+0x12a>
 8002bf6:	1d2b      	adds	r3, r5, #4
 8002bf8:	42ab      	cmp	r3, r5
 8002bfa:	41ad      	sbcs	r5, r5
 8002bfc:	426d      	negs	r5, r5
 8002bfe:	1964      	adds	r4, r4, r5
 8002c00:	001d      	movs	r5, r3
 8002c02:	0223      	lsls	r3, r4, #8
 8002c04:	d400      	bmi.n	8002c08 <__aeabi_dsub+0x130>
 8002c06:	e140      	b.n	8002e8a <__aeabi_dsub+0x3b2>
 8002c08:	4a88      	ldr	r2, [pc, #544]	@ (8002e2c <__aeabi_dsub+0x354>)
 8002c0a:	3701      	adds	r7, #1
 8002c0c:	4297      	cmp	r7, r2
 8002c0e:	d100      	bne.n	8002c12 <__aeabi_dsub+0x13a>
 8002c10:	e101      	b.n	8002e16 <__aeabi_dsub+0x33e>
 8002c12:	2601      	movs	r6, #1
 8002c14:	4643      	mov	r3, r8
 8002c16:	4986      	ldr	r1, [pc, #536]	@ (8002e30 <__aeabi_dsub+0x358>)
 8002c18:	08ed      	lsrs	r5, r5, #3
 8002c1a:	4021      	ands	r1, r4
 8002c1c:	074a      	lsls	r2, r1, #29
 8002c1e:	432a      	orrs	r2, r5
 8002c20:	057c      	lsls	r4, r7, #21
 8002c22:	024d      	lsls	r5, r1, #9
 8002c24:	0b2d      	lsrs	r5, r5, #12
 8002c26:	0d64      	lsrs	r4, r4, #21
 8002c28:	401e      	ands	r6, r3
 8002c2a:	0524      	lsls	r4, r4, #20
 8002c2c:	432c      	orrs	r4, r5
 8002c2e:	07f6      	lsls	r6, r6, #31
 8002c30:	4334      	orrs	r4, r6
 8002c32:	0010      	movs	r0, r2
 8002c34:	0021      	movs	r1, r4
 8002c36:	b005      	add	sp, #20
 8002c38:	bcf0      	pop	{r4, r5, r6, r7}
 8002c3a:	46bb      	mov	fp, r7
 8002c3c:	46b2      	mov	sl, r6
 8002c3e:	46a9      	mov	r9, r5
 8002c40:	46a0      	mov	r8, r4
 8002c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c44:	2d00      	cmp	r5, #0
 8002c46:	dc00      	bgt.n	8002c4a <__aeabi_dsub+0x172>
 8002c48:	e2d0      	b.n	80031ec <__aeabi_dsub+0x714>
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	d000      	beq.n	8002c52 <__aeabi_dsub+0x17a>
 8002c50:	e0d4      	b.n	8002dfc <__aeabi_dsub+0x324>
 8002c52:	4661      	mov	r1, ip
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	4319      	orrs	r1, r3
 8002c58:	d100      	bne.n	8002c5c <__aeabi_dsub+0x184>
 8002c5a:	e12b      	b.n	8002eb4 <__aeabi_dsub+0x3dc>
 8002c5c:	1e69      	subs	r1, r5, #1
 8002c5e:	2d01      	cmp	r5, #1
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dsub+0x18c>
 8002c62:	e1d9      	b.n	8003018 <__aeabi_dsub+0x540>
 8002c64:	4295      	cmp	r5, r2
 8002c66:	d100      	bne.n	8002c6a <__aeabi_dsub+0x192>
 8002c68:	e10a      	b.n	8002e80 <__aeabi_dsub+0x3a8>
 8002c6a:	2501      	movs	r5, #1
 8002c6c:	2938      	cmp	r1, #56	@ 0x38
 8002c6e:	dc17      	bgt.n	8002ca0 <__aeabi_dsub+0x1c8>
 8002c70:	468a      	mov	sl, r1
 8002c72:	4653      	mov	r3, sl
 8002c74:	2b1f      	cmp	r3, #31
 8002c76:	dd00      	ble.n	8002c7a <__aeabi_dsub+0x1a2>
 8002c78:	e1e7      	b.n	800304a <__aeabi_dsub+0x572>
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	1ad2      	subs	r2, r2, r3
 8002c7e:	9b02      	ldr	r3, [sp, #8]
 8002c80:	4661      	mov	r1, ip
 8002c82:	4093      	lsls	r3, r2
 8002c84:	001d      	movs	r5, r3
 8002c86:	4653      	mov	r3, sl
 8002c88:	40d9      	lsrs	r1, r3
 8002c8a:	4663      	mov	r3, ip
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	001a      	movs	r2, r3
 8002c90:	430d      	orrs	r5, r1
 8002c92:	1e51      	subs	r1, r2, #1
 8002c94:	418a      	sbcs	r2, r1
 8002c96:	4653      	mov	r3, sl
 8002c98:	4315      	orrs	r5, r2
 8002c9a:	9a02      	ldr	r2, [sp, #8]
 8002c9c:	40da      	lsrs	r2, r3
 8002c9e:	18a4      	adds	r4, r4, r2
 8002ca0:	182d      	adds	r5, r5, r0
 8002ca2:	4285      	cmp	r5, r0
 8002ca4:	4180      	sbcs	r0, r0
 8002ca6:	4240      	negs	r0, r0
 8002ca8:	1824      	adds	r4, r4, r0
 8002caa:	0223      	lsls	r3, r4, #8
 8002cac:	d400      	bmi.n	8002cb0 <__aeabi_dsub+0x1d8>
 8002cae:	e0b6      	b.n	8002e1e <__aeabi_dsub+0x346>
 8002cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <__aeabi_dsub+0x354>)
 8002cb2:	3701      	adds	r7, #1
 8002cb4:	429f      	cmp	r7, r3
 8002cb6:	d100      	bne.n	8002cba <__aeabi_dsub+0x1e2>
 8002cb8:	e0ad      	b.n	8002e16 <__aeabi_dsub+0x33e>
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8002e30 <__aeabi_dsub+0x358>)
 8002cbe:	086a      	lsrs	r2, r5, #1
 8002cc0:	401c      	ands	r4, r3
 8002cc2:	4029      	ands	r1, r5
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	07e5      	lsls	r5, r4, #31
 8002cc8:	4315      	orrs	r5, r2
 8002cca:	0864      	lsrs	r4, r4, #1
 8002ccc:	e78d      	b.n	8002bea <__aeabi_dsub+0x112>
 8002cce:	4a59      	ldr	r2, [pc, #356]	@ (8002e34 <__aeabi_dsub+0x35c>)
 8002cd0:	9b02      	ldr	r3, [sp, #8]
 8002cd2:	4692      	mov	sl, r2
 8002cd4:	4662      	mov	r2, ip
 8002cd6:	44ba      	add	sl, r7
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	d02c      	beq.n	8002d36 <__aeabi_dsub+0x25e>
 8002cdc:	428e      	cmp	r6, r1
 8002cde:	d02e      	beq.n	8002d3e <__aeabi_dsub+0x266>
 8002ce0:	4652      	mov	r2, sl
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	d060      	beq.n	8002da8 <__aeabi_dsub+0x2d0>
 8002ce6:	2f00      	cmp	r7, #0
 8002ce8:	d100      	bne.n	8002cec <__aeabi_dsub+0x214>
 8002cea:	e0db      	b.n	8002ea4 <__aeabi_dsub+0x3cc>
 8002cec:	4663      	mov	r3, ip
 8002cee:	000e      	movs	r6, r1
 8002cf0:	9c02      	ldr	r4, [sp, #8]
 8002cf2:	08d8      	lsrs	r0, r3, #3
 8002cf4:	0762      	lsls	r2, r4, #29
 8002cf6:	4302      	orrs	r2, r0
 8002cf8:	08e4      	lsrs	r4, r4, #3
 8002cfa:	0013      	movs	r3, r2
 8002cfc:	4323      	orrs	r3, r4
 8002cfe:	d100      	bne.n	8002d02 <__aeabi_dsub+0x22a>
 8002d00:	e254      	b.n	80031ac <__aeabi_dsub+0x6d4>
 8002d02:	2580      	movs	r5, #128	@ 0x80
 8002d04:	032d      	lsls	r5, r5, #12
 8002d06:	4325      	orrs	r5, r4
 8002d08:	032d      	lsls	r5, r5, #12
 8002d0a:	4c48      	ldr	r4, [pc, #288]	@ (8002e2c <__aeabi_dsub+0x354>)
 8002d0c:	0b2d      	lsrs	r5, r5, #12
 8002d0e:	e78c      	b.n	8002c2a <__aeabi_dsub+0x152>
 8002d10:	4661      	mov	r1, ip
 8002d12:	9b02      	ldr	r3, [sp, #8]
 8002d14:	4319      	orrs	r1, r3
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x242>
 8002d18:	e0cc      	b.n	8002eb4 <__aeabi_dsub+0x3dc>
 8002d1a:	0029      	movs	r1, r5
 8002d1c:	3901      	subs	r1, #1
 8002d1e:	2d01      	cmp	r5, #1
 8002d20:	d100      	bne.n	8002d24 <__aeabi_dsub+0x24c>
 8002d22:	e188      	b.n	8003036 <__aeabi_dsub+0x55e>
 8002d24:	4295      	cmp	r5, r2
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dsub+0x252>
 8002d28:	e0aa      	b.n	8002e80 <__aeabi_dsub+0x3a8>
 8002d2a:	2501      	movs	r5, #1
 8002d2c:	2938      	cmp	r1, #56	@ 0x38
 8002d2e:	dd00      	ble.n	8002d32 <__aeabi_dsub+0x25a>
 8002d30:	e72f      	b.n	8002b92 <__aeabi_dsub+0xba>
 8002d32:	468a      	mov	sl, r1
 8002d34:	e718      	b.n	8002b68 <__aeabi_dsub+0x90>
 8002d36:	2201      	movs	r2, #1
 8002d38:	4051      	eors	r1, r2
 8002d3a:	428e      	cmp	r6, r1
 8002d3c:	d1d0      	bne.n	8002ce0 <__aeabi_dsub+0x208>
 8002d3e:	4653      	mov	r3, sl
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x26e>
 8002d44:	e0be      	b.n	8002ec4 <__aeabi_dsub+0x3ec>
 8002d46:	2f00      	cmp	r7, #0
 8002d48:	d000      	beq.n	8002d4c <__aeabi_dsub+0x274>
 8002d4a:	e138      	b.n	8002fbe <__aeabi_dsub+0x4e6>
 8002d4c:	46ca      	mov	sl, r9
 8002d4e:	0022      	movs	r2, r4
 8002d50:	4302      	orrs	r2, r0
 8002d52:	d100      	bne.n	8002d56 <__aeabi_dsub+0x27e>
 8002d54:	e1e2      	b.n	800311c <__aeabi_dsub+0x644>
 8002d56:	4653      	mov	r3, sl
 8002d58:	1e59      	subs	r1, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x288>
 8002d5e:	e20d      	b.n	800317c <__aeabi_dsub+0x6a4>
 8002d60:	4a32      	ldr	r2, [pc, #200]	@ (8002e2c <__aeabi_dsub+0x354>)
 8002d62:	4592      	cmp	sl, r2
 8002d64:	d100      	bne.n	8002d68 <__aeabi_dsub+0x290>
 8002d66:	e1d2      	b.n	800310e <__aeabi_dsub+0x636>
 8002d68:	2701      	movs	r7, #1
 8002d6a:	2938      	cmp	r1, #56	@ 0x38
 8002d6c:	dc13      	bgt.n	8002d96 <__aeabi_dsub+0x2be>
 8002d6e:	291f      	cmp	r1, #31
 8002d70:	dd00      	ble.n	8002d74 <__aeabi_dsub+0x29c>
 8002d72:	e1ee      	b.n	8003152 <__aeabi_dsub+0x67a>
 8002d74:	2220      	movs	r2, #32
 8002d76:	9b02      	ldr	r3, [sp, #8]
 8002d78:	1a52      	subs	r2, r2, r1
 8002d7a:	0025      	movs	r5, r4
 8002d7c:	0007      	movs	r7, r0
 8002d7e:	469a      	mov	sl, r3
 8002d80:	40cc      	lsrs	r4, r1
 8002d82:	4090      	lsls	r0, r2
 8002d84:	4095      	lsls	r5, r2
 8002d86:	40cf      	lsrs	r7, r1
 8002d88:	44a2      	add	sl, r4
 8002d8a:	1e42      	subs	r2, r0, #1
 8002d8c:	4190      	sbcs	r0, r2
 8002d8e:	4653      	mov	r3, sl
 8002d90:	432f      	orrs	r7, r5
 8002d92:	4307      	orrs	r7, r0
 8002d94:	9302      	str	r3, [sp, #8]
 8002d96:	003d      	movs	r5, r7
 8002d98:	4465      	add	r5, ip
 8002d9a:	4565      	cmp	r5, ip
 8002d9c:	4192      	sbcs	r2, r2
 8002d9e:	9b02      	ldr	r3, [sp, #8]
 8002da0:	4252      	negs	r2, r2
 8002da2:	464f      	mov	r7, r9
 8002da4:	18d4      	adds	r4, r2, r3
 8002da6:	e780      	b.n	8002caa <__aeabi_dsub+0x1d2>
 8002da8:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <__aeabi_dsub+0x360>)
 8002daa:	1c7d      	adds	r5, r7, #1
 8002dac:	4215      	tst	r5, r2
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2da>
 8002db0:	e0aa      	b.n	8002f08 <__aeabi_dsub+0x430>
 8002db2:	4662      	mov	r2, ip
 8002db4:	0025      	movs	r5, r4
 8002db6:	9b02      	ldr	r3, [sp, #8]
 8002db8:	4305      	orrs	r5, r0
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	2f00      	cmp	r7, #0
 8002dbe:	d000      	beq.n	8002dc2 <__aeabi_dsub+0x2ea>
 8002dc0:	e0f5      	b.n	8002fae <__aeabi_dsub+0x4d6>
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	d100      	bne.n	8002dc8 <__aeabi_dsub+0x2f0>
 8002dc6:	e16b      	b.n	80030a0 <__aeabi_dsub+0x5c8>
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	d100      	bne.n	8002dce <__aeabi_dsub+0x2f6>
 8002dcc:	e152      	b.n	8003074 <__aeabi_dsub+0x59c>
 8002dce:	4663      	mov	r3, ip
 8002dd0:	1ac5      	subs	r5, r0, r3
 8002dd2:	9b02      	ldr	r3, [sp, #8]
 8002dd4:	1ae2      	subs	r2, r4, r3
 8002dd6:	42a8      	cmp	r0, r5
 8002dd8:	419b      	sbcs	r3, r3
 8002dda:	425b      	negs	r3, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	021a      	lsls	r2, r3, #8
 8002de0:	d400      	bmi.n	8002de4 <__aeabi_dsub+0x30c>
 8002de2:	e1d5      	b.n	8003190 <__aeabi_dsub+0x6b8>
 8002de4:	4663      	mov	r3, ip
 8002de6:	1a1d      	subs	r5, r3, r0
 8002de8:	45ac      	cmp	ip, r5
 8002dea:	4192      	sbcs	r2, r2
 8002dec:	2601      	movs	r6, #1
 8002dee:	9b02      	ldr	r3, [sp, #8]
 8002df0:	4252      	negs	r2, r2
 8002df2:	1b1c      	subs	r4, r3, r4
 8002df4:	4688      	mov	r8, r1
 8002df6:	1aa4      	subs	r4, r4, r2
 8002df8:	400e      	ands	r6, r1
 8002dfa:	e6f6      	b.n	8002bea <__aeabi_dsub+0x112>
 8002dfc:	4297      	cmp	r7, r2
 8002dfe:	d03f      	beq.n	8002e80 <__aeabi_dsub+0x3a8>
 8002e00:	4652      	mov	r2, sl
 8002e02:	2501      	movs	r5, #1
 8002e04:	2a38      	cmp	r2, #56	@ 0x38
 8002e06:	dd00      	ble.n	8002e0a <__aeabi_dsub+0x332>
 8002e08:	e74a      	b.n	8002ca0 <__aeabi_dsub+0x1c8>
 8002e0a:	2280      	movs	r2, #128	@ 0x80
 8002e0c:	9b02      	ldr	r3, [sp, #8]
 8002e0e:	0412      	lsls	r2, r2, #16
 8002e10:	4313      	orrs	r3, r2
 8002e12:	9302      	str	r3, [sp, #8]
 8002e14:	e72d      	b.n	8002c72 <__aeabi_dsub+0x19a>
 8002e16:	003c      	movs	r4, r7
 8002e18:	2500      	movs	r5, #0
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	e705      	b.n	8002c2a <__aeabi_dsub+0x152>
 8002e1e:	2307      	movs	r3, #7
 8002e20:	402b      	ands	r3, r5
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d000      	beq.n	8002e28 <__aeabi_dsub+0x350>
 8002e26:	e6e2      	b.n	8002bee <__aeabi_dsub+0x116>
 8002e28:	e06b      	b.n	8002f02 <__aeabi_dsub+0x42a>
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	000007ff 	.word	0x000007ff
 8002e30:	ff7fffff 	.word	0xff7fffff
 8002e34:	fffff801 	.word	0xfffff801
 8002e38:	000007fe 	.word	0x000007fe
 8002e3c:	0028      	movs	r0, r5
 8002e3e:	f000 fb63 	bl	8003508 <__clzsi2>
 8002e42:	0003      	movs	r3, r0
 8002e44:	3318      	adds	r3, #24
 8002e46:	2b1f      	cmp	r3, #31
 8002e48:	dc00      	bgt.n	8002e4c <__aeabi_dsub+0x374>
 8002e4a:	e6b4      	b.n	8002bb6 <__aeabi_dsub+0xde>
 8002e4c:	002a      	movs	r2, r5
 8002e4e:	3808      	subs	r0, #8
 8002e50:	4082      	lsls	r2, r0
 8002e52:	429f      	cmp	r7, r3
 8002e54:	dd00      	ble.n	8002e58 <__aeabi_dsub+0x380>
 8002e56:	e0b9      	b.n	8002fcc <__aeabi_dsub+0x4f4>
 8002e58:	1bdb      	subs	r3, r3, r7
 8002e5a:	1c58      	adds	r0, r3, #1
 8002e5c:	281f      	cmp	r0, #31
 8002e5e:	dc00      	bgt.n	8002e62 <__aeabi_dsub+0x38a>
 8002e60:	e1a0      	b.n	80031a4 <__aeabi_dsub+0x6cc>
 8002e62:	0015      	movs	r5, r2
 8002e64:	3b1f      	subs	r3, #31
 8002e66:	40dd      	lsrs	r5, r3
 8002e68:	2820      	cmp	r0, #32
 8002e6a:	d005      	beq.n	8002e78 <__aeabi_dsub+0x3a0>
 8002e6c:	2340      	movs	r3, #64	@ 0x40
 8002e6e:	1a1b      	subs	r3, r3, r0
 8002e70:	409a      	lsls	r2, r3
 8002e72:	1e53      	subs	r3, r2, #1
 8002e74:	419a      	sbcs	r2, r3
 8002e76:	4315      	orrs	r5, r2
 8002e78:	2307      	movs	r3, #7
 8002e7a:	2700      	movs	r7, #0
 8002e7c:	402b      	ands	r3, r5
 8002e7e:	e7d0      	b.n	8002e22 <__aeabi_dsub+0x34a>
 8002e80:	08c0      	lsrs	r0, r0, #3
 8002e82:	0762      	lsls	r2, r4, #29
 8002e84:	4302      	orrs	r2, r0
 8002e86:	08e4      	lsrs	r4, r4, #3
 8002e88:	e737      	b.n	8002cfa <__aeabi_dsub+0x222>
 8002e8a:	08ea      	lsrs	r2, r5, #3
 8002e8c:	0763      	lsls	r3, r4, #29
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	4bd3      	ldr	r3, [pc, #844]	@ (80031e0 <__aeabi_dsub+0x708>)
 8002e92:	08e4      	lsrs	r4, r4, #3
 8002e94:	429f      	cmp	r7, r3
 8002e96:	d100      	bne.n	8002e9a <__aeabi_dsub+0x3c2>
 8002e98:	e72f      	b.n	8002cfa <__aeabi_dsub+0x222>
 8002e9a:	0324      	lsls	r4, r4, #12
 8002e9c:	0b25      	lsrs	r5, r4, #12
 8002e9e:	057c      	lsls	r4, r7, #21
 8002ea0:	0d64      	lsrs	r4, r4, #21
 8002ea2:	e6c2      	b.n	8002c2a <__aeabi_dsub+0x152>
 8002ea4:	46ca      	mov	sl, r9
 8002ea6:	0022      	movs	r2, r4
 8002ea8:	4302      	orrs	r2, r0
 8002eaa:	d158      	bne.n	8002f5e <__aeabi_dsub+0x486>
 8002eac:	4663      	mov	r3, ip
 8002eae:	000e      	movs	r6, r1
 8002eb0:	9c02      	ldr	r4, [sp, #8]
 8002eb2:	9303      	str	r3, [sp, #12]
 8002eb4:	9b03      	ldr	r3, [sp, #12]
 8002eb6:	4657      	mov	r7, sl
 8002eb8:	08da      	lsrs	r2, r3, #3
 8002eba:	e7e7      	b.n	8002e8c <__aeabi_dsub+0x3b4>
 8002ebc:	4cc9      	ldr	r4, [pc, #804]	@ (80031e4 <__aeabi_dsub+0x70c>)
 8002ebe:	1aff      	subs	r7, r7, r3
 8002ec0:	4014      	ands	r4, r2
 8002ec2:	e692      	b.n	8002bea <__aeabi_dsub+0x112>
 8002ec4:	4dc8      	ldr	r5, [pc, #800]	@ (80031e8 <__aeabi_dsub+0x710>)
 8002ec6:	1c7a      	adds	r2, r7, #1
 8002ec8:	422a      	tst	r2, r5
 8002eca:	d000      	beq.n	8002ece <__aeabi_dsub+0x3f6>
 8002ecc:	e084      	b.n	8002fd8 <__aeabi_dsub+0x500>
 8002ece:	0022      	movs	r2, r4
 8002ed0:	4302      	orrs	r2, r0
 8002ed2:	2f00      	cmp	r7, #0
 8002ed4:	d000      	beq.n	8002ed8 <__aeabi_dsub+0x400>
 8002ed6:	e0ef      	b.n	80030b8 <__aeabi_dsub+0x5e0>
 8002ed8:	2a00      	cmp	r2, #0
 8002eda:	d100      	bne.n	8002ede <__aeabi_dsub+0x406>
 8002edc:	e0e5      	b.n	80030aa <__aeabi_dsub+0x5d2>
 8002ede:	4662      	mov	r2, ip
 8002ee0:	9902      	ldr	r1, [sp, #8]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	d100      	bne.n	8002ee8 <__aeabi_dsub+0x410>
 8002ee6:	e0c5      	b.n	8003074 <__aeabi_dsub+0x59c>
 8002ee8:	4663      	mov	r3, ip
 8002eea:	18c5      	adds	r5, r0, r3
 8002eec:	468c      	mov	ip, r1
 8002eee:	4285      	cmp	r5, r0
 8002ef0:	4180      	sbcs	r0, r0
 8002ef2:	4464      	add	r4, ip
 8002ef4:	4240      	negs	r0, r0
 8002ef6:	1824      	adds	r4, r4, r0
 8002ef8:	0223      	lsls	r3, r4, #8
 8002efa:	d502      	bpl.n	8002f02 <__aeabi_dsub+0x42a>
 8002efc:	4bb9      	ldr	r3, [pc, #740]	@ (80031e4 <__aeabi_dsub+0x70c>)
 8002efe:	3701      	adds	r7, #1
 8002f00:	401c      	ands	r4, r3
 8002f02:	46ba      	mov	sl, r7
 8002f04:	9503      	str	r5, [sp, #12]
 8002f06:	e7d5      	b.n	8002eb4 <__aeabi_dsub+0x3dc>
 8002f08:	4662      	mov	r2, ip
 8002f0a:	1a85      	subs	r5, r0, r2
 8002f0c:	42a8      	cmp	r0, r5
 8002f0e:	4192      	sbcs	r2, r2
 8002f10:	4252      	negs	r2, r2
 8002f12:	4691      	mov	r9, r2
 8002f14:	9b02      	ldr	r3, [sp, #8]
 8002f16:	1ae3      	subs	r3, r4, r3
 8002f18:	001a      	movs	r2, r3
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	1ad2      	subs	r2, r2, r3
 8002f1e:	0013      	movs	r3, r2
 8002f20:	4691      	mov	r9, r2
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	d46c      	bmi.n	8003000 <__aeabi_dsub+0x528>
 8002f26:	464a      	mov	r2, r9
 8002f28:	464c      	mov	r4, r9
 8002f2a:	432a      	orrs	r2, r5
 8002f2c:	d000      	beq.n	8002f30 <__aeabi_dsub+0x458>
 8002f2e:	e63a      	b.n	8002ba6 <__aeabi_dsub+0xce>
 8002f30:	2600      	movs	r6, #0
 8002f32:	2400      	movs	r4, #0
 8002f34:	2500      	movs	r5, #0
 8002f36:	e678      	b.n	8002c2a <__aeabi_dsub+0x152>
 8002f38:	9902      	ldr	r1, [sp, #8]
 8002f3a:	4653      	mov	r3, sl
 8002f3c:	000d      	movs	r5, r1
 8002f3e:	3a20      	subs	r2, #32
 8002f40:	40d5      	lsrs	r5, r2
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d006      	beq.n	8002f54 <__aeabi_dsub+0x47c>
 8002f46:	2240      	movs	r2, #64	@ 0x40
 8002f48:	1ad2      	subs	r2, r2, r3
 8002f4a:	000b      	movs	r3, r1
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	4662      	mov	r2, ip
 8002f50:	431a      	orrs	r2, r3
 8002f52:	4693      	mov	fp, r2
 8002f54:	465b      	mov	r3, fp
 8002f56:	1e5a      	subs	r2, r3, #1
 8002f58:	4193      	sbcs	r3, r2
 8002f5a:	431d      	orrs	r5, r3
 8002f5c:	e619      	b.n	8002b92 <__aeabi_dsub+0xba>
 8002f5e:	4653      	mov	r3, sl
 8002f60:	1e5a      	subs	r2, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d100      	bne.n	8002f68 <__aeabi_dsub+0x490>
 8002f66:	e0c6      	b.n	80030f6 <__aeabi_dsub+0x61e>
 8002f68:	4e9d      	ldr	r6, [pc, #628]	@ (80031e0 <__aeabi_dsub+0x708>)
 8002f6a:	45b2      	cmp	sl, r6
 8002f6c:	d100      	bne.n	8002f70 <__aeabi_dsub+0x498>
 8002f6e:	e6bd      	b.n	8002cec <__aeabi_dsub+0x214>
 8002f70:	4688      	mov	r8, r1
 8002f72:	000e      	movs	r6, r1
 8002f74:	2501      	movs	r5, #1
 8002f76:	2a38      	cmp	r2, #56	@ 0x38
 8002f78:	dc10      	bgt.n	8002f9c <__aeabi_dsub+0x4c4>
 8002f7a:	2a1f      	cmp	r2, #31
 8002f7c:	dc7f      	bgt.n	800307e <__aeabi_dsub+0x5a6>
 8002f7e:	2120      	movs	r1, #32
 8002f80:	0025      	movs	r5, r4
 8002f82:	1a89      	subs	r1, r1, r2
 8002f84:	0007      	movs	r7, r0
 8002f86:	4088      	lsls	r0, r1
 8002f88:	408d      	lsls	r5, r1
 8002f8a:	40d7      	lsrs	r7, r2
 8002f8c:	40d4      	lsrs	r4, r2
 8002f8e:	1e41      	subs	r1, r0, #1
 8002f90:	4188      	sbcs	r0, r1
 8002f92:	9b02      	ldr	r3, [sp, #8]
 8002f94:	433d      	orrs	r5, r7
 8002f96:	1b1b      	subs	r3, r3, r4
 8002f98:	4305      	orrs	r5, r0
 8002f9a:	9302      	str	r3, [sp, #8]
 8002f9c:	4662      	mov	r2, ip
 8002f9e:	1b55      	subs	r5, r2, r5
 8002fa0:	45ac      	cmp	ip, r5
 8002fa2:	4192      	sbcs	r2, r2
 8002fa4:	9b02      	ldr	r3, [sp, #8]
 8002fa6:	4252      	negs	r2, r2
 8002fa8:	464f      	mov	r7, r9
 8002faa:	1a9c      	subs	r4, r3, r2
 8002fac:	e5f6      	b.n	8002b9c <__aeabi_dsub+0xc4>
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	d000      	beq.n	8002fb4 <__aeabi_dsub+0x4dc>
 8002fb2:	e0b7      	b.n	8003124 <__aeabi_dsub+0x64c>
 8002fb4:	2a00      	cmp	r2, #0
 8002fb6:	d100      	bne.n	8002fba <__aeabi_dsub+0x4e2>
 8002fb8:	e0f0      	b.n	800319c <__aeabi_dsub+0x6c4>
 8002fba:	2601      	movs	r6, #1
 8002fbc:	400e      	ands	r6, r1
 8002fbe:	4663      	mov	r3, ip
 8002fc0:	9802      	ldr	r0, [sp, #8]
 8002fc2:	08d9      	lsrs	r1, r3, #3
 8002fc4:	0742      	lsls	r2, r0, #29
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	08c4      	lsrs	r4, r0, #3
 8002fca:	e696      	b.n	8002cfa <__aeabi_dsub+0x222>
 8002fcc:	4c85      	ldr	r4, [pc, #532]	@ (80031e4 <__aeabi_dsub+0x70c>)
 8002fce:	1aff      	subs	r7, r7, r3
 8002fd0:	4014      	ands	r4, r2
 8002fd2:	0762      	lsls	r2, r4, #29
 8002fd4:	08e4      	lsrs	r4, r4, #3
 8002fd6:	e760      	b.n	8002e9a <__aeabi_dsub+0x3c2>
 8002fd8:	4981      	ldr	r1, [pc, #516]	@ (80031e0 <__aeabi_dsub+0x708>)
 8002fda:	428a      	cmp	r2, r1
 8002fdc:	d100      	bne.n	8002fe0 <__aeabi_dsub+0x508>
 8002fde:	e0c9      	b.n	8003174 <__aeabi_dsub+0x69c>
 8002fe0:	4663      	mov	r3, ip
 8002fe2:	18c1      	adds	r1, r0, r3
 8002fe4:	4281      	cmp	r1, r0
 8002fe6:	4180      	sbcs	r0, r0
 8002fe8:	9b02      	ldr	r3, [sp, #8]
 8002fea:	4240      	negs	r0, r0
 8002fec:	18e3      	adds	r3, r4, r3
 8002fee:	181b      	adds	r3, r3, r0
 8002ff0:	07dd      	lsls	r5, r3, #31
 8002ff2:	085c      	lsrs	r4, r3, #1
 8002ff4:	2307      	movs	r3, #7
 8002ff6:	0849      	lsrs	r1, r1, #1
 8002ff8:	430d      	orrs	r5, r1
 8002ffa:	0017      	movs	r7, r2
 8002ffc:	402b      	ands	r3, r5
 8002ffe:	e710      	b.n	8002e22 <__aeabi_dsub+0x34a>
 8003000:	4663      	mov	r3, ip
 8003002:	1a1d      	subs	r5, r3, r0
 8003004:	45ac      	cmp	ip, r5
 8003006:	4192      	sbcs	r2, r2
 8003008:	2601      	movs	r6, #1
 800300a:	9b02      	ldr	r3, [sp, #8]
 800300c:	4252      	negs	r2, r2
 800300e:	1b1c      	subs	r4, r3, r4
 8003010:	4688      	mov	r8, r1
 8003012:	1aa4      	subs	r4, r4, r2
 8003014:	400e      	ands	r6, r1
 8003016:	e5c6      	b.n	8002ba6 <__aeabi_dsub+0xce>
 8003018:	4663      	mov	r3, ip
 800301a:	18c5      	adds	r5, r0, r3
 800301c:	9b02      	ldr	r3, [sp, #8]
 800301e:	4285      	cmp	r5, r0
 8003020:	4180      	sbcs	r0, r0
 8003022:	469c      	mov	ip, r3
 8003024:	4240      	negs	r0, r0
 8003026:	4464      	add	r4, ip
 8003028:	1824      	adds	r4, r4, r0
 800302a:	2701      	movs	r7, #1
 800302c:	0223      	lsls	r3, r4, #8
 800302e:	d400      	bmi.n	8003032 <__aeabi_dsub+0x55a>
 8003030:	e6f5      	b.n	8002e1e <__aeabi_dsub+0x346>
 8003032:	2702      	movs	r7, #2
 8003034:	e641      	b.n	8002cba <__aeabi_dsub+0x1e2>
 8003036:	4663      	mov	r3, ip
 8003038:	1ac5      	subs	r5, r0, r3
 800303a:	42a8      	cmp	r0, r5
 800303c:	4180      	sbcs	r0, r0
 800303e:	9b02      	ldr	r3, [sp, #8]
 8003040:	4240      	negs	r0, r0
 8003042:	1ae4      	subs	r4, r4, r3
 8003044:	2701      	movs	r7, #1
 8003046:	1a24      	subs	r4, r4, r0
 8003048:	e5a8      	b.n	8002b9c <__aeabi_dsub+0xc4>
 800304a:	9d02      	ldr	r5, [sp, #8]
 800304c:	4652      	mov	r2, sl
 800304e:	002b      	movs	r3, r5
 8003050:	3a20      	subs	r2, #32
 8003052:	40d3      	lsrs	r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	4653      	mov	r3, sl
 8003058:	2b20      	cmp	r3, #32
 800305a:	d006      	beq.n	800306a <__aeabi_dsub+0x592>
 800305c:	2240      	movs	r2, #64	@ 0x40
 800305e:	1ad2      	subs	r2, r2, r3
 8003060:	002b      	movs	r3, r5
 8003062:	4093      	lsls	r3, r2
 8003064:	4662      	mov	r2, ip
 8003066:	431a      	orrs	r2, r3
 8003068:	4693      	mov	fp, r2
 800306a:	465d      	mov	r5, fp
 800306c:	1e6b      	subs	r3, r5, #1
 800306e:	419d      	sbcs	r5, r3
 8003070:	430d      	orrs	r5, r1
 8003072:	e615      	b.n	8002ca0 <__aeabi_dsub+0x1c8>
 8003074:	0762      	lsls	r2, r4, #29
 8003076:	08c0      	lsrs	r0, r0, #3
 8003078:	4302      	orrs	r2, r0
 800307a:	08e4      	lsrs	r4, r4, #3
 800307c:	e70d      	b.n	8002e9a <__aeabi_dsub+0x3c2>
 800307e:	0011      	movs	r1, r2
 8003080:	0027      	movs	r7, r4
 8003082:	3920      	subs	r1, #32
 8003084:	40cf      	lsrs	r7, r1
 8003086:	2a20      	cmp	r2, #32
 8003088:	d005      	beq.n	8003096 <__aeabi_dsub+0x5be>
 800308a:	2140      	movs	r1, #64	@ 0x40
 800308c:	1a8a      	subs	r2, r1, r2
 800308e:	4094      	lsls	r4, r2
 8003090:	0025      	movs	r5, r4
 8003092:	4305      	orrs	r5, r0
 8003094:	9503      	str	r5, [sp, #12]
 8003096:	9d03      	ldr	r5, [sp, #12]
 8003098:	1e6a      	subs	r2, r5, #1
 800309a:	4195      	sbcs	r5, r2
 800309c:	433d      	orrs	r5, r7
 800309e:	e77d      	b.n	8002f9c <__aeabi_dsub+0x4c4>
 80030a0:	2a00      	cmp	r2, #0
 80030a2:	d100      	bne.n	80030a6 <__aeabi_dsub+0x5ce>
 80030a4:	e744      	b.n	8002f30 <__aeabi_dsub+0x458>
 80030a6:	2601      	movs	r6, #1
 80030a8:	400e      	ands	r6, r1
 80030aa:	4663      	mov	r3, ip
 80030ac:	08d9      	lsrs	r1, r3, #3
 80030ae:	9b02      	ldr	r3, [sp, #8]
 80030b0:	075a      	lsls	r2, r3, #29
 80030b2:	430a      	orrs	r2, r1
 80030b4:	08dc      	lsrs	r4, r3, #3
 80030b6:	e6f0      	b.n	8002e9a <__aeabi_dsub+0x3c2>
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d028      	beq.n	800310e <__aeabi_dsub+0x636>
 80030bc:	4662      	mov	r2, ip
 80030be:	9f02      	ldr	r7, [sp, #8]
 80030c0:	08c0      	lsrs	r0, r0, #3
 80030c2:	433a      	orrs	r2, r7
 80030c4:	d100      	bne.n	80030c8 <__aeabi_dsub+0x5f0>
 80030c6:	e6dc      	b.n	8002e82 <__aeabi_dsub+0x3aa>
 80030c8:	0762      	lsls	r2, r4, #29
 80030ca:	4310      	orrs	r0, r2
 80030cc:	2280      	movs	r2, #128	@ 0x80
 80030ce:	08e4      	lsrs	r4, r4, #3
 80030d0:	0312      	lsls	r2, r2, #12
 80030d2:	4214      	tst	r4, r2
 80030d4:	d009      	beq.n	80030ea <__aeabi_dsub+0x612>
 80030d6:	08fd      	lsrs	r5, r7, #3
 80030d8:	4215      	tst	r5, r2
 80030da:	d106      	bne.n	80030ea <__aeabi_dsub+0x612>
 80030dc:	4663      	mov	r3, ip
 80030de:	2601      	movs	r6, #1
 80030e0:	002c      	movs	r4, r5
 80030e2:	08d8      	lsrs	r0, r3, #3
 80030e4:	077b      	lsls	r3, r7, #29
 80030e6:	4318      	orrs	r0, r3
 80030e8:	400e      	ands	r6, r1
 80030ea:	0f42      	lsrs	r2, r0, #29
 80030ec:	00c0      	lsls	r0, r0, #3
 80030ee:	08c0      	lsrs	r0, r0, #3
 80030f0:	0752      	lsls	r2, r2, #29
 80030f2:	4302      	orrs	r2, r0
 80030f4:	e601      	b.n	8002cfa <__aeabi_dsub+0x222>
 80030f6:	4663      	mov	r3, ip
 80030f8:	1a1d      	subs	r5, r3, r0
 80030fa:	45ac      	cmp	ip, r5
 80030fc:	4192      	sbcs	r2, r2
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	000e      	movs	r6, r1
 8003106:	4688      	mov	r8, r1
 8003108:	2701      	movs	r7, #1
 800310a:	1aa4      	subs	r4, r4, r2
 800310c:	e546      	b.n	8002b9c <__aeabi_dsub+0xc4>
 800310e:	4663      	mov	r3, ip
 8003110:	08d9      	lsrs	r1, r3, #3
 8003112:	9b02      	ldr	r3, [sp, #8]
 8003114:	075a      	lsls	r2, r3, #29
 8003116:	430a      	orrs	r2, r1
 8003118:	08dc      	lsrs	r4, r3, #3
 800311a:	e5ee      	b.n	8002cfa <__aeabi_dsub+0x222>
 800311c:	4663      	mov	r3, ip
 800311e:	9c02      	ldr	r4, [sp, #8]
 8003120:	9303      	str	r3, [sp, #12]
 8003122:	e6c7      	b.n	8002eb4 <__aeabi_dsub+0x3dc>
 8003124:	08c0      	lsrs	r0, r0, #3
 8003126:	2a00      	cmp	r2, #0
 8003128:	d100      	bne.n	800312c <__aeabi_dsub+0x654>
 800312a:	e6aa      	b.n	8002e82 <__aeabi_dsub+0x3aa>
 800312c:	0762      	lsls	r2, r4, #29
 800312e:	4310      	orrs	r0, r2
 8003130:	2280      	movs	r2, #128	@ 0x80
 8003132:	08e4      	lsrs	r4, r4, #3
 8003134:	0312      	lsls	r2, r2, #12
 8003136:	4214      	tst	r4, r2
 8003138:	d0d7      	beq.n	80030ea <__aeabi_dsub+0x612>
 800313a:	9f02      	ldr	r7, [sp, #8]
 800313c:	08fd      	lsrs	r5, r7, #3
 800313e:	4215      	tst	r5, r2
 8003140:	d1d3      	bne.n	80030ea <__aeabi_dsub+0x612>
 8003142:	4663      	mov	r3, ip
 8003144:	2601      	movs	r6, #1
 8003146:	08d8      	lsrs	r0, r3, #3
 8003148:	077b      	lsls	r3, r7, #29
 800314a:	002c      	movs	r4, r5
 800314c:	4318      	orrs	r0, r3
 800314e:	400e      	ands	r6, r1
 8003150:	e7cb      	b.n	80030ea <__aeabi_dsub+0x612>
 8003152:	000a      	movs	r2, r1
 8003154:	0027      	movs	r7, r4
 8003156:	3a20      	subs	r2, #32
 8003158:	40d7      	lsrs	r7, r2
 800315a:	2920      	cmp	r1, #32
 800315c:	d005      	beq.n	800316a <__aeabi_dsub+0x692>
 800315e:	2240      	movs	r2, #64	@ 0x40
 8003160:	1a52      	subs	r2, r2, r1
 8003162:	4094      	lsls	r4, r2
 8003164:	0025      	movs	r5, r4
 8003166:	4305      	orrs	r5, r0
 8003168:	9503      	str	r5, [sp, #12]
 800316a:	9d03      	ldr	r5, [sp, #12]
 800316c:	1e6a      	subs	r2, r5, #1
 800316e:	4195      	sbcs	r5, r2
 8003170:	432f      	orrs	r7, r5
 8003172:	e610      	b.n	8002d96 <__aeabi_dsub+0x2be>
 8003174:	0014      	movs	r4, r2
 8003176:	2500      	movs	r5, #0
 8003178:	2200      	movs	r2, #0
 800317a:	e556      	b.n	8002c2a <__aeabi_dsub+0x152>
 800317c:	9b02      	ldr	r3, [sp, #8]
 800317e:	4460      	add	r0, ip
 8003180:	4699      	mov	r9, r3
 8003182:	4560      	cmp	r0, ip
 8003184:	4192      	sbcs	r2, r2
 8003186:	444c      	add	r4, r9
 8003188:	4252      	negs	r2, r2
 800318a:	0005      	movs	r5, r0
 800318c:	18a4      	adds	r4, r4, r2
 800318e:	e74c      	b.n	800302a <__aeabi_dsub+0x552>
 8003190:	001a      	movs	r2, r3
 8003192:	001c      	movs	r4, r3
 8003194:	432a      	orrs	r2, r5
 8003196:	d000      	beq.n	800319a <__aeabi_dsub+0x6c2>
 8003198:	e6b3      	b.n	8002f02 <__aeabi_dsub+0x42a>
 800319a:	e6c9      	b.n	8002f30 <__aeabi_dsub+0x458>
 800319c:	2480      	movs	r4, #128	@ 0x80
 800319e:	2600      	movs	r6, #0
 80031a0:	0324      	lsls	r4, r4, #12
 80031a2:	e5ae      	b.n	8002d02 <__aeabi_dsub+0x22a>
 80031a4:	2120      	movs	r1, #32
 80031a6:	2500      	movs	r5, #0
 80031a8:	1a09      	subs	r1, r1, r0
 80031aa:	e517      	b.n	8002bdc <__aeabi_dsub+0x104>
 80031ac:	2200      	movs	r2, #0
 80031ae:	2500      	movs	r5, #0
 80031b0:	4c0b      	ldr	r4, [pc, #44]	@ (80031e0 <__aeabi_dsub+0x708>)
 80031b2:	e53a      	b.n	8002c2a <__aeabi_dsub+0x152>
 80031b4:	2d00      	cmp	r5, #0
 80031b6:	d100      	bne.n	80031ba <__aeabi_dsub+0x6e2>
 80031b8:	e5f6      	b.n	8002da8 <__aeabi_dsub+0x2d0>
 80031ba:	464b      	mov	r3, r9
 80031bc:	1bda      	subs	r2, r3, r7
 80031be:	4692      	mov	sl, r2
 80031c0:	2f00      	cmp	r7, #0
 80031c2:	d100      	bne.n	80031c6 <__aeabi_dsub+0x6ee>
 80031c4:	e66f      	b.n	8002ea6 <__aeabi_dsub+0x3ce>
 80031c6:	2a38      	cmp	r2, #56	@ 0x38
 80031c8:	dc05      	bgt.n	80031d6 <__aeabi_dsub+0x6fe>
 80031ca:	2680      	movs	r6, #128	@ 0x80
 80031cc:	0436      	lsls	r6, r6, #16
 80031ce:	4334      	orrs	r4, r6
 80031d0:	4688      	mov	r8, r1
 80031d2:	000e      	movs	r6, r1
 80031d4:	e6d1      	b.n	8002f7a <__aeabi_dsub+0x4a2>
 80031d6:	4688      	mov	r8, r1
 80031d8:	000e      	movs	r6, r1
 80031da:	2501      	movs	r5, #1
 80031dc:	e6de      	b.n	8002f9c <__aeabi_dsub+0x4c4>
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	000007ff 	.word	0x000007ff
 80031e4:	ff7fffff 	.word	0xff7fffff
 80031e8:	000007fe 	.word	0x000007fe
 80031ec:	2d00      	cmp	r5, #0
 80031ee:	d100      	bne.n	80031f2 <__aeabi_dsub+0x71a>
 80031f0:	e668      	b.n	8002ec4 <__aeabi_dsub+0x3ec>
 80031f2:	464b      	mov	r3, r9
 80031f4:	1bd9      	subs	r1, r3, r7
 80031f6:	2f00      	cmp	r7, #0
 80031f8:	d101      	bne.n	80031fe <__aeabi_dsub+0x726>
 80031fa:	468a      	mov	sl, r1
 80031fc:	e5a7      	b.n	8002d4e <__aeabi_dsub+0x276>
 80031fe:	2701      	movs	r7, #1
 8003200:	2938      	cmp	r1, #56	@ 0x38
 8003202:	dd00      	ble.n	8003206 <__aeabi_dsub+0x72e>
 8003204:	e5c7      	b.n	8002d96 <__aeabi_dsub+0x2be>
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	0412      	lsls	r2, r2, #16
 800320a:	4314      	orrs	r4, r2
 800320c:	e5af      	b.n	8002d6e <__aeabi_dsub+0x296>
 800320e:	46c0      	nop			@ (mov r8, r8)

08003210 <__aeabi_dcmpun>:
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	46c6      	mov	lr, r8
 8003214:	031e      	lsls	r6, r3, #12
 8003216:	0b36      	lsrs	r6, r6, #12
 8003218:	46b0      	mov	r8, r6
 800321a:	4e0d      	ldr	r6, [pc, #52]	@ (8003250 <__aeabi_dcmpun+0x40>)
 800321c:	030c      	lsls	r4, r1, #12
 800321e:	004d      	lsls	r5, r1, #1
 8003220:	005f      	lsls	r7, r3, #1
 8003222:	b500      	push	{lr}
 8003224:	0b24      	lsrs	r4, r4, #12
 8003226:	0d6d      	lsrs	r5, r5, #21
 8003228:	0d7f      	lsrs	r7, r7, #21
 800322a:	42b5      	cmp	r5, r6
 800322c:	d00b      	beq.n	8003246 <__aeabi_dcmpun+0x36>
 800322e:	4908      	ldr	r1, [pc, #32]	@ (8003250 <__aeabi_dcmpun+0x40>)
 8003230:	2000      	movs	r0, #0
 8003232:	428f      	cmp	r7, r1
 8003234:	d104      	bne.n	8003240 <__aeabi_dcmpun+0x30>
 8003236:	4646      	mov	r6, r8
 8003238:	4316      	orrs	r6, r2
 800323a:	0030      	movs	r0, r6
 800323c:	1e43      	subs	r3, r0, #1
 800323e:	4198      	sbcs	r0, r3
 8003240:	bc80      	pop	{r7}
 8003242:	46b8      	mov	r8, r7
 8003244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003246:	4304      	orrs	r4, r0
 8003248:	2001      	movs	r0, #1
 800324a:	2c00      	cmp	r4, #0
 800324c:	d1f8      	bne.n	8003240 <__aeabi_dcmpun+0x30>
 800324e:	e7ee      	b.n	800322e <__aeabi_dcmpun+0x1e>
 8003250:	000007ff 	.word	0x000007ff

08003254 <__aeabi_d2iz>:
 8003254:	000b      	movs	r3, r1
 8003256:	0002      	movs	r2, r0
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	4d16      	ldr	r5, [pc, #88]	@ (80032b4 <__aeabi_d2iz+0x60>)
 800325c:	030c      	lsls	r4, r1, #12
 800325e:	b082      	sub	sp, #8
 8003260:	0049      	lsls	r1, r1, #1
 8003262:	2000      	movs	r0, #0
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	0b24      	lsrs	r4, r4, #12
 800326a:	0d49      	lsrs	r1, r1, #21
 800326c:	0fde      	lsrs	r6, r3, #31
 800326e:	42a9      	cmp	r1, r5
 8003270:	dd04      	ble.n	800327c <__aeabi_d2iz+0x28>
 8003272:	4811      	ldr	r0, [pc, #68]	@ (80032b8 <__aeabi_d2iz+0x64>)
 8003274:	4281      	cmp	r1, r0
 8003276:	dd03      	ble.n	8003280 <__aeabi_d2iz+0x2c>
 8003278:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <__aeabi_d2iz+0x68>)
 800327a:	18f0      	adds	r0, r6, r3
 800327c:	b002      	add	sp, #8
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	2080      	movs	r0, #128	@ 0x80
 8003282:	0340      	lsls	r0, r0, #13
 8003284:	4320      	orrs	r0, r4
 8003286:	4c0e      	ldr	r4, [pc, #56]	@ (80032c0 <__aeabi_d2iz+0x6c>)
 8003288:	1a64      	subs	r4, r4, r1
 800328a:	2c1f      	cmp	r4, #31
 800328c:	dd08      	ble.n	80032a0 <__aeabi_d2iz+0x4c>
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <__aeabi_d2iz+0x70>)
 8003290:	1a5b      	subs	r3, r3, r1
 8003292:	40d8      	lsrs	r0, r3
 8003294:	0003      	movs	r3, r0
 8003296:	4258      	negs	r0, r3
 8003298:	2e00      	cmp	r6, #0
 800329a:	d1ef      	bne.n	800327c <__aeabi_d2iz+0x28>
 800329c:	0018      	movs	r0, r3
 800329e:	e7ed      	b.n	800327c <__aeabi_d2iz+0x28>
 80032a0:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <__aeabi_d2iz+0x74>)
 80032a2:	9a00      	ldr	r2, [sp, #0]
 80032a4:	469c      	mov	ip, r3
 80032a6:	0003      	movs	r3, r0
 80032a8:	4461      	add	r1, ip
 80032aa:	408b      	lsls	r3, r1
 80032ac:	40e2      	lsrs	r2, r4
 80032ae:	4313      	orrs	r3, r2
 80032b0:	e7f1      	b.n	8003296 <__aeabi_d2iz+0x42>
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	000003fe 	.word	0x000003fe
 80032b8:	0000041d 	.word	0x0000041d
 80032bc:	7fffffff 	.word	0x7fffffff
 80032c0:	00000433 	.word	0x00000433
 80032c4:	00000413 	.word	0x00000413
 80032c8:	fffffbed 	.word	0xfffffbed

080032cc <__aeabi_i2d>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d016      	beq.n	8003300 <__aeabi_i2d+0x34>
 80032d2:	17c3      	asrs	r3, r0, #31
 80032d4:	18c5      	adds	r5, r0, r3
 80032d6:	405d      	eors	r5, r3
 80032d8:	0fc4      	lsrs	r4, r0, #31
 80032da:	0028      	movs	r0, r5
 80032dc:	f000 f914 	bl	8003508 <__clzsi2>
 80032e0:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <__aeabi_i2d+0x58>)
 80032e2:	1a1b      	subs	r3, r3, r0
 80032e4:	055b      	lsls	r3, r3, #21
 80032e6:	0d5b      	lsrs	r3, r3, #21
 80032e8:	280a      	cmp	r0, #10
 80032ea:	dc14      	bgt.n	8003316 <__aeabi_i2d+0x4a>
 80032ec:	0002      	movs	r2, r0
 80032ee:	002e      	movs	r6, r5
 80032f0:	3215      	adds	r2, #21
 80032f2:	4096      	lsls	r6, r2
 80032f4:	220b      	movs	r2, #11
 80032f6:	1a12      	subs	r2, r2, r0
 80032f8:	40d5      	lsrs	r5, r2
 80032fa:	032d      	lsls	r5, r5, #12
 80032fc:	0b2d      	lsrs	r5, r5, #12
 80032fe:	e003      	b.n	8003308 <__aeabi_i2d+0x3c>
 8003300:	2400      	movs	r4, #0
 8003302:	2300      	movs	r3, #0
 8003304:	2500      	movs	r5, #0
 8003306:	2600      	movs	r6, #0
 8003308:	051b      	lsls	r3, r3, #20
 800330a:	432b      	orrs	r3, r5
 800330c:	07e4      	lsls	r4, r4, #31
 800330e:	4323      	orrs	r3, r4
 8003310:	0030      	movs	r0, r6
 8003312:	0019      	movs	r1, r3
 8003314:	bd70      	pop	{r4, r5, r6, pc}
 8003316:	380b      	subs	r0, #11
 8003318:	4085      	lsls	r5, r0
 800331a:	032d      	lsls	r5, r5, #12
 800331c:	2600      	movs	r6, #0
 800331e:	0b2d      	lsrs	r5, r5, #12
 8003320:	e7f2      	b.n	8003308 <__aeabi_i2d+0x3c>
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	0000041e 	.word	0x0000041e

08003328 <__aeabi_ui2d>:
 8003328:	b510      	push	{r4, lr}
 800332a:	1e04      	subs	r4, r0, #0
 800332c:	d010      	beq.n	8003350 <__aeabi_ui2d+0x28>
 800332e:	f000 f8eb 	bl	8003508 <__clzsi2>
 8003332:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <__aeabi_ui2d+0x44>)
 8003334:	1a1b      	subs	r3, r3, r0
 8003336:	055b      	lsls	r3, r3, #21
 8003338:	0d5b      	lsrs	r3, r3, #21
 800333a:	280a      	cmp	r0, #10
 800333c:	dc0f      	bgt.n	800335e <__aeabi_ui2d+0x36>
 800333e:	220b      	movs	r2, #11
 8003340:	0021      	movs	r1, r4
 8003342:	1a12      	subs	r2, r2, r0
 8003344:	40d1      	lsrs	r1, r2
 8003346:	3015      	adds	r0, #21
 8003348:	030a      	lsls	r2, r1, #12
 800334a:	4084      	lsls	r4, r0
 800334c:	0b12      	lsrs	r2, r2, #12
 800334e:	e001      	b.n	8003354 <__aeabi_ui2d+0x2c>
 8003350:	2300      	movs	r3, #0
 8003352:	2200      	movs	r2, #0
 8003354:	051b      	lsls	r3, r3, #20
 8003356:	4313      	orrs	r3, r2
 8003358:	0020      	movs	r0, r4
 800335a:	0019      	movs	r1, r3
 800335c:	bd10      	pop	{r4, pc}
 800335e:	0022      	movs	r2, r4
 8003360:	380b      	subs	r0, #11
 8003362:	4082      	lsls	r2, r0
 8003364:	0312      	lsls	r2, r2, #12
 8003366:	2400      	movs	r4, #0
 8003368:	0b12      	lsrs	r2, r2, #12
 800336a:	e7f3      	b.n	8003354 <__aeabi_ui2d+0x2c>
 800336c:	0000041e 	.word	0x0000041e

08003370 <__aeabi_f2d>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	0242      	lsls	r2, r0, #9
 8003374:	0043      	lsls	r3, r0, #1
 8003376:	0fc4      	lsrs	r4, r0, #31
 8003378:	20fe      	movs	r0, #254	@ 0xfe
 800337a:	0e1b      	lsrs	r3, r3, #24
 800337c:	1c59      	adds	r1, r3, #1
 800337e:	0a55      	lsrs	r5, r2, #9
 8003380:	4208      	tst	r0, r1
 8003382:	d00c      	beq.n	800339e <__aeabi_f2d+0x2e>
 8003384:	21e0      	movs	r1, #224	@ 0xe0
 8003386:	0089      	lsls	r1, r1, #2
 8003388:	468c      	mov	ip, r1
 800338a:	076d      	lsls	r5, r5, #29
 800338c:	0b12      	lsrs	r2, r2, #12
 800338e:	4463      	add	r3, ip
 8003390:	051b      	lsls	r3, r3, #20
 8003392:	4313      	orrs	r3, r2
 8003394:	07e4      	lsls	r4, r4, #31
 8003396:	4323      	orrs	r3, r4
 8003398:	0028      	movs	r0, r5
 800339a:	0019      	movs	r1, r3
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d114      	bne.n	80033cc <__aeabi_f2d+0x5c>
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	d01b      	beq.n	80033de <__aeabi_f2d+0x6e>
 80033a6:	0028      	movs	r0, r5
 80033a8:	f000 f8ae 	bl	8003508 <__clzsi2>
 80033ac:	280a      	cmp	r0, #10
 80033ae:	dc1c      	bgt.n	80033ea <__aeabi_f2d+0x7a>
 80033b0:	230b      	movs	r3, #11
 80033b2:	002a      	movs	r2, r5
 80033b4:	1a1b      	subs	r3, r3, r0
 80033b6:	40da      	lsrs	r2, r3
 80033b8:	0003      	movs	r3, r0
 80033ba:	3315      	adds	r3, #21
 80033bc:	409d      	lsls	r5, r3
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <__aeabi_f2d+0x88>)
 80033c0:	0312      	lsls	r2, r2, #12
 80033c2:	1a1b      	subs	r3, r3, r0
 80033c4:	055b      	lsls	r3, r3, #21
 80033c6:	0b12      	lsrs	r2, r2, #12
 80033c8:	0d5b      	lsrs	r3, r3, #21
 80033ca:	e7e1      	b.n	8003390 <__aeabi_f2d+0x20>
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	d009      	beq.n	80033e4 <__aeabi_f2d+0x74>
 80033d0:	0b13      	lsrs	r3, r2, #12
 80033d2:	2280      	movs	r2, #128	@ 0x80
 80033d4:	0312      	lsls	r2, r2, #12
 80033d6:	431a      	orrs	r2, r3
 80033d8:	076d      	lsls	r5, r5, #29
 80033da:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <__aeabi_f2d+0x8c>)
 80033dc:	e7d8      	b.n	8003390 <__aeabi_f2d+0x20>
 80033de:	2300      	movs	r3, #0
 80033e0:	2200      	movs	r2, #0
 80033e2:	e7d5      	b.n	8003390 <__aeabi_f2d+0x20>
 80033e4:	2200      	movs	r2, #0
 80033e6:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <__aeabi_f2d+0x8c>)
 80033e8:	e7d2      	b.n	8003390 <__aeabi_f2d+0x20>
 80033ea:	0003      	movs	r3, r0
 80033ec:	002a      	movs	r2, r5
 80033ee:	3b0b      	subs	r3, #11
 80033f0:	409a      	lsls	r2, r3
 80033f2:	2500      	movs	r5, #0
 80033f4:	e7e3      	b.n	80033be <__aeabi_f2d+0x4e>
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	00000389 	.word	0x00000389
 80033fc:	000007ff 	.word	0x000007ff

08003400 <__aeabi_d2f>:
 8003400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003402:	004b      	lsls	r3, r1, #1
 8003404:	030f      	lsls	r7, r1, #12
 8003406:	0d5b      	lsrs	r3, r3, #21
 8003408:	4c3b      	ldr	r4, [pc, #236]	@ (80034f8 <__aeabi_d2f+0xf8>)
 800340a:	0f45      	lsrs	r5, r0, #29
 800340c:	b083      	sub	sp, #12
 800340e:	0a7f      	lsrs	r7, r7, #9
 8003410:	1c5e      	adds	r6, r3, #1
 8003412:	432f      	orrs	r7, r5
 8003414:	9000      	str	r0, [sp, #0]
 8003416:	9101      	str	r1, [sp, #4]
 8003418:	0fca      	lsrs	r2, r1, #31
 800341a:	00c5      	lsls	r5, r0, #3
 800341c:	4226      	tst	r6, r4
 800341e:	d00b      	beq.n	8003438 <__aeabi_d2f+0x38>
 8003420:	4936      	ldr	r1, [pc, #216]	@ (80034fc <__aeabi_d2f+0xfc>)
 8003422:	185c      	adds	r4, r3, r1
 8003424:	2cfe      	cmp	r4, #254	@ 0xfe
 8003426:	dd13      	ble.n	8003450 <__aeabi_d2f+0x50>
 8003428:	20ff      	movs	r0, #255	@ 0xff
 800342a:	2300      	movs	r3, #0
 800342c:	05c0      	lsls	r0, r0, #23
 800342e:	4318      	orrs	r0, r3
 8003430:	07d2      	lsls	r2, r2, #31
 8003432:	4310      	orrs	r0, r2
 8003434:	b003      	add	sp, #12
 8003436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <__aeabi_d2f+0x42>
 800343c:	2000      	movs	r0, #0
 800343e:	2300      	movs	r3, #0
 8003440:	e7f4      	b.n	800342c <__aeabi_d2f+0x2c>
 8003442:	433d      	orrs	r5, r7
 8003444:	d0f0      	beq.n	8003428 <__aeabi_d2f+0x28>
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	03db      	lsls	r3, r3, #15
 800344a:	20ff      	movs	r0, #255	@ 0xff
 800344c:	433b      	orrs	r3, r7
 800344e:	e7ed      	b.n	800342c <__aeabi_d2f+0x2c>
 8003450:	2c00      	cmp	r4, #0
 8003452:	dd14      	ble.n	800347e <__aeabi_d2f+0x7e>
 8003454:	9b00      	ldr	r3, [sp, #0]
 8003456:	00ff      	lsls	r7, r7, #3
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	4183      	sbcs	r3, r0
 800345e:	0f69      	lsrs	r1, r5, #29
 8003460:	433b      	orrs	r3, r7
 8003462:	430b      	orrs	r3, r1
 8003464:	0759      	lsls	r1, r3, #29
 8003466:	d041      	beq.n	80034ec <__aeabi_d2f+0xec>
 8003468:	210f      	movs	r1, #15
 800346a:	4019      	ands	r1, r3
 800346c:	2904      	cmp	r1, #4
 800346e:	d028      	beq.n	80034c2 <__aeabi_d2f+0xc2>
 8003470:	3304      	adds	r3, #4
 8003472:	0159      	lsls	r1, r3, #5
 8003474:	d525      	bpl.n	80034c2 <__aeabi_d2f+0xc2>
 8003476:	3401      	adds	r4, #1
 8003478:	2300      	movs	r3, #0
 800347a:	b2e0      	uxtb	r0, r4
 800347c:	e7d6      	b.n	800342c <__aeabi_d2f+0x2c>
 800347e:	0021      	movs	r1, r4
 8003480:	3117      	adds	r1, #23
 8003482:	dbdb      	blt.n	800343c <__aeabi_d2f+0x3c>
 8003484:	2180      	movs	r1, #128	@ 0x80
 8003486:	201e      	movs	r0, #30
 8003488:	0409      	lsls	r1, r1, #16
 800348a:	4339      	orrs	r1, r7
 800348c:	1b00      	subs	r0, r0, r4
 800348e:	281f      	cmp	r0, #31
 8003490:	dd1b      	ble.n	80034ca <__aeabi_d2f+0xca>
 8003492:	2602      	movs	r6, #2
 8003494:	4276      	negs	r6, r6
 8003496:	1b34      	subs	r4, r6, r4
 8003498:	000e      	movs	r6, r1
 800349a:	40e6      	lsrs	r6, r4
 800349c:	0034      	movs	r4, r6
 800349e:	2820      	cmp	r0, #32
 80034a0:	d004      	beq.n	80034ac <__aeabi_d2f+0xac>
 80034a2:	4817      	ldr	r0, [pc, #92]	@ (8003500 <__aeabi_d2f+0x100>)
 80034a4:	4684      	mov	ip, r0
 80034a6:	4463      	add	r3, ip
 80034a8:	4099      	lsls	r1, r3
 80034aa:	430d      	orrs	r5, r1
 80034ac:	002b      	movs	r3, r5
 80034ae:	1e59      	subs	r1, r3, #1
 80034b0:	418b      	sbcs	r3, r1
 80034b2:	4323      	orrs	r3, r4
 80034b4:	0759      	lsls	r1, r3, #29
 80034b6:	d015      	beq.n	80034e4 <__aeabi_d2f+0xe4>
 80034b8:	210f      	movs	r1, #15
 80034ba:	2400      	movs	r4, #0
 80034bc:	4019      	ands	r1, r3
 80034be:	2904      	cmp	r1, #4
 80034c0:	d117      	bne.n	80034f2 <__aeabi_d2f+0xf2>
 80034c2:	019b      	lsls	r3, r3, #6
 80034c4:	0a5b      	lsrs	r3, r3, #9
 80034c6:	b2e0      	uxtb	r0, r4
 80034c8:	e7b0      	b.n	800342c <__aeabi_d2f+0x2c>
 80034ca:	4c0e      	ldr	r4, [pc, #56]	@ (8003504 <__aeabi_d2f+0x104>)
 80034cc:	191c      	adds	r4, r3, r4
 80034ce:	002b      	movs	r3, r5
 80034d0:	40a5      	lsls	r5, r4
 80034d2:	40c3      	lsrs	r3, r0
 80034d4:	40a1      	lsls	r1, r4
 80034d6:	1e68      	subs	r0, r5, #1
 80034d8:	4185      	sbcs	r5, r0
 80034da:	4329      	orrs	r1, r5
 80034dc:	430b      	orrs	r3, r1
 80034de:	2400      	movs	r4, #0
 80034e0:	0759      	lsls	r1, r3, #29
 80034e2:	d1c1      	bne.n	8003468 <__aeabi_d2f+0x68>
 80034e4:	019b      	lsls	r3, r3, #6
 80034e6:	2000      	movs	r0, #0
 80034e8:	0a5b      	lsrs	r3, r3, #9
 80034ea:	e79f      	b.n	800342c <__aeabi_d2f+0x2c>
 80034ec:	08db      	lsrs	r3, r3, #3
 80034ee:	b2e0      	uxtb	r0, r4
 80034f0:	e79c      	b.n	800342c <__aeabi_d2f+0x2c>
 80034f2:	3304      	adds	r3, #4
 80034f4:	e7e5      	b.n	80034c2 <__aeabi_d2f+0xc2>
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	000007fe 	.word	0x000007fe
 80034fc:	fffffc80 	.word	0xfffffc80
 8003500:	fffffca2 	.word	0xfffffca2
 8003504:	fffffc82 	.word	0xfffffc82

08003508 <__clzsi2>:
 8003508:	211c      	movs	r1, #28
 800350a:	2301      	movs	r3, #1
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	4298      	cmp	r0, r3
 8003510:	d301      	bcc.n	8003516 <__clzsi2+0xe>
 8003512:	0c00      	lsrs	r0, r0, #16
 8003514:	3910      	subs	r1, #16
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	4298      	cmp	r0, r3
 800351a:	d301      	bcc.n	8003520 <__clzsi2+0x18>
 800351c:	0a00      	lsrs	r0, r0, #8
 800351e:	3908      	subs	r1, #8
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	4298      	cmp	r0, r3
 8003524:	d301      	bcc.n	800352a <__clzsi2+0x22>
 8003526:	0900      	lsrs	r0, r0, #4
 8003528:	3904      	subs	r1, #4
 800352a:	a202      	add	r2, pc, #8	@ (adr r2, 8003534 <__clzsi2+0x2c>)
 800352c:	5c10      	ldrb	r0, [r2, r0]
 800352e:	1840      	adds	r0, r0, r1
 8003530:	4770      	bx	lr
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	02020304 	.word	0x02020304
 8003538:	01010101 	.word	0x01010101
	...

08003544 <__clzdi2>:
 8003544:	b510      	push	{r4, lr}
 8003546:	2900      	cmp	r1, #0
 8003548:	d103      	bne.n	8003552 <__clzdi2+0xe>
 800354a:	f7ff ffdd 	bl	8003508 <__clzsi2>
 800354e:	3020      	adds	r0, #32
 8003550:	e002      	b.n	8003558 <__clzdi2+0x14>
 8003552:	0008      	movs	r0, r1
 8003554:	f7ff ffd8 	bl	8003508 <__clzsi2>
 8003558:	bd10      	pop	{r4, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)

0800355c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800355c:	b500      	push	{lr}
 800355e:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003560:	2238      	movs	r2, #56	@ 0x38
 8003562:	2100      	movs	r1, #0
 8003564:	a804      	add	r0, sp, #16
 8003566:	f006 fdd5 	bl	800a114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800356a:	2210      	movs	r2, #16
 800356c:	2100      	movs	r1, #0
 800356e:	4668      	mov	r0, sp
 8003570:	f006 fdd0 	bl	800a114 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003574:	2080      	movs	r0, #128	@ 0x80
 8003576:	0080      	lsls	r0, r0, #2
 8003578:	f002 f994 	bl	80058a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800357c:	2302      	movs	r3, #2
 800357e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003580:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003582:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003584:	3306      	adds	r3, #6
 8003586:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003588:	2380      	movs	r3, #128	@ 0x80
 800358a:	029b      	lsls	r3, r3, #10
 800358c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800358e:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003590:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003592:	049b      	lsls	r3, r3, #18
 8003594:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003596:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003598:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800359a:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800359c:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800359e:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035a0:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a2:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80035a4:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035a6:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80035a8:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035aa:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035ac:	f002 f9aa 	bl	8005904 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035b0:	2207      	movs	r2, #7
 80035b2:	2302      	movs	r3, #2
 80035b4:	9200      	str	r2, [sp, #0]
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2300      	movs	r3, #0
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035bc:	2102      	movs	r1, #2
 80035be:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035c0:	9202      	str	r2, [sp, #8]
 80035c2:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035c4:	f002 fc54 	bl	8005e70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80035c8:	b013      	add	sp, #76	@ 0x4c
 80035ca:	bd00      	pop	{pc}

080035cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
	adcflag = 1;
 80035cc:	2201      	movs	r2, #1
 80035ce:	4b01      	ldr	r3, [pc, #4]	@ (80035d4 <HAL_ADC_ConvCpltCallback+0x8>)
 80035d0:	701a      	strb	r2, [r3, #0]
}
 80035d2:	4770      	bx	lr
 80035d4:	20000000 	.word	0x20000000

080035d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1){
 80035d8:	4b12      	ldr	r3, [pc, #72]	@ (8003624 <HAL_UART_RxCpltCallback+0x4c>)
 80035da:	6802      	ldr	r2, [r0, #0]
{
 80035dc:	b510      	push	{r4, lr}
	if(huart->Instance == USART1){
 80035de:	429a      	cmp	r2, r3
 80035e0:	d000      	beq.n	80035e4 <HAL_UART_RxCpltCallback+0xc>
		}else{
			Kb.keyInput[Kb.cursor++]=uartBuf[0];
		}
		Kb.flag_uartDMAReady=0;
	}
}
 80035e2:	bd10      	pop	{r4, pc}
		Kb.keyTimeout = HAL_GetTick()+30000;
 80035e4:	f000 ff66 	bl	80044b4 <HAL_GetTick>
 80035e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003628 <HAL_UART_RxCpltCallback+0x50>)
 80035ea:	4b10      	ldr	r3, [pc, #64]	@ (800362c <HAL_UART_RxCpltCallback+0x54>)
 80035ec:	4694      	mov	ip, r2
 80035ee:	2282      	movs	r2, #130	@ 0x82
 80035f0:	4460      	add	r0, ip
 80035f2:	0052      	lsls	r2, r2, #1
 80035f4:	5098      	str	r0, [r3, r2]
		if(uartBuf[0] == (uint8_t)'\n' || uartBuf[0] == (uint8_t)'\r'){
 80035f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <HAL_UART_RxCpltCallback+0x58>)
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	2a0a      	cmp	r2, #10
 80035fc:	d00c      	beq.n	8003618 <HAL_UART_RxCpltCallback+0x40>
 80035fe:	2a0d      	cmp	r2, #13
 8003600:	d00a      	beq.n	8003618 <HAL_UART_RxCpltCallback+0x40>
			Kb.keyInput[Kb.cursor++]=uartBuf[0];
 8003602:	2080      	movs	r0, #128	@ 0x80
 8003604:	0040      	lsls	r0, r0, #1
 8003606:	5819      	ldr	r1, [r3, r0]
 8003608:	1c4c      	adds	r4, r1, #1
 800360a:	501c      	str	r4, [r3, r0]
 800360c:	545a      	strb	r2, [r3, r1]
		Kb.flag_uartDMAReady=0;
 800360e:	2286      	movs	r2, #134	@ 0x86
 8003610:	2100      	movs	r1, #0
 8003612:	0052      	lsls	r2, r2, #1
 8003614:	5099      	str	r1, [r3, r2]
}
 8003616:	e7e4      	b.n	80035e2 <HAL_UART_RxCpltCallback+0xa>
			Kb.flag_keyInput=1;
 8003618:	2284      	movs	r2, #132	@ 0x84
 800361a:	2101      	movs	r1, #1
 800361c:	0052      	lsls	r2, r2, #1
 800361e:	5099      	str	r1, [r3, r2]
 8003620:	e7f5      	b.n	800360e <HAL_UART_RxCpltCallback+0x36>
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	40013800 	.word	0x40013800
 8003628:	00007530 	.word	0x00007530
 800362c:	20000240 	.word	0x20000240
 8003630:	200001f4 	.word	0x200001f4

08003634 <_write>:

int _write(int file, char *ptr, int len)
{
 8003634:	b510      	push	{r4, lr}
 8003636:	0014      	movs	r4, r2
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, len);
 8003638:	0023      	movs	r3, r4
 800363a:	b292      	uxth	r2, r2
 800363c:	4802      	ldr	r0, [pc, #8]	@ (8003648 <_write+0x14>)
 800363e:	f003 f879 	bl	8006734 <HAL_UART_Transmit>
  return len;
}
 8003642:	0020      	movs	r0, r4
 8003644:	bd10      	pop	{r4, pc}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	2000040c 	.word	0x2000040c

0800364c <flashWrite>:
	if(result < 0) return 0;
	if(result > 4095) return 4095;
	return result;
}

void flashWrite(int index, uint64_t value){
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364e:	46ce      	mov	lr, r9
 8003650:	4647      	mov	r7, r8
 8003652:	001e      	movs	r6, r3
	static int DoubleWordsNum = PAGE_SIZE/8;
	uint64_t cfg_datas[DoubleWordsNum];
 8003654:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <flashWrite+0x80>)
void flashWrite(int index, uint64_t value){
 8003656:	b580      	push	{r7, lr}
	uint64_t cfg_datas[DoubleWordsNum];
 8003658:	469c      	mov	ip, r3
void flashWrite(int index, uint64_t value){
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	46e8      	mov	r8, sp
	uint64_t cfg_datas[DoubleWordsNum];
 8003660:	44e5      	add	sp, ip
 8003662:	466c      	mov	r4, sp
void flashWrite(int index, uint64_t value){
 8003664:	4691      	mov	r9, r2
	memcpy(cfg_datas, (void*)CFG_ADDRESS, PAGE_SIZE);
 8003666:	2280      	movs	r2, #128	@ 0x80
void flashWrite(int index, uint64_t value){
 8003668:	0005      	movs	r5, r0
	memcpy(cfg_datas, (void*)CFG_ADDRESS, PAGE_SIZE);
 800366a:	4919      	ldr	r1, [pc, #100]	@ (80036d0 <flashWrite+0x84>)
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	0020      	movs	r0, r4
 8003670:	f006 fdf4 	bl	800a25c <memcpy>
	cfg_datas[index] = value;
 8003674:	464b      	mov	r3, r9
 8003676:	00e8      	lsls	r0, r5, #3
 8003678:	1820      	adds	r0, r4, r0
 800367a:	c048      	stmia	r0!, {r3, r6}

	HAL_FLASH_Unlock();
 800367c:	f001 ff1e 	bl	80054bc <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef eraseInitStruct;
	uint32_t pageError = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	607b      	str	r3, [r7, #4]
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003684:	3302      	adds	r3, #2
	eraseInitStruct.Page = CFG_PAGE_INDEX;
 8003686:	221f      	movs	r2, #31
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003688:	60bb      	str	r3, [r7, #8]
	eraseInitStruct.Page = CFG_PAGE_INDEX;
 800368a:	2301      	movs	r3, #1
 800368c:	613a      	str	r2, [r7, #16]
 800368e:	617b      	str	r3, [r7, #20]
	eraseInitStruct.NbPages = 1;

	if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK) {
 8003690:	2308      	movs	r3, #8
 8003692:	1d39      	adds	r1, r7, #4
 8003694:	18f8      	adds	r0, r7, r3
 8003696:	f001 ffad 	bl	80055f4 <HAL_FLASHEx_Erase>
 800369a:	2380      	movs	r3, #128	@ 0x80
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	18e6      	adds	r6, r4, r3
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d10a      	bne.n	80036ba <flashWrite+0x6e>
		HAL_FLASH_Lock();
		return;
	}
	for(int i=0;i<DoubleWordsNum;i++){
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, CFG_ADDRESS + sizeof(uint64_t)*i, cfg_datas[i]);
 80036a4:	4d0a      	ldr	r5, [pc, #40]	@ (80036d0 <flashWrite+0x84>)
 80036a6:	1b2d      	subs	r5, r5, r4
 80036a8:	1929      	adds	r1, r5, r4
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	6863      	ldr	r3, [r4, #4]
 80036ae:	2001      	movs	r0, #1
	for(int i=0;i<DoubleWordsNum;i++){
 80036b0:	3408      	adds	r4, #8
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, CFG_ADDRESS + sizeof(uint64_t)*i, cfg_datas[i]);
 80036b2:	f001 fe33 	bl	800531c <HAL_FLASH_Program>
	for(int i=0;i<DoubleWordsNum;i++){
 80036b6:	42b4      	cmp	r4, r6
 80036b8:	d1f6      	bne.n	80036a8 <flashWrite+0x5c>
	}
	HAL_FLASH_Lock();
 80036ba:	f001 ff11 	bl	80054e0 <HAL_FLASH_Lock>
 80036be:	46c5      	mov	sp, r8
}
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b007      	add	sp, #28
 80036c4:	bcc0      	pop	{r6, r7}
 80036c6:	46b9      	mov	r9, r7
 80036c8:	46b0      	mov	r8, r6
 80036ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036cc:	fffff800 	.word	0xfffff800
 80036d0:	0800f800 	.word	0x0800f800

080036d4 <flashRead>:

float flashRead(int index){
	uint64_t cfg_datas[256];
	float *result;
	memcpy(cfg_datas, (void*)CFG_ADDRESS, 2048);
 80036d4:	2280      	movs	r2, #128	@ 0x80
float flashRead(int index){
 80036d6:	b510      	push	{r4, lr}
 80036d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003704 <flashRead+0x30>)
	memcpy(cfg_datas, (void*)CFG_ADDRESS, 2048);
 80036da:	490b      	ldr	r1, [pc, #44]	@ (8003708 <flashRead+0x34>)
float flashRead(int index){
 80036dc:	44a5      	add	sp, r4
	memcpy(cfg_datas, (void*)CFG_ADDRESS, 2048);
 80036de:	0112      	lsls	r2, r2, #4
float flashRead(int index){
 80036e0:	0004      	movs	r4, r0
	memcpy(cfg_datas, (void*)CFG_ADDRESS, 2048);
 80036e2:	4668      	mov	r0, sp
 80036e4:	f006 fdba 	bl	800a25c <memcpy>
	result = (float*)&cfg_datas[index];
	return *result;
 80036e8:	2380      	movs	r3, #128	@ 0x80
 80036ea:	00e4      	lsls	r4, r4, #3
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	18e4      	adds	r4, r4, r3
 80036f0:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <flashRead+0x30>)
 80036f2:	446c      	add	r4, sp
 80036f4:	469c      	mov	ip, r3
 80036f6:	4464      	add	r4, ip
 80036f8:	6820      	ldr	r0, [r4, #0]
}
 80036fa:	2380      	movs	r3, #128	@ 0x80
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	449d      	add	sp, r3
 8003700:	bd10      	pop	{r4, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	fffff800 	.word	0xfffff800
 8003708:	0800f800 	.word	0x0800f800

0800370c <processMenu>:
void processMenu(keyBoard *_Kb){
	uint64_t val;
	float result;
	float *value = (float*)&val;

	switch(_Kb->menuId){
 800370c:	2388      	movs	r3, #136	@ 0x88
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	58c3      	ldr	r3, [r0, r3]
void processMenu(keyBoard *_Kb){
 8003712:	b510      	push	{r4, lr}
 8003714:	0004      	movs	r4, r0
	switch(_Kb->menuId){
 8003716:	2b05      	cmp	r3, #5
 8003718:	d81f      	bhi.n	800375a <processMenu+0x4e>
 800371a:	4a57      	ldr	r2, [pc, #348]	@ (8003878 <processMenu+0x16c>)
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	58d3      	ldr	r3, [r2, r3]
 8003720:	469f      	mov	pc, r3
		printf("Config RMS set to %f\r\n", result);
		_Kb->menuId=0;
		Cfg.cfg_rms = flashRead(CFG_ADDRESS_RMS);
		break;
	case 4:
		*value = atof(_Kb->keyInput);
 8003722:	f004 ffbb 	bl	800869c <atof>
 8003726:	f7ff fe6b 	bl	8003400 <__aeabi_d2f>
		flashWrite(CFG_ADDRESS_PHASE, val);
 800372a:	2300      	movs	r3, #0
		*value = atof(_Kb->keyInput);
 800372c:	1c02      	adds	r2, r0, #0
		flashWrite(CFG_ADDRESS_PHASE, val);
 800372e:	2001      	movs	r0, #1
 8003730:	f7ff ff8c 	bl	800364c <flashWrite>
		result = flashRead(CFG_ADDRESS_PHASE);
 8003734:	2001      	movs	r0, #1
 8003736:	f7ff ffcd 	bl	80036d4 <flashRead>
		printf("Config PHASE set to %f\r\n", result);
 800373a:	f7ff fe19 	bl	8003370 <__aeabi_f2d>
 800373e:	0002      	movs	r2, r0
 8003740:	000b      	movs	r3, r1
 8003742:	484e      	ldr	r0, [pc, #312]	@ (800387c <processMenu+0x170>)
 8003744:	f006 fb8a 	bl	8009e5c <iprintf>
		_Kb->menuId=0;
 8003748:	2388      	movs	r3, #136	@ 0x88
 800374a:	2200      	movs	r2, #0
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	50e2      	str	r2, [r4, r3]
		Cfg.cfg_phase = flashRead(CFG_ADDRESS_PHASE);
 8003750:	2001      	movs	r0, #1
 8003752:	f7ff ffbf 	bl	80036d4 <flashRead>
 8003756:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <processMenu+0x174>)
 8003758:	60d8      	str	r0, [r3, #12]
		Cfg.cfg_offset = flashRead(CFG_ADDRESS_OFFSET);
		break;
	default:
		break;
	}
}
 800375a:	bd10      	pop	{r4, pc}
		*value = atof(_Kb->keyInput);
 800375c:	f004 ff9e 	bl	800869c <atof>
 8003760:	f7ff fe4e 	bl	8003400 <__aeabi_d2f>
		flashWrite(CFG_ADDRESS_OFFSET, val);
 8003764:	2300      	movs	r3, #0
		*value = atof(_Kb->keyInput);
 8003766:	1c02      	adds	r2, r0, #0
		flashWrite(CFG_ADDRESS_OFFSET, val);
 8003768:	2002      	movs	r0, #2
 800376a:	f7ff ff6f 	bl	800364c <flashWrite>
		result = flashRead(CFG_ADDRESS_OFFSET);
 800376e:	2002      	movs	r0, #2
 8003770:	f7ff ffb0 	bl	80036d4 <flashRead>
		printf("Config OFFSET set to %f\r\n", result);
 8003774:	f7ff fdfc 	bl	8003370 <__aeabi_f2d>
 8003778:	0002      	movs	r2, r0
 800377a:	000b      	movs	r3, r1
 800377c:	4841      	ldr	r0, [pc, #260]	@ (8003884 <processMenu+0x178>)
 800377e:	f006 fb6d 	bl	8009e5c <iprintf>
		_Kb->menuId=0;
 8003782:	2388      	movs	r3, #136	@ 0x88
 8003784:	2200      	movs	r2, #0
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	50e2      	str	r2, [r4, r3]
		Cfg.cfg_offset = flashRead(CFG_ADDRESS_OFFSET);
 800378a:	2002      	movs	r0, #2
 800378c:	f7ff ffa2 	bl	80036d4 <flashRead>
 8003790:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <processMenu+0x174>)
 8003792:	6118      	str	r0, [r3, #16]
		break;
 8003794:	e7e1      	b.n	800375a <processMenu+0x4e>
		if(atoi(_Kb->keyInput)==1){
 8003796:	f004 ff86 	bl	80086a6 <atoi>
 800379a:	2801      	cmp	r0, #1
 800379c:	d004      	beq.n	80037a8 <processMenu+0x9c>
		}else if(atoi(_Kb->keyInput)==2){
 800379e:	0020      	movs	r0, r4
 80037a0:	f004 ff81 	bl	80086a6 <atoi>
 80037a4:	2802      	cmp	r0, #2
 80037a6:	d144      	bne.n	8003832 <processMenu+0x126>
			_Kb->menuId=5;
 80037a8:	2388      	movs	r3, #136	@ 0x88
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	50e0      	str	r0, [r4, r3]
 80037ae:	e7d4      	b.n	800375a <processMenu+0x4e>
		Cfg.rms = atof(_Kb->keyInput);
 80037b0:	f004 ff74 	bl	800869c <atof>
 80037b4:	f7ff fe24 	bl	8003400 <__aeabi_d2f>
 80037b8:	4b31      	ldr	r3, [pc, #196]	@ (8003880 <processMenu+0x174>)
		_Kb->menuId=0;
 80037ba:	2200      	movs	r2, #0
		Cfg.rms = atof(_Kb->keyInput);
 80037bc:	6018      	str	r0, [r3, #0]
		_Kb->menuId=0;
 80037be:	2388      	movs	r3, #136	@ 0x88
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	50e2      	str	r2, [r4, r3]
		printf("RMS set to %f\r\n", Cfg.rms);
 80037c4:	f7ff fdd4 	bl	8003370 <__aeabi_f2d>
 80037c8:	0002      	movs	r2, r0
 80037ca:	000b      	movs	r3, r1
 80037cc:	482e      	ldr	r0, [pc, #184]	@ (8003888 <processMenu+0x17c>)
 80037ce:	f006 fb45 	bl	8009e5c <iprintf>
		break;
 80037d2:	e7c2      	b.n	800375a <processMenu+0x4e>
		Cfg.phase = atof(_Kb->keyInput);
 80037d4:	f004 ff62 	bl	800869c <atof>
 80037d8:	f7ff fe12 	bl	8003400 <__aeabi_d2f>
 80037dc:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <processMenu+0x174>)
		_Kb->menuId=0;
 80037de:	2200      	movs	r2, #0
		Cfg.phase = atof(_Kb->keyInput);
 80037e0:	6058      	str	r0, [r3, #4]
		_Kb->menuId=0;
 80037e2:	2388      	movs	r3, #136	@ 0x88
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	50e2      	str	r2, [r4, r3]
		printf("Phase set to %f\r\n", Cfg.phase);
 80037e8:	f7ff fdc2 	bl	8003370 <__aeabi_f2d>
 80037ec:	0002      	movs	r2, r0
 80037ee:	000b      	movs	r3, r1
 80037f0:	4826      	ldr	r0, [pc, #152]	@ (800388c <processMenu+0x180>)
 80037f2:	f006 fb33 	bl	8009e5c <iprintf>
		break;
 80037f6:	e7b0      	b.n	800375a <processMenu+0x4e>
		*value = atof(_Kb->keyInput);
 80037f8:	f004 ff50 	bl	800869c <atof>
 80037fc:	f7ff fe00 	bl	8003400 <__aeabi_d2f>
		flashWrite(CFG_ADDRESS_RMS, val);
 8003800:	2300      	movs	r3, #0
		*value = atof(_Kb->keyInput);
 8003802:	1c02      	adds	r2, r0, #0
		flashWrite(CFG_ADDRESS_RMS, val);
 8003804:	2000      	movs	r0, #0
 8003806:	f7ff ff21 	bl	800364c <flashWrite>
		result = flashRead(CFG_ADDRESS_RMS);
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff ff62 	bl	80036d4 <flashRead>
		printf("Config RMS set to %f\r\n", result);
 8003810:	f7ff fdae 	bl	8003370 <__aeabi_f2d>
 8003814:	0002      	movs	r2, r0
 8003816:	000b      	movs	r3, r1
 8003818:	481d      	ldr	r0, [pc, #116]	@ (8003890 <processMenu+0x184>)
 800381a:	f006 fb1f 	bl	8009e5c <iprintf>
		_Kb->menuId=0;
 800381e:	2388      	movs	r3, #136	@ 0x88
 8003820:	2200      	movs	r2, #0
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	50e2      	str	r2, [r4, r3]
		Cfg.cfg_rms = flashRead(CFG_ADDRESS_RMS);
 8003826:	2000      	movs	r0, #0
 8003828:	f7ff ff54 	bl	80036d4 <flashRead>
 800382c:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <processMenu+0x174>)
 800382e:	6098      	str	r0, [r3, #8]
		break;
 8003830:	e793      	b.n	800375a <processMenu+0x4e>
		}else if(atoi(_Kb->keyInput)==3){
 8003832:	0020      	movs	r0, r4
 8003834:	f004 ff37 	bl	80086a6 <atoi>
 8003838:	2803      	cmp	r0, #3
 800383a:	d0b5      	beq.n	80037a8 <processMenu+0x9c>
		}else if(atoi(_Kb->keyInput)==4){
 800383c:	0020      	movs	r0, r4
 800383e:	f004 ff32 	bl	80086a6 <atoi>
 8003842:	2804      	cmp	r0, #4
 8003844:	d0b0      	beq.n	80037a8 <processMenu+0x9c>
		}else if(atoi(_Kb->keyInput)==5){
 8003846:	0020      	movs	r0, r4
 8003848:	f004 ff2d 	bl	80086a6 <atoi>
 800384c:	2805      	cmp	r0, #5
 800384e:	d0ab      	beq.n	80037a8 <processMenu+0x9c>
		}else if(_Kb->keyInput[0]=='r'){
 8003850:	7823      	ldrb	r3, [r4, #0]
 8003852:	2b72      	cmp	r3, #114	@ 0x72
 8003854:	d003      	beq.n	800385e <processMenu+0x152>
			printf("Input Error\r\n");
 8003856:	480f      	ldr	r0, [pc, #60]	@ (8003894 <processMenu+0x188>)
 8003858:	f006 fb66 	bl	8009f28 <puts>
 800385c:	e77d      	b.n	800375a <processMenu+0x4e>
			printf("System Reset!\r\n");
 800385e:	480e      	ldr	r0, [pc, #56]	@ (8003898 <processMenu+0x18c>)
 8003860:	f006 fb62 	bl	8009f28 <puts>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003864:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003868:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <processMenu+0x190>)
 800386a:	4a0d      	ldr	r2, [pc, #52]	@ (80038a0 <processMenu+0x194>)
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003872:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003874:	e7fd      	b.n	8003872 <processMenu+0x166>
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	0800ca00 	.word	0x0800ca00
 800387c:	0800c9c8 	.word	0x0800c9c8
 8003880:	20000208 	.word	0x20000208
 8003884:	0800c9e4 	.word	0x0800c9e4
 8003888:	0800c98c 	.word	0x0800c98c
 800388c:	0800c99c 	.word	0x0800c99c
 8003890:	0800c9b0 	.word	0x0800c9b0
 8003894:	0800c97c 	.word	0x0800c97c
 8003898:	0800c96c 	.word	0x0800c96c
 800389c:	e000ed00 	.word	0xe000ed00
 80038a0:	05fa0004 	.word	0x05fa0004

080038a4 <main>:
{
 80038a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a6:	46de      	mov	lr, fp
 80038a8:	4657      	mov	r7, sl
 80038aa:	464e      	mov	r6, r9
 80038ac:	4645      	mov	r5, r8
	Kb.keyTimeout=0;
 80038ae:	2382      	movs	r3, #130	@ 0x82
	Record.cursor=0;
 80038b0:	2400      	movs	r4, #0
{
 80038b2:	b5e0      	push	{r5, r6, r7, lr}
	Kb.keyTimeout=0;
 80038b4:	4fd9      	ldr	r7, [pc, #868]	@ (8003c1c <main+0x378>)
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	50fc      	str	r4, [r7, r3]
	Kb.cursor=0;
 80038ba:	3b04      	subs	r3, #4
 80038bc:	50fc      	str	r4, [r7, r3]
	Kb.flag_uartDMAReady=0;
 80038be:	330c      	adds	r3, #12
 80038c0:	50fc      	str	r4, [r7, r3]
	Kb.menuId=0;
 80038c2:	3304      	adds	r3, #4
 80038c4:	50fc      	str	r4, [r7, r3]
	Cfg.rms = 1;
 80038c6:	23fe      	movs	r3, #254	@ 0xfe
 80038c8:	4ad5      	ldr	r2, [pc, #852]	@ (8003c20 <main+0x37c>)
 80038ca:	059b      	lsls	r3, r3, #22
 80038cc:	4693      	mov	fp, r2
 80038ce:	6013      	str	r3, [r2, #0]
	Cfg.phase = 0;
 80038d0:	2300      	movs	r3, #0
	Record.cursor=0;
 80038d2:	4ed4      	ldr	r6, [pc, #848]	@ (8003c24 <main+0x380>)
{
 80038d4:	b0ad      	sub	sp, #180	@ 0xb4
	Cfg.cfg_rms = flashRead(CFG_ADDRESS_RMS);
 80038d6:	2000      	movs	r0, #0
	Cfg.phase = 0;
 80038d8:	6053      	str	r3, [r2, #4]
	Record.cursor=0;
 80038da:	6234      	str	r4, [r6, #32]
	Cfg.cfg_rms = flashRead(CFG_ADDRESS_RMS);
 80038dc:	f7ff fefa 	bl	80036d4 <flashRead>
 80038e0:	465a      	mov	r2, fp
 80038e2:	6090      	str	r0, [r2, #8]
	Cfg.cfg_phase = flashRead(CFG_ADDRESS_PHASE);
 80038e4:	2001      	movs	r0, #1
 80038e6:	f7ff fef5 	bl	80036d4 <flashRead>
 80038ea:	465a      	mov	r2, fp
 80038ec:	60d0      	str	r0, [r2, #12]
	Cfg.cfg_offset = flashRead(CFG_ADDRESS_OFFSET);
 80038ee:	2002      	movs	r0, #2
 80038f0:	f7ff fef0 	bl	80036d4 <flashRead>
 80038f4:	465a      	mov	r2, fp
 80038f6:	6110      	str	r0, [r2, #16]
  HAL_Init();
 80038f8:	f000 fdbc 	bl	8004474 <HAL_Init>
  SystemClock_Config();
 80038fc:	f7ff fe2e 	bl	800355c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	220c      	movs	r2, #12
 8003902:	2100      	movs	r1, #0
 8003904:	a825      	add	r0, sp, #148	@ 0x94
 8003906:	f006 fc05 	bl	800a114 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800390a:	2302      	movs	r3, #2
 800390c:	4dc6      	ldr	r5, [pc, #792]	@ (8003c28 <main+0x384>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800390e:	2001      	movs	r0, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003910:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003912:	4681      	mov	r9, r0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003914:	431a      	orrs	r2, r3
 8003916:	636a      	str	r2, [r5, #52]	@ 0x34
 8003918:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391a:	a923      	add	r1, sp, #140	@ 0x8c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800391c:	4013      	ands	r3, r2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800391e:	2204      	movs	r2, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003920:	931c      	str	r3, [sp, #112]	@ 0x70
 8003922:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003924:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003926:	4692      	mov	sl, r2
 8003928:	4313      	orrs	r3, r2
 800392a:	636b      	str	r3, [r5, #52]	@ 0x34
 800392c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800392e:	4013      	ands	r3, r2
 8003930:	931d      	str	r3, [sp, #116]	@ 0x74
 8003932:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003934:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003936:	321c      	adds	r2, #28
 8003938:	4313      	orrs	r3, r2
 800393a:	636b      	str	r3, [r5, #52]	@ 0x34
 800393c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800393e:	4013      	ands	r3, r2
 8003940:	931e      	str	r3, [sp, #120]	@ 0x78
 8003942:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003944:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003946:	4303      	orrs	r3, r0
 8003948:	636b      	str	r3, [r5, #52]	@ 0x34
 800394a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800394c:	4003      	ands	r3, r0
 800394e:	931f      	str	r3, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003950:	2088      	movs	r0, #136	@ 0x88
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003952:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003954:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003956:	0340      	lsls	r0, r0, #13
 8003958:	4680      	mov	r8, r0
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800395a:	01db      	lsls	r3, r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800395c:	9024      	str	r0, [sp, #144]	@ 0x90
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395e:	48b3      	ldr	r0, [pc, #716]	@ (8003c2c <main+0x388>)
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003960:	9323      	str	r3, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003962:	f001 fead 	bl	80056c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_NRST_Pin;
 8003966:	4650      	mov	r0, sl
 8003968:	9023      	str	r0, [sp, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800396a:	4640      	mov	r0, r8
  HAL_GPIO_Init(MCU_NRST_GPIO_Port, &GPIO_InitStruct);
 800396c:	a923      	add	r1, sp, #140	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800396e:	9024      	str	r0, [sp, #144]	@ 0x90
  HAL_GPIO_Init(MCU_NRST_GPIO_Port, &GPIO_InitStruct);
 8003970:	48af      	ldr	r0, [pc, #700]	@ (8003c30 <main+0x38c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	9425      	str	r4, [sp, #148]	@ 0x94
  HAL_GPIO_Init(MCU_NRST_GPIO_Port, &GPIO_InitStruct);
 8003974:	f001 fea4 	bl	80056c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003978:	4640      	mov	r0, r8
 800397a:	9024      	str	r0, [sp, #144]	@ 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397c:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = SYNC_INT_Pin|IFLAG_Z_Pin|TFLAG_Z_Pin|IFLAG_1V6_Pin;
 800397e:	23e8      	movs	r3, #232	@ 0xe8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003980:	a923      	add	r1, sp, #140	@ 0x8c
 8003982:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = SYNC_INT_Pin|IFLAG_Z_Pin|TFLAG_Z_Pin|IFLAG_1V6_Pin;
 8003984:	9323      	str	r3, [sp, #140]	@ 0x8c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003986:	9425      	str	r4, [sp, #148]	@ 0x94
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003988:	f001 fe9a 	bl	80056c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TFLAG_1V6_Pin;
 800398c:	4648      	mov	r0, r9
 800398e:	9023      	str	r0, [sp, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003990:	4640      	mov	r0, r8
  HAL_GPIO_Init(TFLAG_1V6_GPIO_Port, &GPIO_InitStruct);
 8003992:	a923      	add	r1, sp, #140	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003994:	9024      	str	r0, [sp, #144]	@ 0x90
  HAL_GPIO_Init(TFLAG_1V6_GPIO_Port, &GPIO_InitStruct);
 8003996:	48a7      	ldr	r0, [pc, #668]	@ (8003c34 <main+0x390>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	9425      	str	r4, [sp, #148]	@ 0x94
  HAL_GPIO_Init(TFLAG_1V6_GPIO_Port, &GPIO_InitStruct);
 800399a:	f001 fe91 	bl	80056c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800399e:	4648      	mov	r0, r9
 80039a0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039a2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039a4:	4303      	orrs	r3, r0
 80039a6:	63ab      	str	r3, [r5, #56]	@ 0x38
 80039a8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039aa:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039ac:	4003      	ands	r3, r0
 80039ae:	931b      	str	r3, [sp, #108]	@ 0x6c
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039b0:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039b4:	f001 f9b6 	bl	8004d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80039b8:	2009      	movs	r0, #9
 80039ba:	f001 f9dd 	bl	8004d78 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80039be:	2200      	movs	r2, #0
 80039c0:	2100      	movs	r1, #0
 80039c2:	200a      	movs	r0, #10
 80039c4:	f001 f9ae 	bl	8004d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80039c8:	200a      	movs	r0, #10
 80039ca:	f001 f9d5 	bl	8004d78 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80039ce:	220c      	movs	r2, #12
 80039d0:	2100      	movs	r1, #0
 80039d2:	a823      	add	r0, sp, #140	@ 0x8c
 80039d4:	f006 fb9e 	bl	800a114 <memset>
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80039d8:	2008      	movs	r0, #8
  hadc1.Instance = ADC1;
 80039da:	4a97      	ldr	r2, [pc, #604]	@ (8003c38 <main+0x394>)
 80039dc:	4b97      	ldr	r3, [pc, #604]	@ (8003c3c <main+0x398>)
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80039de:	4680      	mov	r8, r0
  hadc1.Instance = ADC1;
 80039e0:	6013      	str	r3, [r2, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80039e2:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80039e4:	6150      	str	r0, [r2, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039e6:	4648      	mov	r0, r9
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80039e8:	039b      	lsls	r3, r3, #14
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80039ea:	2580      	movs	r5, #128	@ 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80039ec:	6113      	str	r3, [r2, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039ee:	7690      	strb	r0, [r2, #26]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80039f0:	2300      	movs	r3, #0
  hadc1.Init.NbrOfConversion = 4;
 80039f2:	4650      	mov	r0, sl
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039f4:	2120      	movs	r1, #32
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80039f6:	05ed      	lsls	r5, r5, #23
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039f8:	5453      	strb	r3, [r2, r1]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80039fa:	6055      	str	r5, [r2, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039fc:	0011      	movs	r1, r2
  hadc1.Init.NbrOfConversion = 4;
 80039fe:	61d0      	str	r0, [r2, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a00:	6094      	str	r4, [r2, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a02:	60d4      	str	r4, [r2, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003a04:	8314      	strh	r4, [r2, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a06:	6254      	str	r4, [r2, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a08:	6294      	str	r4, [r2, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003a0a:	222c      	movs	r2, #44	@ 0x2c
 8003a0c:	548b      	strb	r3, [r1, r2]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 8003a0e:	3a29      	subs	r2, #41	@ 0x29
 8003a10:	634a      	str	r2, [r1, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8003a12:	3203      	adds	r2, #3
 8003a14:	638a      	str	r2, [r1, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a16:	0008      	movs	r0, r1
  hadc1.Init.OversamplingMode = DISABLE;
 8003a18:	3236      	adds	r2, #54	@ 0x36
 8003a1a:	548b      	strb	r3, [r1, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003a1c:	630c      	str	r4, [r1, #48]	@ 0x30
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003a1e:	64cc      	str	r4, [r1, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a20:	910a      	str	r1, [sp, #40]	@ 0x28
 8003a22:	f000 fd4d 	bl	80044c0 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8003a26:	464a      	mov	r2, r9
 8003a28:	9223      	str	r2, [sp, #140]	@ 0x8c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a2a:	aa23      	add	r2, sp, #140	@ 0x8c
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003a30:	9424      	str	r4, [sp, #144]	@ 0x90
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003a32:	9425      	str	r4, [sp, #148]	@ 0x94
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a34:	f000 ff6c 	bl	8004910 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8003a38:	4a81      	ldr	r2, [pc, #516]	@ (8003c40 <main+0x39c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  sConfig.Channel = ADC_CHANNEL_1;
 8003a3c:	4691      	mov	r9, r2
 8003a3e:	9223      	str	r2, [sp, #140]	@ 0x8c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003a40:	4652      	mov	r2, sl
 8003a42:	9224      	str	r2, [sp, #144]	@ 0x90
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a44:	aa23      	add	r2, sp, #140	@ 0x8c
 8003a46:	0011      	movs	r1, r2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	469a      	mov	sl, r3
 8003a4c:	f000 ff60 	bl	8004910 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003a50:	4642      	mov	r2, r8
  sConfig.Channel = ADC_CHANNEL_2;
 8003a52:	4b7c      	ldr	r3, [pc, #496]	@ (8003c44 <main+0x3a0>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003a54:	9224      	str	r2, [sp, #144]	@ 0x90
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a56:	aa23      	add	r2, sp, #140	@ 0x8c
 8003a58:	0011      	movs	r1, r2
 8003a5a:	4650      	mov	r0, sl
  sConfig.Channel = ADC_CHANNEL_2;
 8003a5c:	9323      	str	r3, [sp, #140]	@ 0x8c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a5e:	f000 ff57 	bl	8004910 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8003a62:	464a      	mov	r2, r9
 8003a64:	9223      	str	r2, [sp, #140]	@ 0x8c
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003a66:	220c      	movs	r2, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a68:	a923      	add	r1, sp, #140	@ 0x8c
 8003a6a:	4650      	mov	r0, sl
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003a6c:	9224      	str	r2, [sp, #144]	@ 0x90
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a6e:	f000 ff4f 	bl	8004910 <HAL_ADC_ConfigChannel>
  DAC_ChannelConfTypeDef sConfig = {0};
 8003a72:	2100      	movs	r1, #0
 8003a74:	2224      	movs	r2, #36	@ 0x24
 8003a76:	a823      	add	r0, sp, #140	@ 0x8c
 8003a78:	f006 fb4c 	bl	800a114 <memset>
  hdac1.Instance = DAC1;
 8003a7c:	4b72      	ldr	r3, [pc, #456]	@ (8003c48 <main+0x3a4>)
 8003a7e:	001a      	movs	r2, r3
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003a80:	4690      	mov	r8, r2
  hdac1.Instance = DAC1;
 8003a82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a84:	4b71      	ldr	r3, [pc, #452]	@ (8003c4c <main+0x3a8>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003a86:	0010      	movs	r0, r2
  hdac1.Instance = DAC1;
 8003a88:	6013      	str	r3, [r2, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003a8a:	f001 f99b 	bl	8004dc4 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	4640      	mov	r0, r8
 8003a92:	a923      	add	r1, sp, #140	@ 0x8c
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003a94:	9423      	str	r4, [sp, #140]	@ 0x8c
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003a96:	9424      	str	r4, [sp, #144]	@ 0x90
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003a98:	9425      	str	r4, [sp, #148]	@ 0x94
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003a9a:	9426      	str	r4, [sp, #152]	@ 0x98
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003a9c:	9427      	str	r4, [sp, #156]	@ 0x9c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003a9e:	f001 f9f3 	bl	8004e88 <HAL_DAC_ConfigChannel>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4640      	mov	r0, r8
 8003aa6:	f001 f9a3 	bl	8004df0 <HAL_DAC_Start>
  huart1.Instance = USART1;
 8003aaa:	4969      	ldr	r1, [pc, #420]	@ (8003c50 <main+0x3ac>)
 8003aac:	4b69      	ldr	r3, [pc, #420]	@ (8003c54 <main+0x3b0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003aae:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8003ab0:	600b      	str	r3, [r1, #0]
  huart1.Init.BaudRate = 115200;
 8003ab2:	23e1      	movs	r3, #225	@ 0xe1
  huart1.Instance = USART1;
 8003ab4:	4688      	mov	r8, r1
  huart1.Init.BaudRate = 115200;
 8003ab6:	025b      	lsls	r3, r3, #9
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ab8:	0008      	movs	r0, r1
  huart1.Init.BaudRate = 115200;
 8003aba:	604b      	str	r3, [r1, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003abc:	614a      	str	r2, [r1, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003abe:	608c      	str	r4, [r1, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ac0:	60cc      	str	r4, [r1, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ac2:	610c      	str	r4, [r1, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac4:	618c      	str	r4, [r1, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac6:	61cc      	str	r4, [r1, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ac8:	620c      	str	r4, [r1, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003aca:	624c      	str	r4, [r1, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003acc:	628c      	str	r4, [r1, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ace:	f003 fbc9 	bl	8007264 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	f003 fd35 	bl	8007544 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ada:	2100      	movs	r1, #0
 8003adc:	4640      	mov	r0, r8
 8003ade:	f003 fd81 	bl	80075e4 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	f003 fd12 	bl	800750c <HAL_UARTEx_DisableFifoMode>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ae8:	2210      	movs	r2, #16
 8003aea:	2100      	movs	r1, #0
 8003aec:	a823      	add	r0, sp, #140	@ 0x8c
 8003aee:	f006 fb11 	bl	800a114 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af2:	2100      	movs	r1, #0
 8003af4:	220c      	movs	r2, #12
 8003af6:	a820      	add	r0, sp, #128	@ 0x80
 8003af8:	f006 fb0c 	bl	800a114 <memset>
  htim2.Init.Prescaler = 63;
 8003afc:	233f      	movs	r3, #63	@ 0x3f
  htim2.Instance = TIM2;
 8003afe:	4a56      	ldr	r2, [pc, #344]	@ (8003c58 <main+0x3b4>)
  htim2.Init.Prescaler = 63;
 8003b00:	6053      	str	r3, [r2, #4]
  htim2.Init.Period = 1000000000;
 8003b02:	4b56      	ldr	r3, [pc, #344]	@ (8003c5c <main+0x3b8>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b04:	0010      	movs	r0, r2
  htim2.Init.Period = 1000000000;
 8003b06:	60d3      	str	r3, [r2, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b08:	2380      	movs	r3, #128	@ 0x80
  htim2.Instance = TIM2;
 8003b0a:	6015      	str	r5, [r2, #0]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b0c:	6193      	str	r3, [r2, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b0e:	0015      	movs	r5, r2
  htim2.Instance = TIM2;
 8003b10:	920c      	str	r2, [sp, #48]	@ 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b12:	6094      	str	r4, [r2, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b14:	6114      	str	r4, [r2, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b16:	f002 fb93 	bl	8006240 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b1a:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b1c:	a923      	add	r1, sp, #140	@ 0x8c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b1e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b20:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b22:	9323      	str	r3, [sp, #140]	@ 0x8c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b24:	f002 fc46 	bl	80063b4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b28:	a920      	add	r1, sp, #128	@ 0x80
 8003b2a:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b2c:	9420      	str	r4, [sp, #128]	@ 0x80
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2e:	9422      	str	r4, [sp, #136]	@ 0x88
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b30:	f002 fdbc 	bl	80066ac <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start(&htim2);
 8003b34:	0028      	movs	r0, r5
 8003b36:	f002 fc09 	bl	800634c <HAL_TIM_Base_Start>

void printHelp(keyBoard *_Kb){
	switch(_Kb->menuId){
 8003b3a:	2388      	movs	r3, #136	@ 0x88
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	58fb      	ldr	r3, [r7, r3]
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d900      	bls.n	8003b46 <main+0x2a2>
 8003b44:	e247      	b.n	8003fd6 <main+0x732>
 8003b46:	4a46      	ldr	r2, [pc, #280]	@ (8003c60 <main+0x3bc>)
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	58d3      	ldr	r3, [r2, r3]
 8003b4c:	469f      	mov	pc, r3
		break;
	case 3:
		printf("Input Config RMS Value(mA) : \r\n"); //
		break;
	case 4:
		printf("Input Config PHASE Value(Deg.) : \r\n"); //
 8003b4e:	4b45      	ldr	r3, [pc, #276]	@ (8003c64 <main+0x3c0>)
 8003b50:	0018      	movs	r0, r3
 8003b52:	9318      	str	r3, [sp, #96]	@ 0x60
 8003b54:	f006 f9e8 	bl	8009f28 <puts>
		break;
 8003b58:	4b43      	ldr	r3, [pc, #268]	@ (8003c68 <main+0x3c4>)
 8003b5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003b5c:	4b43      	ldr	r3, [pc, #268]	@ (8003c6c <main+0x3c8>)
 8003b5e:	9314      	str	r3, [sp, #80]	@ 0x50
 8003b60:	4b43      	ldr	r3, [pc, #268]	@ (8003c70 <main+0x3cc>)
 8003b62:	9315      	str	r3, [sp, #84]	@ 0x54
 8003b64:	4b43      	ldr	r3, [pc, #268]	@ (8003c74 <main+0x3d0>)
 8003b66:	9316      	str	r3, [sp, #88]	@ 0x58
 8003b68:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <main+0x3d4>)
 8003b6a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003b6c:	4b43      	ldr	r3, [pc, #268]	@ (8003c7c <main+0x3d8>)
 8003b6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003b70:	4b43      	ldr	r3, [pc, #268]	@ (8003c80 <main+0x3dc>)
 8003b72:	9310      	str	r3, [sp, #64]	@ 0x40
 8003b74:	4b43      	ldr	r3, [pc, #268]	@ (8003c84 <main+0x3e0>)
 8003b76:	9311      	str	r3, [sp, #68]	@ 0x44
 8003b78:	4b43      	ldr	r3, [pc, #268]	@ (8003c88 <main+0x3e4>)
 8003b7a:	9312      	str	r3, [sp, #72]	@ 0x48
 8003b7c:	4b43      	ldr	r3, [pc, #268]	@ (8003c8c <main+0x3e8>)
 8003b7e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003b80:	4b43      	ldr	r3, [pc, #268]	@ (8003c90 <main+0x3ec>)
 8003b82:	9319      	str	r3, [sp, #100]	@ 0x64
 8003b84:	4c43      	ldr	r4, [pc, #268]	@ (8003c94 <main+0x3f0>)
  		  Kb.flag_uartDMAReady=1;
 8003b86:	46da      	mov	sl, fp
 8003b88:	0025      	movs	r5, r4
 8003b8a:	4644      	mov	r4, r8
 8003b8c:	4b42      	ldr	r3, [pc, #264]	@ (8003c98 <main+0x3f4>)
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	4b42      	ldr	r3, [pc, #264]	@ (8003c9c <main+0x3f8>)
 8003b92:	9304      	str	r3, [sp, #16]
 8003b94:	4b42      	ldr	r3, [pc, #264]	@ (8003ca0 <main+0x3fc>)
 8003b96:	930d      	str	r3, [sp, #52]	@ 0x34
  	  if(Kb.flag_uartDMAReady==0){
 8003b98:	2386      	movs	r3, #134	@ 0x86
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	469b      	mov	fp, r3
 8003b9e:	46a1      	mov	r9, r4
 8003ba0:	46a8      	mov	r8, r5
  	  if(adcflag == 1){
 8003ba2:	9b01      	ldr	r3, [sp, #4]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d100      	bne.n	8003bac <main+0x308>
 8003baa:	e10d      	b.n	8003dc8 <main+0x524>
  	  if((Kb.keyTimeout > HAL_GetTick()) && (Kb.flag_keyInput==1)){
 8003bac:	2382      	movs	r3, #130	@ 0x82
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	58fc      	ldr	r4, [r7, r3]
 8003bb2:	f000 fc7f 	bl	80044b4 <HAL_GetTick>
 8003bb6:	4284      	cmp	r4, r0
 8003bb8:	d905      	bls.n	8003bc6 <main+0x322>
 8003bba:	2384      	movs	r3, #132	@ 0x84
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	58fb      	ldr	r3, [r7, r3]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d100      	bne.n	8003bc6 <main+0x322>
 8003bc4:	e1a6      	b.n	8003f14 <main+0x670>
  	  if(Kb.flag_uartDMAReady==0){
 8003bc6:	465b      	mov	r3, fp
 8003bc8:	58fb      	ldr	r3, [r7, r3]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e9      	bne.n	8003ba2 <main+0x2fe>
  		  Kb.flag_uartDMAReady=1;
 8003bce:	464c      	mov	r4, r9
 8003bd0:	4645      	mov	r5, r8
 8003bd2:	465b      	mov	r3, fp
 8003bd4:	2201      	movs	r2, #1
  		  HAL_UART_Receive_DMA(&huart1, uartBuf, 1);
 8003bd6:	0029      	movs	r1, r5
 8003bd8:	0020      	movs	r0, r4
  		  Kb.flag_uartDMAReady=1;
 8003bda:	50fa      	str	r2, [r7, r3]
  		  HAL_UART_Receive_DMA(&huart1, uartBuf, 1);
 8003bdc:	f002 fe3e 	bl	800685c <HAL_UART_Receive_DMA>
 8003be0:	e7da      	b.n	8003b98 <main+0x2f4>
	case 5:
		printf("Input Config Offset : \r\n"); //
 8003be2:	4b2b      	ldr	r3, [pc, #172]	@ (8003c90 <main+0x3ec>)
 8003be4:	0018      	movs	r0, r3
 8003be6:	9319      	str	r3, [sp, #100]	@ 0x64
 8003be8:	f006 f99e 	bl	8009f28 <puts>
		break;
 8003bec:	4b1e      	ldr	r3, [pc, #120]	@ (8003c68 <main+0x3c4>)
 8003bee:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <main+0x3c8>)
 8003bf2:	9314      	str	r3, [sp, #80]	@ 0x50
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c70 <main+0x3cc>)
 8003bf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c74 <main+0x3d0>)
 8003bfa:	9316      	str	r3, [sp, #88]	@ 0x58
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <main+0x3d4>)
 8003bfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c00:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <main+0x3d8>)
 8003c02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003c04:	4b1e      	ldr	r3, [pc, #120]	@ (8003c80 <main+0x3dc>)
 8003c06:	9310      	str	r3, [sp, #64]	@ 0x40
 8003c08:	4b1e      	ldr	r3, [pc, #120]	@ (8003c84 <main+0x3e0>)
 8003c0a:	9311      	str	r3, [sp, #68]	@ 0x44
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c88 <main+0x3e4>)
 8003c0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8003c10:	4b1e      	ldr	r3, [pc, #120]	@ (8003c8c <main+0x3e8>)
 8003c12:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003c14:	4b13      	ldr	r3, [pc, #76]	@ (8003c64 <main+0x3c0>)
 8003c16:	9318      	str	r3, [sp, #96]	@ 0x60
 8003c18:	e7b4      	b.n	8003b84 <main+0x2e0>
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	20000240 	.word	0x20000240
 8003c20:	20000208 	.word	0x20000208
 8003c24:	2000021c 	.word	0x2000021c
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	50000800 	.word	0x50000800
 8003c30:	50001400 	.word	0x50001400
 8003c34:	50000400 	.word	0x50000400
 8003c38:	2000055c 	.word	0x2000055c
 8003c3c:	40012400 	.word	0x40012400
 8003c40:	04000002 	.word	0x04000002
 8003c44:	08000004 	.word	0x08000004
 8003c48:	200004ec 	.word	0x200004ec
 8003c4c:	40007400 	.word	0x40007400
 8003c50:	2000040c 	.word	0x2000040c
 8003c54:	40013800 	.word	0x40013800
 8003c58:	200004a0 	.word	0x200004a0
 8003c5c:	3b9aca00 	.word	0x3b9aca00
 8003c60:	0800cb94 	.word	0x0800cb94
 8003c64:	0800cb58 	.word	0x0800cb58
 8003c68:	0800ca18 	.word	0x0800ca18
 8003c6c:	0800ca20 	.word	0x0800ca20
 8003c70:	0800ca34 	.word	0x0800ca34
 8003c74:	0800ca60 	.word	0x0800ca60
 8003c78:	0800ca90 	.word	0x0800ca90
 8003c7c:	0800cab8 	.word	0x0800cab8
 8003c80:	0800cae4 	.word	0x0800cae4
 8003c84:	0800cb0c 	.word	0x0800cb0c
 8003c88:	0800cb20 	.word	0x0800cb20
 8003c8c:	0800cb38 	.word	0x0800cb38
 8003c90:	0800cb7c 	.word	0x0800cb7c
 8003c94:	200001f4 	.word	0x200001f4
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	200001f8 	.word	0x200001f8
 8003ca0:	0800cbac 	.word	0x0800cbac
		printf("\e[2J\e[H");
 8003ca4:	4bd4      	ldr	r3, [pc, #848]	@ (8003ff8 <main+0x754>)
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003caa:	f006 f8d7 	bl	8009e5c <iprintf>
		printf("[Calibaba v1.0]\r\n"); // 0
 8003cae:	4bd3      	ldr	r3, [pc, #844]	@ (8003ffc <main+0x758>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	9314      	str	r3, [sp, #80]	@ 0x50
 8003cb4:	f006 f938 	bl	8009f28 <puts>
		printf("1. Config Output RMS(mA) [Current : %f]\r\n", Cfg.rms); // 1
 8003cb8:	465b      	mov	r3, fp
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	f7ff fb58 	bl	8003370 <__aeabi_f2d>
 8003cc0:	000b      	movs	r3, r1
 8003cc2:	49cf      	ldr	r1, [pc, #828]	@ (8004000 <main+0x75c>)
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	0008      	movs	r0, r1
 8003cc8:	9115      	str	r1, [sp, #84]	@ 0x54
 8003cca:	f006 f8c7 	bl	8009e5c <iprintf>
		printf("2. Config Output Phase(Deg.) [Current : %f]\r\n", Cfg.phase); // 2
 8003cce:	465b      	mov	r3, fp
 8003cd0:	6858      	ldr	r0, [r3, #4]
 8003cd2:	f7ff fb4d 	bl	8003370 <__aeabi_f2d>
 8003cd6:	000b      	movs	r3, r1
 8003cd8:	49ca      	ldr	r1, [pc, #808]	@ (8004004 <main+0x760>)
 8003cda:	0002      	movs	r2, r0
 8003cdc:	0008      	movs	r0, r1
 8003cde:	9116      	str	r1, [sp, #88]	@ 0x58
 8003ce0:	f006 f8bc 	bl	8009e5c <iprintf>
		printf("3. Calibrate RMS(mA) [Current : %f]\r\n", Cfg.cfg_rms); // 3
 8003ce4:	465b      	mov	r3, fp
 8003ce6:	6898      	ldr	r0, [r3, #8]
 8003ce8:	f7ff fb42 	bl	8003370 <__aeabi_f2d>
 8003cec:	000b      	movs	r3, r1
 8003cee:	49c6      	ldr	r1, [pc, #792]	@ (8004008 <main+0x764>)
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	0008      	movs	r0, r1
 8003cf4:	910e      	str	r1, [sp, #56]	@ 0x38
 8003cf6:	f006 f8b1 	bl	8009e5c <iprintf>
		printf("4. Calibrate PHASE(Deg.) [Current : %f]\r\n", Cfg.cfg_phase); // 4
 8003cfa:	465b      	mov	r3, fp
 8003cfc:	68d8      	ldr	r0, [r3, #12]
 8003cfe:	f7ff fb37 	bl	8003370 <__aeabi_f2d>
 8003d02:	000b      	movs	r3, r1
 8003d04:	49c1      	ldr	r1, [pc, #772]	@ (800400c <main+0x768>)
 8003d06:	0002      	movs	r2, r0
 8003d08:	0008      	movs	r0, r1
 8003d0a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8003d0c:	f006 f8a6 	bl	8009e5c <iprintf>
		printf("5. Calibrate OFFSET [Current : %f]\r\n", Cfg.cfg_offset); // 5
 8003d10:	465b      	mov	r3, fp
 8003d12:	6918      	ldr	r0, [r3, #16]
 8003d14:	f7ff fb2c 	bl	8003370 <__aeabi_f2d>
 8003d18:	000b      	movs	r3, r1
 8003d1a:	49bd      	ldr	r1, [pc, #756]	@ (8004010 <main+0x76c>)
 8003d1c:	0002      	movs	r2, r0
 8003d1e:	0008      	movs	r0, r1
 8003d20:	9110      	str	r1, [sp, #64]	@ 0x40
 8003d22:	f006 f89b 	bl	8009e5c <iprintf>
		break;
 8003d26:	4bbb      	ldr	r3, [pc, #748]	@ (8004014 <main+0x770>)
 8003d28:	9311      	str	r3, [sp, #68]	@ 0x44
 8003d2a:	4bbb      	ldr	r3, [pc, #748]	@ (8004018 <main+0x774>)
 8003d2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8003d2e:	4bbb      	ldr	r3, [pc, #748]	@ (800401c <main+0x778>)
 8003d30:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003d32:	4bbb      	ldr	r3, [pc, #748]	@ (8004020 <main+0x77c>)
 8003d34:	9318      	str	r3, [sp, #96]	@ 0x60
 8003d36:	4bbb      	ldr	r3, [pc, #748]	@ (8004024 <main+0x780>)
 8003d38:	9319      	str	r3, [sp, #100]	@ 0x64
		break;
 8003d3a:	e723      	b.n	8003b84 <main+0x2e0>
		printf("Input RMS(mA) : \r\n"); //
 8003d3c:	4bb5      	ldr	r3, [pc, #724]	@ (8004014 <main+0x770>)
 8003d3e:	0018      	movs	r0, r3
 8003d40:	9311      	str	r3, [sp, #68]	@ 0x44
 8003d42:	f006 f8f1 	bl	8009f28 <puts>
		break;
 8003d46:	4bac      	ldr	r3, [pc, #688]	@ (8003ff8 <main+0x754>)
 8003d48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d4a:	4bac      	ldr	r3, [pc, #688]	@ (8003ffc <main+0x758>)
 8003d4c:	9314      	str	r3, [sp, #80]	@ 0x50
 8003d4e:	4bac      	ldr	r3, [pc, #688]	@ (8004000 <main+0x75c>)
 8003d50:	9315      	str	r3, [sp, #84]	@ 0x54
 8003d52:	4bac      	ldr	r3, [pc, #688]	@ (8004004 <main+0x760>)
 8003d54:	9316      	str	r3, [sp, #88]	@ 0x58
 8003d56:	4bac      	ldr	r3, [pc, #688]	@ (8004008 <main+0x764>)
 8003d58:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d5a:	4bac      	ldr	r3, [pc, #688]	@ (800400c <main+0x768>)
 8003d5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d5e:	4bac      	ldr	r3, [pc, #688]	@ (8004010 <main+0x76c>)
 8003d60:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d62:	e7e2      	b.n	8003d2a <main+0x486>
		printf("Input Phase(Deg.) : \r\n"); //
 8003d64:	4bac      	ldr	r3, [pc, #688]	@ (8004018 <main+0x774>)
 8003d66:	0018      	movs	r0, r3
 8003d68:	9312      	str	r3, [sp, #72]	@ 0x48
 8003d6a:	f006 f8dd 	bl	8009f28 <puts>
		break;
 8003d6e:	4ba2      	ldr	r3, [pc, #648]	@ (8003ff8 <main+0x754>)
 8003d70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d72:	4ba2      	ldr	r3, [pc, #648]	@ (8003ffc <main+0x758>)
 8003d74:	9314      	str	r3, [sp, #80]	@ 0x50
 8003d76:	4ba2      	ldr	r3, [pc, #648]	@ (8004000 <main+0x75c>)
 8003d78:	9315      	str	r3, [sp, #84]	@ 0x54
 8003d7a:	4ba2      	ldr	r3, [pc, #648]	@ (8004004 <main+0x760>)
 8003d7c:	9316      	str	r3, [sp, #88]	@ 0x58
 8003d7e:	4ba2      	ldr	r3, [pc, #648]	@ (8004008 <main+0x764>)
 8003d80:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d82:	4ba2      	ldr	r3, [pc, #648]	@ (800400c <main+0x768>)
 8003d84:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d86:	4ba2      	ldr	r3, [pc, #648]	@ (8004010 <main+0x76c>)
 8003d88:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d8a:	4ba2      	ldr	r3, [pc, #648]	@ (8004014 <main+0x770>)
 8003d8c:	9311      	str	r3, [sp, #68]	@ 0x44
 8003d8e:	e7ce      	b.n	8003d2e <main+0x48a>
		printf("Input Config RMS Value(mA) : \r\n"); //
 8003d90:	4ba2      	ldr	r3, [pc, #648]	@ (800401c <main+0x778>)
 8003d92:	0018      	movs	r0, r3
 8003d94:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003d96:	f006 f8c7 	bl	8009f28 <puts>
		break;
 8003d9a:	4b97      	ldr	r3, [pc, #604]	@ (8003ff8 <main+0x754>)
 8003d9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d9e:	4b97      	ldr	r3, [pc, #604]	@ (8003ffc <main+0x758>)
 8003da0:	9314      	str	r3, [sp, #80]	@ 0x50
 8003da2:	4b97      	ldr	r3, [pc, #604]	@ (8004000 <main+0x75c>)
 8003da4:	9315      	str	r3, [sp, #84]	@ 0x54
 8003da6:	4b97      	ldr	r3, [pc, #604]	@ (8004004 <main+0x760>)
 8003da8:	9316      	str	r3, [sp, #88]	@ 0x58
 8003daa:	4b97      	ldr	r3, [pc, #604]	@ (8004008 <main+0x764>)
 8003dac:	930e      	str	r3, [sp, #56]	@ 0x38
 8003dae:	4b97      	ldr	r3, [pc, #604]	@ (800400c <main+0x768>)
 8003db0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003db2:	4b97      	ldr	r3, [pc, #604]	@ (8004010 <main+0x76c>)
 8003db4:	9310      	str	r3, [sp, #64]	@ 0x40
 8003db6:	4b97      	ldr	r3, [pc, #604]	@ (8004014 <main+0x770>)
 8003db8:	9311      	str	r3, [sp, #68]	@ 0x44
 8003dba:	4b97      	ldr	r3, [pc, #604]	@ (8004018 <main+0x774>)
 8003dbc:	9312      	str	r3, [sp, #72]	@ 0x48
 8003dbe:	4b98      	ldr	r3, [pc, #608]	@ (8004020 <main+0x77c>)
 8003dc0:	9318      	str	r3, [sp, #96]	@ 0x60
 8003dc2:	4b98      	ldr	r3, [pc, #608]	@ (8004024 <main+0x780>)
 8003dc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8003dc6:	e6dd      	b.n	8003b84 <main+0x2e0>
   		  adcflag = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9a01      	ldr	r2, [sp, #4]
   		  Record.record[Record.cursor].time = micros();
 8003dcc:	6a34      	ldr	r4, [r6, #32]
   		  adcflag = 0;
 8003dce:	7013      	strb	r3, [r2, #0]
    return __HAL_TIM_GET_COUNTER(&htim2);  // TIM2 카운터 값 읽기
 8003dd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   		  Record.record[Record.cursor].time = micros();
 8003dd2:	00e5      	lsls	r5, r4, #3
    return __HAL_TIM_GET_COUNTER(&htim2);  // TIM2 카운터 값 읽기
 8003dd4:	681b      	ldr	r3, [r3, #0]
   		  Record.cursor=(Record.cursor + 1)%RECORD_LEN;
 8003dd6:	3401      	adds	r4, #1
    return __HAL_TIM_GET_COUNTER(&htim2);  // TIM2 카운터 값 읽기
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   		  Record.record[Record.cursor].time = micros();
 8003dda:	5173      	str	r3, [r6, r5]
   		  Record.record[Record.cursor].val = (float)(adcBuf[0]-adcBuf[1]);
 8003ddc:	9b04      	ldr	r3, [sp, #16]
 8003dde:	1975      	adds	r5, r6, r5
 8003de0:	8818      	ldrh	r0, [r3, #0]
 8003de2:	885b      	ldrh	r3, [r3, #2]
 8003de4:	1ac0      	subs	r0, r0, r3
 8003de6:	f7fd fb79 	bl	80014dc <__aeabi_i2f>
 8003dea:	6068      	str	r0, [r5, #4]
   		  Record.cursor=(Record.cursor + 1)%RECORD_LEN;
 8003dec:	2503      	movs	r5, #3
 8003dee:	17e3      	asrs	r3, r4, #31
 8003df0:	0f9b      	lsrs	r3, r3, #30
 8003df2:	18e4      	adds	r4, r4, r3
 8003df4:	402c      	ands	r4, r5
 8003df6:	1ae4      	subs	r4, r4, r3
	a = amp * Cfg.cfg_rms * sqrt(2) * cos(M_PI * (deg + Cfg.cfg_phase) / 180.0f);
 8003df8:	4653      	mov	r3, sl
   		  Record.cursor=(Record.cursor + 1)%RECORD_LEN;
 8003dfa:	6234      	str	r4, [r6, #32]
	a = amp * Cfg.cfg_rms * sqrt(2) * cos(M_PI * (deg + Cfg.cfg_phase) / 180.0f);
 8003dfc:	68d9      	ldr	r1, [r3, #12]
 8003dfe:	6858      	ldr	r0, [r3, #4]
 8003e00:	f7fc fcfa 	bl	80007f8 <__aeabi_fadd>
 8003e04:	f7ff fab4 	bl	8003370 <__aeabi_f2d>
 8003e08:	4a87      	ldr	r2, [pc, #540]	@ (8004028 <main+0x784>)
 8003e0a:	4b88      	ldr	r3, [pc, #544]	@ (800402c <main+0x788>)
 8003e0c:	f7fe fb9c 	bl	8002548 <__aeabi_dmul>
 8003e10:	9006      	str	r0, [sp, #24]
 8003e12:	9107      	str	r1, [sp, #28]
 8003e14:	f003 fc38 	bl	8007688 <cos>
 8003e18:	4653      	mov	r3, sl
 8003e1a:	9002      	str	r0, [sp, #8]
 8003e1c:	9103      	str	r1, [sp, #12]
 8003e1e:	6899      	ldr	r1, [r3, #8]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	f7fd f859 	bl	8000ed8 <__aeabi_fmul>
 8003e26:	f7ff faa3 	bl	8003370 <__aeabi_f2d>
 8003e2a:	4a81      	ldr	r2, [pc, #516]	@ (8004030 <main+0x78c>)
 8003e2c:	4b81      	ldr	r3, [pc, #516]	@ (8004034 <main+0x790>)
 8003e2e:	f7fe fb8b 	bl	8002548 <__aeabi_dmul>
	int idx1 = (rcd->cursor+RECORD_LEN-2)%RECORD_LEN;
 8003e32:	1ca3      	adds	r3, r4, #2
 8003e34:	17da      	asrs	r2, r3, #31
 8003e36:	0f92      	lsrs	r2, r2, #30
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	402b      	ands	r3, r5
 8003e3c:	1a9b      	subs	r3, r3, r2
	float val = rcd->record[idx1].val;
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	18f3      	adds	r3, r6, r3
	a = amp * Cfg.cfg_rms * sqrt(2) * cos(M_PI * (deg + Cfg.cfg_phase) / 180.0f);
 8003e42:	0002      	movs	r2, r0
 8003e44:	9008      	str	r0, [sp, #32]
 8003e46:	9109      	str	r1, [sp, #36]	@ 0x24
	float val = rcd->record[idx1].val;
 8003e48:	9305      	str	r3, [sp, #20]
	a = amp * Cfg.cfg_rms * sqrt(2) * cos(M_PI * (deg + Cfg.cfg_phase) / 180.0f);
 8003e4a:	000b      	movs	r3, r1
 8003e4c:	9802      	ldr	r0, [sp, #8]
 8003e4e:	9903      	ldr	r1, [sp, #12]
 8003e50:	f7fe fb7a 	bl	8002548 <__aeabi_dmul>
 8003e54:	f7ff fad4 	bl	8003400 <__aeabi_d2f>
	float result = a * val + b * diffval(&Record);
 8003e58:	9b05      	ldr	r3, [sp, #20]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	f7fd f83c 	bl	8000ed8 <__aeabi_fmul>
	uint32_t difftime = (rcd->record[idx1].time + TIME_MAX - rcd->record[idx0].time) % TIME_MAX;
 8003e60:	4975      	ldr	r1, [pc, #468]	@ (8004038 <main+0x794>)
	idx0 = (rcd->cursor+RECORD_LEN-DIFF_STEP-1)%RECORD_LEN;
 8003e62:	1c63      	adds	r3, r4, #1
	uint32_t difftime = (rcd->record[idx1].time + TIME_MAX - rcd->record[idx0].time) % TIME_MAX;
 8003e64:	468c      	mov	ip, r1
	idx0 = (rcd->cursor+RECORD_LEN-DIFF_STEP-1)%RECORD_LEN;
 8003e66:	17da      	asrs	r2, r3, #31
 8003e68:	0f92      	lsrs	r2, r2, #30
 8003e6a:	189b      	adds	r3, r3, r2
	idx1 = (rcd->cursor+RECORD_LEN-1)%RECORD_LEN;
 8003e6c:	3403      	adds	r4, #3
	idx0 = (rcd->cursor+RECORD_LEN-DIFF_STEP-1)%RECORD_LEN;
 8003e6e:	402b      	ands	r3, r5
	idx1 = (rcd->cursor+RECORD_LEN-1)%RECORD_LEN;
 8003e70:	4025      	ands	r5, r4
	idx0 = (rcd->cursor+RECORD_LEN-DIFF_STEP-1)%RECORD_LEN;
 8003e72:	1a9b      	subs	r3, r3, r2
	uint32_t difftime = (rcd->record[idx1].time + TIME_MAX - rcd->record[idx0].time) % TIME_MAX;
 8003e74:	00ed      	lsls	r5, r5, #3
	float result = a * val + b * diffval(&Record);
 8003e76:	9002      	str	r0, [sp, #8]
	uint32_t difftime = (rcd->record[idx1].time + TIME_MAX - rcd->record[idx0].time) % TIME_MAX;
 8003e78:	00dc      	lsls	r4, r3, #3
 8003e7a:	5970      	ldr	r0, [r6, r5]
 8003e7c:	5933      	ldr	r3, [r6, r4]
 8003e7e:	4460      	add	r0, ip
 8003e80:	1ac0      	subs	r0, r0, r3
 8003e82:	f7fc f9df 	bl	8000244 <__aeabi_uidivmod>
	float diffval = (rcd->record[idx1].val - rcd->record[idx0].val);
 8003e86:	1975      	adds	r5, r6, r5
 8003e88:	1934      	adds	r4, r6, r4
 8003e8a:	686d      	ldr	r5, [r5, #4]
 8003e8c:	6864      	ldr	r4, [r4, #4]
	if(difftime == 0){
 8003e8e:	9105      	str	r1, [sp, #20]
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d026      	beq.n	8003ee2 <main+0x63e>
	b = amp * Cfg.cfg_rms * sqrt(2) * sin(M_PI * (deg + Cfg.cfg_phase) / 180.0f);
 8003e94:	9806      	ldr	r0, [sp, #24]
 8003e96:	9907      	ldr	r1, [sp, #28]
 8003e98:	f003 fc36 	bl	8007708 <sin>
 8003e9c:	9006      	str	r0, [sp, #24]
 8003e9e:	9107      	str	r1, [sp, #28]
	float diffval = (rcd->record[idx1].val - rcd->record[idx0].val);
 8003ea0:	1c21      	adds	r1, r4, #0
 8003ea2:	1c28      	adds	r0, r5, #0
 8003ea4:	f7fd f956 	bl	8001154 <__aeabi_fsub>
	result = diffval * 3000 / (float)difftime;
 8003ea8:	4964      	ldr	r1, [pc, #400]	@ (800403c <main+0x798>)
 8003eaa:	f7fd f815 	bl	8000ed8 <__aeabi_fmul>
 8003eae:	1c04      	adds	r4, r0, #0
 8003eb0:	9805      	ldr	r0, [sp, #20]
 8003eb2:	f7fd fb5f 	bl	8001574 <__aeabi_ui2f>
 8003eb6:	1c01      	adds	r1, r0, #0
 8003eb8:	1c20      	adds	r0, r4, #0
 8003eba:	f7fc fe27 	bl	8000b0c <__aeabi_fdiv>
	b = amp * Cfg.cfg_rms * sqrt(2) * sin(M_PI * (deg + Cfg.cfg_phase) / 180.0f);
 8003ebe:	9a08      	ldr	r2, [sp, #32]
 8003ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	result = diffval * 3000 / (float)difftime;
 8003ec2:	1c04      	adds	r4, r0, #0
	b = amp * Cfg.cfg_rms * sqrt(2) * sin(M_PI * (deg + Cfg.cfg_phase) / 180.0f);
 8003ec4:	9806      	ldr	r0, [sp, #24]
 8003ec6:	9907      	ldr	r1, [sp, #28]
 8003ec8:	f7fe fb3e 	bl	8002548 <__aeabi_dmul>
 8003ecc:	f7ff fa98 	bl	8003400 <__aeabi_d2f>
 8003ed0:	1c01      	adds	r1, r0, #0
	float result = a * val + b * diffval(&Record);
 8003ed2:	1c20      	adds	r0, r4, #0
 8003ed4:	f7fd f800 	bl	8000ed8 <__aeabi_fmul>
 8003ed8:	1c01      	adds	r1, r0, #0
 8003eda:	9802      	ldr	r0, [sp, #8]
 8003edc:	f7fc fc8c 	bl	80007f8 <__aeabi_fadd>
 8003ee0:	9002      	str	r0, [sp, #8]
	result = (uint32_t)val + (uint32_t)Cfg.cfg_offset;
 8003ee2:	4653      	mov	r3, sl
 8003ee4:	6918      	ldr	r0, [r3, #16]
 8003ee6:	f7fc fb35 	bl	8000554 <__aeabi_f2uiz>
 8003eea:	0004      	movs	r4, r0
 8003eec:	9802      	ldr	r0, [sp, #8]
 8003eee:	f7fc fb31 	bl	8000554 <__aeabi_f2uiz>
	if(result > 4095) return 4095;
 8003ef2:	2280      	movs	r2, #128	@ 0x80
	result = (uint32_t)val + (uint32_t)Cfg.cfg_offset;
 8003ef4:	1823      	adds	r3, r4, r0
	if(result > 4095) return 4095;
 8003ef6:	0152      	lsls	r2, r2, #5
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d300      	bcc.n	8003efe <main+0x65a>
 8003efc:	4b50      	ldr	r3, [pc, #320]	@ (8004040 <main+0x79c>)
   		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacval);
 8003efe:	2200      	movs	r2, #0
 8003f00:	2100      	movs	r1, #0
 8003f02:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003f04:	f000 ffa6 	bl	8004e54 <HAL_DAC_SetValue>
       	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, 4);
 8003f08:	2204      	movs	r2, #4
 8003f0a:	9904      	ldr	r1, [sp, #16]
 8003f0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003f0e:	f000 fea7 	bl	8004c60 <HAL_ADC_Start_DMA>
 8003f12:	e64b      	b.n	8003bac <main+0x308>
  		  memset(Kb.keyInput,0,KEY_BUFLEN);
 8003f14:	2480      	movs	r4, #128	@ 0x80
  		  Kb.flag_keyInput = 0;
 8003f16:	2500      	movs	r5, #0
 8003f18:	3308      	adds	r3, #8
 8003f1a:	33ff      	adds	r3, #255	@ 0xff
  		  processMenu(&Kb);
 8003f1c:	0038      	movs	r0, r7
  		  memset(Kb.keyInput,0,KEY_BUFLEN);
 8003f1e:	0064      	lsls	r4, r4, #1
  		  Kb.flag_keyInput = 0;
 8003f20:	50fd      	str	r5, [r7, r3]
  		  processMenu(&Kb);
 8003f22:	f7ff fbf3 	bl	800370c <processMenu>
  		  memset(Kb.keyInput,0,KEY_BUFLEN);
 8003f26:	0022      	movs	r2, r4
 8003f28:	2100      	movs	r1, #0
 8003f2a:	0038      	movs	r0, r7
 8003f2c:	f006 f8f2 	bl	800a114 <memset>
	switch(_Kb->menuId){
 8003f30:	2388      	movs	r3, #136	@ 0x88
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	58fb      	ldr	r3, [r7, r3]
  		  Kb.cursor=0;
 8003f36:	513d      	str	r5, [r7, r4]
	switch(_Kb->menuId){
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d900      	bls.n	8003f3e <main+0x69a>
 8003f3c:	e643      	b.n	8003bc6 <main+0x322>
 8003f3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	58d3      	ldr	r3, [r2, r3]
 8003f44:	469f      	mov	pc, r3
		printf("Input Config PHASE Value(Deg.) : \r\n"); //
 8003f46:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8003f48:	f005 ffee 	bl	8009f28 <puts>
		break;
 8003f4c:	e63b      	b.n	8003bc6 <main+0x322>
		printf("Input Config RMS Value(mA) : \r\n"); //
 8003f4e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003f50:	f005 ffea 	bl	8009f28 <puts>
		break;
 8003f54:	e637      	b.n	8003bc6 <main+0x322>
		printf("Input Phase(Deg.) : \r\n"); //
 8003f56:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8003f58:	f005 ffe6 	bl	8009f28 <puts>
		break;
 8003f5c:	e633      	b.n	8003bc6 <main+0x322>
		printf("Input RMS(mA) : \r\n"); //
 8003f5e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8003f60:	f005 ffe2 	bl	8009f28 <puts>
		break;
 8003f64:	e62f      	b.n	8003bc6 <main+0x322>
		printf("\e[2J\e[H");
 8003f66:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8003f68:	f005 ff78 	bl	8009e5c <iprintf>
		printf("[Calibaba v1.0]\r\n"); // 0
 8003f6c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8003f6e:	f005 ffdb 	bl	8009f28 <puts>
		printf("1. Config Output RMS(mA) [Current : %f]\r\n", Cfg.rms); // 1
 8003f72:	4653      	mov	r3, sl
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	f7ff f9fb 	bl	8003370 <__aeabi_f2d>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	000b      	movs	r3, r1
 8003f7e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8003f80:	f005 ff6c 	bl	8009e5c <iprintf>
		printf("2. Config Output Phase(Deg.) [Current : %f]\r\n", Cfg.phase); // 2
 8003f84:	4653      	mov	r3, sl
 8003f86:	6858      	ldr	r0, [r3, #4]
 8003f88:	f7ff f9f2 	bl	8003370 <__aeabi_f2d>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	000b      	movs	r3, r1
 8003f90:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8003f92:	f005 ff63 	bl	8009e5c <iprintf>
		printf("3. Calibrate RMS(mA) [Current : %f]\r\n", Cfg.cfg_rms); // 3
 8003f96:	4653      	mov	r3, sl
 8003f98:	6898      	ldr	r0, [r3, #8]
 8003f9a:	f7ff f9e9 	bl	8003370 <__aeabi_f2d>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	000b      	movs	r3, r1
 8003fa2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003fa4:	f005 ff5a 	bl	8009e5c <iprintf>
		printf("4. Calibrate PHASE(Deg.) [Current : %f]\r\n", Cfg.cfg_phase); // 4
 8003fa8:	4653      	mov	r3, sl
 8003faa:	68d8      	ldr	r0, [r3, #12]
 8003fac:	f7ff f9e0 	bl	8003370 <__aeabi_f2d>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	000b      	movs	r3, r1
 8003fb4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003fb6:	f005 ff51 	bl	8009e5c <iprintf>
		printf("5. Calibrate OFFSET [Current : %f]\r\n", Cfg.cfg_offset); // 5
 8003fba:	4653      	mov	r3, sl
 8003fbc:	6918      	ldr	r0, [r3, #16]
 8003fbe:	f7ff f9d7 	bl	8003370 <__aeabi_f2d>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	000b      	movs	r3, r1
 8003fc6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8003fc8:	f005 ff48 	bl	8009e5c <iprintf>
	default:
		break;
	}
}
 8003fcc:	e5fb      	b.n	8003bc6 <main+0x322>
		printf("Input Config Offset : \r\n"); //
 8003fce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8003fd0:	f005 ffaa 	bl	8009f28 <puts>
		break;
 8003fd4:	e5f7      	b.n	8003bc6 <main+0x322>
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <main+0x754>)
 8003fd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003fda:	4b08      	ldr	r3, [pc, #32]	@ (8003ffc <main+0x758>)
 8003fdc:	9314      	str	r3, [sp, #80]	@ 0x50
 8003fde:	4b08      	ldr	r3, [pc, #32]	@ (8004000 <main+0x75c>)
 8003fe0:	9315      	str	r3, [sp, #84]	@ 0x54
 8003fe2:	4b08      	ldr	r3, [pc, #32]	@ (8004004 <main+0x760>)
 8003fe4:	9316      	str	r3, [sp, #88]	@ 0x58
 8003fe6:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <main+0x764>)
 8003fe8:	930e      	str	r3, [sp, #56]	@ 0x38
 8003fea:	4b08      	ldr	r3, [pc, #32]	@ (800400c <main+0x768>)
 8003fec:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003fee:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <main+0x76c>)
 8003ff0:	9310      	str	r3, [sp, #64]	@ 0x40
 8003ff2:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <main+0x770>)
 8003ff4:	9311      	str	r3, [sp, #68]	@ 0x44
 8003ff6:	e698      	b.n	8003d2a <main+0x486>
 8003ff8:	0800ca18 	.word	0x0800ca18
 8003ffc:	0800ca20 	.word	0x0800ca20
 8004000:	0800ca34 	.word	0x0800ca34
 8004004:	0800ca60 	.word	0x0800ca60
 8004008:	0800ca90 	.word	0x0800ca90
 800400c:	0800cab8 	.word	0x0800cab8
 8004010:	0800cae4 	.word	0x0800cae4
 8004014:	0800cb0c 	.word	0x0800cb0c
 8004018:	0800cb20 	.word	0x0800cb20
 800401c:	0800cb38 	.word	0x0800cb38
 8004020:	0800cb58 	.word	0x0800cb58
 8004024:	0800cb7c 	.word	0x0800cb7c
 8004028:	a2529d39 	.word	0xa2529d39
 800402c:	3f91df46 	.word	0x3f91df46
 8004030:	667f3bcd 	.word	0x667f3bcd
 8004034:	3ff6a09e 	.word	0x3ff6a09e
 8004038:	3b9aca00 	.word	0x3b9aca00
 800403c:	453b8000 	.word	0x453b8000
 8004040:	00000fff 	.word	0x00000fff

08004044 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8004044:	4770      	bx	lr
 8004046:	46c0      	nop			@ (mov r8, r8)

08004048 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004048:	2201      	movs	r2, #1
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_MspInit+0x2c>)
{
 800404c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004050:	4311      	orrs	r1, r2
 8004052:	6419      	str	r1, [r3, #64]	@ 0x40
 8004054:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004056:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004058:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405a:	9200      	str	r2, [sp, #0]
 800405c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004060:	0549      	lsls	r1, r1, #21
 8004062:	430a      	orrs	r2, r1
 8004064:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	400b      	ands	r3, r1
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800406e:	b002      	add	sp, #8
 8004070:	4770      	bx	lr
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	40021000 	.word	0x40021000

08004078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004078:	b530      	push	{r4, r5, lr}
 800407a:	0004      	movs	r4, r0
 800407c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407e:	2214      	movs	r2, #20
 8004080:	2100      	movs	r1, #0
 8004082:	a802      	add	r0, sp, #8
 8004084:	f006 f846 	bl	800a114 <memset>
  if(hadc->Instance==ADC1)
 8004088:	4b22      	ldr	r3, [pc, #136]	@ (8004114 <HAL_ADC_MspInit+0x9c>)
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004090:	b009      	add	sp, #36	@ 0x24
 8004092:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8004094:	2180      	movs	r1, #128	@ 0x80
 8004096:	4b20      	ldr	r3, [pc, #128]	@ (8004118 <HAL_ADC_MspInit+0xa0>)
 8004098:	0349      	lsls	r1, r1, #13
 800409a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 800409e:	430a      	orrs	r2, r1
 80040a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80040a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 80040a6:	400a      	ands	r2, r1
 80040a8:	9200      	str	r2, [sp, #0]
 80040aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ac:	2201      	movs	r2, #1
 80040ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040b0:	4311      	orrs	r1, r2
 80040b2:	6359      	str	r1, [r3, #52]	@ 0x34
 80040b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b8:	401a      	ands	r2, r3
 80040ba:	9201      	str	r2, [sp, #4]
 80040bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_V_Pin|ADC_1V6_Pin|ADC_Zf_Pin;
 80040be:	2207      	movs	r2, #7
 80040c0:	2303      	movs	r3, #3
 80040c2:	9202      	str	r2, [sp, #8]
 80040c4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c6:	f001 fafb 	bl	80056c0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80040ca:	4d14      	ldr	r5, [pc, #80]	@ (800411c <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040cc:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 80040ce:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <HAL_ADC_MspInit+0xa8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040d0:	612a      	str	r2, [r5, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 80040d2:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80040d4:	2305      	movs	r3, #5
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040d6:	3280      	adds	r2, #128	@ 0x80
 80040d8:	616a      	str	r2, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040da:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80040dc:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040de:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040e0:	00d2      	lsls	r2, r2, #3
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040e2:	0028      	movs	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040e4:	60ab      	str	r3, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040e6:	60eb      	str	r3, [r5, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040e8:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80040ea:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80040ec:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040ee:	f000 ff63 	bl	8004fb8 <HAL_DMA_Init>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d10a      	bne.n	800410c <HAL_ADC_MspInit+0x94>
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2100      	movs	r1, #0
 80040fa:	200c      	movs	r0, #12
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80040fc:	6525      	str	r5, [r4, #80]	@ 0x50
 80040fe:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8004100:	f000 fe10 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8004104:	200c      	movs	r0, #12
 8004106:	f000 fe37 	bl	8004d78 <HAL_NVIC_EnableIRQ>
}
 800410a:	e7c1      	b.n	8004090 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800410c:	f7ff ff9a 	bl	8004044 <Error_Handler>
 8004110:	e7f1      	b.n	80040f6 <HAL_ADC_MspInit+0x7e>
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	40012400 	.word	0x40012400
 8004118:	40021000 	.word	0x40021000
 800411c:	20000500 	.word	0x20000500
 8004120:	40020008 	.word	0x40020008

08004124 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004124:	b510      	push	{r4, lr}
 8004126:	0004      	movs	r4, r0
 8004128:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412a:	2214      	movs	r2, #20
 800412c:	2100      	movs	r1, #0
 800412e:	a802      	add	r0, sp, #8
 8004130:	f005 fff0 	bl	800a114 <memset>
  if(hdac->Instance==DAC1)
 8004134:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <HAL_DAC_MspInit+0x54>)
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_DAC_MspInit+0x1c>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800413c:	b008      	add	sp, #32
 800413e:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004140:	2180      	movs	r1, #128	@ 0x80
 8004142:	4b0e      	ldr	r3, [pc, #56]	@ (800417c <HAL_DAC_MspInit+0x58>)
 8004144:	0589      	lsls	r1, r1, #22
 8004146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(DAC_Z_GPIO_Port, &GPIO_InitStruct);
 8004148:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_DAC1_CLK_ENABLE();
 800414a:	430a      	orrs	r2, r1
 800414c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800414e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(DAC_Z_GPIO_Port, &GPIO_InitStruct);
 8004150:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004152:	400a      	ands	r2, r1
 8004154:	9200      	str	r2, [sp, #0]
 8004156:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004158:	2201      	movs	r2, #1
 800415a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800415c:	4311      	orrs	r1, r2
 800415e:	6359      	str	r1, [r3, #52]	@ 0x34
 8004160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(DAC_Z_GPIO_Port, &GPIO_InitStruct);
 8004162:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004164:	401a      	ands	r2, r3
 8004166:	9201      	str	r2, [sp, #4]
 8004168:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = DAC_Z_Pin;
 800416a:	2210      	movs	r2, #16
 800416c:	2303      	movs	r3, #3
 800416e:	9202      	str	r2, [sp, #8]
 8004170:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DAC_Z_GPIO_Port, &GPIO_InitStruct);
 8004172:	f001 faa5 	bl	80056c0 <HAL_GPIO_Init>
}
 8004176:	e7e1      	b.n	800413c <HAL_DAC_MspInit+0x18>
 8004178:	40007400 	.word	0x40007400
 800417c:	40021000 	.word	0x40021000

08004180 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8004180:	2380      	movs	r3, #128	@ 0x80
{
 8004182:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8004184:	6802      	ldr	r2, [r0, #0]
{
 8004186:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8004188:	05db      	lsls	r3, r3, #23
 800418a:	429a      	cmp	r2, r3
 800418c:	d001      	beq.n	8004192 <HAL_TIM_Base_MspInit+0x12>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800418e:	b003      	add	sp, #12
 8004190:	bd00      	pop	{pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004192:	2301      	movs	r3, #1
 8004194:	4a08      	ldr	r2, [pc, #32]	@ (80041b8 <HAL_TIM_Base_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004196:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004198:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800419a:	4319      	orrs	r1, r3
 800419c:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800419e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041a0:	2100      	movs	r1, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041a2:	4013      	ands	r3, r2
 80041a4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041a6:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041aa:	f000 fdbb 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041ae:	200f      	movs	r0, #15
 80041b0:	f000 fde2 	bl	8004d78 <HAL_NVIC_EnableIRQ>
}
 80041b4:	e7eb      	b.n	800418e <HAL_TIM_Base_MspInit+0xe>
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	40021000 	.word	0x40021000

080041bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	0004      	movs	r4, r0
 80041c0:	b092      	sub	sp, #72	@ 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c2:	2214      	movs	r2, #20
 80041c4:	2100      	movs	r1, #0
 80041c6:	a802      	add	r0, sp, #8
 80041c8:	f005 ffa4 	bl	800a114 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041cc:	222c      	movs	r2, #44	@ 0x2c
 80041ce:	2100      	movs	r1, #0
 80041d0:	a807      	add	r0, sp, #28
 80041d2:	f005 ff9f 	bl	800a114 <memset>
  if(huart->Instance==USART1)
 80041d6:	4b34      	ldr	r3, [pc, #208]	@ (80042a8 <HAL_UART_MspInit+0xec>)
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d001      	beq.n	80041e2 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80041de:	b012      	add	sp, #72	@ 0x48
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041e2:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041e4:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041e6:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041e8:	f001 ff1e 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d152      	bne.n	8004296 <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART1_CLK_ENABLE();
 80041f0:	2180      	movs	r1, #128	@ 0x80
 80041f2:	4b2e      	ldr	r3, [pc, #184]	@ (80042ac <HAL_UART_MspInit+0xf0>)
 80041f4:	01c9      	lsls	r1, r1, #7
 80041f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80041f8:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80041fa:	430a      	orrs	r2, r1
 80041fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80041fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004200:	482b      	ldr	r0, [pc, #172]	@ (80042b0 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004202:	400a      	ands	r2, r1
 8004204:	9200      	str	r2, [sp, #0]
 8004206:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004208:	2202      	movs	r2, #2
 800420a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800420c:	4311      	orrs	r1, r2
 800420e:	6359      	str	r1, [r3, #52]	@ 0x34
 8004210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004212:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004214:	401a      	ands	r2, r3
 8004216:	9201      	str	r2, [sp, #4]
 8004218:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800421a:	22c0      	movs	r2, #192	@ 0xc0
 800421c:	2302      	movs	r3, #2
 800421e:	9202      	str	r2, [sp, #8]
 8004220:	9303      	str	r3, [sp, #12]
 8004222:	2300      	movs	r3, #0
 8004224:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004226:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004228:	9204      	str	r2, [sp, #16]
 800422a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422c:	f001 fa48 	bl	80056c0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8004230:	4d20      	ldr	r5, [pc, #128]	@ (80042b4 <HAL_UART_MspInit+0xf8>)
 8004232:	4b21      	ldr	r3, [pc, #132]	@ (80042b8 <HAL_UART_MspInit+0xfc>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004234:	0028      	movs	r0, r5
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8004236:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004238:	2332      	movs	r3, #50	@ 0x32
 800423a:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800423c:	334e      	adds	r3, #78	@ 0x4e
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800423e:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004240:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004242:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004244:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004246:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004248:	61ee      	str	r6, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800424a:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800424c:	f000 feb4 	bl	8004fb8 <HAL_DMA_Init>
 8004250:	2800      	cmp	r0, #0
 8004252:	d126      	bne.n	80042a2 <HAL_UART_MspInit+0xe6>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004254:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8004256:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <HAL_UART_MspInit+0x100>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004258:	50a5      	str	r5, [r4, r2]
 800425a:	62ac      	str	r4, [r5, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel3;
 800425c:	4d18      	ldr	r5, [pc, #96]	@ (80042c0 <HAL_UART_MspInit+0x104>)
 800425e:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004260:	2333      	movs	r3, #51	@ 0x33
 8004262:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004264:	3b23      	subs	r3, #35	@ 0x23
 8004266:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004268:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800426a:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800426c:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800426e:	612a      	str	r2, [r5, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004270:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004272:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004274:	61eb      	str	r3, [r5, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004276:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004278:	f000 fe9e 	bl	8004fb8 <HAL_DMA_Init>
 800427c:	2800      	cmp	r0, #0
 800427e:	d10d      	bne.n	800429c <HAL_UART_MspInit+0xe0>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004286:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8004288:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800428a:	f000 fd4b 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800428e:	201b      	movs	r0, #27
 8004290:	f000 fd72 	bl	8004d78 <HAL_NVIC_EnableIRQ>
}
 8004294:	e7a3      	b.n	80041de <HAL_UART_MspInit+0x22>
      Error_Handler();
 8004296:	f7ff fed5 	bl	8004044 <Error_Handler>
 800429a:	e7a9      	b.n	80041f0 <HAL_UART_MspInit+0x34>
      Error_Handler();
 800429c:	f7ff fed2 	bl	8004044 <Error_Handler>
 80042a0:	e7ee      	b.n	8004280 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80042a2:	f7ff fecf 	bl	8004044 <Error_Handler>
 80042a6:	e7d5      	b.n	8004254 <HAL_UART_MspInit+0x98>
 80042a8:	40013800 	.word	0x40013800
 80042ac:	40021000 	.word	0x40021000
 80042b0:	50000400 	.word	0x50000400
 80042b4:	200003b0 	.word	0x200003b0
 80042b8:	4002001c 	.word	0x4002001c
 80042bc:	40020030 	.word	0x40020030
 80042c0:	20000354 	.word	0x20000354

080042c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042c4:	e7fe      	b.n	80042c4 <NMI_Handler>
 80042c6:	46c0      	nop			@ (mov r8, r8)

080042c8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042c8:	e7fe      	b.n	80042c8 <HardFault_Handler>
 80042ca:	46c0      	nop			@ (mov r8, r8)

080042cc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042cc:	4770      	bx	lr
 80042ce:	46c0      	nop			@ (mov r8, r8)

080042d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80042d0:	4770      	bx	lr
 80042d2:	46c0      	nop			@ (mov r8, r8)

080042d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d6:	f000 f8e1 	bl	800449c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042da:	bd10      	pop	{r4, pc}

080042dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80042dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042de:	4802      	ldr	r0, [pc, #8]	@ (80042e8 <DMA1_Channel1_IRQHandler+0xc>)
 80042e0:	f000 ffc0 	bl	8005264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	20000500 	.word	0x20000500

080042ec <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80042ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80042ee:	4803      	ldr	r0, [pc, #12]	@ (80042fc <DMA1_Channel2_3_IRQHandler+0x10>)
 80042f0:	f000 ffb8 	bl	8005264 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80042f4:	4802      	ldr	r0, [pc, #8]	@ (8004300 <DMA1_Channel2_3_IRQHandler+0x14>)
 80042f6:	f000 ffb5 	bl	8005264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80042fa:	bd10      	pop	{r4, pc}
 80042fc:	200003b0 	.word	0x200003b0
 8004300:	20000354 	.word	0x20000354

08004304 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004304:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004306:	4802      	ldr	r0, [pc, #8]	@ (8004310 <ADC1_COMP_IRQHandler+0xc>)
 8004308:	f000 fa50 	bl	80047ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800430c:	bd10      	pop	{r4, pc}
 800430e:	46c0      	nop			@ (mov r8, r8)
 8004310:	2000055c 	.word	0x2000055c

08004314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004314:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004316:	4802      	ldr	r0, [pc, #8]	@ (8004320 <TIM2_IRQHandler+0xc>)
 8004318:	f002 f90e 	bl	8006538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800431c:	bd10      	pop	{r4, pc}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	200004a0 	.word	0x200004a0

08004324 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8004324:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004326:	4802      	ldr	r0, [pc, #8]	@ (8004330 <USART1_IRQHandler+0xc>)
 8004328:	f002 fb96 	bl	8006a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800432c:	bd10      	pop	{r4, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	2000040c 	.word	0x2000040c

08004334 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004334:	2001      	movs	r0, #1
 8004336:	4770      	bx	lr

08004338 <_kill>:

int _kill(int pid, int sig)
{
 8004338:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800433a:	f005 ff57 	bl	800a1ec <__errno>
 800433e:	2316      	movs	r3, #22
 8004340:	6003      	str	r3, [r0, #0]
  return -1;
 8004342:	2001      	movs	r0, #1
}
 8004344:	4240      	negs	r0, r0
 8004346:	bd10      	pop	{r4, pc}

08004348 <_exit>:

void _exit (int status)
{
 8004348:	b510      	push	{r4, lr}
  errno = EINVAL;
 800434a:	f005 ff4f 	bl	800a1ec <__errno>
 800434e:	2316      	movs	r3, #22
 8004350:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004352:	e7fe      	b.n	8004352 <_exit+0xa>

08004354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004358:	dd07      	ble.n	800436a <_read+0x16>
 800435a:	000c      	movs	r4, r1
 800435c:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 800435e:	e000      	b.n	8004362 <_read+0xe>
 8004360:	bf00      	nop
 8004362:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004364:	3401      	adds	r4, #1
 8004366:	42ac      	cmp	r4, r5
 8004368:	d1f9      	bne.n	800435e <_read+0xa>
  }

  return len;
}
 800436a:	0030      	movs	r0, r6
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)

08004370 <_close>:
}

int _close(int file)
{
  (void)file;
  return -1;
 8004370:	2001      	movs	r0, #1
}
 8004372:	4240      	negs	r0, r0
 8004374:	4770      	bx	lr
 8004376:	46c0      	nop			@ (mov r8, r8)

08004378 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	019b      	lsls	r3, r3, #6
  return 0;
}
 800437c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800437e:	604b      	str	r3, [r1, #4]
}
 8004380:	4770      	bx	lr
 8004382:	46c0      	nop			@ (mov r8, r8)

08004384 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004384:	2001      	movs	r0, #1
 8004386:	4770      	bx	lr

08004388 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004388:	2000      	movs	r0, #0
 800438a:	4770      	bx	lr

0800438c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800438c:	490c      	ldr	r1, [pc, #48]	@ (80043c0 <_sbrk+0x34>)
 800438e:	4a0d      	ldr	r2, [pc, #52]	@ (80043c4 <_sbrk+0x38>)
{
 8004390:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004392:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004394:	490c      	ldr	r1, [pc, #48]	@ (80043c8 <_sbrk+0x3c>)
{
 8004396:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004398:	6808      	ldr	r0, [r1, #0]
 800439a:	2800      	cmp	r0, #0
 800439c:	d004      	beq.n	80043a8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800439e:	18c3      	adds	r3, r0, r3
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d806      	bhi.n	80043b2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80043a4:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80043a6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80043a8:	4808      	ldr	r0, [pc, #32]	@ (80043cc <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80043aa:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80043ac:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d9f8      	bls.n	80043a4 <_sbrk+0x18>
    errno = ENOMEM;
 80043b2:	f005 ff1b 	bl	800a1ec <__errno>
 80043b6:	230c      	movs	r3, #12
 80043b8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80043ba:	2001      	movs	r0, #1
 80043bc:	4240      	negs	r0, r0
 80043be:	e7f2      	b.n	80043a6 <_sbrk+0x1a>
 80043c0:	00000400 	.word	0x00000400
 80043c4:	20004800 	.word	0x20004800
 80043c8:	200005c0 	.word	0x200005c0
 80043cc:	20000730 	.word	0x20000730

080043d0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043d0:	4770      	bx	lr
 80043d2:	46c0      	nop			@ (mov r8, r8)

080043d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043d4:	480d      	ldr	r0, [pc, #52]	@ (800440c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043d8:	f7ff fffa 	bl	80043d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043dc:	480c      	ldr	r0, [pc, #48]	@ (8004410 <LoopForever+0x6>)
  ldr r1, =_edata
 80043de:	490d      	ldr	r1, [pc, #52]	@ (8004414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004418 <LoopForever+0xe>)
  movs r3, #0
 80043e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e4:	e002      	b.n	80043ec <LoopCopyDataInit>

080043e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ea:	3304      	adds	r3, #4

080043ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043f0:	d3f9      	bcc.n	80043e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043f2:	4a0a      	ldr	r2, [pc, #40]	@ (800441c <LoopForever+0x12>)
  ldr r4, =_ebss
 80043f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004420 <LoopForever+0x16>)
  movs r3, #0
 80043f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f8:	e001      	b.n	80043fe <LoopFillZerobss>

080043fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043fc:	3204      	adds	r2, #4

080043fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004400:	d3fb      	bcc.n	80043fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004402:	f005 fef9 	bl	800a1f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004406:	f7ff fa4d 	bl	80038a4 <main>

0800440a <LoopForever>:

LoopForever:
  b LoopForever
 800440a:	e7fe      	b.n	800440a <LoopForever>
  ldr   r0, =_estack
 800440c:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8004410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004414:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004418:	0800d260 	.word	0x0800d260
  ldr r2, =_sbss
 800441c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004420:	20000730 	.word	0x20000730

08004424 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004424:	e7fe      	b.n	8004424 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08004428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004428:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800442a:	4b0f      	ldr	r3, [pc, #60]	@ (8004468 <HAL_InitTick+0x40>)
{
 800442c:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 800442e:	7819      	ldrb	r1, [r3, #0]
 8004430:	2900      	cmp	r1, #0
 8004432:	d101      	bne.n	8004438 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8004434:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8004436:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004438:	20fa      	movs	r0, #250	@ 0xfa
 800443a:	0080      	lsls	r0, r0, #2
 800443c:	f7fb fe7c 	bl	8000138 <__udivsi3>
 8004440:	4d0a      	ldr	r5, [pc, #40]	@ (800446c <HAL_InitTick+0x44>)
 8004442:	0001      	movs	r1, r0
 8004444:	6828      	ldr	r0, [r5, #0]
 8004446:	f7fb fe77 	bl	8000138 <__udivsi3>
 800444a:	f000 fca1 	bl	8004d90 <HAL_SYSTICK_Config>
 800444e:	2800      	cmp	r0, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004452:	2c03      	cmp	r4, #3
 8004454:	d8ee      	bhi.n	8004434 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004456:	3801      	subs	r0, #1
 8004458:	2200      	movs	r2, #0
 800445a:	0021      	movs	r1, r4
 800445c:	f000 fc62 	bl	8004d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004460:	4b03      	ldr	r3, [pc, #12]	@ (8004470 <HAL_InitTick+0x48>)
 8004462:	2000      	movs	r0, #0
 8004464:	601c      	str	r4, [r3, #0]
  return status;
 8004466:	e7e6      	b.n	8004436 <HAL_InitTick+0xe>
 8004468:	20000008 	.word	0x20000008
 800446c:	20000004 	.word	0x20000004
 8004470:	2000000c 	.word	0x2000000c

08004474 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	4a08      	ldr	r2, [pc, #32]	@ (8004498 <HAL_Init+0x24>)
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	6811      	ldr	r1, [r2, #0]
{
 800447c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800447e:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004480:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004482:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004484:	f7ff ffd0 	bl	8004428 <HAL_InitTick>
 8004488:	1e04      	subs	r4, r0, #0
 800448a:	d002      	beq.n	8004492 <HAL_Init+0x1e>
    status = HAL_ERROR;
 800448c:	2401      	movs	r4, #1
}
 800448e:	0020      	movs	r0, r4
 8004490:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8004492:	f7ff fdd9 	bl	8004048 <HAL_MspInit>
 8004496:	e7fa      	b.n	800448e <HAL_Init+0x1a>
 8004498:	40022000 	.word	0x40022000

0800449c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800449c:	4a03      	ldr	r2, [pc, #12]	@ (80044ac <HAL_IncTick+0x10>)
 800449e:	4b04      	ldr	r3, [pc, #16]	@ (80044b0 <HAL_IncTick+0x14>)
 80044a0:	6811      	ldr	r1, [r2, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	185b      	adds	r3, r3, r1
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	4770      	bx	lr
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	200005c4 	.word	0x200005c4
 80044b0:	20000008 	.word	0x20000008

080044b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80044b4:	4b01      	ldr	r3, [pc, #4]	@ (80044bc <HAL_GetTick+0x8>)
 80044b6:	6818      	ldr	r0, [r3, #0]
}
 80044b8:	4770      	bx	lr
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	200005c4 	.word	0x200005c4

080044c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c2:	46d6      	mov	lr, sl
 80044c4:	464f      	mov	r7, r9
 80044c6:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044c8:	2300      	movs	r3, #0
{
 80044ca:	b5c0      	push	{r6, r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 80044d0:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80044d2:	d02c      	beq.n	800452e <HAL_ADC_Init+0x6e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044d4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	d100      	bne.n	80044dc <HAL_ADC_Init+0x1c>
 80044da:	e0cc      	b.n	8004676 <HAL_ADC_Init+0x1b6>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044dc:	2380      	movs	r3, #128	@ 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044de:	6825      	ldr	r5, [r4, #0]
 80044e0:	055b      	lsls	r3, r3, #21
 80044e2:	68aa      	ldr	r2, [r5, #8]
 80044e4:	421a      	tst	r2, r3
 80044e6:	d115      	bne.n	8004514 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCx->CR,
 80044e8:	68aa      	ldr	r2, [r5, #8]
 80044ea:	497b      	ldr	r1, [pc, #492]	@ (80046d8 <HAL_ADC_Init+0x218>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044f2:	4b7a      	ldr	r3, [pc, #488]	@ (80046dc <HAL_ADC_Init+0x21c>)
 80044f4:	497a      	ldr	r1, [pc, #488]	@ (80046e0 <HAL_ADC_Init+0x220>)
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	f7fb fe1e 	bl	8000138 <__udivsi3>
 80044fc:	3001      	adds	r0, #1
 80044fe:	0040      	lsls	r0, r0, #1
 8004500:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8004502:	9b01      	ldr	r3, [sp, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_ADC_Init+0x54>
    {
      wait_loop_index--;
 8004508:	9b01      	ldr	r3, [sp, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f9      	bne.n	8004508 <HAL_ADC_Init+0x48>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004514:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004516:	2000      	movs	r0, #0
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	d400      	bmi.n	800451e <HAL_ADC_Init+0x5e>
 800451c:	e09d      	b.n	800465a <HAL_ADC_Init+0x19a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800451e:	68ab      	ldr	r3, [r5, #8]
 8004520:	075b      	lsls	r3, r3, #29
 8004522:	d50b      	bpl.n	800453c <HAL_ADC_Init+0x7c>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004524:	6da3      	ldr	r3, [r4, #88]	@ 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004526:	2210      	movs	r2, #16
 8004528:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800452a:	4313      	orrs	r3, r2
 800452c:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800452e:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8004530:	b002      	add	sp, #8
 8004532:	bce0      	pop	{r5, r6, r7}
 8004534:	46ba      	mov	sl, r7
 8004536:	46b1      	mov	r9, r6
 8004538:	46a8      	mov	r8, r5
 800453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800453c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800453e:	06db      	lsls	r3, r3, #27
 8004540:	d4f1      	bmi.n	8004526 <HAL_ADC_Init+0x66>
    ADC_STATE_CLR_SET(hadc->State,
 8004542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004544:	4a67      	ldr	r2, [pc, #412]	@ (80046e4 <HAL_ADC_Init+0x224>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004546:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8004548:	4013      	ands	r3, r2
 800454a:	3206      	adds	r2, #6
 800454c:	32ff      	adds	r2, #255	@ 0xff
 800454e:	4313      	orrs	r3, r2
 8004550:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004552:	68ab      	ldr	r3, [r5, #8]
 8004554:	07db      	lsls	r3, r3, #31
 8004556:	d45c      	bmi.n	8004612 <HAL_ADC_Init+0x152>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004558:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800455a:	68a2      	ldr	r2, [r4, #8]
 800455c:	1e7b      	subs	r3, r7, #1
 800455e:	419f      	sbcs	r7, r3
 8004560:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004562:	7ea6      	ldrb	r6, [r4, #26]
 8004564:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004566:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004568:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800456a:	039b      	lsls	r3, r3, #14
 800456c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800456e:	7e63      	ldrb	r3, [r4, #25]
 8004570:	03db      	lsls	r3, r3, #15
 8004572:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004574:	0373      	lsls	r3, r6, #13
 8004576:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004578:	2900      	cmp	r1, #0
 800457a:	da00      	bge.n	800457e <HAL_ADC_Init+0xbe>
 800457c:	e09b      	b.n	80046b6 <HAL_ADC_Init+0x1f6>
 800457e:	2380      	movs	r3, #128	@ 0x80
 8004580:	039b      	lsls	r3, r3, #14
 8004582:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004584:	232c      	movs	r3, #44	@ 0x2c
 8004586:	5ce3      	ldrb	r3, [r4, r3]
 8004588:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800458a:	4313      	orrs	r3, r2
 800458c:	433b      	orrs	r3, r7
 800458e:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004590:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004592:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004594:	5de2      	ldrb	r2, [r4, r7]
 8004596:	2a01      	cmp	r2, #1
 8004598:	d100      	bne.n	800459c <HAL_ADC_Init+0xdc>
 800459a:	e090      	b.n	80046be <HAL_ADC_Init+0x1fe>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800459c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800459e:	2a00      	cmp	r2, #0
 80045a0:	d005      	beq.n	80045ae <HAL_ADC_Init+0xee>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80045a2:	26e0      	movs	r6, #224	@ 0xe0
 80045a4:	0076      	lsls	r6, r6, #1
 80045a6:	4032      	ands	r2, r6
 80045a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80045aa:	4332      	orrs	r2, r6
 80045ac:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 80045ae:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 80045b0:	68ea      	ldr	r2, [r5, #12]
 80045b2:	4e4d      	ldr	r6, [pc, #308]	@ (80046e8 <HAL_ADC_Init+0x228>)
 80045b4:	4032      	ands	r2, r6
 80045b6:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045b8:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 80045ba:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045bc:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 80045be:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045c0:	0fb3      	lsrs	r3, r6, #30
 80045c2:	079b      	lsls	r3, r3, #30
 80045c4:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80045c6:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80045c8:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80045ca:	2f01      	cmp	r7, #1
 80045cc:	d109      	bne.n	80045e2 <HAL_ADC_Init+0x122>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80045ce:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80045d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045d2:	433b      	orrs	r3, r7
 80045d4:	431a      	orrs	r2, r3
 80045d6:	4653      	mov	r3, sl
 80045d8:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 80045da:	433a      	orrs	r2, r7
 80045dc:	431a      	orrs	r2, r3
 80045de:	4663      	mov	r3, ip
 80045e0:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 80045e2:	692b      	ldr	r3, [r5, #16]
 80045e4:	4f41      	ldr	r7, [pc, #260]	@ (80046ec <HAL_ADC_Init+0x22c>)
 80045e6:	403b      	ands	r3, r7
 80045e8:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80045ea:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80045ec:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80045ee:	0073      	lsls	r3, r6, #1
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	05d2      	lsls	r2, r2, #23
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00c      	beq.n	8004612 <HAL_ADC_Init+0x152>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80045f8:	2380      	movs	r3, #128	@ 0x80
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	429e      	cmp	r6, r3
 80045fe:	d008      	beq.n	8004612 <HAL_ADC_Init+0x152>
        MODIFY_REG(ADC1_COMMON->CCR,
 8004600:	4a3b      	ldr	r2, [pc, #236]	@ (80046f0 <HAL_ADC_Init+0x230>)
 8004602:	4f3c      	ldr	r7, [pc, #240]	@ (80046f4 <HAL_ADC_Init+0x234>)
 8004604:	6813      	ldr	r3, [r2, #0]
 8004606:	403b      	ands	r3, r7
 8004608:	27f0      	movs	r7, #240	@ 0xf0
 800460a:	03bf      	lsls	r7, r7, #14
 800460c:	403e      	ands	r6, r7
 800460e:	4333      	orrs	r3, r6
 8004610:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 8004612:	2607      	movs	r6, #7
 8004614:	2770      	movs	r7, #112	@ 0x70
 8004616:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004618:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800461a:	43b3      	bics	r3, r6
 800461c:	4313      	orrs	r3, r2
 800461e:	616b      	str	r3, [r5, #20]
 8004620:	696e      	ldr	r6, [r5, #20]
 8004622:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004624:	43be      	bics	r6, r7
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	4333      	orrs	r3, r6
 800462a:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800462c:	2900      	cmp	r1, #0
 800462e:	d128      	bne.n	8004682 <HAL_ADC_Init+0x1c2>
      SET_BIT(hadc->Instance->CHSELR,
 8004630:	2310      	movs	r3, #16
 8004632:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004634:	425b      	negs	r3, r3
 8004636:	430b      	orrs	r3, r1
 8004638:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800463a:	2307      	movs	r3, #7
 800463c:	6969      	ldr	r1, [r5, #20]
 800463e:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004640:	429a      	cmp	r2, r3
 8004642:	d02f      	beq.n	80046a4 <HAL_ADC_Init+0x1e4>
      ADC_STATE_CLR_SET(hadc->State,
 8004644:	2212      	movs	r2, #18
 8004646:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004648:	4393      	bics	r3, r2
 800464a:	3a02      	subs	r2, #2
 800464c:	4313      	orrs	r3, r2
 800464e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004650:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004652:	3a0f      	subs	r2, #15
 8004654:	4313      	orrs	r3, r2
 8004656:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8004658:	e769      	b.n	800452e <HAL_ADC_Init+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465a:	2210      	movs	r2, #16
 800465c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800465e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004660:	4313      	orrs	r3, r2
 8004662:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004664:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004666:	3a0f      	subs	r2, #15
 8004668:	4313      	orrs	r3, r2
 800466a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800466c:	68ab      	ldr	r3, [r5, #8]
 800466e:	075b      	lsls	r3, r3, #29
 8004670:	d400      	bmi.n	8004674 <HAL_ADC_Init+0x1b4>
 8004672:	e763      	b.n	800453c <HAL_ADC_Init+0x7c>
 8004674:	e756      	b.n	8004524 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8004676:	f7ff fcff 	bl	8004078 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 800467a:	2354      	movs	r3, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800467c:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800467e:	54e5      	strb	r5, [r4, r3]
 8004680:	e72c      	b.n	80044dc <HAL_ADC_Init+0x1c>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004682:	2380      	movs	r3, #128	@ 0x80
 8004684:	039b      	lsls	r3, r3, #14
 8004686:	4299      	cmp	r1, r3
 8004688:	d1d7      	bne.n	800463a <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CHSELR,
 800468a:	211c      	movs	r1, #28
 800468c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800468e:	69e3      	ldr	r3, [r4, #28]
 8004690:	3b01      	subs	r3, #1
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4019      	ands	r1, r3
 8004696:	2310      	movs	r3, #16
 8004698:	425b      	negs	r3, r3
 800469a:	408b      	lsls	r3, r1
 800469c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800469e:	430b      	orrs	r3, r1
 80046a0:	62ab      	str	r3, [r5, #40]	@ 0x28
 80046a2:	e7ca      	b.n	800463a <HAL_ADC_Init+0x17a>
      ADC_CLEAR_ERRORCODE(hadc);
 80046a4:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80046a6:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80046a8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80046aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046ac:	4393      	bics	r3, r2
 80046ae:	3a02      	subs	r2, #2
 80046b0:	4313      	orrs	r3, r2
 80046b2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80046b4:	e73c      	b.n	8004530 <HAL_ADC_Init+0x70>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80046b6:	004b      	lsls	r3, r1, #1
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	469c      	mov	ip, r3
 80046bc:	e762      	b.n	8004584 <HAL_ADC_Init+0xc4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80046be:	2e00      	cmp	r6, #0
 80046c0:	d103      	bne.n	80046ca <HAL_ADC_Init+0x20a>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80046c2:	2280      	movs	r2, #128	@ 0x80
 80046c4:	0252      	lsls	r2, r2, #9
 80046c6:	4313      	orrs	r3, r2
 80046c8:	e768      	b.n	800459c <HAL_ADC_Init+0xdc>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ca:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 80046cc:	433e      	orrs	r6, r7
 80046ce:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d0:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 80046d2:	4332      	orrs	r2, r6
 80046d4:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80046d6:	e761      	b.n	800459c <HAL_ADC_Init+0xdc>
 80046d8:	6fffffe8 	.word	0x6fffffe8
 80046dc:	20000004 	.word	0x20000004
 80046e0:	00030d40 	.word	0x00030d40
 80046e4:	fffffefd 	.word	0xfffffefd
 80046e8:	ffde0201 	.word	0xffde0201
 80046ec:	1ffffc02 	.word	0x1ffffc02
 80046f0:	40012708 	.word	0x40012708
 80046f4:	ffc3ffff 	.word	0xffc3ffff

080046f8 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 80046f8:	4770      	bx	lr
 80046fa:	46c0      	nop			@ (mov r8, r8)

080046fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046fc:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046fe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004700:	f7ff fffa 	bl	80046f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004704:	bd10      	pop	{r4, pc}
 8004706:	46c0      	nop			@ (mov r8, r8)

08004708 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8004708:	4770      	bx	lr
 800470a:	46c0      	nop			@ (mov r8, r8)

0800470c <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 800470c:	4770      	bx	lr
 800470e:	46c0      	nop			@ (mov r8, r8)

08004710 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004710:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004712:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8004714:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004716:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004718:	4313      	orrs	r3, r2
 800471a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800471c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800471e:	3a3c      	subs	r2, #60	@ 0x3c
 8004720:	4313      	orrs	r3, r2
 8004722:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004724:	f7ff fff2 	bl	800470c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004728:	bd10      	pop	{r4, pc}
 800472a:	46c0      	nop			@ (mov r8, r8)

0800472c <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800472c:	2150      	movs	r1, #80	@ 0x50
{
 800472e:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004730:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8004732:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004734:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004736:	4211      	tst	r1, r2
 8004738:	d10d      	bne.n	8004756 <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800473a:	2380      	movs	r3, #128	@ 0x80
 800473c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004742:	22c0      	movs	r2, #192	@ 0xc0
 8004744:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004746:	6803      	ldr	r3, [r0, #0]
 8004748:	0112      	lsls	r2, r2, #4
 800474a:	68d9      	ldr	r1, [r3, #12]
 800474c:	4211      	tst	r1, r2
 800474e:	d00a      	beq.n	8004766 <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8004750:	f7fe ff3c 	bl	80035cc <HAL_ADC_ConvCpltCallback>
}
 8004754:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004756:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004758:	06d2      	lsls	r2, r2, #27
 800475a:	d416      	bmi.n	800478a <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800475c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800475e:	0018      	movs	r0, r3
 8004760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004762:	4790      	blx	r2
}
 8004764:	e7f6      	b.n	8004754 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004766:	7e82      	ldrb	r2, [r0, #26]
 8004768:	2a00      	cmp	r2, #0
 800476a:	d1f1      	bne.n	8004750 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	0712      	lsls	r2, r2, #28
 8004770:	d5ee      	bpl.n	8004750 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	0752      	lsls	r2, r2, #29
 8004776:	d50b      	bpl.n	8004790 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004778:	2220      	movs	r2, #32
 800477a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800477c:	4313      	orrs	r3, r2
 800477e:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004780:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8004782:	3a1f      	subs	r2, #31
 8004784:	4313      	orrs	r3, r2
 8004786:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8004788:	e7e2      	b.n	8004750 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 800478a:	f7ff ffbf 	bl	800470c <HAL_ADC_ErrorCallback>
 800478e:	e7e1      	b.n	8004754 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004790:	210c      	movs	r1, #12
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	438a      	bics	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8004798:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800479a:	4a03      	ldr	r2, [pc, #12]	@ (80047a8 <ADC_DMAConvCplt+0x7c>)
 800479c:	4013      	ands	r3, r2
 800479e:	3204      	adds	r2, #4
 80047a0:	32ff      	adds	r2, #255	@ 0xff
 80047a2:	4313      	orrs	r3, r2
 80047a4:	6583      	str	r3, [r0, #88]	@ 0x58
 80047a6:	e7d3      	b.n	8004750 <ADC_DMAConvCplt+0x24>
 80047a8:	fffffefe 	.word	0xfffffefe

080047ac <HAL_ADC_IRQHandler>:
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80047ac:	2202      	movs	r2, #2
{
 80047ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80047b0:	6803      	ldr	r3, [r0, #0]
{
 80047b2:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80047b4:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80047b6:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80047b8:	422a      	tst	r2, r5
 80047ba:	d001      	beq.n	80047c0 <HAL_ADC_IRQHandler+0x14>
 80047bc:	4232      	tst	r2, r6
 80047be:	d14c      	bne.n	800485a <HAL_ADC_IRQHandler+0xae>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047c0:	2204      	movs	r2, #4
 80047c2:	422a      	tst	r2, r5
 80047c4:	d043      	beq.n	800484e <HAL_ADC_IRQHandler+0xa2>
 80047c6:	4232      	tst	r2, r6
 80047c8:	d041      	beq.n	800484e <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047ca:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80047cc:	06d2      	lsls	r2, r2, #27
 80047ce:	d404      	bmi.n	80047da <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047d0:	2280      	movs	r2, #128	@ 0x80
 80047d2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80047d4:	0092      	lsls	r2, r2, #2
 80047d6:	430a      	orrs	r2, r1
 80047d8:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80047da:	22c0      	movs	r2, #192	@ 0xc0
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	0112      	lsls	r2, r2, #4
 80047e0:	4211      	tst	r1, r2
 80047e2:	d111      	bne.n	8004808 <HAL_ADC_IRQHandler+0x5c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80047e4:	7ea2      	ldrb	r2, [r4, #26]
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	d10e      	bne.n	8004808 <HAL_ADC_IRQHandler+0x5c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	0712      	lsls	r2, r2, #28
 80047ee:	d50b      	bpl.n	8004808 <HAL_ADC_IRQHandler+0x5c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	0752      	lsls	r2, r2, #29
 80047f4:	d400      	bmi.n	80047f8 <HAL_ADC_IRQHandler+0x4c>
 80047f6:	e07c      	b.n	80048f2 <HAL_ADC_IRQHandler+0x146>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f8:	2220      	movs	r2, #32
 80047fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047fc:	4313      	orrs	r3, r2
 80047fe:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004800:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004802:	3a1f      	subs	r2, #31
 8004804:	4313      	orrs	r3, r2
 8004806:	65e3      	str	r3, [r4, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8004808:	0020      	movs	r0, r4
 800480a:	f7fe fedf 	bl	80035cc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800480e:	220c      	movs	r2, #12
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004814:	2780      	movs	r7, #128	@ 0x80
 8004816:	422f      	tst	r7, r5
 8004818:	d001      	beq.n	800481e <HAL_ADC_IRQHandler+0x72>
 800481a:	4237      	tst	r7, r6
 800481c:	d14d      	bne.n	80048ba <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800481e:	2780      	movs	r7, #128	@ 0x80
 8004820:	007f      	lsls	r7, r7, #1
 8004822:	423d      	tst	r5, r7
 8004824:	d001      	beq.n	800482a <HAL_ADC_IRQHandler+0x7e>
 8004826:	423e      	tst	r6, r7
 8004828:	d152      	bne.n	80048d0 <HAL_ADC_IRQHandler+0x124>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800482a:	2780      	movs	r7, #128	@ 0x80
 800482c:	00bf      	lsls	r7, r7, #2
 800482e:	423d      	tst	r5, r7
 8004830:	d001      	beq.n	8004836 <HAL_ADC_IRQHandler+0x8a>
 8004832:	423e      	tst	r6, r7
 8004834:	d136      	bne.n	80048a4 <HAL_ADC_IRQHandler+0xf8>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004836:	2210      	movs	r2, #16
 8004838:	422a      	tst	r2, r5
 800483a:	d001      	beq.n	8004840 <HAL_ADC_IRQHandler+0x94>
 800483c:	4232      	tst	r2, r6
 800483e:	d11b      	bne.n	8004878 <HAL_ADC_IRQHandler+0xcc>
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8004840:	2780      	movs	r7, #128	@ 0x80
 8004842:	01bf      	lsls	r7, r7, #6
 8004844:	423d      	tst	r5, r7
 8004846:	d001      	beq.n	800484c <HAL_ADC_IRQHandler+0xa0>
 8004848:	423e      	tst	r6, r7
 800484a:	d14c      	bne.n	80048e6 <HAL_ADC_IRQHandler+0x13a>
}
 800484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800484e:	2208      	movs	r2, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004850:	422a      	tst	r2, r5
 8004852:	d0df      	beq.n	8004814 <HAL_ADC_IRQHandler+0x68>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004854:	4232      	tst	r2, r6
 8004856:	d0dd      	beq.n	8004814 <HAL_ADC_IRQHandler+0x68>
 8004858:	e7b7      	b.n	80047ca <HAL_ADC_IRQHandler+0x1e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800485a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800485c:	06db      	lsls	r3, r3, #27
 800485e:	d404      	bmi.n	800486a <HAL_ADC_IRQHandler+0xbe>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004860:	2380      	movs	r3, #128	@ 0x80
 8004862:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	4313      	orrs	r3, r2
 8004868:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800486a:	0020      	movs	r0, r4
 800486c:	f000 fa56 	bl	8004d1c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004870:	2202      	movs	r2, #2
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e7a3      	b.n	80047c0 <HAL_ADC_IRQHandler+0x14>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004878:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800487a:	2a00      	cmp	r2, #0
 800487c:	d002      	beq.n	8004884 <HAL_ADC_IRQHandler+0xd8>
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800487e:	68da      	ldr	r2, [r3, #12]
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004880:	0792      	lsls	r2, r2, #30
 8004882:	d00c      	beq.n	800489e <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4313      	orrs	r3, r2
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800488c:	2202      	movs	r2, #2
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800488e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004890:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8004892:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004894:	4313      	orrs	r3, r2
 8004896:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8004898:	f7ff ff38 	bl	800470c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	2210      	movs	r2, #16
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e7cd      	b.n	8004840 <HAL_ADC_IRQHandler+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80048a4:	2380      	movs	r3, #128	@ 0x80
 80048a6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80048a8:	02db      	lsls	r3, r3, #11
 80048aa:	4313      	orrs	r3, r2
 80048ac:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80048ae:	0020      	movs	r0, r4
 80048b0:	f000 fa32 	bl	8004d18 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	601f      	str	r7, [r3, #0]
 80048b8:	e7bd      	b.n	8004836 <HAL_ADC_IRQHandler+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80048be:	025b      	lsls	r3, r3, #9
 80048c0:	4313      	orrs	r3, r2
 80048c2:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80048c4:	0020      	movs	r0, r4
 80048c6:	f7ff ff1f 	bl	8004708 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	601f      	str	r7, [r3, #0]
 80048ce:	e7a6      	b.n	800481e <HAL_ADC_IRQHandler+0x72>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80048d0:	2380      	movs	r3, #128	@ 0x80
 80048d2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	4313      	orrs	r3, r2
 80048d8:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80048da:	0020      	movs	r0, r4
 80048dc:	f000 fa1a 	bl	8004d14 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	601f      	str	r7, [r3, #0]
 80048e4:	e7a1      	b.n	800482a <HAL_ADC_IRQHandler+0x7e>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80048e6:	0020      	movs	r0, r4
 80048e8:	f000 fa1a 	bl	8004d20 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	601f      	str	r7, [r3, #0]
}
 80048f0:	e7ac      	b.n	800484c <HAL_ADC_IRQHandler+0xa0>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80048f2:	210c      	movs	r1, #12
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	438a      	bics	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80048fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048fc:	4a03      	ldr	r2, [pc, #12]	@ (800490c <HAL_ADC_IRQHandler+0x160>)
 80048fe:	4013      	ands	r3, r2
 8004900:	3204      	adds	r2, #4
 8004902:	32ff      	adds	r2, #255	@ 0xff
 8004904:	4313      	orrs	r3, r2
 8004906:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004908:	e77e      	b.n	8004808 <HAL_ADC_IRQHandler+0x5c>
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	fffffefe 	.word	0xfffffefe

08004910 <HAL_ADC_ConfigChannel>:
{
 8004910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004912:	46de      	mov	lr, fp
 8004914:	4657      	mov	r7, sl
 8004916:	464e      	mov	r6, r9
 8004918:	4645      	mov	r5, r8
  __IO uint32_t wait_loop_index = 0UL;
 800491a:	2300      	movs	r3, #0
{
 800491c:	0004      	movs	r4, r0
 800491e:	b5e0      	push	{r5, r6, r7, lr}
 8004920:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8004922:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8004924:	3354      	adds	r3, #84	@ 0x54
 8004926:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004928:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 800492a:	2a01      	cmp	r2, #1
 800492c:	d100      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x20>
 800492e:	e09a      	b.n	8004a66 <HAL_ADC_ConfigChannel+0x156>
 8004930:	2201      	movs	r2, #1
 8004932:	54e2      	strb	r2, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004934:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004936:	3203      	adds	r2, #3
 8004938:	689e      	ldr	r6, [r3, #8]
 800493a:	4232      	tst	r2, r6
 800493c:	d00e      	beq.n	800495c <HAL_ADC_ConfigChannel+0x4c>
    tmp_hal_status = HAL_ERROR;
 800493e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004940:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004942:	321c      	adds	r2, #28
 8004944:	4313      	orrs	r3, r2
 8004946:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8004948:	2354      	movs	r3, #84	@ 0x54
 800494a:	2200      	movs	r2, #0
 800494c:	54e2      	strb	r2, [r4, r3]
}
 800494e:	b005      	add	sp, #20
 8004950:	bcf0      	pop	{r4, r5, r6, r7}
 8004952:	46bb      	mov	fp, r7
 8004954:	46b2      	mov	sl, r6
 8004956:	46a9      	mov	r9, r5
 8004958:	46a0      	mov	r8, r4
 800495a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 800495c:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800495e:	4390      	bics	r0, r2
 8004960:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004962:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8004964:	2e02      	cmp	r6, #2
 8004966:	d05e      	beq.n	8004a26 <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004968:	0347      	lsls	r7, r0, #13
 800496a:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800496c:	2780      	movs	r7, #128	@ 0x80
 800496e:	9500      	str	r5, [sp, #0]
 8004970:	063f      	lsls	r7, r7, #24
 8004972:	45bc      	cmp	ip, r7
 8004974:	d053      	beq.n	8004a1e <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004976:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8004978:	46bb      	mov	fp, r7
 800497a:	271f      	movs	r7, #31
 800497c:	46b8      	mov	r8, r7
 800497e:	4037      	ands	r7, r6
 8004980:	46ba      	mov	sl, r7
 8004982:	270f      	movs	r7, #15
 8004984:	4655      	mov	r5, sl
 8004986:	40af      	lsls	r7, r5
 8004988:	43fd      	mvns	r5, r7
 800498a:	46bc      	mov	ip, r7
 800498c:	9501      	str	r5, [sp, #4]
 800498e:	465f      	mov	r7, fp
 8004990:	4665      	mov	r5, ip
 8004992:	43af      	bics	r7, r5
 8004994:	9d00      	ldr	r5, [sp, #0]
 8004996:	46b9      	mov	r9, r7
 8004998:	2d00      	cmp	r5, #0
 800499a:	d166      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0x15a>
 800499c:	4645      	mov	r5, r8
 800499e:	0e82      	lsrs	r2, r0, #26
 80049a0:	4015      	ands	r5, r2
 80049a2:	002a      	movs	r2, r5
 80049a4:	4655      	mov	r5, sl
 80049a6:	40aa      	lsls	r2, r5
 80049a8:	464d      	mov	r5, r9
 80049aa:	4315      	orrs	r5, r2
 80049ac:	46a9      	mov	r9, r5
 80049ae:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80049b0:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80049b2:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80049b4:	69e2      	ldr	r2, [r4, #28]
 80049b6:	3601      	adds	r6, #1
 80049b8:	4296      	cmp	r6, r2
 80049ba:	d808      	bhi.n	80049ce <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 80049bc:	4656      	mov	r6, sl
 80049be:	0082      	lsls	r2, r0, #2
 80049c0:	0f12      	lsrs	r2, r2, #28
 80049c2:	40b2      	lsls	r2, r6
 80049c4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80049c6:	9e01      	ldr	r6, [sp, #4]
 80049c8:	4035      	ands	r5, r6
 80049ca:	432a      	orrs	r2, r5
 80049cc:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 80049ce:	0205      	lsls	r5, r0, #8
 80049d0:	688a      	ldr	r2, [r1, #8]
 80049d2:	0029      	movs	r1, r5
 80049d4:	695e      	ldr	r6, [r3, #20]
 80049d6:	402a      	ands	r2, r5
 80049d8:	4d66      	ldr	r5, [pc, #408]	@ (8004b74 <HAL_ADC_ConfigChannel+0x264>)
 80049da:	438e      	bics	r6, r1
 80049dc:	402a      	ands	r2, r5
 80049de:	4332      	orrs	r2, r6
 80049e0:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049e2:	2800      	cmp	r0, #0
 80049e4:	db01      	blt.n	80049ea <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049e6:	2000      	movs	r0, #0
 80049e8:	e7ae      	b.n	8004948 <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80049ea:	21e0      	movs	r1, #224	@ 0xe0
 80049ec:	4d62      	ldr	r5, [pc, #392]	@ (8004b78 <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049ee:	4a63      	ldr	r2, [pc, #396]	@ (8004b7c <HAL_ADC_ConfigChannel+0x26c>)
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	0449      	lsls	r1, r1, #17
 80049f4:	4019      	ands	r1, r3
 80049f6:	4290      	cmp	r0, r2
 80049f8:	d04c      	beq.n	8004a94 <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80049fa:	4a61      	ldr	r2, [pc, #388]	@ (8004b80 <HAL_ADC_ConfigChannel+0x270>)
 80049fc:	4290      	cmp	r0, r2
 80049fe:	d040      	beq.n	8004a82 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a00:	4a60      	ldr	r2, [pc, #384]	@ (8004b84 <HAL_ADC_ConfigChannel+0x274>)
 8004a02:	4290      	cmp	r0, r2
 8004a04:	d1ef      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a06:	2280      	movs	r2, #128	@ 0x80
 8004a08:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a0a:	4213      	tst	r3, r2
 8004a0c:	d1eb      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	485d      	ldr	r0, [pc, #372]	@ (8004b88 <HAL_ADC_ConfigChannel+0x278>)
 8004a12:	4003      	ands	r3, r0
 8004a14:	430b      	orrs	r3, r1
 8004a16:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a18:	2000      	movs	r0, #0
 8004a1a:	602a      	str	r2, [r5, #0]
 8004a1c:	e794      	b.n	8004948 <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004a1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a20:	432a      	orrs	r2, r5
 8004a22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a24:	e7d3      	b.n	80049ce <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a26:	2280      	movs	r2, #128	@ 0x80
 8004a28:	0612      	lsls	r2, r2, #24
 8004a2a:	4594      	cmp	ip, r2
 8004a2c:	d104      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004a2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a30:	0341      	lsls	r1, r0, #13
 8004a32:	0b49      	lsrs	r1, r1, #13
 8004a34:	438a      	bics	r2, r1
 8004a36:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	dad4      	bge.n	80049e6 <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a3c:	4a4e      	ldr	r2, [pc, #312]	@ (8004b78 <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a3e:	494f      	ldr	r1, [pc, #316]	@ (8004b7c <HAL_ADC_ConfigChannel+0x26c>)
 8004a40:	6813      	ldr	r3, [r2, #0]
 8004a42:	4288      	cmp	r0, r1
 8004a44:	d023      	beq.n	8004a8e <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a46:	494e      	ldr	r1, [pc, #312]	@ (8004b80 <HAL_ADC_ConfigChannel+0x270>)
 8004a48:	4288      	cmp	r0, r1
 8004a4a:	d04a      	beq.n	8004ae2 <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a4c:	494d      	ldr	r1, [pc, #308]	@ (8004b84 <HAL_ADC_ConfigChannel+0x274>)
 8004a4e:	4288      	cmp	r0, r1
 8004a50:	d1c9      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a52:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	0440      	lsls	r0, r0, #17
 8004a58:	4003      	ands	r3, r0
 8004a5a:	484b      	ldr	r0, [pc, #300]	@ (8004b88 <HAL_ADC_ConfigChannel+0x278>)
 8004a5c:	4001      	ands	r1, r0
 8004a5e:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a60:	2000      	movs	r0, #0
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e770      	b.n	8004948 <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 8004a66:	2002      	movs	r0, #2
 8004a68:	e771      	b.n	800494e <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a6a:	2501      	movs	r5, #1
 8004a6c:	4205      	tst	r5, r0
 8004a6e:	d19e      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x9e>
 8004a70:	2702      	movs	r7, #2
 8004a72:	4207      	tst	r7, r0
 8004a74:	d02d      	beq.n	8004ad2 <HAL_ADC_ConfigChannel+0x1c2>
 8004a76:	4652      	mov	r2, sl
 8004a78:	4095      	lsls	r5, r2
 8004a7a:	464a      	mov	r2, r9
 8004a7c:	432a      	orrs	r2, r5
 8004a7e:	4691      	mov	r9, r2
 8004a80:	e795      	b.n	80049ae <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a82:	2280      	movs	r2, #128	@ 0x80
 8004a84:	0452      	lsls	r2, r2, #17
 8004a86:	4213      	tst	r3, r2
 8004a88:	d0c1      	beq.n	8004a0e <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e75c      	b.n	8004948 <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8e:	20a0      	movs	r0, #160	@ 0xa0
 8004a90:	6811      	ldr	r1, [r2, #0]
 8004a92:	e7e0      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a94:	2280      	movs	r2, #128	@ 0x80
 8004a96:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a98:	4213      	tst	r3, r2
 8004a9a:	d1a4      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0xd6>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	483a      	ldr	r0, [pc, #232]	@ (8004b88 <HAL_ADC_ConfigChannel+0x278>)
 8004aa0:	4003      	ands	r3, r0
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004aa6:	4b39      	ldr	r3, [pc, #228]	@ (8004b8c <HAL_ADC_ConfigChannel+0x27c>)
 8004aa8:	602a      	str	r2, [r5, #0]
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	4938      	ldr	r1, [pc, #224]	@ (8004b90 <HAL_ADC_ConfigChannel+0x280>)
 8004aae:	f7fb fb43 	bl	8000138 <__udivsi3>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	0043      	lsls	r3, r0, #1
 8004ab6:	181b      	adds	r3, r3, r0
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8004abc:	9b03      	ldr	r3, [sp, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d091      	beq.n	80049e6 <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8004ac8:	9b03      	ldr	r3, [sp, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f9      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e73a      	b.n	8004948 <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004ad2:	4202      	tst	r2, r0
 8004ad4:	d009      	beq.n	8004aea <HAL_ADC_ConfigChannel+0x1da>
 8004ad6:	4652      	mov	r2, sl
 8004ad8:	4097      	lsls	r7, r2
 8004ada:	464a      	mov	r2, r9
 8004adc:	433a      	orrs	r2, r7
 8004ade:	4691      	mov	r9, r2
 8004ae0:	e765      	b.n	80049ae <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae2:	20c0      	movs	r0, #192	@ 0xc0
 8004ae4:	6811      	ldr	r1, [r2, #0]
 8004ae6:	0400      	lsls	r0, r0, #16
 8004ae8:	e7b6      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004aea:	0702      	lsls	r2, r0, #28
 8004aec:	d501      	bpl.n	8004af2 <HAL_ADC_ConfigChannel+0x1e2>
 8004aee:	2203      	movs	r2, #3
 8004af0:	e758      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004af2:	06c2      	lsls	r2, r0, #27
 8004af4:	d501      	bpl.n	8004afa <HAL_ADC_ConfigChannel+0x1ea>
 8004af6:	2204      	movs	r2, #4
 8004af8:	e754      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004afa:	0682      	lsls	r2, r0, #26
 8004afc:	d501      	bpl.n	8004b02 <HAL_ADC_ConfigChannel+0x1f2>
 8004afe:	2205      	movs	r2, #5
 8004b00:	e750      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b02:	0642      	lsls	r2, r0, #25
 8004b04:	d501      	bpl.n	8004b0a <HAL_ADC_ConfigChannel+0x1fa>
 8004b06:	2206      	movs	r2, #6
 8004b08:	e74c      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b0a:	0602      	lsls	r2, r0, #24
 8004b0c:	d501      	bpl.n	8004b12 <HAL_ADC_ConfigChannel+0x202>
 8004b0e:	2207      	movs	r2, #7
 8004b10:	e748      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b12:	05c2      	lsls	r2, r0, #23
 8004b14:	d501      	bpl.n	8004b1a <HAL_ADC_ConfigChannel+0x20a>
 8004b16:	2208      	movs	r2, #8
 8004b18:	e744      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b1a:	0582      	lsls	r2, r0, #22
 8004b1c:	d501      	bpl.n	8004b22 <HAL_ADC_ConfigChannel+0x212>
 8004b1e:	2209      	movs	r2, #9
 8004b20:	e740      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b22:	0542      	lsls	r2, r0, #21
 8004b24:	d501      	bpl.n	8004b2a <HAL_ADC_ConfigChannel+0x21a>
 8004b26:	220a      	movs	r2, #10
 8004b28:	e73c      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b2a:	0502      	lsls	r2, r0, #20
 8004b2c:	d501      	bpl.n	8004b32 <HAL_ADC_ConfigChannel+0x222>
 8004b2e:	220b      	movs	r2, #11
 8004b30:	e738      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b32:	04c2      	lsls	r2, r0, #19
 8004b34:	d501      	bpl.n	8004b3a <HAL_ADC_ConfigChannel+0x22a>
 8004b36:	220c      	movs	r2, #12
 8004b38:	e734      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b3a:	0482      	lsls	r2, r0, #18
 8004b3c:	d501      	bpl.n	8004b42 <HAL_ADC_ConfigChannel+0x232>
 8004b3e:	220d      	movs	r2, #13
 8004b40:	e730      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b42:	0442      	lsls	r2, r0, #17
 8004b44:	d501      	bpl.n	8004b4a <HAL_ADC_ConfigChannel+0x23a>
 8004b46:	220e      	movs	r2, #14
 8004b48:	e72c      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b4a:	0402      	lsls	r2, r0, #16
 8004b4c:	d504      	bpl.n	8004b58 <HAL_ADC_ConfigChannel+0x248>
 8004b4e:	465a      	mov	r2, fp
 8004b50:	4665      	mov	r5, ip
 8004b52:	432a      	orrs	r2, r5
 8004b54:	4691      	mov	r9, r2
 8004b56:	e72a      	b.n	80049ae <HAL_ADC_ConfigChannel+0x9e>
 8004b58:	03c2      	lsls	r2, r0, #15
 8004b5a:	d501      	bpl.n	8004b60 <HAL_ADC_ConfigChannel+0x250>
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	e721      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b60:	0382      	lsls	r2, r0, #14
 8004b62:	d501      	bpl.n	8004b68 <HAL_ADC_ConfigChannel+0x258>
 8004b64:	2211      	movs	r2, #17
 8004b66:	e71d      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b68:	0342      	lsls	r2, r0, #13
 8004b6a:	d400      	bmi.n	8004b6e <HAL_ADC_ConfigChannel+0x25e>
 8004b6c:	e71f      	b.n	80049ae <HAL_ADC_ConfigChannel+0x9e>
 8004b6e:	2212      	movs	r2, #18
 8004b70:	e718      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x94>
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	07ffff00 	.word	0x07ffff00
 8004b78:	40012708 	.word	0x40012708
 8004b7c:	b0001000 	.word	0xb0001000
 8004b80:	b8004000 	.word	0xb8004000
 8004b84:	b4002000 	.word	0xb4002000
 8004b88:	fe3fffff 	.word	0xfe3fffff
 8004b8c:	20000004 	.word	0x20000004
 8004b90:	00030d40 	.word	0x00030d40

08004b94 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8004b94:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b96:	2201      	movs	r2, #1
{
 8004b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8004b9c:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b9e:	6803      	ldr	r3, [r0, #0]
{
 8004ba0:	0004      	movs	r4, r0
 8004ba2:	6899      	ldr	r1, [r3, #8]
 8004ba4:	420a      	tst	r2, r1
 8004ba6:	d11f      	bne.n	8004be8 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ba8:	6898      	ldr	r0, [r3, #8]
 8004baa:	4928      	ldr	r1, [pc, #160]	@ (8004c4c <ADC_Enable+0xb8>)
 8004bac:	4208      	tst	r0, r1
 8004bae:	d11e      	bne.n	8004bee <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8004bb0:	6899      	ldr	r1, [r3, #8]
 8004bb2:	4827      	ldr	r0, [pc, #156]	@ (8004c50 <ADC_Enable+0xbc>)
 8004bb4:	4001      	ands	r1, r0
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004bba:	4b26      	ldr	r3, [pc, #152]	@ (8004c54 <ADC_Enable+0xc0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	d50f      	bpl.n	8004be2 <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bc2:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <ADC_Enable+0xc4>)
 8004bc4:	4925      	ldr	r1, [pc, #148]	@ (8004c5c <ADC_Enable+0xc8>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	f7fb fab6 	bl	8000138 <__udivsi3>
 8004bcc:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004bce:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8004bd0:	9b01      	ldr	r3, [sp, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <ADC_Enable+0x4e>
        wait_loop_index--;
 8004bd6:	9b01      	ldr	r3, [sp, #4]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004bdc:	9b01      	ldr	r3, [sp, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f9      	bne.n	8004bd6 <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004be2:	7e63      	ldrb	r3, [r4, #25]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d10b      	bne.n	8004c00 <ADC_Enable+0x6c>
  return HAL_OK;
 8004be8:	2000      	movs	r0, #0
}
 8004bea:	b003      	add	sp, #12
 8004bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bee:	2110      	movs	r1, #16
 8004bf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8004bf2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8004bfe:	e7f4      	b.n	8004bea <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 8004c00:	f7ff fc58 	bl	80044b4 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c04:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8004c06:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	07d2      	lsls	r2, r2, #31
 8004c0c:	d4ec      	bmi.n	8004be8 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c0e:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8004c10:	4f0f      	ldr	r7, [pc, #60]	@ (8004c50 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	4215      	tst	r5, r2
 8004c16:	d103      	bne.n	8004c20 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	403a      	ands	r2, r7
 8004c1c:	432a      	orrs	r2, r5
 8004c1e:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c20:	f7ff fc48 	bl	80044b4 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c24:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c26:	1b80      	subs	r0, r0, r6
 8004c28:	2802      	cmp	r0, #2
 8004c2a:	d902      	bls.n	8004c32 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4215      	tst	r5, r2
 8004c30:	d003      	beq.n	8004c3a <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4215      	tst	r5, r2
 8004c36:	d0ec      	beq.n	8004c12 <ADC_Enable+0x7e>
 8004c38:	e7d6      	b.n	8004be8 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8004c3e:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c40:	4313      	orrs	r3, r2
 8004c42:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004c46:	432b      	orrs	r3, r5
 8004c48:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8004c4a:	e7ce      	b.n	8004bea <ADC_Enable+0x56>
 8004c4c:	80000017 	.word	0x80000017
 8004c50:	7fffffe8 	.word	0x7fffffe8
 8004c54:	40012708 	.word	0x40012708
 8004c58:	20000004 	.word	0x20000004
 8004c5c:	00030d40 	.word	0x00030d40

08004c60 <HAL_ADC_Start_DMA>:
{
 8004c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c62:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c64:	6805      	ldr	r5, [r0, #0]
{
 8004c66:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c68:	68ae      	ldr	r6, [r5, #8]
 8004c6a:	4688      	mov	r8, r1
 8004c6c:	0017      	movs	r7, r2
    __HAL_LOCK(hadc);
 8004c6e:	2002      	movs	r0, #2
{
 8004c70:	b500      	push	{lr}
 8004c72:	0776      	lsls	r6, r6, #29
 8004c74:	d414      	bmi.n	8004ca0 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8004c76:	2254      	movs	r2, #84	@ 0x54
 8004c78:	5ca3      	ldrb	r3, [r4, r2]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d010      	beq.n	8004ca0 <HAL_ADC_Start_DMA+0x40>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004c82:	68ea      	ldr	r2, [r5, #12]
 8004c84:	4213      	tst	r3, r2
 8004c86:	d106      	bne.n	8004c96 <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c88:	68aa      	ldr	r2, [r5, #8]
 8004c8a:	4213      	tst	r3, r2
 8004c8c:	d131      	bne.n	8004cf2 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004c8e:	2201      	movs	r2, #1
 8004c90:	68eb      	ldr	r3, [r5, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8004c96:	0020      	movs	r0, r4
 8004c98:	f7ff ff7c 	bl	8004b94 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_ADC_Start_DMA+0x46>
}
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	46b8      	mov	r8, r7
 8004ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8004ca6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004ca8:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004caa:	6d25      	ldr	r5, [r4, #80]	@ 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8004cac:	401a      	ands	r2, r3
 8004cae:	2380      	movs	r3, #128	@ 0x80
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	65a3      	str	r3, [r4, #88]	@ 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cb6:	4b13      	ldr	r3, [pc, #76]	@ (8004d04 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8004cb8:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cba:	62eb      	str	r3, [r5, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cbc:	4b12      	ldr	r3, [pc, #72]	@ (8004d08 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cbe:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cc0:	632b      	str	r3, [r5, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cc2:	4b12      	ldr	r3, [pc, #72]	@ (8004d0c <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cc4:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cc6:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cc8:	231c      	movs	r3, #28
 8004cca:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 8004ccc:	3338      	adds	r3, #56	@ 0x38
 8004cce:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cd0:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cd2:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cd8:	4642      	mov	r2, r8
 8004cda:	003b      	movs	r3, r7
 8004cdc:	3140      	adds	r1, #64	@ 0x40
 8004cde:	f000 f9e1 	bl	80050a4 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004ce2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004ce4:	490a      	ldr	r1, [pc, #40]	@ (8004d10 <HAL_ADC_Start_DMA+0xb0>)
 8004ce6:	6893      	ldr	r3, [r2, #8]
 8004ce8:	400b      	ands	r3, r1
 8004cea:	2104      	movs	r1, #4
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6093      	str	r3, [r2, #8]
}
 8004cf0:	e7d6      	b.n	8004ca0 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 8004cf2:	68ab      	ldr	r3, [r5, #8]
 8004cf4:	4a06      	ldr	r2, [pc, #24]	@ (8004d10 <HAL_ADC_Start_DMA+0xb0>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	4303      	orrs	r3, r0
 8004cfa:	60ab      	str	r3, [r5, #8]
}
 8004cfc:	e7c7      	b.n	8004c8e <HAL_ADC_Start_DMA+0x2e>
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	fffff0fe 	.word	0xfffff0fe
 8004d04:	0800472d 	.word	0x0800472d
 8004d08:	080046fd 	.word	0x080046fd
 8004d0c:	08004711 	.word	0x08004711
 8004d10:	7fffffe8 	.word	0x7fffffe8

08004d14 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004d14:	4770      	bx	lr
 8004d16:	46c0      	nop			@ (mov r8, r8)

08004d18 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8004d18:	4770      	bx	lr
 8004d1a:	46c0      	nop			@ (mov r8, r8)

08004d1c <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8004d1c:	4770      	bx	lr
 8004d1e:	46c0      	nop			@ (mov r8, r8)

08004d20 <HAL_ADCEx_ChannelConfigReadyCallback>:
/**
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
 8004d20:	4770      	bx	lr
 8004d22:	46c0      	nop			@ (mov r8, r8)

08004d24 <HAL_NVIC_SetPriority>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d24:	22ff      	movs	r2, #255	@ 0xff
 8004d26:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	0014      	movs	r4, r2
 8004d2c:	4003      	ands	r3, r0
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d32:	0189      	lsls	r1, r1, #6
 8004d34:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d36:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d38:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	db0b      	blt.n	8004d56 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <HAL_NVIC_SetPriority+0x4c>)
 8004d40:	21c0      	movs	r1, #192	@ 0xc0
 8004d42:	469c      	mov	ip, r3
 8004d44:	0880      	lsrs	r0, r0, #2
 8004d46:	0080      	lsls	r0, r0, #2
 8004d48:	4460      	add	r0, ip
 8004d4a:	0089      	lsls	r1, r1, #2
 8004d4c:	5843      	ldr	r3, [r0, r1]
 8004d4e:	4023      	ands	r3, r4
 8004d50:	4313      	orrs	r3, r2
 8004d52:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8004d54:	bd10      	pop	{r4, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d56:	230f      	movs	r3, #15
 8004d58:	4906      	ldr	r1, [pc, #24]	@ (8004d74 <HAL_NVIC_SetPriority+0x50>)
 8004d5a:	4003      	ands	r3, r0
 8004d5c:	468c      	mov	ip, r1
 8004d5e:	3b08      	subs	r3, #8
 8004d60:	089b      	lsrs	r3, r3, #2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4463      	add	r3, ip
 8004d66:	69d9      	ldr	r1, [r3, #28]
 8004d68:	400c      	ands	r4, r1
 8004d6a:	4314      	orrs	r4, r2
 8004d6c:	61dc      	str	r4, [r3, #28]
 8004d6e:	e7f1      	b.n	8004d54 <HAL_NVIC_SetPriority+0x30>
 8004d70:	e000e100 	.word	0xe000e100
 8004d74:	e000ed00 	.word	0xe000ed00

08004d78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	db05      	blt.n	8004d88 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d7c:	221f      	movs	r2, #31
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4002      	ands	r2, r0
 8004d82:	4093      	lsls	r3, r2
 8004d84:	4a01      	ldr	r2, [pc, #4]	@ (8004d8c <HAL_NVIC_EnableIRQ+0x14>)
 8004d86:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004d88:	4770      	bx	lr
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	e000e100 	.word	0xe000e100

08004d90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d90:	2280      	movs	r2, #128	@ 0x80
 8004d92:	1e43      	subs	r3, r0, #1
 8004d94:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d96:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d20e      	bcs.n	8004dba <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d9c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d9e:	4a07      	ldr	r2, [pc, #28]	@ (8004dbc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004da0:	4807      	ldr	r0, [pc, #28]	@ (8004dc0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004da2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004da4:	6a03      	ldr	r3, [r0, #32]
 8004da6:	0609      	lsls	r1, r1, #24
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004db2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004db6:	3307      	adds	r3, #7
 8004db8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8004dba:	4770      	bx	lr
 8004dbc:	e000e010 	.word	0xe000e010
 8004dc0:	e000ed00 	.word	0xe000ed00

08004dc4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	1e04      	subs	r4, r0, #0
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004dc8:	d00f      	beq.n	8004dea <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004dca:	7903      	ldrb	r3, [r0, #4]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_DAC_Init+0x1e>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004dd6:	2300      	movs	r3, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
 8004dd8:	2000      	movs	r0, #0
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004dda:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004ddc:	3301      	adds	r3, #1
 8004dde:	7123      	strb	r3, [r4, #4]
}
 8004de0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004de2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004de4:	f7ff f99e 	bl	8004124 <HAL_DAC_MspInit>
 8004de8:	e7f3      	b.n	8004dd2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004dea:	2001      	movs	r0, #1
 8004dec:	e7f8      	b.n	8004de0 <HAL_DAC_Init+0x1c>
 8004dee:	46c0      	nop			@ (mov r8, r8)

08004df0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004df0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d029      	beq.n	8004e4a <HAL_DAC_Start+0x5a>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004df6:	7943      	ldrb	r3, [r0, #5]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d028      	beq.n	8004e4e <HAL_DAC_Start+0x5e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004dfc:	2601      	movs	r6, #1
 8004dfe:	2210      	movs	r2, #16
 8004e00:	0034      	movs	r4, r6
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e02:	2502      	movs	r5, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8004e04:	400a      	ands	r2, r1
 8004e06:	4094      	lsls	r4, r2
 8004e08:	6803      	ldr	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e0a:	7105      	strb	r5, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8004e0c:	681f      	ldr	r7, [r3, #0]
 8004e0e:	433c      	orrs	r4, r7
 8004e10:	601c      	str	r4, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004e12:	2900      	cmp	r1, #0
 8004e14:	d10d      	bne.n	8004e32 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004e16:	223e      	movs	r2, #62	@ 0x3e
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	2a02      	cmp	r2, #2
 8004e1e:	d102      	bne.n	8004e26 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	4332      	orrs	r2, r6
 8004e24:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e26:	2301      	movs	r3, #1
 8004e28:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 8004e2e:	2000      	movs	r0, #0
}
 8004e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004e32:	24f8      	movs	r4, #248	@ 0xf8
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	03a4      	lsls	r4, r4, #14
 8004e38:	4021      	ands	r1, r4
 8004e3a:	002c      	movs	r4, r5
 8004e3c:	4094      	lsls	r4, r2
 8004e3e:	42a1      	cmp	r1, r4
 8004e40:	d1f1      	bne.n	8004e26 <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	432a      	orrs	r2, r5
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	e7ed      	b.n	8004e26 <HAL_DAC_Start+0x36>
    return HAL_ERROR;
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	e7f0      	b.n	8004e30 <HAL_DAC_Start+0x40>
  __HAL_LOCK(hdac);
 8004e4e:	2002      	movs	r0, #2
 8004e50:	e7ee      	b.n	8004e30 <HAL_DAC_Start+0x40>
 8004e52:	46c0      	nop			@ (mov r8, r8)

08004e54 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004e54:	b510      	push	{r4, lr}
  __IO uint32_t tmp = 0UL;
 8004e56:	2400      	movs	r4, #0
{
 8004e58:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0UL;
 8004e5a:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d011      	beq.n	8004e84 <HAL_DAC_SetValue+0x30>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004e60:	6800      	ldr	r0, [r0, #0]
 8004e62:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_DAC_SetValue+0x26>
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004e68:	9901      	ldr	r1, [sp, #4]
 8004e6a:	3114      	adds	r1, #20
 8004e6c:	188a      	adds	r2, r1, r2
 8004e6e:	9201      	str	r2, [sp, #4]

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
 8004e70:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8004e72:	9a01      	ldr	r2, [sp, #4]
 8004e74:	6013      	str	r3, [r2, #0]
}
 8004e76:	b002      	add	sp, #8
 8004e78:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004e7a:	9901      	ldr	r1, [sp, #4]
 8004e7c:	3108      	adds	r1, #8
 8004e7e:	188a      	adds	r2, r1, r2
 8004e80:	9201      	str	r2, [sp, #4]
 8004e82:	e7f5      	b.n	8004e70 <HAL_DAC_SetValue+0x1c>
    return HAL_ERROR;
 8004e84:	2001      	movs	r0, #1
 8004e86:	e7f6      	b.n	8004e76 <HAL_DAC_SetValue+0x22>

08004e88 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e8a:	46c6      	mov	lr, r8
 8004e8c:	0004      	movs	r4, r0
 8004e8e:	000d      	movs	r5, r1
 8004e90:	0016      	movs	r6, r2
 8004e92:	b500      	push	{lr}
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e94:	2800      	cmp	r0, #0
 8004e96:	d040      	beq.n	8004f1a <HAL_DAC_ConfigChannel+0x92>
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	d03e      	beq.n	8004f1a <HAL_DAC_ConfigChannel+0x92>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e9c:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004e9e:	680f      	ldr	r7, [r1, #0]
  __HAL_LOCK(hdac);
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d100      	bne.n	8004ea6 <HAL_DAC_ConfigChannel+0x1e>
 8004ea4:	e07f      	b.n	8004fa6 <HAL_DAC_ConfigChannel+0x11e>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eaa:	3301      	adds	r3, #1
 8004eac:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004eae:	2f04      	cmp	r7, #4
 8004eb0:	d035      	beq.n	8004f1e <HAL_DAC_ConfigChannel+0x96>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004eb2:	2210      	movs	r2, #16

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004eb4:	6803      	ldr	r3, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004eb6:	4032      	ands	r2, r6
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004eb8:	6929      	ldr	r1, [r5, #16]
 8004eba:	2901      	cmp	r1, #1
 8004ebc:	d107      	bne.n	8004ece <HAL_DAC_ConfigChannel+0x46>
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ebe:	311e      	adds	r1, #30
 8004ec0:	4091      	lsls	r1, r2
    tmpreg1 = hdac->Instance->CCR;
 8004ec2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ec4:	4388      	bics	r0, r1
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ec6:	6969      	ldr	r1, [r5, #20]
 8004ec8:	4091      	lsls	r1, r2
 8004eca:	4301      	orrs	r1, r0
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004ecc:	6399      	str	r1, [r3, #56]	@ 0x38
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ece:	2107      	movs	r1, #7
 8004ed0:	4091      	lsls	r1, r2
  tmpreg1 = hdac->Instance->MCR;
 8004ed2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004ed4:	68ee      	ldr	r6, [r5, #12]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ed6:	4388      	bics	r0, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004ed8:	68a9      	ldr	r1, [r5, #8]
 8004eda:	4331      	orrs	r1, r6
 8004edc:	4339      	orrs	r1, r7
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ede:	4091      	lsls	r1, r2
 8004ee0:	4301      	orrs	r1, r0
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004ee2:	2080      	movs	r0, #128	@ 0x80
 8004ee4:	01c0      	lsls	r0, r0, #7
 8004ee6:	4090      	lsls	r0, r2
  hdac->Instance->MCR = tmpreg1;
 8004ee8:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004eea:	6819      	ldr	r1, [r3, #0]
 8004eec:	4381      	bics	r1, r0
 8004eee:	6019      	str	r1, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004ef0:	492f      	ldr	r1, [pc, #188]	@ (8004fb0 <HAL_DAC_ConfigChannel+0x128>)
  tmpreg1 = hdac->Instance->CR;
 8004ef2:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004ef4:	4091      	lsls	r1, r2
 8004ef6:	4388      	bics	r0, r1
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ef8:	6869      	ldr	r1, [r5, #4]
 8004efa:	4091      	lsls	r1, r2
 8004efc:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004efe:	20c0      	movs	r0, #192	@ 0xc0
 8004f00:	4090      	lsls	r0, r2
  hdac->Instance->CR = tmpreg1;
 8004f02:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	4381      	bics	r1, r0
 8004f08:	6019      	str	r1, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f0e:	2300      	movs	r3, #0

  /* Return function status */
  return status;
 8004f10:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdac);
 8004f12:	7163      	strb	r3, [r4, #5]
}
 8004f14:	bc80      	pop	{r7}
 8004f16:	46b8      	mov	r8, r7
 8004f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	e7fa      	b.n	8004f14 <HAL_DAC_ConfigChannel+0x8c>
    tickstart = HAL_GetTick();
 8004f1e:	f7ff fac9 	bl	80044b4 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f22:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004f24:	0007      	movs	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 8004f28:	2e00      	cmp	r6, #0
 8004f2a:	d129      	bne.n	8004f80 <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f2c:	2180      	movs	r1, #128	@ 0x80
 8004f2e:	0209      	lsls	r1, r1, #8
 8004f30:	4688      	mov	r8, r1
 8004f32:	420a      	tst	r2, r1
 8004f34:	d00d      	beq.n	8004f52 <HAL_DAC_ConfigChannel+0xca>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f36:	f7ff fabd 	bl	80044b4 <HAL_GetTick>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f3a:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f3c:	1bc0      	subs	r0, r0, r7
 8004f3e:	2801      	cmp	r0, #1
 8004f40:	d903      	bls.n	8004f4a <HAL_DAC_ConfigChannel+0xc2>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f42:	4641      	mov	r1, r8
 8004f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f46:	420a      	tst	r2, r1
 8004f48:	d125      	bne.n	8004f96 <HAL_DAC_ConfigChannel+0x10e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f4a:	4641      	mov	r1, r8
 8004f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f4e:	420a      	tst	r2, r1
 8004f50:	d1f1      	bne.n	8004f36 <HAL_DAC_ConfigChannel+0xae>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f52:	69aa      	ldr	r2, [r5, #24]
 8004f54:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f56:	2210      	movs	r2, #16
 8004f58:	4816      	ldr	r0, [pc, #88]	@ (8004fb4 <HAL_DAC_ConfigChannel+0x12c>)
 8004f5a:	4032      	ands	r2, r6
 8004f5c:	4090      	lsls	r0, r2
 8004f5e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004f60:	682f      	ldr	r7, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f62:	4381      	bics	r1, r0
 8004f64:	69e8      	ldr	r0, [r5, #28]
 8004f66:	4090      	lsls	r0, r2
 8004f68:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f6a:	20ff      	movs	r0, #255	@ 0xff
 8004f6c:	4090      	lsls	r0, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f6e:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f70:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004f72:	4381      	bics	r1, r0
 8004f74:	6a28      	ldr	r0, [r5, #32]
 8004f76:	4090      	lsls	r0, r2
 8004f78:	4301      	orrs	r1, r0
 8004f7a:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8004f7c:	e79c      	b.n	8004eb8 <HAL_DAC_ConfigChannel+0x30>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f80:	2a00      	cmp	r2, #0
 8004f82:	da12      	bge.n	8004faa <HAL_DAC_ConfigChannel+0x122>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f84:	f7ff fa96 	bl	80044b4 <HAL_GetTick>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f88:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f8a:	1bc0      	subs	r0, r0, r7
 8004f8c:	2801      	cmp	r0, #1
 8004f8e:	d9f6      	bls.n	8004f7e <HAL_DAC_ConfigChannel+0xf6>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	daf3      	bge.n	8004f7e <HAL_DAC_ConfigChannel+0xf6>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f96:	2208      	movs	r2, #8
 8004f98:	6923      	ldr	r3, [r4, #16]
            return HAL_TIMEOUT;
 8004f9a:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	7123      	strb	r3, [r4, #4]
            return HAL_TIMEOUT;
 8004fa4:	e7b6      	b.n	8004f14 <HAL_DAC_ConfigChannel+0x8c>
  __HAL_LOCK(hdac);
 8004fa6:	2002      	movs	r0, #2
 8004fa8:	e7b4      	b.n	8004f14 <HAL_DAC_ConfigChannel+0x8c>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004faa:	69aa      	ldr	r2, [r5, #24]
 8004fac:	645a      	str	r2, [r3, #68]	@ 0x44
 8004fae:	e7d2      	b.n	8004f56 <HAL_DAC_ConfigChannel+0xce>
 8004fb0:	00000ffe 	.word	0x00000ffe
 8004fb4:	000003ff 	.word	0x000003ff

08004fb8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fba:	46c6      	mov	lr, r8
 8004fbc:	0004      	movs	r4, r0
 8004fbe:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d060      	beq.n	8005086 <HAL_DMA_Init+0xce>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fc4:	6805      	ldr	r5, [r0, #0]
 8004fc6:	4b31      	ldr	r3, [pc, #196]	@ (800508c <HAL_DMA_Init+0xd4>)
 8004fc8:	2114      	movs	r1, #20
 8004fca:	18e8      	adds	r0, r5, r3
 8004fcc:	f7fb f8b4 	bl	8000138 <__udivsi3>
 8004fd0:	0083      	lsls	r3, r0, #2
 8004fd2:	6423      	str	r3, [r4, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	2325      	movs	r3, #37	@ 0x25
 8004fd8:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005090 <HAL_DMA_Init+0xd8>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004fde:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004fe4:	68e3      	ldr	r3, [r4, #12]
 8004fe6:	6921      	ldr	r1, [r4, #16]
 8004fe8:	4333      	orrs	r3, r6
 8004fea:	430b      	orrs	r3, r1
 8004fec:	6961      	ldr	r1, [r4, #20]
 8004fee:	682a      	ldr	r2, [r5, #0]
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	69a1      	ldr	r1, [r4, #24]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	69e1      	ldr	r1, [r4, #28]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6a21      	ldr	r1, [r4, #32]
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	4313      	orrs	r3, r2
 8005000:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005002:	4b24      	ldr	r3, [pc, #144]	@ (8005094 <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005004:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005006:	469c      	mov	ip, r3
 8005008:	4460      	add	r0, ip
 800500a:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800500c:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800500e:	4b22      	ldr	r3, [pc, #136]	@ (8005098 <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005010:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005012:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005014:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005016:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005018:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800501a:	f7fb f88d 	bl	8000138 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800501e:	231f      	movs	r3, #31
 8005020:	2201      	movs	r2, #1
 8005022:	4003      	ands	r3, r0
 8005024:	0010      	movs	r0, r2
 8005026:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005028:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800502a:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800502c:	01db      	lsls	r3, r3, #7
 800502e:	429e      	cmp	r6, r3
 8005030:	d01f      	beq.n	8005072 <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005032:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005034:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005036:	6861      	ldr	r1, [r4, #4]
 8005038:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800503a:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800503c:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800503e:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005040:	2903      	cmp	r1, #3
 8005042:	d81b      	bhi.n	800507c <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005044:	4915      	ldr	r1, [pc, #84]	@ (800509c <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005046:	4816      	ldr	r0, [pc, #88]	@ (80050a0 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005048:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800504a:	3b01      	subs	r3, #1
 800504c:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800504e:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005050:	0089      	lsls	r1, r1, #2
 8005052:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005054:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005056:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005058:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800505a:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800505c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800505e:	2225      	movs	r2, #37	@ 0x25
 8005060:	2101      	movs	r1, #1
  return HAL_OK;
 8005062:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005064:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8005066:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8005068:	3a01      	subs	r2, #1
 800506a:	54a3      	strb	r3, [r4, r2]
}
 800506c:	bc80      	pop	{r7}
 800506e:	46b8      	mov	r8, r7
 8005070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005072:	2300      	movs	r3, #0
 8005074:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005076:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005078:	4643      	mov	r3, r8
 800507a:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005080:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005082:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005084:	e7ea      	b.n	800505c <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 8005086:	2001      	movs	r0, #1
 8005088:	e7f0      	b.n	800506c <HAL_DMA_Init+0xb4>
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	bffdfff8 	.word	0xbffdfff8
 8005090:	ffff800f 	.word	0xffff800f
 8005094:	10008200 	.word	0x10008200
 8005098:	40020880 	.word	0x40020880
 800509c:	1000823f 	.word	0x1000823f
 80050a0:	40020940 	.word	0x40020940

080050a4 <HAL_DMA_Start_IT>:
{
 80050a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a6:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 80050a8:	2424      	movs	r4, #36	@ 0x24
{
 80050aa:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 80050ac:	5d05      	ldrb	r5, [r0, r4]
 80050ae:	2d01      	cmp	r5, #1
 80050b0:	d04f      	beq.n	8005152 <HAL_DMA_Start_IT+0xae>
 80050b2:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80050b4:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 80050b6:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 80050b8:	5d85      	ldrb	r5, [r0, r6]
 80050ba:	b2ef      	uxtb	r7, r5
 80050bc:	2d01      	cmp	r5, #1
 80050be:	d007      	beq.n	80050d0 <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050c0:	2380      	movs	r3, #128	@ 0x80
 80050c2:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80050c4:	2300      	movs	r3, #0
 80050c6:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 80050c8:	2001      	movs	r0, #1
}
 80050ca:	bc80      	pop	{r7}
 80050cc:	46b8      	mov	r8, r7
 80050ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80050d0:	3c22      	subs	r4, #34	@ 0x22
 80050d2:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d4:	2400      	movs	r4, #0
 80050d6:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80050d8:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050da:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	43bd      	bics	r5, r7
 80050e0:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050e2:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 80050e4:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80050e6:	6d06      	ldr	r6, [r0, #80]	@ 0x50
 80050e8:	2e00      	cmp	r6, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ec:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80050ee:	6d87      	ldr	r7, [r0, #88]	@ 0x58
 80050f0:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80050f2:	4d1f      	ldr	r5, [pc, #124]	@ (8005170 <HAL_DMA_Start_IT+0xcc>)
 80050f4:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 80050f6:	46ac      	mov	ip, r5
 80050f8:	686d      	ldr	r5, [r5, #4]
 80050fa:	46a8      	mov	r8, r5
 80050fc:	251c      	movs	r5, #28
 80050fe:	402f      	ands	r7, r5
 8005100:	3d1b      	subs	r5, #27
 8005102:	40bd      	lsls	r5, r7
 8005104:	4647      	mov	r7, r8
 8005106:	433d      	orrs	r5, r7
 8005108:	4667      	mov	r7, ip
 800510a:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 800510c:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800510e:	6883      	ldr	r3, [r0, #8]
 8005110:	2b10      	cmp	r3, #16
 8005112:	d020      	beq.n	8005156 <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 8005114:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8005116:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8005118:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01e      	beq.n	800515c <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800511e:	220e      	movs	r2, #14
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005126:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005128:	6813      	ldr	r3, [r2, #0]
 800512a:	03db      	lsls	r3, r3, #15
 800512c:	d504      	bpl.n	8005138 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800512e:	2380      	movs	r3, #128	@ 0x80
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	430b      	orrs	r3, r1
 8005136:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005138:	2e00      	cmp	r6, #0
 800513a:	d004      	beq.n	8005146 <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800513c:	2380      	movs	r3, #128	@ 0x80
 800513e:	6832      	ldr	r2, [r6, #0]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4313      	orrs	r3, r2
 8005144:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8005146:	2201      	movs	r2, #1
 8005148:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800514c:	4313      	orrs	r3, r2
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	e7bb      	b.n	80050ca <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8005152:	2002      	movs	r0, #2
 8005154:	e7b9      	b.n	80050ca <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8005156:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005158:	60e1      	str	r1, [r4, #12]
 800515a:	e7dd      	b.n	8005118 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800515c:	2204      	movs	r2, #4
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	4393      	bics	r3, r2
 8005162:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	3206      	adds	r2, #6
 8005168:	4313      	orrs	r3, r2
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	e7db      	b.n	8005126 <HAL_DMA_Start_IT+0x82>
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	40020000 	.word	0x40020000

08005174 <HAL_DMA_Abort>:
{
 8005174:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8005176:	2800      	cmp	r0, #0
 8005178:	d032      	beq.n	80051e0 <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800517a:	2325      	movs	r3, #37	@ 0x25
 800517c:	5cc3      	ldrb	r3, [r0, r3]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d129      	bne.n	80051d6 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005182:	210e      	movs	r1, #14
 8005184:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005186:	4c17      	ldr	r4, [pc, #92]	@ (80051e4 <HAL_DMA_Abort+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005188:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800518a:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800518c:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800518e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005190:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005192:	680b      	ldr	r3, [r1, #0]
 8005194:	4023      	ands	r3, r4
 8005196:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8005198:	2301      	movs	r3, #1
 800519a:	6811      	ldr	r1, [r2, #0]
 800519c:	4399      	bics	r1, r3
 800519e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80051a0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80051a2:	4911      	ldr	r1, [pc, #68]	@ (80051e8 <HAL_DMA_Abort+0x74>)
 80051a4:	4032      	ands	r2, r6
 80051a6:	4093      	lsls	r3, r2
 80051a8:	684d      	ldr	r5, [r1, #4]
 80051aa:	432b      	orrs	r3, r5
 80051ac:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ae:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80051b0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80051b2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80051b4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4022      	ands	r2, r4
 80051be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051c0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80051c2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80051c4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80051c6:	2325      	movs	r3, #37	@ 0x25
 80051c8:	2201      	movs	r2, #1
 80051ca:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80051cc:	2200      	movs	r2, #0
 80051ce:	3b01      	subs	r3, #1
 80051d0:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80051d2:	2000      	movs	r0, #0
}
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051d6:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80051d8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051da:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80051dc:	3320      	adds	r3, #32
 80051de:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80051e0:	2001      	movs	r0, #1
 80051e2:	e7f7      	b.n	80051d4 <HAL_DMA_Abort+0x60>
 80051e4:	fffffeff 	.word	0xfffffeff
 80051e8:	40020000 	.word	0x40020000

080051ec <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051ec:	2325      	movs	r3, #37	@ 0x25
{
 80051ee:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051f0:	5cc3      	ldrb	r3, [r0, r3]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d003      	beq.n	80051fe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051f6:	2304      	movs	r3, #4
 80051f8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80051fa:	2001      	movs	r0, #1
}
 80051fc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051fe:	210e      	movs	r1, #14
 8005200:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005202:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005204:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005206:	4c15      	ldr	r4, [pc, #84]	@ (800525c <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005208:	438b      	bics	r3, r1
 800520a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800520c:	2301      	movs	r3, #1
 800520e:	6811      	ldr	r1, [r2, #0]
 8005210:	4399      	bics	r1, r3
 8005212:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005214:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005216:	680a      	ldr	r2, [r1, #0]
 8005218:	4022      	ands	r2, r4
 800521a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800521c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800521e:	4910      	ldr	r1, [pc, #64]	@ (8005260 <HAL_DMA_Abort_IT+0x74>)
 8005220:	4032      	ands	r2, r6
 8005222:	4093      	lsls	r3, r2
 8005224:	684d      	ldr	r5, [r1, #4]
 8005226:	432b      	orrs	r3, r5
 8005228:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800522a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800522c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800522e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005230:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	4022      	ands	r2, r4
 800523a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800523c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800523e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8005240:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005242:	2325      	movs	r3, #37	@ 0x25
 8005244:	2201      	movs	r2, #1
 8005246:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8005248:	2200      	movs	r2, #0
 800524a:	3b01      	subs	r3, #1
 800524c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800524e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d000      	beq.n	8005256 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8005254:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2000      	movs	r0, #0
 8005258:	e7d0      	b.n	80051fc <HAL_DMA_Abort_IT+0x10>
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	fffffeff 	.word	0xfffffeff
 8005260:	40020000 	.word	0x40020000

08005264 <HAL_DMA_IRQHandler>:
{
 8005264:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005266:	211c      	movs	r1, #28
 8005268:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 800526a:	4b2b      	ldr	r3, [pc, #172]	@ (8005318 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 800526c:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 800526e:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005270:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8005272:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005274:	400b      	ands	r3, r1
 8005276:	0021      	movs	r1, r4
 8005278:	4099      	lsls	r1, r3
 800527a:	420a      	tst	r2, r1
 800527c:	d010      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x3c>
 800527e:	422c      	tst	r4, r5
 8005280:	d00e      	beq.n	80052a0 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005282:	6833      	ldr	r3, [r6, #0]
 8005284:	069b      	lsls	r3, r3, #26
 8005286:	d402      	bmi.n	800528e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005288:	6833      	ldr	r3, [r6, #0]
 800528a:	43a3      	bics	r3, r4
 800528c:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800528e:	4b22      	ldr	r3, [pc, #136]	@ (8005318 <HAL_DMA_IRQHandler+0xb4>)
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	4311      	orrs	r1, r2
 8005294:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8005296:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005298:	2b00      	cmp	r3, #0
 800529a:	d000      	beq.n	800529e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800529c:	4798      	blx	r3
}
 800529e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80052a0:	2402      	movs	r4, #2
 80052a2:	0021      	movs	r1, r4
 80052a4:	4099      	lsls	r1, r3
 80052a6:	420a      	tst	r2, r1
 80052a8:	d017      	beq.n	80052da <HAL_DMA_IRQHandler+0x76>
 80052aa:	422c      	tst	r4, r5
 80052ac:	d015      	beq.n	80052da <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	069b      	lsls	r3, r3, #26
 80052b2:	d406      	bmi.n	80052c2 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052b4:	220a      	movs	r2, #10
 80052b6:	6833      	ldr	r3, [r6, #0]
 80052b8:	4393      	bics	r3, r2
 80052ba:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80052bc:	2325      	movs	r3, #37	@ 0x25
 80052be:	3a09      	subs	r2, #9
 80052c0:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80052c2:	4b15      	ldr	r3, [pc, #84]	@ (8005318 <HAL_DMA_IRQHandler+0xb4>)
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	4311      	orrs	r1, r2
 80052c8:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2324      	movs	r3, #36	@ 0x24
 80052ce:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80052d0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0e3      	beq.n	800529e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80052d6:	4798      	blx	r3
  return;
 80052d8:	e7e1      	b.n	800529e <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80052da:	2108      	movs	r1, #8
 80052dc:	000c      	movs	r4, r1
 80052de:	409c      	lsls	r4, r3
 80052e0:	4222      	tst	r2, r4
 80052e2:	d0dc      	beq.n	800529e <HAL_DMA_IRQHandler+0x3a>
 80052e4:	4229      	tst	r1, r5
 80052e6:	d0da      	beq.n	800529e <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052e8:	6832      	ldr	r2, [r6, #0]
 80052ea:	3106      	adds	r1, #6
 80052ec:	438a      	bics	r2, r1
 80052ee:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80052f0:	2201      	movs	r2, #1
 80052f2:	0015      	movs	r5, r2
 80052f4:	409d      	lsls	r5, r3
 80052f6:	002b      	movs	r3, r5
 80052f8:	4907      	ldr	r1, [pc, #28]	@ (8005318 <HAL_DMA_IRQHandler+0xb4>)
 80052fa:	684c      	ldr	r4, [r1, #4]
 80052fc:	4323      	orrs	r3, r4
 80052fe:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005300:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005302:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005304:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8005306:	2200      	movs	r2, #0
 8005308:	3b01      	subs	r3, #1
 800530a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 800530c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0c5      	beq.n	800529e <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8005312:	4798      	blx	r3
  return;
 8005314:	e7c3      	b.n	800529e <HAL_DMA_IRQHandler+0x3a>
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	40020000 	.word	0x40020000

0800531c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800531c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531e:	46de      	mov	lr, fp
 8005320:	4657      	mov	r7, sl
 8005322:	464e      	mov	r6, r9
 8005324:	4645      	mov	r5, r8
 8005326:	b5e0      	push	{r5, r6, r7, lr}
 8005328:	b085      	sub	sp, #20
 800532a:	9303      	str	r3, [sp, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800532c:	4b5f      	ldr	r3, [pc, #380]	@ (80054ac <HAL_FLASH_Program+0x190>)
{
 800532e:	4683      	mov	fp, r0
  __HAL_LOCK(&pFlash);
 8005330:	469a      	mov	sl, r3
 8005332:	781b      	ldrb	r3, [r3, #0]
{
 8005334:	9101      	str	r1, [sp, #4]
 8005336:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 8005338:	2b01      	cmp	r3, #1
 800533a:	d100      	bne.n	800533e <HAL_FLASH_Program+0x22>
 800533c:	e092      	b.n	8005464 <HAL_FLASH_Program+0x148>
 800533e:	4652      	mov	r2, sl
 8005340:	2301      	movs	r3, #1
 8005342:	7013      	strb	r3, [r2, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005344:	2300      	movs	r3, #0
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8005346:	2580      	movs	r5, #128	@ 0x80
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005348:	24fa      	movs	r4, #250	@ 0xfa
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800534a:	6053      	str	r3, [r2, #4]
  uint32_t tickstart = HAL_GetTick();
 800534c:	f7ff f8b2 	bl	80044b4 <HAL_GetTick>
  while ((FLASH->SR & error) != 0x00U)
 8005350:	4f57      	ldr	r7, [pc, #348]	@ (80054b0 <HAL_FLASH_Program+0x194>)
  uint32_t tickstart = HAL_GetTick();
 8005352:	0006      	movs	r6, r0
  while ((FLASH->SR & error) != 0x00U)
 8005354:	026d      	lsls	r5, r5, #9
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005356:	00a4      	lsls	r4, r4, #2
  while ((FLASH->SR & error) != 0x00U)
 8005358:	e004      	b.n	8005364 <HAL_FLASH_Program+0x48>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800535a:	f7ff f8ab 	bl	80044b4 <HAL_GetTick>
 800535e:	1b80      	subs	r0, r0, r6
 8005360:	42a0      	cmp	r0, r4
 8005362:	d26d      	bcs.n	8005440 <HAL_FLASH_Program+0x124>
  while ((FLASH->SR & error) != 0x00U)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	422b      	tst	r3, r5
 8005368:	d1f7      	bne.n	800535a <HAL_FLASH_Program+0x3e>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4b51      	ldr	r3, [pc, #324]	@ (80054b4 <HAL_FLASH_Program+0x198>)
 800536e:	0010      	movs	r0, r2

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8005370:	4951      	ldr	r1, [pc, #324]	@ (80054b8 <HAL_FLASH_Program+0x19c>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005372:	4018      	ands	r0, r3
  FLASH->SR = FLASH_SR_CLEAR;
 8005374:	6139      	str	r1, [r7, #16]

  if (error != 0x00U)
 8005376:	421a      	tst	r2, r3
 8005378:	d000      	beq.n	800537c <HAL_FLASH_Program+0x60>
 800537a:	e075      	b.n	8005468 <HAL_FLASH_Program+0x14c>
    pFlash.ErrorCode = error;
    return HAL_ERROR;
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800537c:	4b4c      	ldr	r3, [pc, #304]	@ (80054b0 <HAL_FLASH_Program+0x194>)
 800537e:	2780      	movs	r7, #128	@ 0x80
 8005380:	4698      	mov	r8, r3
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005382:	23fa      	movs	r3, #250	@ 0xfa
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4699      	mov	r9, r3
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005388:	02ff      	lsls	r7, r7, #11
 800538a:	e004      	b.n	8005396 <HAL_FLASH_Program+0x7a>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800538c:	f7ff f892 	bl	80044b4 <HAL_GetTick>
 8005390:	1b80      	subs	r0, r0, r6
 8005392:	4548      	cmp	r0, r9
 8005394:	d254      	bcs.n	8005440 <HAL_FLASH_Program+0x124>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005396:	4643      	mov	r3, r8
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	423b      	tst	r3, r7
 800539c:	d1f6      	bne.n	800538c <HAL_FLASH_Program+0x70>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800539e:	465b      	mov	r3, fp
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d065      	beq.n	8005470 <HAL_FLASH_Program+0x154>
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80053a4:	4643      	mov	r3, r8
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	431f      	orrs	r7, r3
 80053aa:	4643      	mov	r3, r8
 80053ac:	615f      	str	r7, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ae:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80053b2:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
 80053b4:	9a01      	ldr	r2, [sp, #4]
 80053b6:	9902      	ldr	r1, [sp, #8]
 80053b8:	0013      	movs	r3, r2
 80053ba:	430b      	orrs	r3, r1
 80053bc:	075b      	lsls	r3, r3, #29
 80053be:	d169      	bne.n	8005494 <HAL_FLASH_Program+0x178>
 80053c0:	1d0b      	adds	r3, r1, #4
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d066      	beq.n	8005494 <HAL_FLASH_Program+0x178>
 80053c6:	000c      	movs	r4, r1
 80053c8:	1c48      	adds	r0, r1, #1
 80053ca:	30ff      	adds	r0, #255	@ 0xff
 80053cc:	1a55      	subs	r5, r2, r1
  {
    *(uint32_t *)dest = *(uint32_t *)src;
 80053ce:	1929      	adds	r1, r5, r4
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	6863      	ldr	r3, [r4, #4]
 80053d4:	3408      	adds	r4, #8
 80053d6:	600a      	str	r2, [r1, #0]
 80053d8:	604b      	str	r3, [r1, #4]
  while (index < 64U)
 80053da:	4284      	cmp	r4, r0
 80053dc:	d1f7      	bne.n	80053ce <HAL_FLASH_Program+0xb2>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
 80053de:	2280      	movs	r2, #128	@ 0x80
 80053e0:	4933      	ldr	r1, [pc, #204]	@ (80054b0 <HAL_FLASH_Program+0x194>)
 80053e2:	0252      	lsls	r2, r2, #9
 80053e4:	690b      	ldr	r3, [r1, #16]
 80053e6:	4213      	tst	r3, r2
 80053e8:	d1fc      	bne.n	80053e4 <HAL_FLASH_Program+0xc8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	f386 8810 	msr	PRIMASK, r6
  uint32_t tickstart = HAL_GetTick();
 80053ee:	f7ff f861 	bl	80044b4 <HAL_GetTick>
  while ((FLASH->SR & error) != 0x00U)
 80053f2:	2680      	movs	r6, #128	@ 0x80
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80053f4:	27fa      	movs	r7, #250	@ 0xfa
  uint32_t tickstart = HAL_GetTick();
 80053f6:	0004      	movs	r4, r0
  while ((FLASH->SR & error) != 0x00U)
 80053f8:	4d2d      	ldr	r5, [pc, #180]	@ (80054b0 <HAL_FLASH_Program+0x194>)
 80053fa:	0276      	lsls	r6, r6, #9
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80053fc:	00bf      	lsls	r7, r7, #2
  while ((FLASH->SR & error) != 0x00U)
 80053fe:	e004      	b.n	800540a <HAL_FLASH_Program+0xee>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005400:	f7ff f858 	bl	80044b4 <HAL_GetTick>
 8005404:	1b00      	subs	r0, r0, r4
 8005406:	42b8      	cmp	r0, r7
 8005408:	d225      	bcs.n	8005456 <HAL_FLASH_Program+0x13a>
  while ((FLASH->SR & error) != 0x00U)
 800540a:	692b      	ldr	r3, [r5, #16]
 800540c:	4233      	tst	r3, r6
 800540e:	d1f7      	bne.n	8005400 <HAL_FLASH_Program+0xe4>
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005410:	692a      	ldr	r2, [r5, #16]
 8005412:	4b28      	ldr	r3, [pc, #160]	@ (80054b4 <HAL_FLASH_Program+0x198>)
 8005414:	0010      	movs	r0, r2
  FLASH->SR = FLASH_SR_CLEAR;
 8005416:	4928      	ldr	r1, [pc, #160]	@ (80054b8 <HAL_FLASH_Program+0x19c>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005418:	4018      	ands	r0, r3
  FLASH->SR = FLASH_SR_CLEAR;
 800541a:	6129      	str	r1, [r5, #16]
  if (error != 0x00U)
 800541c:	421a      	tst	r2, r3
 800541e:	d135      	bne.n	800548c <HAL_FLASH_Program+0x170>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005420:	2580      	movs	r5, #128	@ 0x80
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005422:	27fa      	movs	r7, #250	@ 0xfa
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005424:	4e22      	ldr	r6, [pc, #136]	@ (80054b0 <HAL_FLASH_Program+0x194>)
 8005426:	02ed      	lsls	r5, r5, #11
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005428:	00bf      	lsls	r7, r7, #2
 800542a:	e004      	b.n	8005436 <HAL_FLASH_Program+0x11a>
 800542c:	f7ff f842 	bl	80044b4 <HAL_GetTick>
 8005430:	1b00      	subs	r0, r0, r4
 8005432:	42b8      	cmp	r0, r7
 8005434:	d20f      	bcs.n	8005456 <HAL_FLASH_Program+0x13a>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005436:	6933      	ldr	r3, [r6, #16]
 8005438:	422b      	tst	r3, r5
 800543a:	d1f7      	bne.n	800542c <HAL_FLASH_Program+0x110>
  return HAL_OK;
 800543c:	2000      	movs	r0, #0
 800543e:	e00b      	b.n	8005458 <HAL_FLASH_Program+0x13c>
        return HAL_TIMEOUT;
 8005440:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8005442:	2300      	movs	r3, #0
 8005444:	4652      	mov	r2, sl
 8005446:	7013      	strb	r3, [r2, #0]
}
 8005448:	b005      	add	sp, #20
 800544a:	bcf0      	pop	{r4, r5, r6, r7}
 800544c:	46bb      	mov	fp, r7
 800544e:	46b2      	mov	sl, r6
 8005450:	46a9      	mov	r9, r5
 8005452:	46a0      	mov	r8, r4
 8005454:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005456:	2003      	movs	r0, #3
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005458:	4659      	mov	r1, fp
 800545a:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <HAL_FLASH_Program+0x194>)
 800545c:	6953      	ldr	r3, [r2, #20]
 800545e:	438b      	bics	r3, r1
 8005460:	6153      	str	r3, [r2, #20]
 8005462:	e7ee      	b.n	8005442 <HAL_FLASH_Program+0x126>
  __HAL_LOCK(&pFlash);
 8005464:	2002      	movs	r0, #2
 8005466:	e7ef      	b.n	8005448 <HAL_FLASH_Program+0x12c>
    pFlash.ErrorCode = error;
 8005468:	4653      	mov	r3, sl
 800546a:	6058      	str	r0, [r3, #4]
    return HAL_ERROR;
 800546c:	2001      	movs	r0, #1
 800546e:	e7e8      	b.n	8005442 <HAL_FLASH_Program+0x126>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005470:	4643      	mov	r3, r8
 8005472:	465a      	mov	r2, fp
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	4642      	mov	r2, r8
 800547a:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 800547c:	9b01      	ldr	r3, [sp, #4]
 800547e:	9a02      	ldr	r2, [sp, #8]
 8005480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005482:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005486:	9a03      	ldr	r2, [sp, #12]
 8005488:	605a      	str	r2, [r3, #4]
}
 800548a:	e7b0      	b.n	80053ee <HAL_FLASH_Program+0xd2>
    pFlash.ErrorCode = error;
 800548c:	4653      	mov	r3, sl
 800548e:	6058      	str	r0, [r3, #4]
    return HAL_ERROR;
 8005490:	2001      	movs	r0, #1
 8005492:	e7e1      	b.n	8005458 <HAL_FLASH_Program+0x13c>
 8005494:	9c02      	ldr	r4, [sp, #8]
 8005496:	9b01      	ldr	r3, [sp, #4]
 8005498:	1c62      	adds	r2, r4, #1
 800549a:	32ff      	adds	r2, #255	@ 0xff
 800549c:	1b1d      	subs	r5, r3, r4
    *(uint32_t *)dest = *(uint32_t *)src;
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	512b      	str	r3, [r5, r4]
    src += 4U;
 80054a2:	3404      	adds	r4, #4
  while (index < 64U)
 80054a4:	42a2      	cmp	r2, r4
 80054a6:	d1fa      	bne.n	800549e <HAL_FLASH_Program+0x182>
 80054a8:	e799      	b.n	80053de <HAL_FLASH_Program+0xc2>
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	200005c8 	.word	0x200005c8
 80054b0:	40022000 	.word	0x40022000
 80054b4:	0000c3fa 	.word	0x0000c3fa
 80054b8:	0000c3fb 	.word	0x0000c3fb

080054bc <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <HAL_FLASH_Unlock+0x18>)
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2000      	movs	r0, #0
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	da05      	bge.n	80054d2 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80054c6:	4a04      	ldr	r2, [pc, #16]	@ (80054d8 <HAL_FLASH_Unlock+0x1c>)
 80054c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80054ca:	4a04      	ldr	r2, [pc, #16]	@ (80054dc <HAL_FLASH_Unlock+0x20>)
 80054cc:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80054ce:	6958      	ldr	r0, [r3, #20]
 80054d0:	0fc0      	lsrs	r0, r0, #31
}
 80054d2:	4770      	bx	lr
 80054d4:	40022000 	.word	0x40022000
 80054d8:	45670123 	.word	0x45670123
 80054dc:	cdef89ab 	.word	0xcdef89ab

080054e0 <HAL_FLASH_Lock>:
{
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 80054e2:	f7fe ffe7 	bl	80044b4 <HAL_GetTick>
  while ((FLASH->SR & error) != 0x00U)
 80054e6:	2680      	movs	r6, #128	@ 0x80
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80054e8:	27fa      	movs	r7, #250	@ 0xfa
  uint32_t tickstart = HAL_GetTick();
 80054ea:	0004      	movs	r4, r0
  while ((FLASH->SR & error) != 0x00U)
 80054ec:	4d17      	ldr	r5, [pc, #92]	@ (800554c <HAL_FLASH_Lock+0x6c>)
 80054ee:	0276      	lsls	r6, r6, #9
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80054f0:	00bf      	lsls	r7, r7, #2
  while ((FLASH->SR & error) != 0x00U)
 80054f2:	e004      	b.n	80054fe <HAL_FLASH_Lock+0x1e>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80054f4:	f7fe ffde 	bl	80044b4 <HAL_GetTick>
 80054f8:	1b00      	subs	r0, r0, r4
 80054fa:	42b8      	cmp	r0, r7
 80054fc:	d218      	bcs.n	8005530 <HAL_FLASH_Lock+0x50>
  while ((FLASH->SR & error) != 0x00U)
 80054fe:	692b      	ldr	r3, [r5, #16]
 8005500:	4233      	tst	r3, r6
 8005502:	d1f7      	bne.n	80054f4 <HAL_FLASH_Lock+0x14>
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005504:	692a      	ldr	r2, [r5, #16]
 8005506:	4b12      	ldr	r3, [pc, #72]	@ (8005550 <HAL_FLASH_Lock+0x70>)
 8005508:	0010      	movs	r0, r2
  FLASH->SR = FLASH_SR_CLEAR;
 800550a:	4912      	ldr	r1, [pc, #72]	@ (8005554 <HAL_FLASH_Lock+0x74>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800550c:	4018      	ands	r0, r3
  FLASH->SR = FLASH_SR_CLEAR;
 800550e:	6129      	str	r1, [r5, #16]
  if (error != 0x00U)
 8005510:	421a      	tst	r2, r3
 8005512:	d117      	bne.n	8005544 <HAL_FLASH_Lock+0x64>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005514:	2580      	movs	r5, #128	@ 0x80
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005516:	27fa      	movs	r7, #250	@ 0xfa
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005518:	4e0c      	ldr	r6, [pc, #48]	@ (800554c <HAL_FLASH_Lock+0x6c>)
 800551a:	02ed      	lsls	r5, r5, #11
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800551c:	00bf      	lsls	r7, r7, #2
 800551e:	e004      	b.n	800552a <HAL_FLASH_Lock+0x4a>
 8005520:	f7fe ffc8 	bl	80044b4 <HAL_GetTick>
 8005524:	1b00      	subs	r0, r0, r4
 8005526:	42b8      	cmp	r0, r7
 8005528:	d202      	bcs.n	8005530 <HAL_FLASH_Lock+0x50>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800552a:	6933      	ldr	r3, [r6, #16]
 800552c:	422b      	tst	r3, r5
 800552e:	d1f7      	bne.n	8005520 <HAL_FLASH_Lock+0x40>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005530:	2280      	movs	r2, #128	@ 0x80
 8005532:	4b06      	ldr	r3, [pc, #24]	@ (800554c <HAL_FLASH_Lock+0x6c>)
 8005534:	0612      	lsls	r2, r2, #24
 8005536:	6959      	ldr	r1, [r3, #20]
 8005538:	430a      	orrs	r2, r1
 800553a:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800553c:	6958      	ldr	r0, [r3, #20]
 800553e:	43c0      	mvns	r0, r0
  return status;
 8005540:	0fc0      	lsrs	r0, r0, #31
}
 8005542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = error;
 8005544:	4b04      	ldr	r3, [pc, #16]	@ (8005558 <HAL_FLASH_Lock+0x78>)
 8005546:	6058      	str	r0, [r3, #4]
    return HAL_ERROR;
 8005548:	e7f2      	b.n	8005530 <HAL_FLASH_Lock+0x50>
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	40022000 	.word	0x40022000
 8005550:	0000c3fa 	.word	0x0000c3fa
 8005554:	0000c3fb 	.word	0x0000c3fb
 8005558:	200005c8 	.word	0x200005c8

0800555c <FLASH_WaitForLastOperation>:
{
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005560:	f7fe ffa8 	bl	80044b4 <HAL_GetTick>
 8005564:	0005      	movs	r5, r0
  while ((FLASH->SR & error) != 0x00U)
 8005566:	1c63      	adds	r3, r4, #1
 8005568:	d119      	bne.n	800559e <FLASH_WaitForLastOperation+0x42>
 800556a:	2180      	movs	r1, #128	@ 0x80
 800556c:	4a1d      	ldr	r2, [pc, #116]	@ (80055e4 <FLASH_WaitForLastOperation+0x88>)
 800556e:	0249      	lsls	r1, r1, #9
 8005570:	6913      	ldr	r3, [r2, #16]
 8005572:	420b      	tst	r3, r1
 8005574:	d1fc      	bne.n	8005570 <FLASH_WaitForLastOperation+0x14>
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005576:	6911      	ldr	r1, [r2, #16]
 8005578:	4b1b      	ldr	r3, [pc, #108]	@ (80055e8 <FLASH_WaitForLastOperation+0x8c>)
 800557a:	000e      	movs	r6, r1
  FLASH->SR = FLASH_SR_CLEAR;
 800557c:	481b      	ldr	r0, [pc, #108]	@ (80055ec <FLASH_WaitForLastOperation+0x90>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800557e:	401e      	ands	r6, r3
  FLASH->SR = FLASH_SR_CLEAR;
 8005580:	6110      	str	r0, [r2, #16]
  if (error != 0x00U)
 8005582:	4219      	tst	r1, r3
 8005584:	d107      	bne.n	8005596 <FLASH_WaitForLastOperation+0x3a>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005586:	2280      	movs	r2, #128	@ 0x80
 8005588:	4916      	ldr	r1, [pc, #88]	@ (80055e4 <FLASH_WaitForLastOperation+0x88>)
 800558a:	02d2      	lsls	r2, r2, #11
 800558c:	690b      	ldr	r3, [r1, #16]
 800558e:	4213      	tst	r3, r2
 8005590:	d1fc      	bne.n	800558c <FLASH_WaitForLastOperation+0x30>
  return HAL_OK;
 8005592:	2000      	movs	r0, #0
}
 8005594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = error;
 8005596:	4b16      	ldr	r3, [pc, #88]	@ (80055f0 <FLASH_WaitForLastOperation+0x94>)
    return HAL_ERROR;
 8005598:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800559a:	605e      	str	r6, [r3, #4]
    return HAL_ERROR;
 800559c:	e7fa      	b.n	8005594 <FLASH_WaitForLastOperation+0x38>
  while ((FLASH->SR & error) != 0x00U)
 800559e:	2680      	movs	r6, #128	@ 0x80
 80055a0:	4f10      	ldr	r7, [pc, #64]	@ (80055e4 <FLASH_WaitForLastOperation+0x88>)
 80055a2:	0276      	lsls	r6, r6, #9
 80055a4:	e004      	b.n	80055b0 <FLASH_WaitForLastOperation+0x54>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80055a6:	f7fe ff85 	bl	80044b4 <HAL_GetTick>
 80055aa:	1b40      	subs	r0, r0, r5
 80055ac:	42a0      	cmp	r0, r4
 80055ae:	d217      	bcs.n	80055e0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4233      	tst	r3, r6
 80055b4:	d1f7      	bne.n	80055a6 <FLASH_WaitForLastOperation+0x4a>
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4b0b      	ldr	r3, [pc, #44]	@ (80055e8 <FLASH_WaitForLastOperation+0x8c>)
 80055ba:	0016      	movs	r6, r2
  FLASH->SR = FLASH_SR_CLEAR;
 80055bc:	490b      	ldr	r1, [pc, #44]	@ (80055ec <FLASH_WaitForLastOperation+0x90>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80055be:	401e      	ands	r6, r3
  FLASH->SR = FLASH_SR_CLEAR;
 80055c0:	6139      	str	r1, [r7, #16]
  if (error != 0x00U)
 80055c2:	421a      	tst	r2, r3
 80055c4:	d1e7      	bne.n	8005596 <FLASH_WaitForLastOperation+0x3a>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80055c6:	2680      	movs	r6, #128	@ 0x80
 80055c8:	4f06      	ldr	r7, [pc, #24]	@ (80055e4 <FLASH_WaitForLastOperation+0x88>)
 80055ca:	02f6      	lsls	r6, r6, #11
 80055cc:	e004      	b.n	80055d8 <FLASH_WaitForLastOperation+0x7c>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80055ce:	f7fe ff71 	bl	80044b4 <HAL_GetTick>
 80055d2:	1b40      	subs	r0, r0, r5
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d203      	bcs.n	80055e0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4233      	tst	r3, r6
 80055dc:	d1f7      	bne.n	80055ce <FLASH_WaitForLastOperation+0x72>
 80055de:	e7d8      	b.n	8005592 <FLASH_WaitForLastOperation+0x36>
        return HAL_TIMEOUT;
 80055e0:	2003      	movs	r0, #3
 80055e2:	e7d7      	b.n	8005594 <FLASH_WaitForLastOperation+0x38>
 80055e4:	40022000 	.word	0x40022000
 80055e8:	0000c3fa 	.word	0x0000c3fa
 80055ec:	0000c3fb 	.word	0x0000c3fb
 80055f0:	200005c8 	.word	0x200005c8

080055f4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80055f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f6:	464f      	mov	r7, r9
 80055f8:	4646      	mov	r6, r8
 80055fa:	46d6      	mov	lr, sl

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055fc:	4b2b      	ldr	r3, [pc, #172]	@ (80056ac <HAL_FLASHEx_Erase+0xb8>)
{
 80055fe:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 8005600:	4698      	mov	r8, r3
 8005602:	781b      	ldrb	r3, [r3, #0]
{
 8005604:	4689      	mov	r9, r1
 8005606:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8005608:	2b01      	cmp	r3, #1
 800560a:	d041      	beq.n	8005690 <HAL_FLASHEx_Erase+0x9c>
 800560c:	4642      	mov	r2, r8
 800560e:	2301      	movs	r3, #1

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005610:	20fa      	movs	r0, #250	@ 0xfa
  __HAL_LOCK(&pFlash);
 8005612:	7013      	strb	r3, [r2, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005614:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005616:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005618:	6053      	str	r3, [r2, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800561a:	f7ff ff9f 	bl	800555c <FLASH_WaitForLastOperation>
 800561e:	1e07      	subs	r7, r0, #0

  if (status == HAL_OK)
 8005620:	d12d      	bne.n	800567e <HAL_FLASHEx_Erase+0x8a>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8005622:	2304      	movs	r3, #4
 8005624:	606b      	str	r3, [r5, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8005626:	682b      	ldr	r3, [r5, #0]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d033      	beq.n	8005694 <HAL_FLASHEx_Erase+0xa0>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800562c:	2301      	movs	r3, #1
 800562e:	464a      	mov	r2, r9
 8005630:	425b      	negs	r3, r3
 8005632:	6013      	str	r3, [r2, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005634:	68ac      	ldr	r4, [r5, #8]
 8005636:	68eb      	ldr	r3, [r5, #12]
 8005638:	18e3      	adds	r3, r4, r3
 800563a:	429c      	cmp	r4, r3
 800563c:	d21a      	bcs.n	8005674 <HAL_FLASHEx_Erase+0x80>
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800563e:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <HAL_FLASHEx_Erase+0xbc>)
 8005640:	4e1c      	ldr	r6, [pc, #112]	@ (80056b4 <HAL_FLASHEx_Erase+0xc0>)
 8005642:	469a      	mov	sl, r3
 8005644:	e005      	b.n	8005652 <HAL_FLASHEx_Erase+0x5e>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005646:	68ab      	ldr	r3, [r5, #8]
 8005648:	68ea      	ldr	r2, [r5, #12]
 800564a:	3401      	adds	r4, #1
 800564c:	189b      	adds	r3, r3, r2
 800564e:	42a3      	cmp	r3, r4
 8005650:	d910      	bls.n	8005674 <HAL_FLASHEx_Erase+0x80>
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005652:	4651      	mov	r1, sl
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005654:	20fa      	movs	r0, #250	@ 0xfa
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005656:	6972      	ldr	r2, [r6, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005658:	00e3      	lsls	r3, r4, #3
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800565a:	400a      	ands	r2, r1
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800565c:	4313      	orrs	r3, r2
 800565e:	4a16      	ldr	r2, [pc, #88]	@ (80056b8 <HAL_FLASHEx_Erase+0xc4>)
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005660:	0080      	lsls	r0, r0, #2
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005662:	4313      	orrs	r3, r2
 8005664:	6173      	str	r3, [r6, #20]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005666:	f7ff ff79 	bl	800555c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800566a:	2800      	cmp	r0, #0
 800566c:	d0eb      	beq.n	8005646 <HAL_FLASHEx_Erase+0x52>
          *PageError = index;
 800566e:	464b      	mov	r3, r9
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005670:	0007      	movs	r7, r0
          *PageError = index;
 8005672:	601c      	str	r4, [r3, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005674:	2102      	movs	r1, #2
 8005676:	4a0f      	ldr	r2, [pc, #60]	@ (80056b4 <HAL_FLASHEx_Erase+0xc0>)
 8005678:	6953      	ldr	r3, [r2, #20]
 800567a:	438b      	bics	r3, r1
 800567c:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 800567e:	2300      	movs	r3, #0
 8005680:	4642      	mov	r2, r8
 8005682:	7013      	strb	r3, [r2, #0]
}
 8005684:	0038      	movs	r0, r7
 8005686:	bce0      	pop	{r5, r6, r7}
 8005688:	46ba      	mov	sl, r7
 800568a:	46b1      	mov	r9, r6
 800568c:	46a8      	mov	r8, r5
 800568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8005690:	2702      	movs	r7, #2
 8005692:	e7f7      	b.n	8005684 <HAL_FLASHEx_Erase+0x90>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005694:	20fa      	movs	r0, #250	@ 0xfa
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8005696:	4a07      	ldr	r2, [pc, #28]	@ (80056b4 <HAL_FLASHEx_Erase+0xc0>)
 8005698:	4b08      	ldr	r3, [pc, #32]	@ (80056bc <HAL_FLASHEx_Erase+0xc8>)
 800569a:	6951      	ldr	r1, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800569c:	0080      	lsls	r0, r0, #2
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800569e:	430b      	orrs	r3, r1
 80056a0:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056a2:	f7ff ff5b 	bl	800555c <FLASH_WaitForLastOperation>
 80056a6:	0007      	movs	r7, r0
 80056a8:	e7e9      	b.n	800567e <HAL_FLASHEx_Erase+0x8a>
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	200005c8 	.word	0x200005c8
 80056b0:	ffffe007 	.word	0xffffe007
 80056b4:	40022000 	.word	0x40022000
 80056b8:	00010002 	.word	0x00010002
 80056bc:	00010004 	.word	0x00010004

080056c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056c2:	46de      	mov	lr, fp
 80056c4:	4657      	mov	r7, sl
 80056c6:	464e      	mov	r6, r9
 80056c8:	4645      	mov	r5, r8
 80056ca:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056cc:	680c      	ldr	r4, [r1, #0]
{
 80056ce:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 80056d0:	2300      	movs	r3, #0
{
 80056d2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	d068      	beq.n	80057aa <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056d8:	2201      	movs	r2, #1
 80056da:	409a      	lsls	r2, r3
 80056dc:	4694      	mov	ip, r2
 80056de:	4022      	ands	r2, r4
 80056e0:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 80056e2:	4662      	mov	r2, ip
 80056e4:	4214      	tst	r4, r2
 80056e6:	d05c      	beq.n	80057a2 <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056e8:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056ea:	465a      	mov	r2, fp
 80056ec:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056ee:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056f0:	6855      	ldr	r5, [r2, #4]
 80056f2:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056f4:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056f6:	402a      	ands	r2, r5
 80056f8:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056fa:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056fc:	2e01      	cmp	r6, #1
 80056fe:	d95b      	bls.n	80057b8 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005700:	2a03      	cmp	r2, #3
 8005702:	d000      	beq.n	8005706 <HAL_GPIO_Init+0x46>
 8005704:	e0ad      	b.n	8005862 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005706:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8005708:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800570a:	9900      	ldr	r1, [sp, #0]
 800570c:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800570e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8005710:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005712:	22c0      	movs	r2, #192	@ 0xc0
 8005714:	0292      	lsls	r2, r2, #10
 8005716:	4215      	tst	r5, r2
 8005718:	d043      	beq.n	80057a2 <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800571a:	2703      	movs	r7, #3
 800571c:	260f      	movs	r6, #15
 800571e:	495d      	ldr	r1, [pc, #372]	@ (8005894 <HAL_GPIO_Init+0x1d4>)
 8005720:	401f      	ands	r7, r3
 8005722:	468c      	mov	ip, r1
 8005724:	00ff      	lsls	r7, r7, #3
 8005726:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8005728:	089a      	lsrs	r2, r3, #2
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	4462      	add	r2, ip
 800572e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005730:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005732:	26a0      	movs	r6, #160	@ 0xa0
 8005734:	05f6      	lsls	r6, r6, #23
 8005736:	42b0      	cmp	r0, r6
 8005738:	d00e      	beq.n	8005758 <HAL_GPIO_Init+0x98>
 800573a:	4e57      	ldr	r6, [pc, #348]	@ (8005898 <HAL_GPIO_Init+0x1d8>)
 800573c:	42b0      	cmp	r0, r6
 800573e:	d100      	bne.n	8005742 <HAL_GPIO_Init+0x82>
 8005740:	e0a0      	b.n	8005884 <HAL_GPIO_Init+0x1c4>
 8005742:	4e56      	ldr	r6, [pc, #344]	@ (800589c <HAL_GPIO_Init+0x1dc>)
 8005744:	42b0      	cmp	r0, r6
 8005746:	d100      	bne.n	800574a <HAL_GPIO_Init+0x8a>
 8005748:	e0a0      	b.n	800588c <HAL_GPIO_Init+0x1cc>
 800574a:	4e55      	ldr	r6, [pc, #340]	@ (80058a0 <HAL_GPIO_Init+0x1e0>)
 800574c:	42b0      	cmp	r0, r6
 800574e:	d100      	bne.n	8005752 <HAL_GPIO_Init+0x92>
 8005750:	e094      	b.n	800587c <HAL_GPIO_Init+0x1bc>
 8005752:	2605      	movs	r6, #5
 8005754:	40be      	lsls	r6, r7
 8005756:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005758:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 800575a:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 800575c:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 800575e:	4a4d      	ldr	r2, [pc, #308]	@ (8005894 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005760:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8005762:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8005764:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005766:	4235      	tst	r5, r6
 8005768:	d000      	beq.n	800576c <HAL_GPIO_Init+0xac>
 800576a:	e077      	b.n	800585c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 800576c:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800576e:	4e49      	ldr	r6, [pc, #292]	@ (8005894 <HAL_GPIO_Init+0x1d4>)
 8005770:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8005772:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005774:	2680      	movs	r6, #128	@ 0x80
 8005776:	03b6      	lsls	r6, r6, #14
 8005778:	4235      	tst	r5, r6
 800577a:	d16c      	bne.n	8005856 <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 800577c:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800577e:	4e45      	ldr	r6, [pc, #276]	@ (8005894 <HAL_GPIO_Init+0x1d4>)
 8005780:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005782:	2284      	movs	r2, #132	@ 0x84
 8005784:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005786:	03af      	lsls	r7, r5, #14
 8005788:	d462      	bmi.n	8005850 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 800578a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800578c:	2784      	movs	r7, #132	@ 0x84
 800578e:	4e41      	ldr	r6, [pc, #260]	@ (8005894 <HAL_GPIO_Init+0x1d4>)
 8005790:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 8005792:	2280      	movs	r2, #128	@ 0x80
 8005794:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005796:	03ed      	lsls	r5, r5, #15
 8005798:	d456      	bmi.n	8005848 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 800579a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800579c:	2180      	movs	r1, #128	@ 0x80
 800579e:	4d3d      	ldr	r5, [pc, #244]	@ (8005894 <HAL_GPIO_Init+0x1d4>)
 80057a0:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057a2:	0022      	movs	r2, r4
      }
    }

    position++;
 80057a4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057a6:	40da      	lsrs	r2, r3
 80057a8:	d196      	bne.n	80056d8 <HAL_GPIO_Init+0x18>
  }
}
 80057aa:	b003      	add	sp, #12
 80057ac:	bcf0      	pop	{r4, r5, r6, r7}
 80057ae:	46bb      	mov	fp, r7
 80057b0:	46b2      	mov	sl, r6
 80057b2:	46a9      	mov	r9, r5
 80057b4:	46a0      	mov	r8, r4
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80057b8:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057ba:	000e      	movs	r6, r1
 80057bc:	9900      	ldr	r1, [sp, #0]
 80057be:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057c0:	4659      	mov	r1, fp
 80057c2:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057c4:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057c6:	000e      	movs	r6, r1
 80057c8:	40be      	lsls	r6, r7
 80057ca:	46b0      	mov	r8, r6
 80057cc:	464e      	mov	r6, r9
 80057ce:	4641      	mov	r1, r8
 80057d0:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 80057d2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80057d4:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057d6:	000e      	movs	r6, r1
 80057d8:	4661      	mov	r1, ip
 80057da:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057dc:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057de:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057e0:	000e      	movs	r6, r1
 80057e2:	2101      	movs	r1, #1
 80057e4:	400e      	ands	r6, r1
 80057e6:	409e      	lsls	r6, r3
 80057e8:	46b4      	mov	ip, r6
 80057ea:	4646      	mov	r6, r8
 80057ec:	4661      	mov	r1, ip
 80057ee:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 80057f0:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80057f2:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057f4:	000e      	movs	r6, r1
 80057f6:	9900      	ldr	r1, [sp, #0]
 80057f8:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057fa:	4659      	mov	r1, fp
 80057fc:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057fe:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005800:	000e      	movs	r6, r1
 8005802:	40be      	lsls	r6, r7
 8005804:	46b4      	mov	ip, r6
 8005806:	4646      	mov	r6, r8
 8005808:	4661      	mov	r1, ip
 800580a:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 800580c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800580e:	2a02      	cmp	r2, #2
 8005810:	d000      	beq.n	8005814 <HAL_GPIO_Init+0x154>
 8005812:	e778      	b.n	8005706 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8005814:	08d9      	lsrs	r1, r3, #3
 8005816:	0089      	lsls	r1, r1, #2
 8005818:	468c      	mov	ip, r1
 800581a:	4484      	add	ip, r0
 800581c:	4661      	mov	r1, ip
 800581e:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005820:	2107      	movs	r1, #7
 8005822:	4019      	ands	r1, r3
 8005824:	0089      	lsls	r1, r1, #2
 8005826:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8005828:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800582a:	210f      	movs	r1, #15
 800582c:	4646      	mov	r6, r8
 800582e:	40b1      	lsls	r1, r6
 8005830:	9e01      	ldr	r6, [sp, #4]
 8005832:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005834:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005836:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005838:	4646      	mov	r6, r8
 800583a:	6909      	ldr	r1, [r1, #16]
 800583c:	40b1      	lsls	r1, r6
 800583e:	9e01      	ldr	r6, [sp, #4]
 8005840:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8005842:	4661      	mov	r1, ip
 8005844:	620e      	str	r6, [r1, #32]
 8005846:	e75e      	b.n	8005706 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8005848:	4651      	mov	r1, sl
 800584a:	4311      	orrs	r1, r2
 800584c:	000a      	movs	r2, r1
 800584e:	e7a5      	b.n	800579c <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8005850:	4656      	mov	r6, sl
 8005852:	4332      	orrs	r2, r6
 8005854:	e79a      	b.n	800578c <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8005856:	4656      	mov	r6, sl
 8005858:	4332      	orrs	r2, r6
 800585a:	e790      	b.n	800577e <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 800585c:	4656      	mov	r6, sl
 800585e:	4332      	orrs	r2, r6
 8005860:	e785      	b.n	800576e <HAL_GPIO_Init+0xae>
 8005862:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8005864:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005866:	4031      	ands	r1, r6
 8005868:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800586a:	4659      	mov	r1, fp
 800586c:	6889      	ldr	r1, [r1, #8]
 800586e:	40b9      	lsls	r1, r7
 8005870:	468c      	mov	ip, r1
 8005872:	4641      	mov	r1, r8
 8005874:	4666      	mov	r6, ip
 8005876:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8005878:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800587a:	e744      	b.n	8005706 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800587c:	2603      	movs	r6, #3
 800587e:	40be      	lsls	r6, r7
 8005880:	4331      	orrs	r1, r6
 8005882:	e769      	b.n	8005758 <HAL_GPIO_Init+0x98>
 8005884:	2601      	movs	r6, #1
 8005886:	40be      	lsls	r6, r7
 8005888:	4331      	orrs	r1, r6
 800588a:	e765      	b.n	8005758 <HAL_GPIO_Init+0x98>
 800588c:	2602      	movs	r6, #2
 800588e:	40be      	lsls	r6, r7
 8005890:	4331      	orrs	r1, r6
 8005892:	e761      	b.n	8005758 <HAL_GPIO_Init+0x98>
 8005894:	40021800 	.word	0x40021800
 8005898:	50000400 	.word	0x50000400
 800589c:	50000800 	.word	0x50000800
 80058a0:	50000c00 	.word	0x50000c00

080058a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80058a6:	4c13      	ldr	r4, [pc, #76]	@ (80058f4 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80058a8:	4a13      	ldr	r2, [pc, #76]	@ (80058f8 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80058aa:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80058ac:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80058ae:	4013      	ands	r3, r2
 80058b0:	4303      	orrs	r3, r0
 80058b2:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058b4:	2380      	movs	r3, #128	@ 0x80
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4298      	cmp	r0, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 80058bc:	0028      	movs	r0, r5
 80058be:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80058c0:	4b0e      	ldr	r3, [pc, #56]	@ (80058fc <HAL_PWREx_ControlVoltageScaling+0x58>)
 80058c2:	490f      	ldr	r1, [pc, #60]	@ (8005900 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	0058      	lsls	r0, r3, #1
 80058c8:	18c0      	adds	r0, r0, r3
 80058ca:	0040      	lsls	r0, r0, #1
 80058cc:	f7fa fc34 	bl	8000138 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058d0:	2280      	movs	r2, #128	@ 0x80
 80058d2:	6963      	ldr	r3, [r4, #20]
 80058d4:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80058d6:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058d8:	4213      	tst	r3, r2
 80058da:	d102      	bne.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x3e>
 80058dc:	e7ee      	b.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 80058de:	2800      	cmp	r0, #0
 80058e0:	d005      	beq.n	80058ee <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058e2:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 80058e4:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058e6:	4213      	tst	r3, r2
 80058e8:	d1f9      	bne.n	80058de <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 80058ea:	2500      	movs	r5, #0
 80058ec:	e7e6      	b.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80058ee:	2503      	movs	r5, #3
 80058f0:	e7e4      	b.n	80058bc <HAL_PWREx_ControlVoltageScaling+0x18>
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	40007000 	.word	0x40007000
 80058f8:	fffff9ff 	.word	0xfffff9ff
 80058fc:	20000004 	.word	0x20000004
 8005900:	000f4240 	.word	0x000f4240

08005904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005906:	46ce      	mov	lr, r9
 8005908:	4647      	mov	r7, r8
 800590a:	b580      	push	{r7, lr}
 800590c:	0004      	movs	r4, r0
 800590e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005910:	2800      	cmp	r0, #0
 8005912:	d027      	beq.n	8005964 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005914:	6803      	ldr	r3, [r0, #0]
 8005916:	07da      	lsls	r2, r3, #31
 8005918:	d511      	bpl.n	800593e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800591a:	2238      	movs	r2, #56	@ 0x38
 800591c:	49c0      	ldr	r1, [pc, #768]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 800591e:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005920:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005922:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005924:	2a10      	cmp	r2, #16
 8005926:	d100      	bne.n	800592a <HAL_RCC_OscConfig+0x26>
 8005928:	e0cc      	b.n	8005ac4 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800592a:	2a08      	cmp	r2, #8
 800592c:	d000      	beq.n	8005930 <HAL_RCC_OscConfig+0x2c>
 800592e:	e0cd      	b.n	8005acc <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005930:	4abb      	ldr	r2, [pc, #748]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	0392      	lsls	r2, r2, #14
 8005936:	d502      	bpl.n	800593e <HAL_RCC_OscConfig+0x3a>
 8005938:	6862      	ldr	r2, [r4, #4]
 800593a:	2a00      	cmp	r2, #0
 800593c:	d012      	beq.n	8005964 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800593e:	079a      	lsls	r2, r3, #30
 8005940:	d532      	bpl.n	80059a8 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005942:	2338      	movs	r3, #56	@ 0x38
 8005944:	4ab6      	ldr	r2, [pc, #728]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005946:	6891      	ldr	r1, [r2, #8]
 8005948:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800594a:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800594c:	2b10      	cmp	r3, #16
 800594e:	d100      	bne.n	8005952 <HAL_RCC_OscConfig+0x4e>
 8005950:	e10b      	b.n	8005b6a <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005952:	2b00      	cmp	r3, #0
 8005954:	d000      	beq.n	8005958 <HAL_RCC_OscConfig+0x54>
 8005956:	e10d      	b.n	8005b74 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005958:	6813      	ldr	r3, [r2, #0]
 800595a:	055b      	lsls	r3, r3, #21
 800595c:	d508      	bpl.n	8005970 <HAL_RCC_OscConfig+0x6c>
 800595e:	68e3      	ldr	r3, [r4, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d105      	bne.n	8005970 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8005964:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8005966:	b003      	add	sp, #12
 8005968:	bcc0      	pop	{r6, r7}
 800596a:	46b9      	mov	r9, r7
 800596c:	46b0      	mov	r8, r6
 800596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005970:	6851      	ldr	r1, [r2, #4]
 8005972:	6963      	ldr	r3, [r4, #20]
 8005974:	48ab      	ldr	r0, [pc, #684]	@ (8005c24 <HAL_RCC_OscConfig+0x320>)
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	4001      	ands	r1, r0
 800597a:	430b      	orrs	r3, r1
 800597c:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800597e:	4aa8      	ldr	r2, [pc, #672]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005980:	49a9      	ldr	r1, [pc, #676]	@ (8005c28 <HAL_RCC_OscConfig+0x324>)
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	400b      	ands	r3, r1
 8005986:	6921      	ldr	r1, [r4, #16]
 8005988:	430b      	orrs	r3, r1
 800598a:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800598c:	6813      	ldr	r3, [r2, #0]
 800598e:	4aa7      	ldr	r2, [pc, #668]	@ (8005c2c <HAL_RCC_OscConfig+0x328>)
 8005990:	049b      	lsls	r3, r3, #18
 8005992:	0f5b      	lsrs	r3, r3, #29
 8005994:	40da      	lsrs	r2, r3
 8005996:	49a6      	ldr	r1, [pc, #664]	@ (8005c30 <HAL_RCC_OscConfig+0x32c>)
 8005998:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800599a:	4ba6      	ldr	r3, [pc, #664]	@ (8005c34 <HAL_RCC_OscConfig+0x330>)
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f7fe fd43 	bl	8004428 <HAL_InitTick>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d1de      	bne.n	8005964 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	071a      	lsls	r2, r3, #28
 80059aa:	d46d      	bmi.n	8005a88 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ac:	075b      	lsls	r3, r3, #29
 80059ae:	d545      	bpl.n	8005a3c <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80059b0:	2338      	movs	r3, #56	@ 0x38
 80059b2:	4a9b      	ldr	r2, [pc, #620]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 80059b4:	6891      	ldr	r1, [r2, #8]
 80059b6:	400b      	ands	r3, r1
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d100      	bne.n	80059be <HAL_RCC_OscConfig+0xba>
 80059bc:	e0cc      	b.n	8005b58 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059be:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80059c0:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059c2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80059c4:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80059c6:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059c8:	4219      	tst	r1, r3
 80059ca:	d108      	bne.n	80059de <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 80059cc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80059ce:	4319      	orrs	r1, r3
 80059d0:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80059d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059d4:	4013      	ands	r3, r2
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80059da:	2301      	movs	r3, #1
 80059dc:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059de:	2780      	movs	r7, #128	@ 0x80
 80059e0:	4e95      	ldr	r6, [pc, #596]	@ (8005c38 <HAL_RCC_OscConfig+0x334>)
 80059e2:	007f      	lsls	r7, r7, #1
 80059e4:	6833      	ldr	r3, [r6, #0]
 80059e6:	423b      	tst	r3, r7
 80059e8:	d100      	bne.n	80059ec <HAL_RCC_OscConfig+0xe8>
 80059ea:	e0ff      	b.n	8005bec <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ec:	68a3      	ldr	r3, [r4, #8]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d100      	bne.n	80059f4 <HAL_RCC_OscConfig+0xf0>
 80059f2:	e0e5      	b.n	8005bc0 <HAL_RCC_OscConfig+0x2bc>
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	d100      	bne.n	80059fa <HAL_RCC_OscConfig+0xf6>
 80059f8:	e1d1      	b.n	8005d9e <HAL_RCC_OscConfig+0x49a>
 80059fa:	2101      	movs	r1, #1
 80059fc:	4e88      	ldr	r6, [pc, #544]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 80059fe:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8005a00:	438a      	bics	r2, r1
 8005a02:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8005a04:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8005a06:	3103      	adds	r1, #3
 8005a08:	438a      	bics	r2, r1
 8005a0a:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d000      	beq.n	8005a12 <HAL_RCC_OscConfig+0x10e>
 8005a10:	e0da      	b.n	8005bc8 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8005a12:	f7fe fd4f 	bl	80044b4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a16:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8005a18:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a1a:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1c:	4d87      	ldr	r5, [pc, #540]	@ (8005c3c <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a1e:	e005      	b.n	8005a2c <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a20:	f7fe fd48 	bl	80044b4 <HAL_GetTick>
 8005a24:	1bc0      	subs	r0, r0, r7
 8005a26:	42a8      	cmp	r0, r5
 8005a28:	d900      	bls.n	8005a2c <HAL_RCC_OscConfig+0x128>
 8005a2a:	e0ee      	b.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8005a30:	421a      	tst	r2, r3
 8005a32:	d1f5      	bne.n	8005a20 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8005a34:	464b      	mov	r3, r9
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d100      	bne.n	8005a3c <HAL_RCC_OscConfig+0x138>
 8005a3a:	e16a      	b.n	8005d12 <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a3c:	69e3      	ldr	r3, [r4, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a42:	2238      	movs	r2, #56	@ 0x38
 8005a44:	4d76      	ldr	r5, [pc, #472]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005a46:	68a9      	ldr	r1, [r5, #8]
 8005a48:	400a      	ands	r2, r1
 8005a4a:	2a10      	cmp	r2, #16
 8005a4c:	d100      	bne.n	8005a50 <HAL_RCC_OscConfig+0x14c>
 8005a4e:	e11d      	b.n	8005c8c <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d100      	bne.n	8005a56 <HAL_RCC_OscConfig+0x152>
 8005a54:	e163      	b.n	8005d1e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 8005a56:	682b      	ldr	r3, [r5, #0]
 8005a58:	4a79      	ldr	r2, [pc, #484]	@ (8005c40 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005a60:	f7fe fd28 	bl	80044b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a64:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8005a66:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a68:	e005      	b.n	8005a76 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6a:	f7fe fd23 	bl	80044b4 <HAL_GetTick>
 8005a6e:	1b00      	subs	r0, r0, r4
 8005a70:	2802      	cmp	r0, #2
 8005a72:	d900      	bls.n	8005a76 <HAL_RCC_OscConfig+0x172>
 8005a74:	e0c9      	b.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	4233      	tst	r3, r6
 8005a7a:	d1f6      	bne.n	8005a6a <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005a7c:	68eb      	ldr	r3, [r5, #12]
 8005a7e:	4a71      	ldr	r2, [pc, #452]	@ (8005c44 <HAL_RCC_OscConfig+0x340>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8005a84:	2000      	movs	r0, #0
 8005a86:	e76e      	b.n	8005966 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a88:	2238      	movs	r2, #56	@ 0x38
 8005a8a:	4d65      	ldr	r5, [pc, #404]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005a8c:	68a9      	ldr	r1, [r5, #8]
 8005a8e:	400a      	ands	r2, r1
 8005a90:	2a18      	cmp	r2, #24
 8005a92:	d043      	beq.n	8005b1c <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a94:	69a3      	ldr	r3, [r4, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d100      	bne.n	8005a9c <HAL_RCC_OscConfig+0x198>
 8005a9a:	e0b8      	b.n	8005c0e <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aa0:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005aa6:	f7fe fd05 	bl	80044b4 <HAL_GetTick>
 8005aaa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aac:	e005      	b.n	8005aba <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aae:	f7fe fd01 	bl	80044b4 <HAL_GetTick>
 8005ab2:	1b80      	subs	r0, r0, r6
 8005ab4:	2802      	cmp	r0, #2
 8005ab6:	d900      	bls.n	8005aba <HAL_RCC_OscConfig+0x1b6>
 8005ab8:	e0a7      	b.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005aba:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005abc:	421f      	tst	r7, r3
 8005abe:	d0f6      	beq.n	8005aae <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	e773      	b.n	80059ac <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac4:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005ac6:	0789      	lsls	r1, r1, #30
 8005ac8:	d100      	bne.n	8005acc <HAL_RCC_OscConfig+0x1c8>
 8005aca:	e731      	b.n	8005930 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005acc:	2280      	movs	r2, #128	@ 0x80
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	0252      	lsls	r2, r2, #9
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d02b      	beq.n	8005b2e <HAL_RCC_OscConfig+0x22a>
 8005ad6:	21a0      	movs	r1, #160	@ 0xa0
 8005ad8:	02c9      	lsls	r1, r1, #11
 8005ada:	428b      	cmp	r3, r1
 8005adc:	d100      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x1dc>
 8005ade:	e103      	b.n	8005ce8 <HAL_RCC_OscConfig+0x3e4>
 8005ae0:	4d4f      	ldr	r5, [pc, #316]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005ae2:	4959      	ldr	r1, [pc, #356]	@ (8005c48 <HAL_RCC_OscConfig+0x344>)
 8005ae4:	682a      	ldr	r2, [r5, #0]
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	682a      	ldr	r2, [r5, #0]
 8005aec:	4957      	ldr	r1, [pc, #348]	@ (8005c4c <HAL_RCC_OscConfig+0x348>)
 8005aee:	400a      	ands	r2, r1
 8005af0:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d11f      	bne.n	8005b36 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8005af6:	f7fe fcdd 	bl	80044b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005afa:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005afc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005afe:	02bf      	lsls	r7, r7, #10
 8005b00:	e004      	b.n	8005b0c <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b02:	f7fe fcd7 	bl	80044b4 <HAL_GetTick>
 8005b06:	1b80      	subs	r0, r0, r6
 8005b08:	2864      	cmp	r0, #100	@ 0x64
 8005b0a:	d87e      	bhi.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	423b      	tst	r3, r7
 8005b10:	d1f7      	bne.n	8005b02 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	079a      	lsls	r2, r3, #30
 8005b16:	d400      	bmi.n	8005b1a <HAL_RCC_OscConfig+0x216>
 8005b18:	e746      	b.n	80059a8 <HAL_RCC_OscConfig+0xa4>
 8005b1a:	e712      	b.n	8005942 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005b1c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8005b1e:	0792      	lsls	r2, r2, #30
 8005b20:	d400      	bmi.n	8005b24 <HAL_RCC_OscConfig+0x220>
 8005b22:	e743      	b.n	80059ac <HAL_RCC_OscConfig+0xa8>
 8005b24:	69a2      	ldr	r2, [r4, #24]
 8005b26:	2a00      	cmp	r2, #0
 8005b28:	d000      	beq.n	8005b2c <HAL_RCC_OscConfig+0x228>
 8005b2a:	e73f      	b.n	80059ac <HAL_RCC_OscConfig+0xa8>
 8005b2c:	e71a      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b2e:	4a3c      	ldr	r2, [pc, #240]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005b30:	6811      	ldr	r1, [r2, #0]
 8005b32:	430b      	orrs	r3, r1
 8005b34:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b36:	f7fe fcbd 	bl	80044b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b3a:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005b3c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b3e:	4f38      	ldr	r7, [pc, #224]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005b40:	02b6      	lsls	r6, r6, #10
 8005b42:	e004      	b.n	8005b4e <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b44:	f7fe fcb6 	bl	80044b4 <HAL_GetTick>
 8005b48:	1b40      	subs	r0, r0, r5
 8005b4a:	2864      	cmp	r0, #100	@ 0x64
 8005b4c:	d85d      	bhi.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	4233      	tst	r3, r6
 8005b52:	d0f7      	beq.n	8005b44 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	e7dd      	b.n	8005b14 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005b58:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8005b5a:	079b      	lsls	r3, r3, #30
 8005b5c:	d400      	bmi.n	8005b60 <HAL_RCC_OscConfig+0x25c>
 8005b5e:	e76d      	b.n	8005a3c <HAL_RCC_OscConfig+0x138>
 8005b60:	68a3      	ldr	r3, [r4, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d000      	beq.n	8005b68 <HAL_RCC_OscConfig+0x264>
 8005b66:	e769      	b.n	8005a3c <HAL_RCC_OscConfig+0x138>
 8005b68:	e6fc      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b6a:	3b0d      	subs	r3, #13
 8005b6c:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d100      	bne.n	8005b74 <HAL_RCC_OscConfig+0x270>
 8005b72:	e0c3      	b.n	8005cfc <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b74:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b76:	4d2a      	ldr	r5, [pc, #168]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d073      	beq.n	8005c64 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c28 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b80:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b82:	4013      	ands	r3, r2
 8005b84:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b86:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8005b8c:	2380      	movs	r3, #128	@ 0x80
 8005b8e:	682a      	ldr	r2, [r5, #0]
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005b96:	f7fe fc8d 	bl	80044b4 <HAL_GetTick>
 8005b9a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b9c:	e004      	b.n	8005ba8 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9e:	f7fe fc89 	bl	80044b4 <HAL_GetTick>
 8005ba2:	1b80      	subs	r0, r0, r6
 8005ba4:	2802      	cmp	r0, #2
 8005ba6:	d830      	bhi.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	423b      	tst	r3, r7
 8005bac:	d0f7      	beq.n	8005b9e <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bae:	686a      	ldr	r2, [r5, #4]
 8005bb0:	6963      	ldr	r3, [r4, #20]
 8005bb2:	491c      	ldr	r1, [pc, #112]	@ (8005c24 <HAL_RCC_OscConfig+0x320>)
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	400a      	ands	r2, r1
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	e6f3      	b.n	80059a8 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc0:	4917      	ldr	r1, [pc, #92]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
 8005bc2:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8005bc8:	f7fe fc74 	bl	80044b4 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bcc:	4b14      	ldr	r3, [pc, #80]	@ (8005c20 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8005bce:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd0:	4698      	mov	r8, r3
 8005bd2:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	4d19      	ldr	r5, [pc, #100]	@ (8005c3c <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd6:	e004      	b.n	8005be2 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd8:	f7fe fc6c 	bl	80044b4 <HAL_GetTick>
 8005bdc:	1b80      	subs	r0, r0, r6
 8005bde:	42a8      	cmp	r0, r5
 8005be0:	d813      	bhi.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005be2:	4643      	mov	r3, r8
 8005be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be6:	421f      	tst	r7, r3
 8005be8:	d0f6      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
 8005bea:	e723      	b.n	8005a34 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	433b      	orrs	r3, r7
 8005bf0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005bf2:	f7fe fc5f 	bl	80044b4 <HAL_GetTick>
 8005bf6:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	423b      	tst	r3, r7
 8005bfc:	d000      	beq.n	8005c00 <HAL_RCC_OscConfig+0x2fc>
 8005bfe:	e6f5      	b.n	80059ec <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c00:	f7fe fc58 	bl	80044b4 <HAL_GetTick>
 8005c04:	1b40      	subs	r0, r0, r5
 8005c06:	2802      	cmp	r0, #2
 8005c08:	d9f6      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8005c0a:	2003      	movs	r0, #3
 8005c0c:	e6ab      	b.n	8005966 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8005c0e:	2201      	movs	r2, #1
 8005c10:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c12:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8005c14:	4393      	bics	r3, r2
 8005c16:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005c18:	f7fe fc4c 	bl	80044b4 <HAL_GetTick>
 8005c1c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c1e:	e01c      	b.n	8005c5a <HAL_RCC_OscConfig+0x356>
 8005c20:	40021000 	.word	0x40021000
 8005c24:	ffff80ff 	.word	0xffff80ff
 8005c28:	ffffc7ff 	.word	0xffffc7ff
 8005c2c:	00f42400 	.word	0x00f42400
 8005c30:	20000004 	.word	0x20000004
 8005c34:	2000000c 	.word	0x2000000c
 8005c38:	40007000 	.word	0x40007000
 8005c3c:	00001388 	.word	0x00001388
 8005c40:	feffffff 	.word	0xfeffffff
 8005c44:	eefefffc 	.word	0xeefefffc
 8005c48:	fffeffff 	.word	0xfffeffff
 8005c4c:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c50:	f7fe fc30 	bl	80044b4 <HAL_GetTick>
 8005c54:	1b80      	subs	r0, r0, r6
 8005c56:	2802      	cmp	r0, #2
 8005c58:	d8d7      	bhi.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c5a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005c5c:	421f      	tst	r7, r3
 8005c5e:	d1f7      	bne.n	8005c50 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	e6a3      	b.n	80059ac <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	4a55      	ldr	r2, [pc, #340]	@ (8005dbc <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c68:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005c6e:	f7fe fc21 	bl	80044b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c72:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8005c74:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c76:	e004      	b.n	8005c82 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c78:	f7fe fc1c 	bl	80044b4 <HAL_GetTick>
 8005c7c:	1b80      	subs	r0, r0, r6
 8005c7e:	2802      	cmp	r0, #2
 8005c80:	d8c3      	bhi.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	423b      	tst	r3, r7
 8005c86:	d1f7      	bne.n	8005c78 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	e68d      	b.n	80059a8 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d100      	bne.n	8005c92 <HAL_RCC_OscConfig+0x38e>
 8005c90:	e668      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c92:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8005c94:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c96:	6a21      	ldr	r1, [r4, #32]
 8005c98:	4002      	ands	r2, r0
 8005c9a:	428a      	cmp	r2, r1
 8005c9c:	d000      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x39c>
 8005c9e:	e661      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ca0:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ca4:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca6:	428a      	cmp	r2, r1
 8005ca8:	d000      	beq.n	8005cac <HAL_RCC_OscConfig+0x3a8>
 8005caa:	e65b      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cac:	21fe      	movs	r1, #254	@ 0xfe
 8005cae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005cb0:	01c9      	lsls	r1, r1, #7
 8005cb2:	4001      	ands	r1, r0
 8005cb4:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cb6:	4291      	cmp	r1, r2
 8005cb8:	d000      	beq.n	8005cbc <HAL_RCC_OscConfig+0x3b8>
 8005cba:	e653      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cbc:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cbe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cc0:	0392      	lsls	r2, r2, #14
 8005cc2:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cc4:	428a      	cmp	r2, r1
 8005cc6:	d000      	beq.n	8005cca <HAL_RCC_OscConfig+0x3c6>
 8005cc8:	e64c      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cca:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ccc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cce:	0512      	lsls	r2, r2, #20
 8005cd0:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cd2:	428a      	cmp	r2, r1
 8005cd4:	d000      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x3d4>
 8005cd6:	e645      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005cda:	0f40      	lsrs	r0, r0, #29
 8005cdc:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cde:	1ac0      	subs	r0, r0, r3
 8005ce0:	1e43      	subs	r3, r0, #1
 8005ce2:	4198      	sbcs	r0, r3
 8005ce4:	b2c0      	uxtb	r0, r0
 8005ce6:	e63e      	b.n	8005966 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ce8:	2180      	movs	r1, #128	@ 0x80
 8005cea:	4b35      	ldr	r3, [pc, #212]	@ (8005dc0 <HAL_RCC_OscConfig+0x4bc>)
 8005cec:	02c9      	lsls	r1, r1, #11
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	4301      	orrs	r1, r0
 8005cf2:	6019      	str	r1, [r3, #0]
 8005cf4:	6819      	ldr	r1, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cfa:	e71c      	b.n	8005b36 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	055b      	lsls	r3, r3, #21
 8005d00:	d457      	bmi.n	8005db2 <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d02:	6851      	ldr	r1, [r2, #4]
 8005d04:	6963      	ldr	r3, [r4, #20]
 8005d06:	482f      	ldr	r0, [pc, #188]	@ (8005dc4 <HAL_RCC_OscConfig+0x4c0>)
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	4001      	ands	r1, r0
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d10:	e643      	b.n	800599a <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d12:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc0 <HAL_RCC_OscConfig+0x4bc>)
 8005d14:	492c      	ldr	r1, [pc, #176]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d16:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8005d18:	400b      	ands	r3, r1
 8005d1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8005d1c:	e68e      	b.n	8005a3c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8005d1e:	682b      	ldr	r3, [r5, #0]
 8005d20:	4a2a      	ldr	r2, [pc, #168]	@ (8005dcc <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d22:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005d24:	4013      	ands	r3, r2
 8005d26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005d28:	f7fe fbc4 	bl	80044b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d2c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8005d2e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d30:	e005      	b.n	8005d3e <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d32:	f7fe fbbf 	bl	80044b4 <HAL_GetTick>
 8005d36:	1b80      	subs	r0, r0, r6
 8005d38:	2802      	cmp	r0, #2
 8005d3a:	d900      	bls.n	8005d3e <HAL_RCC_OscConfig+0x43a>
 8005d3c:	e765      	b.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d3e:	682b      	ldr	r3, [r5, #0]
 8005d40:	423b      	tst	r3, r7
 8005d42:	d1f6      	bne.n	8005d32 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d44:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005d46:	6a23      	ldr	r3, [r4, #32]
 8005d48:	68ea      	ldr	r2, [r5, #12]
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	4920      	ldr	r1, [pc, #128]	@ (8005dd0 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d4e:	4e1c      	ldr	r6, [pc, #112]	@ (8005dc0 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d50:	400a      	ands	r2, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005d56:	4313      	orrs	r3, r2
 8005d58:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005d62:	0212      	lsls	r2, r2, #8
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005d68:	2380      	movs	r3, #128	@ 0x80
 8005d6a:	682a      	ldr	r2, [r5, #0]
 8005d6c:	045b      	lsls	r3, r3, #17
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005d72:	2380      	movs	r3, #128	@ 0x80
 8005d74:	68ea      	ldr	r2, [r5, #12]
 8005d76:	055b      	lsls	r3, r3, #21
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005d7c:	f7fe fb9a 	bl	80044b4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d80:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005d82:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d84:	04ad      	lsls	r5, r5, #18
 8005d86:	e005      	b.n	8005d94 <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d88:	f7fe fb94 	bl	80044b4 <HAL_GetTick>
 8005d8c:	1b00      	subs	r0, r0, r4
 8005d8e:	2802      	cmp	r0, #2
 8005d90:	d900      	bls.n	8005d94 <HAL_RCC_OscConfig+0x490>
 8005d92:	e73a      	b.n	8005c0a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	422b      	tst	r3, r5
 8005d98:	d0f6      	beq.n	8005d88 <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e5e3      	b.n	8005966 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d9e:	2104      	movs	r1, #4
 8005da0:	4b07      	ldr	r3, [pc, #28]	@ (8005dc0 <HAL_RCC_OscConfig+0x4bc>)
 8005da2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005da4:	430a      	orrs	r2, r1
 8005da6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005da8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005daa:	3903      	subs	r1, #3
 8005dac:	430a      	orrs	r2, r1
 8005dae:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005db0:	e70a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db2:	68e3      	ldr	r3, [r4, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1a4      	bne.n	8005d02 <HAL_RCC_OscConfig+0x3fe>
 8005db8:	e5d4      	b.n	8005964 <HAL_RCC_OscConfig+0x60>
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	fffffeff 	.word	0xfffffeff
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	ffff80ff 	.word	0xffff80ff
 8005dc8:	efffffff 	.word	0xefffffff
 8005dcc:	feffffff 	.word	0xfeffffff
 8005dd0:	11c1808c 	.word	0x11c1808c

08005dd4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dd4:	2338      	movs	r3, #56	@ 0x38
 8005dd6:	4a22      	ldr	r2, [pc, #136]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8005dd8:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dda:	6891      	ldr	r1, [r2, #8]
 8005ddc:	420b      	tst	r3, r1
 8005dde:	d105      	bne.n	8005dec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005de0:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005de2:	4820      	ldr	r0, [pc, #128]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005de4:	049b      	lsls	r3, r3, #18
 8005de6:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005de8:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8005dea:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dec:	6891      	ldr	r1, [r2, #8]
 8005dee:	4019      	ands	r1, r3
 8005df0:	2908      	cmp	r1, #8
 8005df2:	d014      	beq.n	8005e1e <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005df4:	6891      	ldr	r1, [r2, #8]
 8005df6:	4019      	ands	r1, r3
 8005df8:	2910      	cmp	r1, #16
 8005dfa:	d012      	beq.n	8005e22 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005dfc:	6891      	ldr	r1, [r2, #8]
 8005dfe:	4019      	ands	r1, r3
 8005e00:	2920      	cmp	r1, #32
 8005e02:	d024      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005e04:	6890      	ldr	r0, [r2, #8]
 8005e06:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8005e08:	3818      	subs	r0, #24
 8005e0a:	1e43      	subs	r3, r0, #1
 8005e0c:	4198      	sbcs	r0, r3
 8005e0e:	4b16      	ldr	r3, [pc, #88]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e10:	4240      	negs	r0, r0
 8005e12:	4018      	ands	r0, r3
 8005e14:	23fa      	movs	r3, #250	@ 0xfa
 8005e16:	01db      	lsls	r3, r3, #7
 8005e18:	469c      	mov	ip, r3
 8005e1a:	4460      	add	r0, ip
 8005e1c:	e7e5      	b.n	8005dea <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8005e1e:	4813      	ldr	r0, [pc, #76]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x98>)
 8005e20:	e7e3      	b.n	8005dea <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005e22:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e24:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005e26:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005e28:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e2a:	0649      	lsls	r1, r1, #25
 8005e2c:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005e2e:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e30:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005e32:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8005e34:	079b      	lsls	r3, r3, #30
 8005e36:	d00d      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005e38:	480a      	ldr	r0, [pc, #40]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x90>)
 8005e3a:	f7fa f97d 	bl	8000138 <__udivsi3>
 8005e3e:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005e40:	4b07      	ldr	r3, [pc, #28]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005e42:	68d9      	ldr	r1, [r3, #12]
 8005e44:	0f49      	lsrs	r1, r1, #29
 8005e46:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8005e48:	f7fa f976 	bl	8000138 <__udivsi3>
  return sysclockfreq;
 8005e4c:	e7cd      	b.n	8005dea <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8005e4e:	2080      	movs	r0, #128	@ 0x80
 8005e50:	0200      	lsls	r0, r0, #8
 8005e52:	e7ca      	b.n	8005dea <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e54:	4805      	ldr	r0, [pc, #20]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x98>)
 8005e56:	f7fa f96f 	bl	8000138 <__udivsi3>
 8005e5a:	4360      	muls	r0, r4
        break;
 8005e5c:	e7f0      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x6c>
 8005e5e:	46c0      	nop			@ (mov r8, r8)
 8005e60:	40021000 	.word	0x40021000
 8005e64:	00f42400 	.word	0x00f42400
 8005e68:	ffff8300 	.word	0xffff8300
 8005e6c:	007a1200 	.word	0x007a1200

08005e70 <HAL_RCC_ClockConfig>:
{
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	46ce      	mov	lr, r9
 8005e74:	4647      	mov	r7, r8
 8005e76:	0005      	movs	r5, r0
 8005e78:	000c      	movs	r4, r1
 8005e7a:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d026      	beq.n	8005ece <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e80:	2207      	movs	r2, #7
 8005e82:	4e57      	ldr	r6, [pc, #348]	@ (8005fe0 <HAL_RCC_ClockConfig+0x170>)
 8005e84:	6833      	ldr	r3, [r6, #0]
 8005e86:	4013      	ands	r3, r2
 8005e88:	428b      	cmp	r3, r1
 8005e8a:	d35e      	bcc.n	8005f4a <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	079a      	lsls	r2, r3, #30
 8005e90:	d50e      	bpl.n	8005eb0 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e92:	075a      	lsls	r2, r3, #29
 8005e94:	d505      	bpl.n	8005ea2 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005e96:	22e0      	movs	r2, #224	@ 0xe0
 8005e98:	4952      	ldr	r1, [pc, #328]	@ (8005fe4 <HAL_RCC_ClockConfig+0x174>)
 8005e9a:	01d2      	lsls	r2, r2, #7
 8005e9c:	6888      	ldr	r0, [r1, #8]
 8005e9e:	4302      	orrs	r2, r0
 8005ea0:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea2:	4950      	ldr	r1, [pc, #320]	@ (8005fe4 <HAL_RCC_ClockConfig+0x174>)
 8005ea4:	4850      	ldr	r0, [pc, #320]	@ (8005fe8 <HAL_RCC_ClockConfig+0x178>)
 8005ea6:	688a      	ldr	r2, [r1, #8]
 8005ea8:	4002      	ands	r2, r0
 8005eaa:	68a8      	ldr	r0, [r5, #8]
 8005eac:	4302      	orrs	r2, r0
 8005eae:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eb0:	07db      	lsls	r3, r3, #31
 8005eb2:	d52b      	bpl.n	8005f0c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb4:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eb6:	4a4b      	ldr	r2, [pc, #300]	@ (8005fe4 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d100      	bne.n	8005ebe <HAL_RCC_ClockConfig+0x4e>
 8005ebc:	e07c      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d007      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d000      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x58>
 8005ec6:	e07d      	b.n	8005fc4 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	0552      	lsls	r2, r2, #21
 8005ecc:	d404      	bmi.n	8005ed8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005ece:	2001      	movs	r0, #1
 8005ed0:	e037      	b.n	8005f42 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	0192      	lsls	r2, r2, #6
 8005ed6:	d5fa      	bpl.n	8005ece <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ed8:	2107      	movs	r1, #7
 8005eda:	4e42      	ldr	r6, [pc, #264]	@ (8005fe4 <HAL_RCC_ClockConfig+0x174>)
 8005edc:	68b2      	ldr	r2, [r6, #8]
 8005ede:	438a      	bics	r2, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005ee4:	f7fe fae6 	bl	80044b4 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee8:	2338      	movs	r3, #56	@ 0x38
 8005eea:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eec:	4b3f      	ldr	r3, [pc, #252]	@ (8005fec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005eee:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef0:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef2:	e004      	b.n	8005efe <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef4:	f7fe fade 	bl	80044b4 <HAL_GetTick>
 8005ef8:	1bc0      	subs	r0, r0, r7
 8005efa:	4548      	cmp	r0, r9
 8005efc:	d83b      	bhi.n	8005f76 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efe:	4643      	mov	r3, r8
 8005f00:	68b2      	ldr	r2, [r6, #8]
 8005f02:	401a      	ands	r2, r3
 8005f04:	686b      	ldr	r3, [r5, #4]
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d1f3      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f0c:	2207      	movs	r2, #7
 8005f0e:	4e34      	ldr	r6, [pc, #208]	@ (8005fe0 <HAL_RCC_ClockConfig+0x170>)
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	4013      	ands	r3, r2
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	d838      	bhi.n	8005f8a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	075b      	lsls	r3, r3, #29
 8005f1c:	d42d      	bmi.n	8005f7a <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f1e:	f7ff ff59 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 8005f22:	4b30      	ldr	r3, [pc, #192]	@ (8005fe4 <HAL_RCC_ClockConfig+0x174>)
 8005f24:	4a32      	ldr	r2, [pc, #200]	@ (8005ff0 <HAL_RCC_ClockConfig+0x180>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4932      	ldr	r1, [pc, #200]	@ (8005ff4 <HAL_RCC_ClockConfig+0x184>)
 8005f2a:	051b      	lsls	r3, r3, #20
 8005f2c:	0f1b      	lsrs	r3, r3, #28
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	589b      	ldr	r3, [r3, r2]
 8005f32:	221f      	movs	r2, #31
 8005f34:	4013      	ands	r3, r2
 8005f36:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8005f38:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005f3a:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	f7fe fa73 	bl	8004428 <HAL_InitTick>
}
 8005f42:	bcc0      	pop	{r6, r7}
 8005f44:	46b9      	mov	r9, r7
 8005f46:	46b0      	mov	r8, r6
 8005f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4a:	6833      	ldr	r3, [r6, #0]
 8005f4c:	4393      	bics	r3, r2
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005f52:	f7fe faaf 	bl	80044b4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f56:	2307      	movs	r3, #7
 8005f58:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f5a:	4b24      	ldr	r3, [pc, #144]	@ (8005fec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005f5c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f5e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f60:	4642      	mov	r2, r8
 8005f62:	6833      	ldr	r3, [r6, #0]
 8005f64:	4013      	ands	r3, r2
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	d100      	bne.n	8005f6c <HAL_RCC_ClockConfig+0xfc>
 8005f6a:	e78f      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f6c:	f7fe faa2 	bl	80044b4 <HAL_GetTick>
 8005f70:	1bc0      	subs	r0, r0, r7
 8005f72:	4548      	cmp	r0, r9
 8005f74:	d9f4      	bls.n	8005f60 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8005f76:	2003      	movs	r0, #3
 8005f78:	e7e3      	b.n	8005f42 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe4 <HAL_RCC_ClockConfig+0x174>)
 8005f7c:	491f      	ldr	r1, [pc, #124]	@ (8005ffc <HAL_RCC_ClockConfig+0x18c>)
 8005f7e:	6893      	ldr	r3, [r2, #8]
 8005f80:	400b      	ands	r3, r1
 8005f82:	68e9      	ldr	r1, [r5, #12]
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6093      	str	r3, [r2, #8]
 8005f88:	e7c9      	b.n	8005f1e <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8a:	6833      	ldr	r3, [r6, #0]
 8005f8c:	4393      	bics	r3, r2
 8005f8e:	4323      	orrs	r3, r4
 8005f90:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005f92:	f7fe fa8f 	bl	80044b4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f96:	2307      	movs	r3, #7
 8005f98:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9a:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8005f9c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	6833      	ldr	r3, [r6, #0]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	d0b6      	beq.n	8005f18 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005faa:	f7fe fa83 	bl	80044b4 <HAL_GetTick>
 8005fae:	1bc0      	subs	r0, r0, r7
 8005fb0:	4548      	cmp	r0, r9
 8005fb2:	d9f5      	bls.n	8005fa0 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8005fb4:	2003      	movs	r0, #3
 8005fb6:	e7c4      	b.n	8005f42 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	0392      	lsls	r2, r2, #14
 8005fbc:	d500      	bpl.n	8005fc0 <HAL_RCC_ClockConfig+0x150>
 8005fbe:	e78b      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	e7be      	b.n	8005f42 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d005      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005fca:	0792      	lsls	r2, r2, #30
 8005fcc:	d500      	bpl.n	8005fd0 <HAL_RCC_ClockConfig+0x160>
 8005fce:	e783      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	e7b6      	b.n	8005f42 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fd4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8005fd6:	0792      	lsls	r2, r2, #30
 8005fd8:	d500      	bpl.n	8005fdc <HAL_RCC_ClockConfig+0x16c>
 8005fda:	e77d      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8005fdc:	2001      	movs	r0, #1
 8005fde:	e7b0      	b.n	8005f42 <HAL_RCC_ClockConfig+0xd2>
 8005fe0:	40022000 	.word	0x40022000
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	fffff0ff 	.word	0xfffff0ff
 8005fec:	00001388 	.word	0x00001388
 8005ff0:	0800cbe4 	.word	0x0800cbe4
 8005ff4:	20000004 	.word	0x20000004
 8005ff8:	2000000c 	.word	0x2000000c
 8005ffc:	ffff8fff 	.word	0xffff8fff

08006000 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006000:	4b06      	ldr	r3, [pc, #24]	@ (800601c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006002:	4907      	ldr	r1, [pc, #28]	@ (8006020 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006004:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006006:	4a07      	ldr	r2, [pc, #28]	@ (8006024 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006008:	045b      	lsls	r3, r3, #17
 800600a:	0f5b      	lsrs	r3, r3, #29
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	585b      	ldr	r3, [r3, r1]
 8006010:	211f      	movs	r1, #31
 8006012:	6810      	ldr	r0, [r2, #0]
 8006014:	400b      	ands	r3, r1
 8006016:	40d8      	lsrs	r0, r3
}
 8006018:	4770      	bx	lr
 800601a:	46c0      	nop			@ (mov r8, r8)
 800601c:	40021000 	.word	0x40021000
 8006020:	0800cbc4 	.word	0x0800cbc4
 8006024:	20000004 	.word	0x20000004

08006028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602a:	46d6      	mov	lr, sl
 800602c:	464f      	mov	r7, r9
 800602e:	4646      	mov	r6, r8
 8006030:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006032:	6803      	ldr	r3, [r0, #0]
{
 8006034:	0004      	movs	r4, r0
 8006036:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006038:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800603a:	039a      	lsls	r2, r3, #14
 800603c:	d553      	bpl.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603e:	2280      	movs	r2, #128	@ 0x80
 8006040:	4b72      	ldr	r3, [pc, #456]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006042:	0552      	lsls	r2, r2, #21
 8006044:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8006046:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006048:	4211      	tst	r1, r2
 800604a:	d100      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800604c:	e0b2      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800604e:	2780      	movs	r7, #128	@ 0x80
 8006050:	4d6f      	ldr	r5, [pc, #444]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006052:	007f      	lsls	r7, r7, #1
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	433b      	orrs	r3, r7
 8006058:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800605a:	f7fe fa2b 	bl	80044b4 <HAL_GetTick>
 800605e:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006060:	e005      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006062:	f7fe fa27 	bl	80044b4 <HAL_GetTick>
 8006066:	1b80      	subs	r0, r0, r6
 8006068:	2802      	cmp	r0, #2
 800606a:	d900      	bls.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x46>
 800606c:	e0ac      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800606e:	682b      	ldr	r3, [r5, #0]
 8006070:	423b      	tst	r3, r7
 8006072:	d0f6      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006074:	4d65      	ldr	r5, [pc, #404]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006076:	23c0      	movs	r3, #192	@ 0xc0
 8006078:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800607e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006080:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006082:	421a      	tst	r2, r3
 8006084:	d023      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8006086:	4288      	cmp	r0, r1
 8006088:	d021      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800608a:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800608c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 800608e:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 8006090:	0240      	lsls	r0, r0, #9
 8006092:	4330      	orrs	r0, r6
 8006094:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006096:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006098:	4a5e      	ldr	r2, [pc, #376]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 800609a:	4e5f      	ldr	r6, [pc, #380]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800609c:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 800609e:	4030      	ands	r0, r6
 80060a0:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060a2:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060a4:	07db      	lsls	r3, r3, #31
 80060a6:	d512      	bpl.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fe fa04 	bl	80044b4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ac:	2302      	movs	r3, #2
 80060ae:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b0:	4b5a      	ldr	r3, [pc, #360]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
        tickstart = HAL_GetTick();
 80060b2:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b4:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060b6:	e005      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b8:	f7fe f9fc 	bl	80044b4 <HAL_GetTick>
 80060bc:	1b80      	subs	r0, r0, r6
 80060be:	4548      	cmp	r0, r9
 80060c0:	d900      	bls.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80060c2:	e081      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c4:	4642      	mov	r2, r8
 80060c6:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80060c8:	421a      	tst	r2, r3
 80060ca:	d0f5      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060cc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80060ce:	4a4f      	ldr	r2, [pc, #316]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060d0:	4850      	ldr	r0, [pc, #320]	@ (8006214 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80060d2:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80060d4:	4003      	ands	r3, r0
 80060d6:	430b      	orrs	r3, r1
 80060d8:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060da:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060dc:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060de:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80060e0:	2a01      	cmp	r2, #1
 80060e2:	d100      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80060e4:	e076      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060e6:	07da      	lsls	r2, r3, #31
 80060e8:	d506      	bpl.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060ea:	2503      	movs	r5, #3
 80060ec:	4947      	ldr	r1, [pc, #284]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060ee:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80060f0:	43aa      	bics	r2, r5
 80060f2:	6865      	ldr	r5, [r4, #4]
 80060f4:	432a      	orrs	r2, r5
 80060f6:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060f8:	06da      	lsls	r2, r3, #27
 80060fa:	d506      	bpl.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060fc:	4943      	ldr	r1, [pc, #268]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80060fe:	4d48      	ldr	r5, [pc, #288]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006100:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006102:	402a      	ands	r2, r5
 8006104:	68a5      	ldr	r5, [r4, #8]
 8006106:	432a      	orrs	r2, r5
 8006108:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800610a:	059a      	lsls	r2, r3, #22
 800610c:	d506      	bpl.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800610e:	493f      	ldr	r1, [pc, #252]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006110:	4d44      	ldr	r5, [pc, #272]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006112:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006114:	402a      	ands	r2, r5
 8006116:	6965      	ldr	r5, [r4, #20]
 8006118:	432a      	orrs	r2, r5
 800611a:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800611c:	055a      	lsls	r2, r3, #21
 800611e:	d506      	bpl.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006120:	493a      	ldr	r1, [pc, #232]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006122:	4d41      	ldr	r5, [pc, #260]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006124:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006126:	402a      	ands	r2, r5
 8006128:	69a5      	ldr	r5, [r4, #24]
 800612a:	432a      	orrs	r2, r5
 800612c:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800612e:	069a      	lsls	r2, r3, #26
 8006130:	d506      	bpl.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006132:	4936      	ldr	r1, [pc, #216]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006134:	4d3d      	ldr	r5, [pc, #244]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8006136:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006138:	402a      	ands	r2, r5
 800613a:	68e5      	ldr	r5, [r4, #12]
 800613c:	432a      	orrs	r2, r5
 800613e:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006140:	045a      	lsls	r2, r3, #17
 8006142:	d50a      	bpl.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006144:	4931      	ldr	r1, [pc, #196]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006146:	69e5      	ldr	r5, [r4, #28]
 8006148:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800614a:	0092      	lsls	r2, r2, #2
 800614c:	0892      	lsrs	r2, r2, #2
 800614e:	432a      	orrs	r2, r5
 8006150:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006152:	2280      	movs	r2, #128	@ 0x80
 8006154:	05d2      	lsls	r2, r2, #23
 8006156:	4295      	cmp	r5, r2
 8006158:	d042      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800615a:	029a      	lsls	r2, r3, #10
 800615c:	d50a      	bpl.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800615e:	492b      	ldr	r1, [pc, #172]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006160:	4e33      	ldr	r6, [pc, #204]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8006162:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8006164:	6a25      	ldr	r5, [r4, #32]
 8006166:	4032      	ands	r2, r6
 8006168:	432a      	orrs	r2, r5
 800616a:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800616c:	2280      	movs	r2, #128	@ 0x80
 800616e:	03d2      	lsls	r2, r2, #15
 8006170:	4295      	cmp	r5, r2
 8006172:	d03b      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006174:	025a      	lsls	r2, r3, #9
 8006176:	d50a      	bpl.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006178:	4d24      	ldr	r5, [pc, #144]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800617a:	4e2e      	ldr	r6, [pc, #184]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800617c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800617e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006180:	4032      	ands	r2, r6
 8006182:	430a      	orrs	r2, r1
 8006184:	656a      	str	r2, [r5, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006186:	2280      	movs	r2, #128	@ 0x80
 8006188:	0452      	lsls	r2, r2, #17
 800618a:	4291      	cmp	r1, r2
 800618c:	d034      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800618e:	051b      	lsls	r3, r3, #20
 8006190:	d50a      	bpl.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006192:	4a1e      	ldr	r2, [pc, #120]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006194:	6921      	ldr	r1, [r4, #16]
 8006196:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006198:	4c27      	ldr	r4, [pc, #156]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800619a:	4023      	ands	r3, r4
 800619c:	430b      	orrs	r3, r1
 800619e:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80061a0:	2380      	movs	r3, #128	@ 0x80
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	4299      	cmp	r1, r3
 80061a6:	d02b      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80061a8:	b002      	add	sp, #8
 80061aa:	bce0      	pop	{r5, r6, r7}
 80061ac:	46ba      	mov	sl, r7
 80061ae:	46b1      	mov	r9, r6
 80061b0:	46a8      	mov	r8, r5
 80061b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80061b4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80061b6:	4311      	orrs	r1, r2
 80061b8:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80061ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061bc:	4013      	ands	r3, r2
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80061c2:	2301      	movs	r3, #1
 80061c4:	469a      	mov	sl, r3
 80061c6:	e742      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 80061c8:	4652      	mov	r2, sl
        status = ret;
 80061ca:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061cc:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80061ce:	2a01      	cmp	r2, #1
 80061d0:	d000      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80061d2:	e788      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d4:	490d      	ldr	r1, [pc, #52]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80061d6:	4d19      	ldr	r5, [pc, #100]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80061d8:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80061da:	402a      	ands	r2, r5
 80061dc:	63ca      	str	r2, [r1, #60]	@ 0x3c
 80061de:	e782      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80061e0:	2280      	movs	r2, #128	@ 0x80
 80061e2:	68cd      	ldr	r5, [r1, #12]
 80061e4:	0252      	lsls	r2, r2, #9
 80061e6:	432a      	orrs	r2, r5
 80061e8:	60ca      	str	r2, [r1, #12]
 80061ea:	e7b6      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80061ec:	2280      	movs	r2, #128	@ 0x80
 80061ee:	68cd      	ldr	r5, [r1, #12]
 80061f0:	0452      	lsls	r2, r2, #17
 80061f2:	432a      	orrs	r2, r5
 80061f4:	60ca      	str	r2, [r1, #12]
 80061f6:	e7bd      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80061f8:	68ea      	ldr	r2, [r5, #12]
 80061fa:	4311      	orrs	r1, r2
 80061fc:	60e9      	str	r1, [r5, #12]
 80061fe:	e7c6      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006200:	2380      	movs	r3, #128	@ 0x80
 8006202:	68d1      	ldr	r1, [r2, #12]
 8006204:	025b      	lsls	r3, r3, #9
 8006206:	430b      	orrs	r3, r1
 8006208:	60d3      	str	r3, [r2, #12]
  return status;
 800620a:	e7cd      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800620c:	40021000 	.word	0x40021000
 8006210:	40007000 	.word	0x40007000
 8006214:	fffffcff 	.word	0xfffffcff
 8006218:	fffeffff 	.word	0xfffeffff
 800621c:	00001388 	.word	0x00001388
 8006220:	fffff3ff 	.word	0xfffff3ff
 8006224:	fff3ffff 	.word	0xfff3ffff
 8006228:	ffcfffff 	.word	0xffcfffff
 800622c:	ffffcfff 	.word	0xffffcfff
 8006230:	ffbfffff 	.word	0xffbfffff
 8006234:	feffffff 	.word	0xfeffffff
 8006238:	ffff3fff 	.word	0xffff3fff
 800623c:	efffffff 	.word	0xefffffff

08006240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006244:	d100      	bne.n	8006248 <HAL_TIM_Base_Init+0x8>
 8006246:	e070      	b.n	800632a <HAL_TIM_Base_Init+0xea>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006248:	233d      	movs	r3, #61	@ 0x3d
 800624a:	5cc3      	ldrb	r3, [r0, r3]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d055      	beq.n	80062fe <HAL_TIM_Base_Init+0xbe>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006252:	233d      	movs	r3, #61	@ 0x3d
 8006254:	2202      	movs	r2, #2
 8006256:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006258:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800625a:	4e35      	ldr	r6, [pc, #212]	@ (8006330 <HAL_TIM_Base_Init+0xf0>)
  tmpcr1 = TIMx->CR1;
 800625c:	681a      	ldr	r2, [r3, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800625e:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006260:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006262:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006264:	42b3      	cmp	r3, r6
 8006266:	d04f      	beq.n	8006308 <HAL_TIM_Base_Init+0xc8>
 8006268:	2680      	movs	r6, #128	@ 0x80
 800626a:	05f6      	lsls	r6, r6, #23
 800626c:	42b3      	cmp	r3, r6
 800626e:	d037      	beq.n	80062e0 <HAL_TIM_Base_Init+0xa0>
 8006270:	4e30      	ldr	r6, [pc, #192]	@ (8006334 <HAL_TIM_Base_Init+0xf4>)
 8006272:	42b3      	cmp	r3, r6
 8006274:	d034      	beq.n	80062e0 <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006276:	4e30      	ldr	r6, [pc, #192]	@ (8006338 <HAL_TIM_Base_Init+0xf8>)
 8006278:	42b3      	cmp	r3, r6
 800627a:	d035      	beq.n	80062e8 <HAL_TIM_Base_Init+0xa8>
 800627c:	4e2f      	ldr	r6, [pc, #188]	@ (800633c <HAL_TIM_Base_Init+0xfc>)
 800627e:	42b3      	cmp	r3, r6
 8006280:	d046      	beq.n	8006310 <HAL_TIM_Base_Init+0xd0>
 8006282:	4e2f      	ldr	r6, [pc, #188]	@ (8006340 <HAL_TIM_Base_Init+0x100>)
 8006284:	42b3      	cmp	r3, r6
 8006286:	d043      	beq.n	8006310 <HAL_TIM_Base_Init+0xd0>
 8006288:	4e2e      	ldr	r6, [pc, #184]	@ (8006344 <HAL_TIM_Base_Init+0x104>)
 800628a:	42b3      	cmp	r3, r6
 800628c:	d040      	beq.n	8006310 <HAL_TIM_Base_Init+0xd0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800628e:	2680      	movs	r6, #128	@ 0x80
 8006290:	43b2      	bics	r2, r6
 8006292:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006294:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006296:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006298:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800629a:	2201      	movs	r2, #1
 800629c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800629e:	6919      	ldr	r1, [r3, #16]
 80062a0:	420a      	tst	r2, r1
 80062a2:	d002      	beq.n	80062aa <HAL_TIM_Base_Init+0x6a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062a4:	6919      	ldr	r1, [r3, #16]
 80062a6:	4391      	bics	r1, r2
 80062a8:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062aa:	2301      	movs	r3, #1
 80062ac:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80062ae:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b2:	3a0a      	subs	r2, #10
 80062b4:	54a3      	strb	r3, [r4, r2]
 80062b6:	3201      	adds	r2, #1
 80062b8:	54a3      	strb	r3, [r4, r2]
 80062ba:	3201      	adds	r2, #1
 80062bc:	54a3      	strb	r3, [r4, r2]
 80062be:	3201      	adds	r2, #1
 80062c0:	54a3      	strb	r3, [r4, r2]
 80062c2:	3201      	adds	r2, #1
 80062c4:	54a3      	strb	r3, [r4, r2]
 80062c6:	3201      	adds	r2, #1
 80062c8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ca:	3201      	adds	r2, #1
 80062cc:	54a3      	strb	r3, [r4, r2]
 80062ce:	3201      	adds	r2, #1
 80062d0:	54a3      	strb	r3, [r4, r2]
 80062d2:	3201      	adds	r2, #1
 80062d4:	54a3      	strb	r3, [r4, r2]
 80062d6:	3201      	adds	r2, #1
 80062d8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80062da:	3a0a      	subs	r2, #10
 80062dc:	54a3      	strb	r3, [r4, r2]
}
 80062de:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062e0:	2670      	movs	r6, #112	@ 0x70
 80062e2:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80062e4:	68a6      	ldr	r6, [r4, #8]
 80062e6:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80062e8:	4e17      	ldr	r6, [pc, #92]	@ (8006348 <HAL_TIM_Base_Init+0x108>)
 80062ea:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ec:	6926      	ldr	r6, [r4, #16]
 80062ee:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f0:	2680      	movs	r6, #128	@ 0x80
 80062f2:	43b2      	bics	r2, r6
 80062f4:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 80062f6:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f8:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062fa:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062fc:	e7cd      	b.n	800629a <HAL_TIM_Base_Init+0x5a>
    htim->Lock = HAL_UNLOCKED;
 80062fe:	333c      	adds	r3, #60	@ 0x3c
 8006300:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8006302:	f7fd ff3d 	bl	8004180 <HAL_TIM_Base_MspInit>
 8006306:	e7a4      	b.n	8006252 <HAL_TIM_Base_Init+0x12>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006308:	2670      	movs	r6, #112	@ 0x70
 800630a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 800630c:	68a6      	ldr	r6, [r4, #8]
 800630e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8006310:	4e0d      	ldr	r6, [pc, #52]	@ (8006348 <HAL_TIM_Base_Init+0x108>)
 8006312:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006314:	6926      	ldr	r6, [r4, #16]
 8006316:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	2680      	movs	r6, #128	@ 0x80
 800631a:	43b2      	bics	r2, r6
 800631c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800631e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006320:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006322:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006324:	6962      	ldr	r2, [r4, #20]
 8006326:	631a      	str	r2, [r3, #48]	@ 0x30
 8006328:	e7b7      	b.n	800629a <HAL_TIM_Base_Init+0x5a>
    return HAL_ERROR;
 800632a:	2001      	movs	r0, #1
 800632c:	e7d7      	b.n	80062de <HAL_TIM_Base_Init+0x9e>
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40000400 	.word	0x40000400
 8006338:	40002000 	.word	0x40002000
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400
 8006344:	40014800 	.word	0x40014800
 8006348:	fffffcff 	.word	0xfffffcff

0800634c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800634c:	213d      	movs	r1, #61	@ 0x3d
{
 800634e:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8006350:	5c42      	ldrb	r2, [r0, r1]
{
 8006352:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8006354:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8006356:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8006358:	2a01      	cmp	r2, #1
 800635a:	d113      	bne.n	8006384 <HAL_TIM_Base_Start+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	3201      	adds	r2, #1
 800635e:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a10      	ldr	r2, [pc, #64]	@ (80063a4 <HAL_TIM_Base_Start+0x58>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00e      	beq.n	8006386 <HAL_TIM_Base_Start+0x3a>
 8006368:	2280      	movs	r2, #128	@ 0x80
 800636a:	05d2      	lsls	r2, r2, #23
 800636c:	4293      	cmp	r3, r2
 800636e:	d00a      	beq.n	8006386 <HAL_TIM_Base_Start+0x3a>
 8006370:	4a0d      	ldr	r2, [pc, #52]	@ (80063a8 <HAL_TIM_Base_Start+0x5c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <HAL_TIM_Base_Start+0x3a>
 8006376:	4a0d      	ldr	r2, [pc, #52]	@ (80063ac <HAL_TIM_Base_Start+0x60>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4322      	orrs	r2, r4
 8006380:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006382:	2000      	movs	r0, #0
}
 8006384:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	4909      	ldr	r1, [pc, #36]	@ (80063b0 <HAL_TIM_Base_Start+0x64>)
 800638a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	2a06      	cmp	r2, #6
 800638e:	d0f8      	beq.n	8006382 <HAL_TIM_Base_Start+0x36>
 8006390:	3907      	subs	r1, #7
 8006392:	428a      	cmp	r2, r1
 8006394:	d0f5      	beq.n	8006382 <HAL_TIM_Base_Start+0x36>
      __HAL_TIM_ENABLE(htim);
 8006396:	2101      	movs	r1, #1
 8006398:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800639a:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800639c:	430a      	orrs	r2, r1
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	e7f0      	b.n	8006384 <HAL_TIM_Base_Start+0x38>
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	40012c00 	.word	0x40012c00
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40014000 	.word	0x40014000
 80063b0:	00010007 	.word	0x00010007

080063b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80063b4:	233c      	movs	r3, #60	@ 0x3c
{
 80063b6:	b570      	push	{r4, r5, r6, lr}
 80063b8:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80063ba:	5cc0      	ldrb	r0, [r0, r3]
 80063bc:	2801      	cmp	r0, #1
 80063be:	d100      	bne.n	80063c2 <HAL_TIM_ConfigClockSource+0xe>
 80063c0:	e073      	b.n	80064aa <HAL_TIM_ConfigClockSource+0xf6>
 80063c2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80063c6:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80063c8:	3301      	adds	r3, #1
 80063ca:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80063cc:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ce:	4d51      	ldr	r5, [pc, #324]	@ (8006514 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 80063d0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80063d4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80063d6:	680b      	ldr	r3, [r1, #0]
 80063d8:	2b60      	cmp	r3, #96	@ 0x60
 80063da:	d100      	bne.n	80063de <HAL_TIM_ConfigClockSource+0x2a>
 80063dc:	e067      	b.n	80064ae <HAL_TIM_ConfigClockSource+0xfa>
 80063de:	d81d      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x68>
 80063e0:	2b40      	cmp	r3, #64	@ 0x40
 80063e2:	d100      	bne.n	80063e6 <HAL_TIM_ConfigClockSource+0x32>
 80063e4:	e07d      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x12e>
 80063e6:	d93f      	bls.n	8006468 <HAL_TIM_ConfigClockSource+0xb4>
 80063e8:	2b50      	cmp	r3, #80	@ 0x50
 80063ea:	d135      	bne.n	8006458 <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 80063ec:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80063ee:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f2:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063f4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f6:	43a6      	bics	r6, r4
 80063f8:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fa:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80063fc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fe:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006400:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006402:	240a      	movs	r4, #10
 8006404:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8006406:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006408:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800640a:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800640c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800640e:	4942      	ldr	r1, [pc, #264]	@ (8006518 <HAL_TIM_ConfigClockSource+0x164>)
 8006410:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006412:	2157      	movs	r1, #87	@ 0x57
 8006414:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006416:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006418:	2000      	movs	r0, #0
 800641a:	e01e      	b.n	800645a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 800641c:	2480      	movs	r4, #128	@ 0x80
 800641e:	0164      	lsls	r4, r4, #5
 8006420:	42a3      	cmp	r3, r4
 8006422:	d0f9      	beq.n	8006418 <HAL_TIM_ConfigClockSource+0x64>
 8006424:	2480      	movs	r4, #128	@ 0x80
 8006426:	01a4      	lsls	r4, r4, #6
 8006428:	42a3      	cmp	r3, r4
 800642a:	d12b      	bne.n	8006484 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800642c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800642e:	4b3b      	ldr	r3, [pc, #236]	@ (800651c <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006430:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006432:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006434:	688b      	ldr	r3, [r1, #8]
 8006436:	68c9      	ldr	r1, [r1, #12]
 8006438:	432b      	orrs	r3, r5
 800643a:	0209      	lsls	r1, r1, #8
 800643c:	430b      	orrs	r3, r1
 800643e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006440:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006442:	2380      	movs	r3, #128	@ 0x80
 8006444:	6881      	ldr	r1, [r0, #8]
 8006446:	01db      	lsls	r3, r3, #7
 8006448:	430b      	orrs	r3, r1
 800644a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800644c:	2000      	movs	r0, #0
 800644e:	e004      	b.n	800645a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8006450:	2110      	movs	r1, #16
 8006452:	001c      	movs	r4, r3
 8006454:	438c      	bics	r4, r1
 8006456:	d00c      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8006458:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800645a:	233d      	movs	r3, #61	@ 0x3d
 800645c:	2101      	movs	r1, #1
 800645e:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8006460:	2100      	movs	r1, #0
 8006462:	3b01      	subs	r3, #1
 8006464:	54d1      	strb	r1, [r2, r3]
}
 8006466:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006468:	2b20      	cmp	r3, #32
 800646a:	d002      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0xbe>
 800646c:	d9f0      	bls.n	8006450 <HAL_TIM_ConfigClockSource+0x9c>
 800646e:	2b30      	cmp	r3, #48	@ 0x30
 8006470:	d1f2      	bne.n	8006458 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8006472:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006474:	4c28      	ldr	r4, [pc, #160]	@ (8006518 <HAL_TIM_ConfigClockSource+0x164>)
 8006476:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006478:	430b      	orrs	r3, r1
 800647a:	2107      	movs	r1, #7
 800647c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800647e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2000      	movs	r0, #0
 8006482:	e7ea      	b.n	800645a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8006484:	2b70      	cmp	r3, #112	@ 0x70
 8006486:	d1e7      	bne.n	8006458 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8006488:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800648a:	4b24      	ldr	r3, [pc, #144]	@ (800651c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800648c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800648e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006490:	688b      	ldr	r3, [r1, #8]
 8006492:	68c9      	ldr	r1, [r1, #12]
 8006494:	432b      	orrs	r3, r5
 8006496:	0209      	lsls	r1, r1, #8
 8006498:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800649a:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800649c:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800649e:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80064a0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064a2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80064a4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2000      	movs	r0, #0
 80064a8:	e7d7      	b.n	800645a <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 80064aa:	2002      	movs	r0, #2
 80064ac:	e7db      	b.n	8006466 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ae:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 80064b0:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b2:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80064b4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b6:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 80064b8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ba:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064bc:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064be:	4e18      	ldr	r6, [pc, #96]	@ (8006520 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064c0:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c2:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064c4:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c6:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80064c8:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064ca:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80064cc:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 80064ce:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 80064d0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80064d2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80064d4:	4910      	ldr	r1, [pc, #64]	@ (8006518 <HAL_TIM_ConfigClockSource+0x164>)
 80064d6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064d8:	2167      	movs	r1, #103	@ 0x67
 80064da:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80064dc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064de:	2000      	movs	r0, #0
 80064e0:	e7bb      	b.n	800645a <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 80064e2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80064e4:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80064e6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e8:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064ea:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ec:	43a6      	bics	r6, r4
 80064ee:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f0:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80064f2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f4:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064f6:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064f8:	240a      	movs	r4, #10
 80064fa:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80064fc:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80064fe:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006500:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006502:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006504:	4904      	ldr	r1, [pc, #16]	@ (8006518 <HAL_TIM_ConfigClockSource+0x164>)
 8006506:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006508:	2147      	movs	r1, #71	@ 0x47
 800650a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800650c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2000      	movs	r0, #0
 8006510:	e7a3      	b.n	800645a <HAL_TIM_ConfigClockSource+0xa6>
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	ffce0088 	.word	0xffce0088
 8006518:	ffcfff8f 	.word	0xffcfff8f
 800651c:	ffff00ff 	.word	0xffff00ff
 8006520:	ffff0fff 	.word	0xffff0fff

08006524 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8006524:	4770      	bx	lr
 8006526:	46c0      	nop			@ (mov r8, r8)

08006528 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006528:	4770      	bx	lr
 800652a:	46c0      	nop			@ (mov r8, r8)

0800652c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800652c:	4770      	bx	lr
 800652e:	46c0      	nop			@ (mov r8, r8)

08006530 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006530:	4770      	bx	lr
 8006532:	46c0      	nop			@ (mov r8, r8)

08006534 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006534:	4770      	bx	lr
 8006536:	46c0      	nop			@ (mov r8, r8)

08006538 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006538:	2202      	movs	r2, #2
{
 800653a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 800653c:	6803      	ldr	r3, [r0, #0]
{
 800653e:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8006540:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006542:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006544:	4222      	tst	r2, r4
 8006546:	d001      	beq.n	800654c <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006548:	4232      	tst	r2, r6
 800654a:	d162      	bne.n	8006612 <HAL_TIM_IRQHandler+0xda>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800654c:	2304      	movs	r3, #4
 800654e:	4223      	tst	r3, r4
 8006550:	d001      	beq.n	8006556 <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006552:	4233      	tst	r3, r6
 8006554:	d149      	bne.n	80065ea <HAL_TIM_IRQHandler+0xb2>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006556:	2308      	movs	r3, #8
 8006558:	4223      	tst	r3, r4
 800655a:	d001      	beq.n	8006560 <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800655c:	4233      	tst	r3, r6
 800655e:	d132      	bne.n	80065c6 <HAL_TIM_IRQHandler+0x8e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006560:	2310      	movs	r3, #16
 8006562:	4223      	tst	r3, r4
 8006564:	d001      	beq.n	800656a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006566:	4233      	tst	r3, r6
 8006568:	d119      	bne.n	800659e <HAL_TIM_IRQHandler+0x66>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800656a:	2301      	movs	r3, #1
 800656c:	4223      	tst	r3, r4
 800656e:	d001      	beq.n	8006574 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006570:	4233      	tst	r3, r6
 8006572:	d16a      	bne.n	800664a <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006574:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006576:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006578:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800657a:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800657c:	4027      	ands	r7, r4
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800657e:	421c      	tst	r4, r3
 8006580:	d056      	beq.n	8006630 <HAL_TIM_IRQHandler+0xf8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006582:	0633      	lsls	r3, r6, #24
 8006584:	d469      	bmi.n	800665a <HAL_TIM_IRQHandler+0x122>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006586:	2340      	movs	r3, #64	@ 0x40
 8006588:	4223      	tst	r3, r4
 800658a:	d002      	beq.n	8006592 <HAL_TIM_IRQHandler+0x5a>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800658c:	4233      	tst	r3, r6
 800658e:	d000      	beq.n	8006592 <HAL_TIM_IRQHandler+0x5a>
 8006590:	e073      	b.n	800667a <HAL_TIM_IRQHandler+0x142>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006592:	2320      	movs	r3, #32
 8006594:	4223      	tst	r3, r4
 8006596:	d001      	beq.n	800659c <HAL_TIM_IRQHandler+0x64>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006598:	4233      	tst	r3, r6
 800659a:	d14e      	bne.n	800663a <HAL_TIM_IRQHandler+0x102>
}
 800659c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800659e:	2211      	movs	r2, #17
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	4252      	negs	r2, r2
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065a6:	3219      	adds	r2, #25
 80065a8:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	23c0      	movs	r3, #192	@ 0xc0
 80065ae:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80065b0:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065b2:	421a      	tst	r2, r3
 80065b4:	d172      	bne.n	800669c <HAL_TIM_IRQHandler+0x164>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	f7ff ffb7 	bl	8006528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ba:	0028      	movs	r0, r5
 80065bc:	f7ff ffb8 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c0:	2300      	movs	r3, #0
 80065c2:	772b      	strb	r3, [r5, #28]
 80065c4:	e7d1      	b.n	800656a <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065c6:	2209      	movs	r2, #9
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	4252      	negs	r2, r2
 80065cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ce:	320d      	adds	r2, #13
 80065d0:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065d2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80065d4:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065d6:	079b      	lsls	r3, r3, #30
 80065d8:	d15d      	bne.n	8006696 <HAL_TIM_IRQHandler+0x15e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	f7ff ffa5 	bl	8006528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065de:	0028      	movs	r0, r5
 80065e0:	f7ff ffa6 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e4:	2300      	movs	r3, #0
 80065e6:	772b      	strb	r3, [r5, #28]
 80065e8:	e7ba      	b.n	8006560 <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065ea:	2205      	movs	r2, #5
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	4252      	negs	r2, r2
 80065f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065f2:	3207      	adds	r2, #7
 80065f4:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065f6:	699a      	ldr	r2, [r3, #24]
 80065f8:	23c0      	movs	r3, #192	@ 0xc0
 80065fa:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80065fc:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065fe:	421a      	tst	r2, r3
 8006600:	d146      	bne.n	8006690 <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006602:	f7ff ff91 	bl	8006528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006606:	0028      	movs	r0, r5
 8006608:	f7ff ff92 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660c:	2300      	movs	r3, #0
 800660e:	772b      	strb	r3, [r5, #28]
 8006610:	e7a1      	b.n	8006556 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006612:	3a05      	subs	r2, #5
 8006614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006616:	3204      	adds	r2, #4
 8006618:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	079b      	lsls	r3, r3, #30
 800661e:	d134      	bne.n	800668a <HAL_TIM_IRQHandler+0x152>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006620:	f7ff ff82 	bl	8006528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006624:	0028      	movs	r0, r5
 8006626:	f7ff ff83 	bl	8006530 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662a:	2300      	movs	r3, #0
 800662c:	772b      	strb	r3, [r5, #28]
 800662e:	e78d      	b.n	800654c <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006630:	2f00      	cmp	r7, #0
 8006632:	d0a8      	beq.n	8006586 <HAL_TIM_IRQHandler+0x4e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006634:	0633      	lsls	r3, r6, #24
 8006636:	d5a6      	bpl.n	8006586 <HAL_TIM_IRQHandler+0x4e>
 8006638:	e018      	b.n	800666c <HAL_TIM_IRQHandler+0x134>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800663a:	2221      	movs	r2, #33	@ 0x21
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8006640:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006642:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006644:	f000 f870 	bl	8006728 <HAL_TIMEx_CommutCallback>
}
 8006648:	e7a8      	b.n	800659c <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800664a:	2202      	movs	r2, #2
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8006650:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006652:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006654:	f7ff ff66 	bl	8006524 <HAL_TIM_PeriodElapsedCallback>
 8006658:	e78c      	b.n	8006574 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800665a:	682b      	ldr	r3, [r5, #0]
 800665c:	4a11      	ldr	r2, [pc, #68]	@ (80066a4 <HAL_TIM_IRQHandler+0x16c>)
      HAL_TIMEx_BreakCallback(htim);
 800665e:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006660:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006662:	f000 f863 	bl	800672c <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006666:	2f00      	cmp	r7, #0
 8006668:	d100      	bne.n	800666c <HAL_TIM_IRQHandler+0x134>
 800666a:	e78c      	b.n	8006586 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	4a0e      	ldr	r2, [pc, #56]	@ (80066a8 <HAL_TIM_IRQHandler+0x170>)
      HAL_TIMEx_Break2Callback(htim);
 8006670:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006672:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006674:	f000 f85c 	bl	8006730 <HAL_TIMEx_Break2Callback>
 8006678:	e785      	b.n	8006586 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800667a:	2241      	movs	r2, #65	@ 0x41
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8006680:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006682:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006684:	f7ff ff56 	bl	8006534 <HAL_TIM_TriggerCallback>
 8006688:	e783      	b.n	8006592 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 800668a:	f7ff ff4f 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 800668e:	e7cc      	b.n	800662a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8006690:	f7ff ff4c 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 8006694:	e7ba      	b.n	800660c <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 8006696:	f7ff ff49 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 800669a:	e7a3      	b.n	80065e4 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_IC_CaptureCallback(htim);
 800669c:	f7ff ff46 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 80066a0:	e78e      	b.n	80065c0 <HAL_TIM_IRQHandler+0x88>
 80066a2:	46c0      	nop			@ (mov r8, r8)
 80066a4:	ffffdf7f 	.word	0xffffdf7f
 80066a8:	fffffeff 	.word	0xfffffeff

080066ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ac:	233c      	movs	r3, #60	@ 0x3c
{
 80066ae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80066b0:	5cc3      	ldrb	r3, [r0, r3]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d02d      	beq.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b6:	233d      	movs	r3, #61	@ 0x3d
 80066b8:	2202      	movs	r2, #2
 80066ba:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066bc:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066be:	4d16      	ldr	r5, [pc, #88]	@ (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 = htim->Instance->CR2;
 80066c0:	685a      	ldr	r2, [r3, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066c2:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80066c4:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066c6:	42ab      	cmp	r3, r5
 80066c8:	d01a      	beq.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  tmpcr2 &= ~TIM_CR2_MMS;
 80066ca:	2570      	movs	r5, #112	@ 0x70
 80066cc:	43aa      	bics	r2, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ce:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d2:	2280      	movs	r2, #128	@ 0x80
 80066d4:	05d2      	lsls	r2, r2, #23
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d005      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80066da:	4a10      	ldr	r2, [pc, #64]	@ (800671c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d002      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80066e0:	4a0f      	ldr	r2, [pc, #60]	@ (8006720 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d104      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e6:	2280      	movs	r2, #128	@ 0x80
 80066e8:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ea:	688a      	ldr	r2, [r1, #8]
 80066ec:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ee:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066f0:	233d      	movs	r3, #61	@ 0x3d
 80066f2:	2201      	movs	r2, #1
 80066f4:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80066f6:	2200      	movs	r2, #0
 80066f8:	3b01      	subs	r3, #1
 80066fa:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80066fc:	2000      	movs	r0, #0
}
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006700:	4d08      	ldr	r5, [pc, #32]	@ (8006724 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8006702:	402a      	ands	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006704:	684d      	ldr	r5, [r1, #4]
 8006706:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006708:	2570      	movs	r5, #112	@ 0x70
 800670a:	43aa      	bics	r2, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800670c:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 800670e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006710:	e7e9      	b.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  __HAL_LOCK(htim);
 8006712:	2002      	movs	r0, #2
 8006714:	e7f3      	b.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40000400 	.word	0x40000400
 8006720:	40014000 	.word	0x40014000
 8006724:	ff0fffff 	.word	0xff0fffff

08006728 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006728:	4770      	bx	lr
 800672a:	46c0      	nop			@ (mov r8, r8)

0800672c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800672c:	4770      	bx	lr
 800672e:	46c0      	nop			@ (mov r8, r8)

08006730 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8006730:	4770      	bx	lr
 8006732:	46c0      	nop			@ (mov r8, r8)

08006734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	4657      	mov	r7, sl
 8006738:	464e      	mov	r6, r9
 800673a:	4645      	mov	r5, r8
 800673c:	46de      	mov	lr, fp
 800673e:	b5e0      	push	{r5, r6, r7, lr}
 8006740:	001f      	movs	r7, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006742:	2388      	movs	r3, #136	@ 0x88
 8006744:	58c3      	ldr	r3, [r0, r3]
{
 8006746:	0005      	movs	r5, r0
 8006748:	000e      	movs	r6, r1
 800674a:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800674c:	2b20      	cmp	r3, #32
 800674e:	d16a      	bne.n	8006826 <HAL_UART_Transmit+0xf2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006750:	2900      	cmp	r1, #0
 8006752:	d048      	beq.n	80067e6 <HAL_UART_Transmit+0xb2>
 8006754:	2a00      	cmp	r2, #0
 8006756:	d046      	beq.n	80067e6 <HAL_UART_Transmit+0xb2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006758:	2380      	movs	r3, #128	@ 0x80
 800675a:	6882      	ldr	r2, [r0, #8]
 800675c:	015b      	lsls	r3, r3, #5
 800675e:	429a      	cmp	r2, r3
 8006760:	d104      	bne.n	800676c <HAL_UART_Transmit+0x38>
 8006762:	6903      	ldr	r3, [r0, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006768:	07cb      	lsls	r3, r1, #31
 800676a:	d43c      	bmi.n	80067e6 <HAL_UART_Transmit+0xb2>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	2390      	movs	r3, #144	@ 0x90
 800676e:	2200      	movs	r2, #0
 8006770:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006772:	3b08      	subs	r3, #8
 8006774:	3221      	adds	r2, #33	@ 0x21
 8006776:	50ea      	str	r2, [r5, r3]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006778:	f7fd fe9c 	bl	80044b4 <HAL_GetTick>

    huart->TxXferSize  = Size;
 800677c:	2354      	movs	r3, #84	@ 0x54
 800677e:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 8006780:	3302      	adds	r3, #2
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8006782:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 8006784:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 800678a:	4681      	mov	r9, r0
      pdata16bits = NULL;
 800678c:	468a      	mov	sl, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678e:	015b      	lsls	r3, r3, #5
 8006790:	429a      	cmp	r2, r3
 8006792:	d05d      	beq.n	8006850 <HAL_UART_Transmit+0x11c>
    }

    while (huart->TxXferCount > 0U)
 8006794:	2356      	movs	r3, #86	@ 0x56
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
        pdata8bits++;
      }
      huart->TxXferCount--;
 8006796:	2156      	movs	r1, #86	@ 0x56
    while (huart->TxXferCount > 0U)
 8006798:	5aea      	ldrh	r2, [r5, r3]
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	2480      	movs	r4, #128	@ 0x80
      huart->TxXferCount--;
 800679c:	4688      	mov	r8, r1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679e:	682b      	ldr	r3, [r5, #0]
    while (huart->TxXferCount > 0U)
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	d014      	beq.n	80067ce <HAL_UART_Transmit+0x9a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a4:	2280      	movs	r2, #128	@ 0x80
 80067a6:	4693      	mov	fp, r2
 80067a8:	1c7a      	adds	r2, r7, #1
 80067aa:	d12d      	bne.n	8006808 <HAL_UART_Transmit+0xd4>
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	4214      	tst	r4, r2
 80067b0:	d0fc      	beq.n	80067ac <HAL_UART_Transmit+0x78>
      if (pdata8bits == NULL)
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	d02e      	beq.n	8006814 <HAL_UART_Transmit+0xe0>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067b6:	7832      	ldrb	r2, [r6, #0]
        pdata8bits++;
 80067b8:	3601      	adds	r6, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ba:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 80067bc:	4642      	mov	r2, r8
 80067be:	4641      	mov	r1, r8
 80067c0:	5aaa      	ldrh	r2, [r5, r2]
 80067c2:	3a01      	subs	r2, #1
 80067c4:	b292      	uxth	r2, r2
 80067c6:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 80067c8:	5a6a      	ldrh	r2, [r5, r1]
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	d1ea      	bne.n	80067a4 <HAL_UART_Transmit+0x70>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ce:	2440      	movs	r4, #64	@ 0x40
 80067d0:	1c7a      	adds	r2, r7, #1
 80067d2:	d139      	bne.n	8006848 <HAL_UART_Transmit+0x114>
 80067d4:	2140      	movs	r1, #64	@ 0x40
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	4211      	tst	r1, r2
 80067da:	d0fc      	beq.n	80067d6 <HAL_UART_Transmit+0xa2>
    huart->gState = HAL_UART_STATE_READY;
 80067dc:	2388      	movs	r3, #136	@ 0x88
 80067de:	2220      	movs	r2, #32
    return HAL_OK;
 80067e0:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 80067e2:	50ea      	str	r2, [r5, r3]
    return HAL_OK;
 80067e4:	e000      	b.n	80067e8 <HAL_UART_Transmit+0xb4>
      return  HAL_ERROR;
 80067e6:	2001      	movs	r0, #1
}
 80067e8:	bcf0      	pop	{r4, r5, r6, r7}
 80067ea:	46bb      	mov	fp, r7
 80067ec:	46b2      	mov	sl, r6
 80067ee:	46a9      	mov	r9, r5
 80067f0:	46a0      	mov	r8, r4
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f4:	f7fd fe5e 	bl	80044b4 <HAL_GetTick>
 80067f8:	464b      	mov	r3, r9
 80067fa:	1ac0      	subs	r0, r0, r3
 80067fc:	4287      	cmp	r7, r0
 80067fe:	d314      	bcc.n	800682a <HAL_UART_Transmit+0xf6>
 8006800:	2f00      	cmp	r7, #0
 8006802:	d012      	beq.n	800682a <HAL_UART_Transmit+0xf6>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006808:	4659      	mov	r1, fp
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	4211      	tst	r1, r2
 800680e:	d0f1      	beq.n	80067f4 <HAL_UART_Transmit+0xc0>
      if (pdata8bits == NULL)
 8006810:	2e00      	cmp	r6, #0
 8006812:	d1d0      	bne.n	80067b6 <HAL_UART_Transmit+0x82>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006814:	4652      	mov	r2, sl
 8006816:	8812      	ldrh	r2, [r2, #0]
 8006818:	05d2      	lsls	r2, r2, #23
 800681a:	0dd2      	lsrs	r2, r2, #23
 800681c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800681e:	2202      	movs	r2, #2
 8006820:	4694      	mov	ip, r2
 8006822:	44e2      	add	sl, ip
      huart->TxXferCount--;
 8006824:	e7ca      	b.n	80067bc <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8006826:	2002      	movs	r0, #2
 8006828:	e7de      	b.n	80067e8 <HAL_UART_Transmit+0xb4>
      huart->gState = HAL_UART_STATE_READY;
 800682a:	2388      	movs	r3, #136	@ 0x88
 800682c:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 800682e:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8006830:	50ea      	str	r2, [r5, r3]
      return HAL_TIMEOUT;
 8006832:	e7d9      	b.n	80067e8 <HAL_UART_Transmit+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006834:	f7fd fe3e 	bl	80044b4 <HAL_GetTick>
 8006838:	464b      	mov	r3, r9
 800683a:	1ac0      	subs	r0, r0, r3
 800683c:	4287      	cmp	r7, r0
 800683e:	d3f4      	bcc.n	800682a <HAL_UART_Transmit+0xf6>
 8006840:	2f00      	cmp	r7, #0
 8006842:	d0f2      	beq.n	800682a <HAL_UART_Transmit+0xf6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	421c      	tst	r4, r3
 800684c:	d0f2      	beq.n	8006834 <HAL_UART_Transmit+0x100>
 800684e:	e7c5      	b.n	80067dc <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006850:	692b      	ldr	r3, [r5, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d19e      	bne.n	8006794 <HAL_UART_Transmit+0x60>
 8006856:	46b2      	mov	sl, r6
      pdata8bits  = NULL;
 8006858:	2600      	movs	r6, #0
 800685a:	e79b      	b.n	8006794 <HAL_UART_Transmit+0x60>

0800685c <HAL_UART_Receive_DMA>:
{
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	000d      	movs	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8006860:	218c      	movs	r1, #140	@ 0x8c
 8006862:	5841      	ldr	r1, [r0, r1]
{
 8006864:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006866:	2920      	cmp	r1, #32
 8006868:	d160      	bne.n	800692c <HAL_UART_Receive_DMA+0xd0>
    if ((pData == NULL) || (Size == 0U))
 800686a:	2d00      	cmp	r5, #0
 800686c:	d041      	beq.n	80068f2 <HAL_UART_Receive_DMA+0x96>
 800686e:	2a00      	cmp	r2, #0
 8006870:	d03f      	beq.n	80068f2 <HAL_UART_Receive_DMA+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006872:	2380      	movs	r3, #128	@ 0x80
 8006874:	6881      	ldr	r1, [r0, #8]
 8006876:	015b      	lsls	r3, r3, #5
 8006878:	4299      	cmp	r1, r3
 800687a:	d104      	bne.n	8006886 <HAL_UART_Receive_DMA+0x2a>
 800687c:	6903      	ldr	r3, [r0, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_UART_Receive_DMA+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006882:	07eb      	lsls	r3, r5, #31
 8006884:	d435      	bmi.n	80068f2 <HAL_UART_Receive_DMA+0x96>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006888:	4930      	ldr	r1, [pc, #192]	@ (800694c <HAL_UART_Receive_DMA+0xf0>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	428b      	cmp	r3, r1
 8006890:	d00f      	beq.n	80068b2 <HAL_UART_Receive_DMA+0x56>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	d50c      	bpl.n	80068b2 <HAL_UART_Receive_DMA+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006898:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689c:	2301      	movs	r3, #1
 800689e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068a2:	2380      	movs	r3, #128	@ 0x80
 80068a4:	6821      	ldr	r1, [r4, #0]
 80068a6:	04db      	lsls	r3, r3, #19
 80068a8:	680e      	ldr	r6, [r1, #0]
 80068aa:	4333      	orrs	r3, r6
 80068ac:	600b      	str	r3, [r1, #0]
 80068ae:	f380 8810 	msr	PRIMASK, r0
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr = pData;
  huart->RxXferSize = Size;
 80068b2:	235c      	movs	r3, #92	@ 0x5c
  huart->pRxBuffPtr = pData;
 80068b4:	65a5      	str	r5, [r4, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068b6:	2122      	movs	r1, #34	@ 0x22
  huart->RxXferSize = Size;
 80068b8:	52e2      	strh	r2, [r4, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ba:	2790      	movs	r7, #144	@ 0x90
 80068bc:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068be:	268c      	movs	r6, #140	@ 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c0:	51e3      	str	r3, [r4, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068c2:	51a1      	str	r1, [r4, r6]

  if (huart->hdmarx != NULL)
 80068c4:	315e      	adds	r1, #94	@ 0x5e
 80068c6:	5860      	ldr	r0, [r4, r1]
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d014      	beq.n	80068f6 <HAL_UART_Receive_DMA+0x9a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068cc:	4920      	ldr	r1, [pc, #128]	@ (8006950 <HAL_UART_Receive_DMA+0xf4>)

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80068ce:	6383      	str	r3, [r0, #56]	@ 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068d0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068d2:	4920      	ldr	r1, [pc, #128]	@ (8006954 <HAL_UART_Receive_DMA+0xf8>)

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068d4:	0013      	movs	r3, r2
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068d6:	6301      	str	r1, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068d8:	491f      	ldr	r1, [pc, #124]	@ (8006958 <HAL_UART_Receive_DMA+0xfc>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068da:	002a      	movs	r2, r5
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068dc:	6341      	str	r1, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068de:	6821      	ldr	r1, [r4, #0]
 80068e0:	3124      	adds	r1, #36	@ 0x24
 80068e2:	f7fe fbdf 	bl	80050a4 <HAL_DMA_Start_IT>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_Receive_DMA+0x9a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068ea:	2310      	movs	r3, #16
 80068ec:	51e3      	str	r3, [r4, r7]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ee:	3310      	adds	r3, #16
 80068f0:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 80068f2:	2001      	movs	r0, #1
 80068f4:	e019      	b.n	800692a <HAL_UART_Receive_DMA+0xce>
      return HAL_ERROR;
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d119      	bne.n	8006930 <HAL_UART_Receive_DMA+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006900:	2301      	movs	r3, #1
 8006902:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	688a      	ldr	r2, [r1, #8]
 800690a:	431a      	orrs	r2, r3
 800690c:	608a      	str	r2, [r1, #8]
 800690e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006912:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006916:	f383 8810 	msr	PRIMASK, r3

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800691a:	2040      	movs	r0, #64	@ 0x40
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	6893      	ldr	r3, [r2, #8]
 8006920:	4303      	orrs	r3, r0
 8006922:	6093      	str	r3, [r2, #8]
 8006924:	f381 8810 	msr	PRIMASK, r1

  return HAL_OK;
 8006928:	2000      	movs	r0, #0
}
 800692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800692c:	2002      	movs	r0, #2
 800692e:	e7fc      	b.n	800692a <HAL_UART_Receive_DMA+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006930:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006934:	2301      	movs	r3, #1
 8006936:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	33ff      	adds	r3, #255	@ 0xff
 800693e:	6810      	ldr	r0, [r2, #0]
 8006940:	4303      	orrs	r3, r0
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	f381 8810 	msr	PRIMASK, r1
}
 8006948:	e7d8      	b.n	80068fc <HAL_UART_Receive_DMA+0xa0>
 800694a:	46c0      	nop			@ (mov r8, r8)
 800694c:	40008000 	.word	0x40008000
 8006950:	08006e4d 	.word	0x08006e4d
 8006954:	08006e2d 	.word	0x08006e2d
 8006958:	08006969 	.word	0x08006969

0800695c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800695c:	4770      	bx	lr
 800695e:	46c0      	nop			@ (mov r8, r8)

08006960 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006960:	4770      	bx	lr
 8006962:	46c0      	nop			@ (mov r8, r8)

08006964 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006964:	4770      	bx	lr
 8006966:	46c0      	nop			@ (mov r8, r8)

08006968 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800696a:	2188      	movs	r1, #136	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800696c:	238c      	movs	r3, #140	@ 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800696e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006970:	5845      	ldr	r5, [r0, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006972:	58c4      	ldr	r4, [r0, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006974:	6803      	ldr	r3, [r0, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	0612      	lsls	r2, r2, #24
 800697a:	d501      	bpl.n	8006980 <UART_DMAError+0x18>
 800697c:	2d21      	cmp	r5, #33	@ 0x21
 800697e:	d00c      	beq.n	800699a <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	065b      	lsls	r3, r3, #25
 8006984:	d501      	bpl.n	800698a <UART_DMAError+0x22>
 8006986:	2c22      	cmp	r4, #34	@ 0x22
 8006988:	d025      	beq.n	80069d6 <UART_DMAError+0x6e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800698a:	2290      	movs	r2, #144	@ 0x90
 800698c:	2110      	movs	r1, #16
 800698e:	5883      	ldr	r3, [r0, r2]
 8006990:	430b      	orrs	r3, r1
 8006992:	5083      	str	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006994:	f7ff ffe6 	bl	8006964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->TxXferCount = 0U;
 800699a:	2356      	movs	r3, #86	@ 0x56
 800699c:	2200      	movs	r2, #0
 800699e:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a4:	3201      	adds	r2, #1
 80069a6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80069aa:	27c0      	movs	r7, #192	@ 0xc0
 80069ac:	6805      	ldr	r5, [r0, #0]
 80069ae:	682b      	ldr	r3, [r5, #0]
 80069b0:	43bb      	bics	r3, r7
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069bc:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80069c0:	6802      	ldr	r2, [r0, #0]
 80069c2:	4e1c      	ldr	r6, [pc, #112]	@ (8006a34 <UART_DMAError+0xcc>)
 80069c4:	6893      	ldr	r3, [r2, #8]
 80069c6:	4033      	ands	r3, r6
 80069c8:	6093      	str	r3, [r2, #8]
 80069ca:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	2320      	movs	r3, #32
 80069d0:	5043      	str	r3, [r0, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80069d2:	6803      	ldr	r3, [r0, #0]
}
 80069d4:	e7d4      	b.n	8006980 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80069d6:	235e      	movs	r3, #94	@ 0x5e
 80069d8:	2200      	movs	r2, #0
 80069da:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069dc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e0:	3201      	adds	r2, #1
 80069e2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069e6:	6801      	ldr	r1, [r0, #0]
 80069e8:	4d13      	ldr	r5, [pc, #76]	@ (8006a38 <UART_DMAError+0xd0>)
 80069ea:	680b      	ldr	r3, [r1, #0]
 80069ec:	402b      	ands	r3, r5
 80069ee:	600b      	str	r3, [r1, #0]
 80069f0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069fc:	6802      	ldr	r2, [r0, #0]
 80069fe:	4c0f      	ldr	r4, [pc, #60]	@ (8006a3c <UART_DMAError+0xd4>)
 8006a00:	6893      	ldr	r3, [r2, #8]
 8006a02:	4023      	ands	r3, r4
 8006a04:	6093      	str	r3, [r2, #8]
 8006a06:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10a      	bne.n	8006a26 <UART_DMAError+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a14:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a18:	2410      	movs	r4, #16
 8006a1a:	6802      	ldr	r2, [r0, #0]
 8006a1c:	6813      	ldr	r3, [r2, #0]
 8006a1e:	43a3      	bics	r3, r4
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8006a26:	238c      	movs	r3, #140	@ 0x8c
 8006a28:	2220      	movs	r2, #32
 8006a2a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	66c3      	str	r3, [r0, #108]	@ 0x6c
  huart->RxISR = NULL;
 8006a30:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8006a32:	e7aa      	b.n	800698a <UART_DMAError+0x22>
 8006a34:	ff7fffff 	.word	0xff7fffff
 8006a38:	fffffedf 	.word	0xfffffedf
 8006a3c:	effffffe 	.word	0xeffffffe

08006a40 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	225e      	movs	r2, #94	@ 0x5e
{
 8006a44:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a46:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8006a48:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8006a4a:	3a08      	subs	r2, #8
 8006a4c:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a4e:	f7ff ff89 	bl	8006964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a52:	bd10      	pop	{r4, pc}

08006a54 <HAL_UARTEx_RxEventCallback>:
}
 8006a54:	4770      	bx	lr
 8006a56:	46c0      	nop			@ (mov r8, r8)

08006a58 <HAL_UART_IRQHandler>:
{
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5a:	4645      	mov	r5, r8
 8006a5c:	46de      	mov	lr, fp
 8006a5e:	4657      	mov	r7, sl
 8006a60:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a62:	6802      	ldr	r2, [r0, #0]
{
 8006a64:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a66:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a68:	4dae      	ldr	r5, [pc, #696]	@ (8006d24 <HAL_UART_IRQHandler+0x2cc>)
{
 8006a6a:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a6c:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a6e:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8006a70:	422b      	tst	r3, r5
 8006a72:	d138      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x8e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a74:	2520      	movs	r5, #32
 8006a76:	421d      	tst	r5, r3
 8006a78:	d006      	beq.n	8006a88 <HAL_UART_IRQHandler+0x30>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a7a:	2680      	movs	r6, #128	@ 0x80
 8006a7c:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a7e:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a80:	4006      	ands	r6, r0
 8006a82:	4335      	orrs	r5, r6
 8006a84:	d000      	beq.n	8006a88 <HAL_UART_IRQHandler+0x30>
 8006a86:	e115      	b.n	8006cb4 <HAL_UART_IRQHandler+0x25c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8006a8a:	2d01      	cmp	r5, #1
 8006a8c:	d100      	bne.n	8006a90 <HAL_UART_IRQHandler+0x38>
 8006a8e:	e0d8      	b.n	8006c42 <HAL_UART_IRQHandler+0x1ea>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a90:	2580      	movs	r5, #128	@ 0x80
 8006a92:	036d      	lsls	r5, r5, #13
 8006a94:	422b      	tst	r3, r5
 8006a96:	d11f      	bne.n	8006ad8 <HAL_UART_IRQHandler+0x80>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a98:	2280      	movs	r2, #128	@ 0x80
 8006a9a:	421a      	tst	r2, r3
 8006a9c:	d006      	beq.n	8006aac <HAL_UART_IRQHandler+0x54>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a9e:	2580      	movs	r5, #128	@ 0x80
 8006aa0:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006aa2:	400a      	ands	r2, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006aa4:	4028      	ands	r0, r5
 8006aa6:	4302      	orrs	r2, r0
 8006aa8:	d000      	beq.n	8006aac <HAL_UART_IRQHandler+0x54>
 8006aaa:	e10a      	b.n	8006cc2 <HAL_UART_IRQHandler+0x26a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006aac:	2240      	movs	r2, #64	@ 0x40
 8006aae:	421a      	tst	r2, r3
 8006ab0:	d002      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x60>
 8006ab2:	420a      	tst	r2, r1
 8006ab4:	d000      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x60>
 8006ab6:	e114      	b.n	8006ce2 <HAL_UART_IRQHandler+0x28a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ab8:	021a      	lsls	r2, r3, #8
 8006aba:	d502      	bpl.n	8006ac2 <HAL_UART_IRQHandler+0x6a>
 8006abc:	004a      	lsls	r2, r1, #1
 8006abe:	d500      	bpl.n	8006ac2 <HAL_UART_IRQHandler+0x6a>
 8006ac0:	e123      	b.n	8006d0a <HAL_UART_IRQHandler+0x2b2>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ac2:	01db      	lsls	r3, r3, #7
 8006ac4:	d502      	bpl.n	8006acc <HAL_UART_IRQHandler+0x74>
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	da00      	bge.n	8006acc <HAL_UART_IRQHandler+0x74>
 8006aca:	e122      	b.n	8006d12 <HAL_UART_IRQHandler+0x2ba>
}
 8006acc:	bcf0      	pop	{r4, r5, r6, r7}
 8006ace:	46bb      	mov	fp, r7
 8006ad0:	46b2      	mov	sl, r6
 8006ad2:	46a9      	mov	r9, r5
 8006ad4:	46a0      	mov	r8, r4
 8006ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ad8:	0246      	lsls	r6, r0, #9
 8006ada:	d5dd      	bpl.n	8006a98 <HAL_UART_IRQHandler+0x40>
    HAL_UARTEx_WakeupCallback(huart);
 8006adc:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ade:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006ae0:	f000 fd0e 	bl	8007500 <HAL_UARTEx_WakeupCallback>
    return;
 8006ae4:	e7f2      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ae6:	4e90      	ldr	r6, [pc, #576]	@ (8006d28 <HAL_UART_IRQHandler+0x2d0>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ae8:	4d90      	ldr	r5, [pc, #576]	@ (8006d2c <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006aea:	4006      	ands	r6, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006aec:	400d      	ands	r5, r1
 8006aee:	4335      	orrs	r5, r6
 8006af0:	d0ca      	beq.n	8006a88 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006af2:	2501      	movs	r5, #1
 8006af4:	421d      	tst	r5, r3
 8006af6:	d008      	beq.n	8006b0a <HAL_UART_IRQHandler+0xb2>
 8006af8:	05cf      	lsls	r7, r1, #23
 8006afa:	d506      	bpl.n	8006b0a <HAL_UART_IRQHandler+0xb2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006afc:	2790      	movs	r7, #144	@ 0x90
 8006afe:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b00:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b02:	59e7      	ldr	r7, [r4, r7]
 8006b04:	433d      	orrs	r5, r7
 8006b06:	4667      	mov	r7, ip
 8006b08:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b0a:	2504      	movs	r5, #4
 8006b0c:	002f      	movs	r7, r5
 8006b0e:	401f      	ands	r7, r3
 8006b10:	46bc      	mov	ip, r7
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b12:	2702      	movs	r7, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b14:	46a9      	mov	r9, r5
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b16:	421f      	tst	r7, r3
 8006b18:	d100      	bne.n	8006b1c <HAL_UART_IRQHandler+0xc4>
 8006b1a:	e0c3      	b.n	8006ca4 <HAL_UART_IRQHandler+0x24c>
 8006b1c:	07c5      	lsls	r5, r0, #31
 8006b1e:	d516      	bpl.n	8006b4e <HAL_UART_IRQHandler+0xf6>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b20:	2590      	movs	r5, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b22:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b24:	5967      	ldr	r7, [r4, r5]
 8006b26:	46a8      	mov	r8, r5
 8006b28:	464d      	mov	r5, r9
 8006b2a:	433d      	orrs	r5, r7
 8006b2c:	4647      	mov	r7, r8
 8006b2e:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b30:	4665      	mov	r5, ip
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	d00b      	beq.n	8006b4e <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b36:	2504      	movs	r5, #4
 8006b38:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b3a:	358c      	adds	r5, #140	@ 0x8c
 8006b3c:	46a9      	mov	r9, r5
 8006b3e:	5965      	ldr	r5, [r4, r5]
 8006b40:	46a8      	mov	r8, r5
 8006b42:	2502      	movs	r5, #2
 8006b44:	4647      	mov	r7, r8
 8006b46:	432f      	orrs	r7, r5
 8006b48:	003d      	movs	r5, r7
 8006b4a:	464f      	mov	r7, r9
 8006b4c:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b4e:	2708      	movs	r7, #8
 8006b50:	421f      	tst	r7, r3
 8006b52:	d008      	beq.n	8006b66 <HAL_UART_IRQHandler+0x10e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b54:	2520      	movs	r5, #32
 8006b56:	400d      	ands	r5, r1
 8006b58:	4335      	orrs	r5, r6
 8006b5a:	d004      	beq.n	8006b66 <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b5c:	2690      	movs	r6, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b5e:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b60:	59a5      	ldr	r5, [r4, r6]
 8006b62:	433d      	orrs	r5, r7
 8006b64:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b66:	2580      	movs	r5, #128	@ 0x80
 8006b68:	012d      	lsls	r5, r5, #4
 8006b6a:	422b      	tst	r3, r5
 8006b6c:	d007      	beq.n	8006b7e <HAL_UART_IRQHandler+0x126>
 8006b6e:	014e      	lsls	r6, r1, #5
 8006b70:	d505      	bpl.n	8006b7e <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b72:	2690      	movs	r6, #144	@ 0x90
 8006b74:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b76:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b78:	59a5      	ldr	r5, [r4, r6]
 8006b7a:	433d      	orrs	r5, r7
 8006b7c:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7e:	2590      	movs	r5, #144	@ 0x90
 8006b80:	5965      	ldr	r5, [r4, r5]
 8006b82:	2d00      	cmp	r5, #0
 8006b84:	d0a2      	beq.n	8006acc <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b86:	2520      	movs	r5, #32
 8006b88:	421d      	tst	r5, r3
 8006b8a:	d006      	beq.n	8006b9a <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b8c:	2380      	movs	r3, #128	@ 0x80
 8006b8e:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b90:	400d      	ands	r5, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b92:	4003      	ands	r3, r0
 8006b94:	431d      	orrs	r5, r3
 8006b96:	d000      	beq.n	8006b9a <HAL_UART_IRQHandler+0x142>
 8006b98:	e097      	b.n	8006cca <HAL_UART_IRQHandler+0x272>
      errorcode = huart->ErrorCode;
 8006b9a:	2690      	movs	r6, #144	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b9c:	2540      	movs	r5, #64	@ 0x40
      errorcode = huart->ErrorCode;
 8006b9e:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ba0:	6893      	ldr	r3, [r2, #8]
 8006ba2:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ba4:	2328      	movs	r3, #40	@ 0x28
 8006ba6:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ba8:	431d      	orrs	r5, r3
 8006baa:	d100      	bne.n	8006bae <HAL_UART_IRQHandler+0x156>
 8006bac:	e0b5      	b.n	8006d1a <HAL_UART_IRQHandler+0x2c2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bb8:	6821      	ldr	r1, [r4, #0]
 8006bba:	4d5d      	ldr	r5, [pc, #372]	@ (8006d30 <HAL_UART_IRQHandler+0x2d8>)
 8006bbc:	680b      	ldr	r3, [r1, #0]
 8006bbe:	402b      	ands	r3, r5
 8006bc0:	600b      	str	r3, [r1, #0]
 8006bc2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bce:	6822      	ldr	r2, [r4, #0]
 8006bd0:	4858      	ldr	r0, [pc, #352]	@ (8006d34 <HAL_UART_IRQHandler+0x2dc>)
 8006bd2:	6893      	ldr	r3, [r2, #8]
 8006bd4:	4003      	ands	r3, r0
 8006bd6:	6093      	str	r3, [r2, #8]
 8006bd8:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10a      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x1a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bea:	2010      	movs	r0, #16
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	4383      	bics	r3, r0
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	238c      	movs	r3, #140	@ 0x8c
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8006c02:	6763      	str	r3, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	3220      	adds	r2, #32
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	421a      	tst	r2, r3
 8006c0c:	d065      	beq.n	8006cda <HAL_UART_IRQHandler+0x282>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c12:	2301      	movs	r3, #1
 8006c14:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c18:	6821      	ldr	r1, [r4, #0]
 8006c1a:	688b      	ldr	r3, [r1, #8]
 8006c1c:	4393      	bics	r3, r2
 8006c1e:	608b      	str	r3, [r1, #8]
 8006c20:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8006c24:	2580      	movs	r5, #128	@ 0x80
 8006c26:	5960      	ldr	r0, [r4, r5]
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d056      	beq.n	8006cda <HAL_UART_IRQHandler+0x282>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c2c:	4b42      	ldr	r3, [pc, #264]	@ (8006d38 <HAL_UART_IRQHandler+0x2e0>)
 8006c2e:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c30:	f7fe fadc 	bl	80051ec <HAL_DMA_Abort_IT>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d100      	bne.n	8006c3a <HAL_UART_IRQHandler+0x1e2>
 8006c38:	e748      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c3a:	5960      	ldr	r0, [r4, r5]
 8006c3c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006c3e:	4798      	blx	r3
 8006c40:	e744      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c42:	2610      	movs	r6, #16
 8006c44:	421e      	tst	r6, r3
 8006c46:	d100      	bne.n	8006c4a <HAL_UART_IRQHandler+0x1f2>
 8006c48:	e722      	b.n	8006a90 <HAL_UART_IRQHandler+0x38>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c4a:	420e      	tst	r6, r1
 8006c4c:	d100      	bne.n	8006c50 <HAL_UART_IRQHandler+0x1f8>
 8006c4e:	e71f      	b.n	8006a90 <HAL_UART_IRQHandler+0x38>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c50:	2340      	movs	r3, #64	@ 0x40
 8006c52:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c54:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c56:	6892      	ldr	r2, [r2, #8]
 8006c58:	4010      	ands	r0, r2
 8006c5a:	4213      	tst	r3, r2
 8006c5c:	d06e      	beq.n	8006d3c <HAL_UART_IRQHandler+0x2e4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c5e:	2280      	movs	r2, #128	@ 0x80
 8006c60:	4694      	mov	ip, r2
 8006c62:	58a2      	ldr	r2, [r4, r2]
 8006c64:	6810      	ldr	r0, [r2, #0]
 8006c66:	6842      	ldr	r2, [r0, #4]
 8006c68:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d100      	bne.n	8006c70 <HAL_UART_IRQHandler+0x218>
 8006c6e:	e72d      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c70:	215c      	movs	r1, #92	@ 0x5c
 8006c72:	468b      	mov	fp, r1
 8006c74:	5a61      	ldrh	r1, [r4, r1]
 8006c76:	4291      	cmp	r1, r2
 8006c78:	d800      	bhi.n	8006c7c <HAL_UART_IRQHandler+0x224>
 8006c7a:	e727      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 8006c7c:	275e      	movs	r7, #94	@ 0x5e
 8006c7e:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c80:	2220      	movs	r2, #32
 8006c82:	0017      	movs	r7, r2
 8006c84:	6800      	ldr	r0, [r0, #0]
 8006c86:	4007      	ands	r7, r0
 8006c88:	46b8      	mov	r8, r7
 8006c8a:	4202      	tst	r2, r0
 8006c8c:	d100      	bne.n	8006c90 <HAL_UART_IRQHandler+0x238>
 8006c8e:	e092      	b.n	8006db6 <HAL_UART_IRQHandler+0x35e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c90:	2302      	movs	r3, #2
 8006c92:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c94:	335c      	adds	r3, #92	@ 0x5c
 8006c96:	5ae3      	ldrh	r3, [r4, r3]
 8006c98:	0020      	movs	r0, r4
 8006c9a:	1ac9      	subs	r1, r1, r3
 8006c9c:	b289      	uxth	r1, r1
 8006c9e:	f7ff fed9 	bl	8006a54 <HAL_UARTEx_RxEventCallback>
 8006ca2:	e713      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca4:	4665      	mov	r5, ip
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	d100      	bne.n	8006cac <HAL_UART_IRQHandler+0x254>
 8006caa:	e750      	b.n	8006b4e <HAL_UART_IRQHandler+0xf6>
 8006cac:	07c5      	lsls	r5, r0, #31
 8006cae:	d400      	bmi.n	8006cb2 <HAL_UART_IRQHandler+0x25a>
 8006cb0:	e74d      	b.n	8006b4e <HAL_UART_IRQHandler+0xf6>
 8006cb2:	e740      	b.n	8006b36 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8006cb4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d100      	bne.n	8006cbc <HAL_UART_IRQHandler+0x264>
 8006cba:	e707      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 8006cbc:	0020      	movs	r0, r4
 8006cbe:	4798      	blx	r3
 8006cc0:	e704      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
    if (huart->TxISR != NULL)
 8006cc2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1f9      	bne.n	8006cbc <HAL_UART_IRQHandler+0x264>
 8006cc8:	e700      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
        if (huart->RxISR != NULL)
 8006cca:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d100      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x27a>
 8006cd0:	e763      	b.n	8006b9a <HAL_UART_IRQHandler+0x142>
          huart->RxISR(huart);
 8006cd2:	0020      	movs	r0, r4
 8006cd4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	e75f      	b.n	8006b9a <HAL_UART_IRQHandler+0x142>
            HAL_UART_ErrorCallback(huart);
 8006cda:	0020      	movs	r0, r4
 8006cdc:	f7ff fe42 	bl	8006964 <HAL_UART_ErrorCallback>
 8006ce0:	e6f4      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cec:	6821      	ldr	r1, [r4, #0]
 8006cee:	680b      	ldr	r3, [r1, #0]
 8006cf0:	4393      	bics	r3, r2
 8006cf2:	600b      	str	r3, [r1, #0]
 8006cf4:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf8:	2388      	movs	r3, #136	@ 0x88
 8006cfa:	3a20      	subs	r2, #32
 8006cfc:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cfe:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d00:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8006d02:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8006d04:	f7ff fe2a 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d08:	e6e0      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d0a:	0020      	movs	r0, r4
 8006d0c:	f000 fbfc 	bl	8007508 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006d10:	e6dc      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d12:	0020      	movs	r0, r4
 8006d14:	f000 fbf6 	bl	8007504 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8006d18:	e6d8      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
        HAL_UART_ErrorCallback(huart);
 8006d1a:	0020      	movs	r0, r4
 8006d1c:	f7ff fe22 	bl	8006964 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d20:	51a5      	str	r5, [r4, r6]
 8006d22:	e6d3      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
 8006d24:	0000080f 	.word	0x0000080f
 8006d28:	10000001 	.word	0x10000001
 8006d2c:	04000120 	.word	0x04000120
 8006d30:	fffffedf 	.word	0xfffffedf
 8006d34:	effffffe 	.word	0xeffffffe
 8006d38:	08006a41 	.word	0x08006a41
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d3c:	235c      	movs	r3, #92	@ 0x5c
 8006d3e:	225e      	movs	r2, #94	@ 0x5e
 8006d40:	5ae1      	ldrh	r1, [r4, r3]
 8006d42:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8006d44:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d46:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	d100      	bne.n	8006d4e <HAL_UART_IRQHandler+0x2f6>
 8006d4c:	e6be      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d4e:	1ac9      	subs	r1, r1, r3
 8006d50:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d100      	bne.n	8006d58 <HAL_UART_IRQHandler+0x300>
 8006d56:	e6b9      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d58:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5c:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d60:	6822      	ldr	r2, [r4, #0]
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	4698      	mov	r8, r3
 8006d66:	4647      	mov	r7, r8
 8006d68:	4b2d      	ldr	r3, [pc, #180]	@ (8006e20 <HAL_UART_IRQHandler+0x3c8>)
 8006d6a:	401f      	ands	r7, r3
 8006d6c:	6017      	str	r7, [r2, #0]
 8006d6e:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d72:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d76:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	6893      	ldr	r3, [r2, #8]
 8006d7e:	4698      	mov	r8, r3
 8006d80:	4647      	mov	r7, r8
 8006d82:	4b28      	ldr	r3, [pc, #160]	@ (8006e24 <HAL_UART_IRQHandler+0x3cc>)
 8006d84:	401f      	ands	r7, r3
 8006d86:	6097      	str	r7, [r2, #8]
 8006d88:	f389 8810 	msr	PRIMASK, r9
        huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	238c      	movs	r3, #140	@ 0x8c
 8006d8e:	2220      	movs	r2, #32
 8006d90:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	66e0      	str	r0, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8006d94:	6760      	str	r0, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d96:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9a:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	6813      	ldr	r3, [r2, #0]
 8006da2:	43b3      	bics	r3, r6
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006daa:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dac:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dae:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006db0:	f7ff fe50 	bl	8006a54 <HAL_UARTEx_RxEventCallback>
 8006db4:	e68a      	b.n	8006acc <HAL_UART_IRQHandler+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db6:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dba:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dbe:	6820      	ldr	r0, [r4, #0]
 8006dc0:	4f19      	ldr	r7, [pc, #100]	@ (8006e28 <HAL_UART_IRQHandler+0x3d0>)
 8006dc2:	6801      	ldr	r1, [r0, #0]
 8006dc4:	4039      	ands	r1, r7
 8006dc6:	6001      	str	r1, [r0, #0]
 8006dc8:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dcc:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd0:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	6881      	ldr	r1, [r0, #8]
 8006dd8:	43a9      	bics	r1, r5
 8006dda:	6081      	str	r1, [r0, #8]
 8006ddc:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de0:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de4:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de8:	6820      	ldr	r0, [r4, #0]
 8006dea:	6881      	ldr	r1, [r0, #8]
 8006dec:	4399      	bics	r1, r3
 8006dee:	6081      	str	r1, [r0, #8]
 8006df0:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 8006df4:	334c      	adds	r3, #76	@ 0x4c
 8006df6:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df8:	4643      	mov	r3, r8
 8006dfa:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dfc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e00:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	43b3      	bics	r3, r6
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e10:	4663      	mov	r3, ip
 8006e12:	58e0      	ldr	r0, [r4, r3]
 8006e14:	f7fe f9ae 	bl	8005174 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e18:	465b      	mov	r3, fp
 8006e1a:	5ae1      	ldrh	r1, [r4, r3]
 8006e1c:	e738      	b.n	8006c90 <HAL_UART_IRQHandler+0x238>
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	fffffedf 	.word	0xfffffedf
 8006e24:	effffffe 	.word	0xeffffffe
 8006e28:	fffffeff 	.word	0xfffffeff

08006e2c <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e2c:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e2e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8006e30:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e32:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e34:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d002      	beq.n	8006e40 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e3a:	f7ff fd91 	bl	8006960 <HAL_UART_RxHalfCpltCallback>
}
 8006e3e:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e40:	335b      	adds	r3, #91	@ 0x5b
 8006e42:	5ac1      	ldrh	r1, [r0, r3]
 8006e44:	0849      	lsrs	r1, r1, #1
 8006e46:	f7ff fe05 	bl	8006a54 <HAL_UARTEx_RxEventCallback>
 8006e4a:	e7f8      	b.n	8006e3e <UART_DMARxHalfCplt+0x12>

08006e4c <UART_DMAReceiveCplt>:
{
 8006e4c:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e4e:	681b      	ldr	r3, [r3, #0]
{
 8006e50:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	2320      	movs	r3, #32
 8006e56:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e58:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e5a:	4011      	ands	r1, r2
 8006e5c:	4213      	tst	r3, r2
 8006e5e:	d127      	bne.n	8006eb0 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 8006e60:	225e      	movs	r2, #94	@ 0x5e
 8006e62:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e64:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e68:	3a5d      	subs	r2, #93	@ 0x5d
 8006e6a:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e6e:	6804      	ldr	r4, [r0, #0]
 8006e70:	4e1c      	ldr	r6, [pc, #112]	@ (8006ee4 <UART_DMAReceiveCplt+0x98>)
 8006e72:	6821      	ldr	r1, [r4, #0]
 8006e74:	4031      	ands	r1, r6
 8006e76:	6021      	str	r1, [r4, #0]
 8006e78:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e7c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e80:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e84:	6804      	ldr	r4, [r0, #0]
 8006e86:	68a1      	ldr	r1, [r4, #8]
 8006e88:	4391      	bics	r1, r2
 8006e8a:	60a1      	str	r1, [r4, #8]
 8006e8c:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e90:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e94:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e98:	2540      	movs	r5, #64	@ 0x40
 8006e9a:	6801      	ldr	r1, [r0, #0]
 8006e9c:	688a      	ldr	r2, [r1, #8]
 8006e9e:	43aa      	bics	r2, r5
 8006ea0:	608a      	str	r2, [r1, #8]
 8006ea2:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	228c      	movs	r2, #140	@ 0x8c
 8006ea8:	5083      	str	r3, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eaa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d00c      	beq.n	8006eca <UART_DMAReceiveCplt+0x7e>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d002      	beq.n	8006ec0 <UART_DMAReceiveCplt+0x74>
    HAL_UART_RxCpltCallback(huart);
 8006eba:	f7fc fb8d 	bl	80035d8 <HAL_UART_RxCpltCallback>
}
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ec0:	335b      	adds	r3, #91	@ 0x5b
 8006ec2:	5ac1      	ldrh	r1, [r0, r3]
 8006ec4:	f7ff fdc6 	bl	8006a54 <HAL_UARTEx_RxEventCallback>
 8006ec8:	e7f9      	b.n	8006ebe <UART_DMAReceiveCplt+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eca:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ece:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed2:	2410      	movs	r4, #16
 8006ed4:	6802      	ldr	r2, [r0, #0]
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	43a3      	bics	r3, r4
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	f381 8810 	msr	PRIMASK, r1
}
 8006ee0:	e7e6      	b.n	8006eb0 <UART_DMAReceiveCplt+0x64>
 8006ee2:	46c0      	nop			@ (mov r8, r8)
 8006ee4:	fffffeff 	.word	0xfffffeff

08006ee8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ee8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8006eea:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eec:	071a      	lsls	r2, r3, #28
 8006eee:	d506      	bpl.n	8006efe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ef0:	6801      	ldr	r1, [r0, #0]
 8006ef2:	4c28      	ldr	r4, [pc, #160]	@ (8006f94 <UART_AdvFeatureConfig+0xac>)
 8006ef4:	684a      	ldr	r2, [r1, #4]
 8006ef6:	4022      	ands	r2, r4
 8006ef8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006efa:	4322      	orrs	r2, r4
 8006efc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006efe:	07da      	lsls	r2, r3, #31
 8006f00:	d506      	bpl.n	8006f10 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f02:	6801      	ldr	r1, [r0, #0]
 8006f04:	4c24      	ldr	r4, [pc, #144]	@ (8006f98 <UART_AdvFeatureConfig+0xb0>)
 8006f06:	684a      	ldr	r2, [r1, #4]
 8006f08:	4022      	ands	r2, r4
 8006f0a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006f0c:	4322      	orrs	r2, r4
 8006f0e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f10:	079a      	lsls	r2, r3, #30
 8006f12:	d506      	bpl.n	8006f22 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f14:	6801      	ldr	r1, [r0, #0]
 8006f16:	4c21      	ldr	r4, [pc, #132]	@ (8006f9c <UART_AdvFeatureConfig+0xb4>)
 8006f18:	684a      	ldr	r2, [r1, #4]
 8006f1a:	4022      	ands	r2, r4
 8006f1c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006f1e:	4322      	orrs	r2, r4
 8006f20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f22:	075a      	lsls	r2, r3, #29
 8006f24:	d506      	bpl.n	8006f34 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f26:	6801      	ldr	r1, [r0, #0]
 8006f28:	4c1d      	ldr	r4, [pc, #116]	@ (8006fa0 <UART_AdvFeatureConfig+0xb8>)
 8006f2a:	684a      	ldr	r2, [r1, #4]
 8006f2c:	4022      	ands	r2, r4
 8006f2e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006f30:	4322      	orrs	r2, r4
 8006f32:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f34:	06da      	lsls	r2, r3, #27
 8006f36:	d506      	bpl.n	8006f46 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f38:	6801      	ldr	r1, [r0, #0]
 8006f3a:	4c1a      	ldr	r4, [pc, #104]	@ (8006fa4 <UART_AdvFeatureConfig+0xbc>)
 8006f3c:	688a      	ldr	r2, [r1, #8]
 8006f3e:	4022      	ands	r2, r4
 8006f40:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006f42:	4322      	orrs	r2, r4
 8006f44:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f46:	069a      	lsls	r2, r3, #26
 8006f48:	d506      	bpl.n	8006f58 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f4a:	6801      	ldr	r1, [r0, #0]
 8006f4c:	4c16      	ldr	r4, [pc, #88]	@ (8006fa8 <UART_AdvFeatureConfig+0xc0>)
 8006f4e:	688a      	ldr	r2, [r1, #8]
 8006f50:	4022      	ands	r2, r4
 8006f52:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006f54:	4322      	orrs	r2, r4
 8006f56:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f58:	065a      	lsls	r2, r3, #25
 8006f5a:	d50a      	bpl.n	8006f72 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f5c:	6801      	ldr	r1, [r0, #0]
 8006f5e:	4d13      	ldr	r5, [pc, #76]	@ (8006fac <UART_AdvFeatureConfig+0xc4>)
 8006f60:	684a      	ldr	r2, [r1, #4]
 8006f62:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006f64:	402a      	ands	r2, r5
 8006f66:	4322      	orrs	r2, r4
 8006f68:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f6a:	2280      	movs	r2, #128	@ 0x80
 8006f6c:	0352      	lsls	r2, r2, #13
 8006f6e:	4294      	cmp	r4, r2
 8006f70:	d009      	beq.n	8006f86 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f72:	061b      	lsls	r3, r3, #24
 8006f74:	d506      	bpl.n	8006f84 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f76:	6802      	ldr	r2, [r0, #0]
 8006f78:	490d      	ldr	r1, [pc, #52]	@ (8006fb0 <UART_AdvFeatureConfig+0xc8>)
 8006f7a:	6853      	ldr	r3, [r2, #4]
 8006f7c:	400b      	ands	r3, r1
 8006f7e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6053      	str	r3, [r2, #4]
}
 8006f84:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f86:	684a      	ldr	r2, [r1, #4]
 8006f88:	4c0a      	ldr	r4, [pc, #40]	@ (8006fb4 <UART_AdvFeatureConfig+0xcc>)
 8006f8a:	4022      	ands	r2, r4
 8006f8c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006f8e:	4322      	orrs	r2, r4
 8006f90:	604a      	str	r2, [r1, #4]
 8006f92:	e7ee      	b.n	8006f72 <UART_AdvFeatureConfig+0x8a>
 8006f94:	ffff7fff 	.word	0xffff7fff
 8006f98:	fffdffff 	.word	0xfffdffff
 8006f9c:	fffeffff 	.word	0xfffeffff
 8006fa0:	fffbffff 	.word	0xfffbffff
 8006fa4:	ffffefff 	.word	0xffffefff
 8006fa8:	ffffdfff 	.word	0xffffdfff
 8006fac:	ffefffff 	.word	0xffefffff
 8006fb0:	fff7ffff 	.word	0xfff7ffff
 8006fb4:	ff9fffff 	.word	0xff9fffff

08006fb8 <UART_CheckIdleState>:
{
 8006fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fba:	2390      	movs	r3, #144	@ 0x90
 8006fbc:	2200      	movs	r2, #0
{
 8006fbe:	46c6      	mov	lr, r8
 8006fc0:	0004      	movs	r4, r0
 8006fc2:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc4:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8006fc6:	f7fd fa75 	bl	80044b4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fca:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006fcc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	0712      	lsls	r2, r2, #28
 8006fd2:	d411      	bmi.n	8006ff8 <UART_CheckIdleState+0x40>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	0752      	lsls	r2, r2, #29
 8006fd8:	d43e      	bmi.n	8007058 <UART_CheckIdleState+0xa0>
  huart->gState = HAL_UART_STATE_READY;
 8006fda:	2320      	movs	r3, #32
 8006fdc:	2288      	movs	r2, #136	@ 0x88
 8006fde:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006fe0:	3204      	adds	r2, #4
 8006fe2:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe4:	2300      	movs	r3, #0
  return HAL_OK;
 8006fe6:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fea:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8006fec:	2384      	movs	r3, #132	@ 0x84
 8006fee:	2200      	movs	r2, #0
 8006ff0:	54e2      	strb	r2, [r4, r3]
}
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	46b8      	mov	r8, r7
 8006ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff8:	69da      	ldr	r2, [r3, #28]
 8006ffa:	0292      	lsls	r2, r2, #10
 8006ffc:	d4ea      	bmi.n	8006fd4 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ffe:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007000:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007002:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007004:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007006:	04b6      	lsls	r6, r6, #18
 8007008:	e010      	b.n	800702c <UART_CheckIdleState+0x74>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4217      	tst	r7, r2
 8007010:	d009      	beq.n	8007026 <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007012:	4641      	mov	r1, r8
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	4211      	tst	r1, r2
 8007018:	d159      	bne.n	80070ce <UART_CheckIdleState+0x116>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800701a:	2280      	movs	r2, #128	@ 0x80
 800701c:	69d9      	ldr	r1, [r3, #28]
 800701e:	0112      	lsls	r2, r2, #4
 8007020:	4211      	tst	r1, r2
 8007022:	d000      	beq.n	8007026 <UART_CheckIdleState+0x6e>
 8007024:	e085      	b.n	8007132 <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	0292      	lsls	r2, r2, #10
 800702a:	d4d3      	bmi.n	8006fd4 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702c:	f7fd fa42 	bl	80044b4 <HAL_GetTick>
 8007030:	1b40      	subs	r0, r0, r5
 8007032:	42b0      	cmp	r0, r6
 8007034:	d3e9      	bcc.n	800700a <UART_CheckIdleState+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007036:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703a:	2301      	movs	r3, #1
 800703c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007040:	2080      	movs	r0, #128	@ 0x80
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	6813      	ldr	r3, [r2, #0]
 8007046:	4383      	bics	r3, r0
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800704e:	2388      	movs	r3, #136	@ 0x88
 8007050:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8007052:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8007054:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8007056:	e7c9      	b.n	8006fec <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	025b      	lsls	r3, r3, #9
 800705c:	d4bd      	bmi.n	8006fda <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705e:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007060:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007062:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007064:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007066:	04b6      	lsls	r6, r6, #18
 8007068:	e011      	b.n	800708e <UART_CheckIdleState+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4217      	tst	r7, r2
 8007070:	d00a      	beq.n	8007088 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007072:	4641      	mov	r1, r8
 8007074:	69da      	ldr	r2, [r3, #28]
 8007076:	4211      	tst	r1, r2
 8007078:	d000      	beq.n	800707c <UART_CheckIdleState+0xc4>
 800707a:	e08b      	b.n	8007194 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707c:	2280      	movs	r2, #128	@ 0x80
 800707e:	69d9      	ldr	r1, [r3, #28]
 8007080:	0112      	lsls	r2, r2, #4
 8007082:	4211      	tst	r1, r2
 8007084:	d000      	beq.n	8007088 <UART_CheckIdleState+0xd0>
 8007086:	e0b7      	b.n	80071f8 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	025b      	lsls	r3, r3, #9
 800708c:	d4a5      	bmi.n	8006fda <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708e:	f7fd fa11 	bl	80044b4 <HAL_GetTick>
 8007092:	1b40      	subs	r0, r0, r5
 8007094:	42b0      	cmp	r0, r6
 8007096:	d3e8      	bcc.n	800706a <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007098:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709c:	2201      	movs	r2, #1
 800709e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070a2:	6821      	ldr	r1, [r4, #0]
 80070a4:	4d6d      	ldr	r5, [pc, #436]	@ (800725c <UART_CheckIdleState+0x2a4>)
 80070a6:	680b      	ldr	r3, [r1, #0]
 80070a8:	402b      	ands	r3, r5
 80070aa:	600b      	str	r3, [r1, #0]
 80070ac:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b8:	6821      	ldr	r1, [r4, #0]
 80070ba:	688b      	ldr	r3, [r1, #8]
 80070bc:	4393      	bics	r3, r2
 80070be:	608b      	str	r3, [r1, #8]
 80070c0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80070c4:	238c      	movs	r3, #140	@ 0x8c
 80070c6:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 80070c8:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 80070ca:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80070cc:	e78e      	b.n	8006fec <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070ce:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d4:	2201      	movs	r2, #1
 80070d6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070da:	6821      	ldr	r1, [r4, #0]
 80070dc:	4d5f      	ldr	r5, [pc, #380]	@ (800725c <UART_CheckIdleState+0x2a4>)
 80070de:	680b      	ldr	r3, [r1, #0]
 80070e0:	402b      	ands	r3, r5
 80070e2:	600b      	str	r3, [r1, #0]
 80070e4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ec:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070f0:	6822      	ldr	r2, [r4, #0]
 80070f2:	485b      	ldr	r0, [pc, #364]	@ (8007260 <UART_CheckIdleState+0x2a8>)
 80070f4:	6893      	ldr	r3, [r2, #8]
 80070f6:	4003      	ands	r3, r0
 80070f8:	6093      	str	r3, [r2, #8]
 80070fa:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fe:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007100:	2b01      	cmp	r3, #1
 8007102:	d10a      	bne.n	800711a <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007104:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007108:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710c:	2010      	movs	r0, #16
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	6813      	ldr	r3, [r2, #0]
 8007112:	4383      	bics	r3, r0
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800711a:	238c      	movs	r3, #140	@ 0x8c
 800711c:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800711e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007120:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007122:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007124:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007126:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8007128:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800712a:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 800712c:	3a0c      	subs	r2, #12
 800712e:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8007130:	e781      	b.n	8007036 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007132:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007134:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007138:	2201      	movs	r2, #1
 800713a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800713e:	6821      	ldr	r1, [r4, #0]
 8007140:	4d46      	ldr	r5, [pc, #280]	@ (800725c <UART_CheckIdleState+0x2a4>)
 8007142:	680b      	ldr	r3, [r1, #0]
 8007144:	402b      	ands	r3, r5
 8007146:	600b      	str	r3, [r1, #0]
 8007148:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800714c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007150:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007154:	6822      	ldr	r2, [r4, #0]
 8007156:	4842      	ldr	r0, [pc, #264]	@ (8007260 <UART_CheckIdleState+0x2a8>)
 8007158:	6893      	ldr	r3, [r2, #8]
 800715a:	4003      	ands	r3, r0
 800715c:	6093      	str	r3, [r2, #8]
 800715e:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007162:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d10a      	bne.n	800717e <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007168:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007170:	2010      	movs	r0, #16
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	6813      	ldr	r3, [r2, #0]
 8007176:	4383      	bics	r3, r0
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800717e:	2220      	movs	r2, #32
 8007180:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007182:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8007184:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	2300      	movs	r3, #0
 8007188:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800718a:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800718c:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 800718e:	3264      	adds	r2, #100	@ 0x64
 8007190:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8007192:	e750      	b.n	8007036 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007194:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007196:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719a:	2201      	movs	r2, #1
 800719c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071a0:	6821      	ldr	r1, [r4, #0]
 80071a2:	4d2e      	ldr	r5, [pc, #184]	@ (800725c <UART_CheckIdleState+0x2a4>)
 80071a4:	680b      	ldr	r3, [r1, #0]
 80071a6:	402b      	ands	r3, r5
 80071a8:	600b      	str	r3, [r1, #0]
 80071aa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071b6:	6822      	ldr	r2, [r4, #0]
 80071b8:	4829      	ldr	r0, [pc, #164]	@ (8007260 <UART_CheckIdleState+0x2a8>)
 80071ba:	6893      	ldr	r3, [r2, #8]
 80071bc:	4003      	ands	r3, r0
 80071be:	6093      	str	r3, [r2, #8]
 80071c0:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d10a      	bne.n	80071e0 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ca:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ce:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d2:	2010      	movs	r0, #16
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	6813      	ldr	r3, [r2, #0]
 80071d8:	4383      	bics	r3, r0
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80071e0:	238c      	movs	r3, #140	@ 0x8c
 80071e2:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071e4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80071e6:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e8:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071ea:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ec:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80071ee:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071f0:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 80071f2:	3a0c      	subs	r2, #12
 80071f4:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80071f6:	e74f      	b.n	8007098 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fe:	2201      	movs	r2, #1
 8007200:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007204:	6821      	ldr	r1, [r4, #0]
 8007206:	4d15      	ldr	r5, [pc, #84]	@ (800725c <UART_CheckIdleState+0x2a4>)
 8007208:	680b      	ldr	r3, [r1, #0]
 800720a:	402b      	ands	r3, r5
 800720c:	600b      	str	r3, [r1, #0]
 800720e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007212:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007216:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	4810      	ldr	r0, [pc, #64]	@ (8007260 <UART_CheckIdleState+0x2a8>)
 800721e:	6893      	ldr	r3, [r2, #8]
 8007220:	4003      	ands	r3, r0
 8007222:	6093      	str	r3, [r2, #8]
 8007224:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007228:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d10a      	bne.n	8007244 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800722e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007232:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007236:	2010      	movs	r0, #16
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	6813      	ldr	r3, [r2, #0]
 800723c:	4383      	bics	r3, r0
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8007244:	2220      	movs	r2, #32
 8007246:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007248:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 800724a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724c:	2300      	movs	r3, #0
 800724e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8007250:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007252:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8007254:	3264      	adds	r2, #100	@ 0x64
 8007256:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8007258:	e71e      	b.n	8007098 <UART_CheckIdleState+0xe0>
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	fffffedf 	.word	0xfffffedf
 8007260:	effffffe 	.word	0xeffffffe

08007264 <HAL_UART_Init>:
{
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8007268:	d03e      	beq.n	80072e8 <HAL_UART_Init+0x84>
  if (huart->gState == HAL_UART_STATE_RESET)
 800726a:	2388      	movs	r3, #136	@ 0x88
 800726c:	58c3      	ldr	r3, [r0, r3]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d100      	bne.n	8007274 <HAL_UART_Init+0x10>
 8007272:	e07d      	b.n	8007370 <HAL_UART_Init+0x10c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007274:	2388      	movs	r3, #136	@ 0x88
 8007276:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8007278:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800727a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	3a23      	subs	r2, #35	@ 0x23
 8007280:	4393      	bics	r3, r2
 8007282:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007284:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d000      	beq.n	800728c <HAL_UART_Init+0x28>
 800728a:	e06d      	b.n	8007368 <HAL_UART_Init+0x104>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800728c:	6921      	ldr	r1, [r4, #16]
 800728e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007290:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007292:	430b      	orrs	r3, r1
 8007294:	6961      	ldr	r1, [r4, #20]
 8007296:	69e0      	ldr	r0, [r4, #28]
 8007298:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800729a:	498a      	ldr	r1, [pc, #552]	@ (80074c4 <HAL_UART_Init+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800729c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800729e:	400a      	ands	r2, r1
 80072a0:	4313      	orrs	r3, r2
 80072a2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072a4:	686b      	ldr	r3, [r5, #4]
 80072a6:	4a88      	ldr	r2, [pc, #544]	@ (80074c8 <HAL_UART_Init+0x264>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072a8:	4988      	ldr	r1, [pc, #544]	@ (80074cc <HAL_UART_Init+0x268>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072aa:	4013      	ands	r3, r2
 80072ac:	68e2      	ldr	r2, [r4, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072b4:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072b6:	428d      	cmp	r5, r1
 80072b8:	d066      	beq.n	8007388 <HAL_UART_Init+0x124>
    tmpreg |= huart->Init.OneBitSampling;
 80072ba:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072bc:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80072be:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072c0:	4e83      	ldr	r6, [pc, #524]	@ (80074d0 <HAL_UART_Init+0x26c>)
 80072c2:	4031      	ands	r1, r6
 80072c4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072c6:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072c8:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072ca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80072cc:	438b      	bics	r3, r1
 80072ce:	4313      	orrs	r3, r2
 80072d0:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072d2:	4b80      	ldr	r3, [pc, #512]	@ (80074d4 <HAL_UART_Init+0x270>)
 80072d4:	429d      	cmp	r5, r3
 80072d6:	d009      	beq.n	80072ec <HAL_UART_Init+0x88>
 80072d8:	4b7f      	ldr	r3, [pc, #508]	@ (80074d8 <HAL_UART_Init+0x274>)
 80072da:	429d      	cmp	r5, r3
 80072dc:	d012      	beq.n	8007304 <HAL_UART_Init+0xa0>
  huart->NbRxDataToProcess = 1;
 80072de:	4b7f      	ldr	r3, [pc, #508]	@ (80074dc <HAL_UART_Init+0x278>)
 80072e0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80072e6:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 80072e8:	2001      	movs	r0, #1
}
 80072ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ec:	4b7c      	ldr	r3, [pc, #496]	@ (80074e0 <HAL_UART_Init+0x27c>)
 80072ee:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80072f0:	2303      	movs	r3, #3
 80072f2:	400b      	ands	r3, r1
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d040      	beq.n	800737a <HAL_UART_Init+0x116>
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d100      	bne.n	80072fe <HAL_UART_Init+0x9a>
 80072fc:	e0ab      	b.n	8007456 <HAL_UART_Init+0x1f2>
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d100      	bne.n	8007304 <HAL_UART_Init+0xa0>
 8007302:	e0a1      	b.n	8007448 <HAL_UART_Init+0x1e4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007304:	2380      	movs	r3, #128	@ 0x80
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	4298      	cmp	r0, r3
 800730a:	d100      	bne.n	800730e <HAL_UART_Init+0xaa>
 800730c:	e0d4      	b.n	80074b8 <HAL_UART_Init+0x254>
        pclk = HAL_RCC_GetPCLK1Freq();
 800730e:	f7fe fe77 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007312:	2800      	cmp	r0, #0
 8007314:	d100      	bne.n	8007318 <HAL_UART_Init+0xb4>
 8007316:	e091      	b.n	800743c <HAL_UART_Init+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007318:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800731a:	4b72      	ldr	r3, [pc, #456]	@ (80074e4 <HAL_UART_Init+0x280>)
 800731c:	0052      	lsls	r2, r2, #1
 800731e:	5ad1      	ldrh	r1, [r2, r3]
 8007320:	f7f8 ff0a 	bl	8000138 <__udivsi3>
 8007324:	6865      	ldr	r5, [r4, #4]
 8007326:	086b      	lsrs	r3, r5, #1
 8007328:	18c0      	adds	r0, r0, r3
 800732a:	0029      	movs	r1, r5
 800732c:	f7f8 ff04 	bl	8000138 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007330:	0002      	movs	r2, r0
 8007332:	4b6d      	ldr	r3, [pc, #436]	@ (80074e8 <HAL_UART_Init+0x284>)
 8007334:	3a10      	subs	r2, #16
 8007336:	429a      	cmp	r2, r3
 8007338:	d8d1      	bhi.n	80072de <HAL_UART_Init+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 800733e:	4a67      	ldr	r2, [pc, #412]	@ (80074dc <HAL_UART_Init+0x278>)
 8007340:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007342:	2200      	movs	r2, #0
 8007344:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007346:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	4968      	ldr	r1, [pc, #416]	@ (80074ec <HAL_UART_Init+0x288>)
  return (UART_CheckIdleState(huart));
 800734c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800734e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007350:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	438a      	bics	r2, r1
 8007358:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	3929      	subs	r1, #41	@ 0x29
 800735e:	430a      	orrs	r2, r1
 8007360:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007362:	f7ff fe29 	bl	8006fb8 <UART_CheckIdleState>
 8007366:	e7c0      	b.n	80072ea <HAL_UART_Init+0x86>
    UART_AdvFeatureConfig(huart);
 8007368:	0020      	movs	r0, r4
 800736a:	f7ff fdbd 	bl	8006ee8 <UART_AdvFeatureConfig>
 800736e:	e78d      	b.n	800728c <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8007370:	2284      	movs	r2, #132	@ 0x84
 8007372:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8007374:	f7fc ff22 	bl	80041bc <HAL_UART_MspInit>
 8007378:	e77c      	b.n	8007274 <HAL_UART_Init+0x10>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800737a:	2380      	movs	r3, #128	@ 0x80
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	4298      	cmp	r0, r3
 8007380:	d100      	bne.n	8007384 <HAL_UART_Init+0x120>
 8007382:	e093      	b.n	80074ac <HAL_UART_Init+0x248>
        pclk = (uint32_t) HSI_VALUE;
 8007384:	485a      	ldr	r0, [pc, #360]	@ (80074f0 <HAL_UART_Init+0x28c>)
 8007386:	e7c8      	b.n	800731a <HAL_UART_Init+0xb6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007388:	68a9      	ldr	r1, [r5, #8]
 800738a:	4851      	ldr	r0, [pc, #324]	@ (80074d0 <HAL_UART_Init+0x26c>)
 800738c:	4001      	ands	r1, r0
 800738e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007390:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007392:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007394:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007396:	2080      	movs	r0, #128	@ 0x80
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007398:	438b      	bics	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800739a:	21c0      	movs	r1, #192	@ 0xc0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800739c:	4313      	orrs	r3, r2
 800739e:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073a0:	4b4f      	ldr	r3, [pc, #316]	@ (80074e0 <HAL_UART_Init+0x27c>)
 80073a2:	0109      	lsls	r1, r1, #4
 80073a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a6:	0100      	lsls	r0, r0, #4
 80073a8:	400b      	ands	r3, r1
 80073aa:	4283      	cmp	r3, r0
 80073ac:	d100      	bne.n	80073b0 <HAL_UART_Init+0x14c>
 80073ae:	e086      	b.n	80074be <HAL_UART_Init+0x25a>
 80073b0:	d80d      	bhi.n	80073ce <HAL_UART_Init+0x16a>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d07c      	beq.n	80074b0 <HAL_UART_Init+0x24c>
 80073b6:	2280      	movs	r2, #128	@ 0x80
 80073b8:	00d2      	lsls	r2, r2, #3
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d000      	beq.n	80073c0 <HAL_UART_Init+0x15c>
 80073be:	e78e      	b.n	80072de <HAL_UART_Init+0x7a>
        pclk = HAL_RCC_GetSysClockFreq();
 80073c0:	f7fe fd08 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
 80073c4:	0005      	movs	r5, r0
    if (pclk != 0U)
 80073c6:	2d00      	cmp	r5, #0
 80073c8:	d06a      	beq.n	80074a0 <HAL_UART_Init+0x23c>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073ca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80073cc:	e004      	b.n	80073d8 <HAL_UART_Init+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ce:	428b      	cmp	r3, r1
 80073d0:	d000      	beq.n	80073d4 <HAL_UART_Init+0x170>
 80073d2:	e784      	b.n	80072de <HAL_UART_Init+0x7a>
        pclk = (uint32_t) LSE_VALUE;
 80073d4:	2580      	movs	r5, #128	@ 0x80
 80073d6:	022d      	lsls	r5, r5, #8
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073d8:	4b42      	ldr	r3, [pc, #264]	@ (80074e4 <HAL_UART_Init+0x280>)
 80073da:	0052      	lsls	r2, r2, #1
 80073dc:	5ad6      	ldrh	r6, [r2, r3]
 80073de:	0028      	movs	r0, r5
 80073e0:	0031      	movs	r1, r6
 80073e2:	f7f8 fea9 	bl	8000138 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073e6:	6867      	ldr	r7, [r4, #4]
 80073e8:	007b      	lsls	r3, r7, #1
 80073ea:	19db      	adds	r3, r3, r7
 80073ec:	4298      	cmp	r0, r3
 80073ee:	d200      	bcs.n	80073f2 <HAL_UART_Init+0x18e>
 80073f0:	e775      	b.n	80072de <HAL_UART_Init+0x7a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073f2:	033b      	lsls	r3, r7, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073f4:	4298      	cmp	r0, r3
 80073f6:	d900      	bls.n	80073fa <HAL_UART_Init+0x196>
 80073f8:	e771      	b.n	80072de <HAL_UART_Init+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fa:	0032      	movs	r2, r6
 80073fc:	2300      	movs	r3, #0
 80073fe:	0028      	movs	r0, r5
 8007400:	2100      	movs	r1, #0
 8007402:	f7f9 f887 	bl	8000514 <__aeabi_uldivmod>
 8007406:	2600      	movs	r6, #0
 8007408:	0e05      	lsrs	r5, r0, #24
 800740a:	020b      	lsls	r3, r1, #8
 800740c:	432b      	orrs	r3, r5
 800740e:	0202      	lsls	r2, r0, #8
 8007410:	087d      	lsrs	r5, r7, #1
 8007412:	1952      	adds	r2, r2, r5
 8007414:	4173      	adcs	r3, r6
 8007416:	0010      	movs	r0, r2
 8007418:	0019      	movs	r1, r3
 800741a:	003a      	movs	r2, r7
 800741c:	2300      	movs	r3, #0
 800741e:	f7f9 f879 	bl	8000514 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007422:	4b34      	ldr	r3, [pc, #208]	@ (80074f4 <HAL_UART_Init+0x290>)
 8007424:	18c2      	adds	r2, r0, r3
 8007426:	4b34      	ldr	r3, [pc, #208]	@ (80074f8 <HAL_UART_Init+0x294>)
 8007428:	429a      	cmp	r2, r3
 800742a:	d900      	bls.n	800742e <HAL_UART_Init+0x1ca>
 800742c:	e757      	b.n	80072de <HAL_UART_Init+0x7a>
          huart->Instance->BRR = usartdiv;
 800742e:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8007430:	4a2a      	ldr	r2, [pc, #168]	@ (80074dc <HAL_UART_Init+0x278>)
          huart->Instance->BRR = usartdiv;
 8007432:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8007434:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007436:	6766      	str	r6, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007438:	67a6      	str	r6, [r4, #120]	@ 0x78
  return ret;
 800743a:	e785      	b.n	8007348 <HAL_UART_Init+0xe4>
  huart->NbRxDataToProcess = 1;
 800743c:	4b27      	ldr	r3, [pc, #156]	@ (80074dc <HAL_UART_Init+0x278>)
  huart->RxISR = NULL;
 800743e:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007440:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007442:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	e77f      	b.n	8007348 <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007448:	2380      	movs	r3, #128	@ 0x80
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	4298      	cmp	r0, r3
 800744e:	d008      	beq.n	8007462 <HAL_UART_Init+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 8007450:	f7fe fcc0 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
        break;
 8007454:	e75d      	b.n	8007312 <HAL_UART_Init+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007456:	2380      	movs	r3, #128	@ 0x80
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	4298      	cmp	r0, r3
 800745c:	d006      	beq.n	800746c <HAL_UART_Init+0x208>
        pclk = (uint32_t) LSE_VALUE;
 800745e:	0018      	movs	r0, r3
 8007460:	e75b      	b.n	800731a <HAL_UART_Init+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 8007462:	f7fe fcb7 	bl	8005dd4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007466:	2800      	cmp	r0, #0
 8007468:	d0e8      	beq.n	800743c <HAL_UART_Init+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800746a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800746c:	4b1d      	ldr	r3, [pc, #116]	@ (80074e4 <HAL_UART_Init+0x280>)
 800746e:	0052      	lsls	r2, r2, #1
 8007470:	5ad1      	ldrh	r1, [r2, r3]
 8007472:	f7f8 fe61 	bl	8000138 <__udivsi3>
 8007476:	6865      	ldr	r5, [r4, #4]
 8007478:	0040      	lsls	r0, r0, #1
 800747a:	086b      	lsrs	r3, r5, #1
 800747c:	18c0      	adds	r0, r0, r3
 800747e:	0029      	movs	r1, r5
 8007480:	f7f8 fe5a 	bl	8000138 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007484:	0002      	movs	r2, r0
 8007486:	4b18      	ldr	r3, [pc, #96]	@ (80074e8 <HAL_UART_Init+0x284>)
 8007488:	3a10      	subs	r2, #16
 800748a:	429a      	cmp	r2, r3
 800748c:	d900      	bls.n	8007490 <HAL_UART_Init+0x22c>
 800748e:	e726      	b.n	80072de <HAL_UART_Init+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007490:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <HAL_UART_Init+0x298>)
        huart->Instance->BRR = brrtemp;
 8007492:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007494:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007496:	0700      	lsls	r0, r0, #28
 8007498:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800749a:	4302      	orrs	r2, r0
 800749c:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 800749e:	e74e      	b.n	800733e <HAL_UART_Init+0xda>
 80074a0:	4b0e      	ldr	r3, [pc, #56]	@ (80074dc <HAL_UART_Init+0x278>)
  huart->RxISR = NULL;
 80074a2:	6765      	str	r5, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80074a4:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80074a6:	67a5      	str	r5, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	e74d      	b.n	8007348 <HAL_UART_Init+0xe4>
        pclk = (uint32_t) HSI_VALUE;
 80074ac:	4810      	ldr	r0, [pc, #64]	@ (80074f0 <HAL_UART_Init+0x28c>)
 80074ae:	e7dd      	b.n	800746c <HAL_UART_Init+0x208>
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b0:	f7fe fda6 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 80074b4:	0005      	movs	r5, r0
        break;
 80074b6:	e786      	b.n	80073c6 <HAL_UART_Init+0x162>
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b8:	f7fe fda2 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
        break;
 80074bc:	e7d3      	b.n	8007466 <HAL_UART_Init+0x202>
        pclk = (uint32_t) HSI_VALUE;
 80074be:	4d0c      	ldr	r5, [pc, #48]	@ (80074f0 <HAL_UART_Init+0x28c>)
 80074c0:	e78a      	b.n	80073d8 <HAL_UART_Init+0x174>
 80074c2:	46c0      	nop			@ (mov r8, r8)
 80074c4:	cfff69f3 	.word	0xcfff69f3
 80074c8:	ffffcfff 	.word	0xffffcfff
 80074cc:	40008000 	.word	0x40008000
 80074d0:	11fff4ff 	.word	0x11fff4ff
 80074d4:	40013800 	.word	0x40013800
 80074d8:	40004400 	.word	0x40004400
 80074dc:	00010001 	.word	0x00010001
 80074e0:	40021000 	.word	0x40021000
 80074e4:	0800cc24 	.word	0x0800cc24
 80074e8:	0000ffef 	.word	0x0000ffef
 80074ec:	ffffb7ff 	.word	0xffffb7ff
 80074f0:	00f42400 	.word	0x00f42400
 80074f4:	fffffd00 	.word	0xfffffd00
 80074f8:	000ffcff 	.word	0x000ffcff
 80074fc:	0000fff0 	.word	0x0000fff0

08007500 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007500:	4770      	bx	lr
 8007502:	46c0      	nop			@ (mov r8, r8)

08007504 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8007504:	4770      	bx	lr
 8007506:	46c0      	nop			@ (mov r8, r8)

08007508 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8007508:	4770      	bx	lr
 800750a:	46c0      	nop			@ (mov r8, r8)

0800750c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800750c:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800750e:	2484      	movs	r4, #132	@ 0x84
 8007510:	5d03      	ldrb	r3, [r0, r4]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d012      	beq.n	800753c <HAL_UARTEx_DisableFifoMode+0x30>

  huart->gState = HAL_UART_STATE_BUSY;
 8007516:	2588      	movs	r5, #136	@ 0x88
 8007518:	2324      	movs	r3, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800751a:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800751c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800751e:	6803      	ldr	r3, [r0, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007522:	6819      	ldr	r1, [r3, #0]
 8007524:	43b1      	bics	r1, r6
 8007526:	6019      	str	r1, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007528:	4905      	ldr	r1, [pc, #20]	@ (8007540 <HAL_UARTEx_DisableFifoMode+0x34>)
 800752a:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800752c:	2100      	movs	r1, #0
 800752e:	6641      	str	r1, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007532:	2320      	movs	r3, #32
 8007534:	5143      	str	r3, [r0, r5]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007536:	5501      	strb	r1, [r0, r4]

  return HAL_OK;
 8007538:	2000      	movs	r0, #0
}
 800753a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800753c:	2002      	movs	r0, #2
 800753e:	e7fc      	b.n	800753a <HAL_UARTEx_DisableFifoMode+0x2e>
 8007540:	dfffffff 	.word	0xdfffffff

08007544 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007546:	46d6      	mov	lr, sl
 8007548:	464f      	mov	r7, r9
 800754a:	4646      	mov	r6, r8
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754c:	2384      	movs	r3, #132	@ 0x84
{
 800754e:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 8007550:	5cc3      	ldrb	r3, [r0, r3]
{
 8007552:	0004      	movs	r4, r0
 8007554:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8007556:	2b01      	cmp	r3, #1
 8007558:	d03d      	beq.n	80075d6 <HAL_UARTEx_SetTxFifoThreshold+0x92>

  huart->gState = HAL_UART_STATE_BUSY;
 800755a:	2388      	movs	r3, #136	@ 0x88
 800755c:	2124      	movs	r1, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800755e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007560:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007562:	682e      	ldr	r6, [r5, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	3923      	subs	r1, #35	@ 0x23
 8007568:	438b      	bics	r3, r1
 800756a:	602b      	str	r3, [r5, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800756c:	68ab      	ldr	r3, [r5, #8]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	08d9      	lsrs	r1, r3, #3
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007572:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007574:	4311      	orrs	r1, r2
 8007576:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007578:	2b00      	cmp	r3, #0
 800757a:	d029      	beq.n	80075d0 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800757c:	68ab      	ldr	r3, [r5, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800757e:	4a17      	ldr	r2, [pc, #92]	@ (80075dc <HAL_UARTEx_SetTxFifoThreshold+0x98>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007580:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007582:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007584:	68ab      	ldr	r3, [r5, #8]
 8007586:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007588:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800758a:	4a15      	ldr	r2, [pc, #84]	@ (80075e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800758c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800758e:	5cd1      	ldrb	r1, [r2, r3]
 8007590:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007592:	f7f8 fe5b 	bl	800024c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007596:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007598:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800759a:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800759c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800759e:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075a0:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 80075a2:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075a4:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075a6:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075a8:	f7f8 fe50 	bl	800024c <__divsi3>
 80075ac:	b280      	uxth	r0, r0
 80075ae:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 80075b0:	2220      	movs	r2, #32
 80075b2:	52e0      	strh	r0, [r4, r3]
 80075b4:	3302      	adds	r3, #2
 80075b6:	52e7      	strh	r7, [r4, r3]
 80075b8:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ba:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80075bc:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80075be:	2200      	movs	r2, #0
  return HAL_OK;
 80075c0:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80075c2:	3b04      	subs	r3, #4
 80075c4:	54e2      	strb	r2, [r4, r3]
}
 80075c6:	bce0      	pop	{r5, r6, r7}
 80075c8:	46ba      	mov	sl, r7
 80075ca:	46b1      	mov	r9, r6
 80075cc:	46a8      	mov	r8, r5
 80075ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 80075d0:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 80075d2:	2701      	movs	r7, #1
 80075d4:	e7eb      	b.n	80075ae <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 80075d6:	2002      	movs	r0, #2
 80075d8:	e7f5      	b.n	80075c6 <HAL_UARTEx_SetTxFifoThreshold+0x82>
 80075da:	46c0      	nop			@ (mov r8, r8)
 80075dc:	0800cc44 	.word	0x0800cc44
 80075e0:	0800cc3c 	.word	0x0800cc3c

080075e4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80075e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e6:	46d6      	mov	lr, sl
 80075e8:	464f      	mov	r7, r9
 80075ea:	4646      	mov	r6, r8
  __HAL_LOCK(huart);
 80075ec:	2384      	movs	r3, #132	@ 0x84
{
 80075ee:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 80075f0:	5cc3      	ldrb	r3, [r0, r3]
{
 80075f2:	0004      	movs	r4, r0
 80075f4:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d03d      	beq.n	8007676 <HAL_UARTEx_SetRxFifoThreshold+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 80075fa:	2388      	movs	r3, #136	@ 0x88
 80075fc:	2124      	movs	r1, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075fe:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007600:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007602:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	3923      	subs	r1, #35	@ 0x23
 8007608:	438b      	bics	r3, r1
 800760a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800760c:	68a9      	ldr	r1, [r5, #8]
 800760e:	4b1b      	ldr	r3, [pc, #108]	@ (800767c <HAL_UARTEx_SetRxFifoThreshold+0x98>)
 8007610:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007612:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007614:	4311      	orrs	r1, r2
 8007616:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007618:	2b00      	cmp	r3, #0
 800761a:	d029      	beq.n	8007670 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800761c:	68ab      	ldr	r3, [r5, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800761e:	4a18      	ldr	r2, [pc, #96]	@ (8007680 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007620:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007622:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007624:	68ab      	ldr	r3, [r5, #8]
 8007626:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007628:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800762a:	4a16      	ldr	r2, [pc, #88]	@ (8007684 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800762c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800762e:	5cd1      	ldrb	r1, [r2, r3]
 8007630:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007632:	f7f8 fe0b 	bl	800024c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007636:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007638:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800763a:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800763c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800763e:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007640:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007642:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007644:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007646:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007648:	f7f8 fe00 	bl	800024c <__divsi3>
 800764c:	b280      	uxth	r0, r0
 800764e:	2368      	movs	r3, #104	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8007650:	2220      	movs	r2, #32
 8007652:	52e0      	strh	r0, [r4, r3]
 8007654:	3302      	adds	r3, #2
 8007656:	52e7      	strh	r7, [r4, r3]
 8007658:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800765a:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800765c:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800765e:	2200      	movs	r2, #0
  return HAL_OK;
 8007660:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8007662:	3b04      	subs	r3, #4
 8007664:	54e2      	strb	r2, [r4, r3]
}
 8007666:	bce0      	pop	{r5, r6, r7}
 8007668:	46ba      	mov	sl, r7
 800766a:	46b1      	mov	r9, r6
 800766c:	46a8      	mov	r8, r5
 800766e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 8007670:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 8007672:	2701      	movs	r7, #1
 8007674:	e7eb      	b.n	800764e <HAL_UARTEx_SetRxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8007676:	2002      	movs	r0, #2
 8007678:	e7f5      	b.n	8007666 <HAL_UARTEx_SetRxFifoThreshold+0x82>
 800767a:	46c0      	nop			@ (mov r8, r8)
 800767c:	f1ffffff 	.word	0xf1ffffff
 8007680:	0800cc44 	.word	0x0800cc44
 8007684:	0800cc3c 	.word	0x0800cc3c

08007688 <cos>:
 8007688:	b530      	push	{r4, r5, lr}
 800768a:	4a1d      	ldr	r2, [pc, #116]	@ (8007700 <cos+0x78>)
 800768c:	004b      	lsls	r3, r1, #1
 800768e:	b087      	sub	sp, #28
 8007690:	085b      	lsrs	r3, r3, #1
 8007692:	4293      	cmp	r3, r2
 8007694:	d804      	bhi.n	80076a0 <cos+0x18>
 8007696:	2200      	movs	r2, #0
 8007698:	2300      	movs	r3, #0
 800769a:	f000 f879 	bl	8007790 <__kernel_cos>
 800769e:	e006      	b.n	80076ae <cos+0x26>
 80076a0:	4a18      	ldr	r2, [pc, #96]	@ (8007704 <cos+0x7c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d905      	bls.n	80076b2 <cos+0x2a>
 80076a6:	0002      	movs	r2, r0
 80076a8:	000b      	movs	r3, r1
 80076aa:	f7fb fa15 	bl	8002ad8 <__aeabi_dsub>
 80076ae:	b007      	add	sp, #28
 80076b0:	bd30      	pop	{r4, r5, pc}
 80076b2:	aa02      	add	r2, sp, #8
 80076b4:	f000 f9d8 	bl	8007a68 <__ieee754_rem_pio2>
 80076b8:	9c04      	ldr	r4, [sp, #16]
 80076ba:	9d05      	ldr	r5, [sp, #20]
 80076bc:	2303      	movs	r3, #3
 80076be:	4003      	ands	r3, r0
 80076c0:	9802      	ldr	r0, [sp, #8]
 80076c2:	9903      	ldr	r1, [sp, #12]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d006      	beq.n	80076d6 <cos+0x4e>
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d00d      	beq.n	80076e8 <cos+0x60>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d110      	bne.n	80076f2 <cos+0x6a>
 80076d0:	0022      	movs	r2, r4
 80076d2:	002b      	movs	r3, r5
 80076d4:	e7e1      	b.n	800769a <cos+0x12>
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	0022      	movs	r2, r4
 80076da:	002b      	movs	r3, r5
 80076dc:	f000 f918 	bl	8007910 <__kernel_sin>
 80076e0:	2380      	movs	r3, #128	@ 0x80
 80076e2:	061b      	lsls	r3, r3, #24
 80076e4:	18c9      	adds	r1, r1, r3
 80076e6:	e7e2      	b.n	80076ae <cos+0x26>
 80076e8:	0022      	movs	r2, r4
 80076ea:	002b      	movs	r3, r5
 80076ec:	f000 f850 	bl	8007790 <__kernel_cos>
 80076f0:	e7f6      	b.n	80076e0 <cos+0x58>
 80076f2:	2301      	movs	r3, #1
 80076f4:	0022      	movs	r2, r4
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	002b      	movs	r3, r5
 80076fa:	f000 f909 	bl	8007910 <__kernel_sin>
 80076fe:	e7d6      	b.n	80076ae <cos+0x26>
 8007700:	3fe921fb 	.word	0x3fe921fb
 8007704:	7fefffff 	.word	0x7fefffff

08007708 <sin>:
 8007708:	b530      	push	{r4, r5, lr}
 800770a:	4a1f      	ldr	r2, [pc, #124]	@ (8007788 <sin+0x80>)
 800770c:	004b      	lsls	r3, r1, #1
 800770e:	b087      	sub	sp, #28
 8007710:	085b      	lsrs	r3, r3, #1
 8007712:	4293      	cmp	r3, r2
 8007714:	d806      	bhi.n	8007724 <sin+0x1c>
 8007716:	2300      	movs	r3, #0
 8007718:	2200      	movs	r2, #0
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	2300      	movs	r3, #0
 800771e:	f000 f8f7 	bl	8007910 <__kernel_sin>
 8007722:	e006      	b.n	8007732 <sin+0x2a>
 8007724:	4a19      	ldr	r2, [pc, #100]	@ (800778c <sin+0x84>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d905      	bls.n	8007736 <sin+0x2e>
 800772a:	0002      	movs	r2, r0
 800772c:	000b      	movs	r3, r1
 800772e:	f7fb f9d3 	bl	8002ad8 <__aeabi_dsub>
 8007732:	b007      	add	sp, #28
 8007734:	bd30      	pop	{r4, r5, pc}
 8007736:	aa02      	add	r2, sp, #8
 8007738:	f000 f996 	bl	8007a68 <__ieee754_rem_pio2>
 800773c:	9c04      	ldr	r4, [sp, #16]
 800773e:	9d05      	ldr	r5, [sp, #20]
 8007740:	2303      	movs	r3, #3
 8007742:	4003      	ands	r3, r0
 8007744:	9802      	ldr	r0, [sp, #8]
 8007746:	9903      	ldr	r1, [sp, #12]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d008      	beq.n	800775e <sin+0x56>
 800774c:	2b02      	cmp	r3, #2
 800774e:	d00b      	beq.n	8007768 <sin+0x60>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d113      	bne.n	800777c <sin+0x74>
 8007754:	3301      	adds	r3, #1
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	0022      	movs	r2, r4
 800775a:	002b      	movs	r3, r5
 800775c:	e7df      	b.n	800771e <sin+0x16>
 800775e:	0022      	movs	r2, r4
 8007760:	002b      	movs	r3, r5
 8007762:	f000 f815 	bl	8007790 <__kernel_cos>
 8007766:	e7e4      	b.n	8007732 <sin+0x2a>
 8007768:	2301      	movs	r3, #1
 800776a:	0022      	movs	r2, r4
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	002b      	movs	r3, r5
 8007770:	f000 f8ce 	bl	8007910 <__kernel_sin>
 8007774:	2380      	movs	r3, #128	@ 0x80
 8007776:	061b      	lsls	r3, r3, #24
 8007778:	18c9      	adds	r1, r1, r3
 800777a:	e7da      	b.n	8007732 <sin+0x2a>
 800777c:	0022      	movs	r2, r4
 800777e:	002b      	movs	r3, r5
 8007780:	f000 f806 	bl	8007790 <__kernel_cos>
 8007784:	e7f6      	b.n	8007774 <sin+0x6c>
 8007786:	46c0      	nop			@ (mov r8, r8)
 8007788:	3fe921fb 	.word	0x3fe921fb
 800778c:	7fefffff 	.word	0x7fefffff

08007790 <__kernel_cos>:
 8007790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007792:	b087      	sub	sp, #28
 8007794:	9204      	str	r2, [sp, #16]
 8007796:	9305      	str	r3, [sp, #20]
 8007798:	004b      	lsls	r3, r1, #1
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	23f9      	movs	r3, #249	@ 0xf9
 80077a0:	9a01      	ldr	r2, [sp, #4]
 80077a2:	0004      	movs	r4, r0
 80077a4:	000d      	movs	r5, r1
 80077a6:	059b      	lsls	r3, r3, #22
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d204      	bcs.n	80077b6 <__kernel_cos+0x26>
 80077ac:	f7fb fd52 	bl	8003254 <__aeabi_d2iz>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d100      	bne.n	80077b6 <__kernel_cos+0x26>
 80077b4:	e084      	b.n	80078c0 <__kernel_cos+0x130>
 80077b6:	0022      	movs	r2, r4
 80077b8:	002b      	movs	r3, r5
 80077ba:	0020      	movs	r0, r4
 80077bc:	0029      	movs	r1, r5
 80077be:	f7fa fec3 	bl	8002548 <__aeabi_dmul>
 80077c2:	2200      	movs	r2, #0
 80077c4:	4b40      	ldr	r3, [pc, #256]	@ (80078c8 <__kernel_cos+0x138>)
 80077c6:	0006      	movs	r6, r0
 80077c8:	000f      	movs	r7, r1
 80077ca:	f7fa febd 	bl	8002548 <__aeabi_dmul>
 80077ce:	4a3f      	ldr	r2, [pc, #252]	@ (80078cc <__kernel_cos+0x13c>)
 80077d0:	9002      	str	r0, [sp, #8]
 80077d2:	9103      	str	r1, [sp, #12]
 80077d4:	4b3e      	ldr	r3, [pc, #248]	@ (80078d0 <__kernel_cos+0x140>)
 80077d6:	0030      	movs	r0, r6
 80077d8:	0039      	movs	r1, r7
 80077da:	f7fa feb5 	bl	8002548 <__aeabi_dmul>
 80077de:	4a3d      	ldr	r2, [pc, #244]	@ (80078d4 <__kernel_cos+0x144>)
 80077e0:	4b3d      	ldr	r3, [pc, #244]	@ (80078d8 <__kernel_cos+0x148>)
 80077e2:	f7f9 ff09 	bl	80015f8 <__aeabi_dadd>
 80077e6:	0032      	movs	r2, r6
 80077e8:	003b      	movs	r3, r7
 80077ea:	f7fa fead 	bl	8002548 <__aeabi_dmul>
 80077ee:	4a3b      	ldr	r2, [pc, #236]	@ (80078dc <__kernel_cos+0x14c>)
 80077f0:	4b3b      	ldr	r3, [pc, #236]	@ (80078e0 <__kernel_cos+0x150>)
 80077f2:	f7fb f971 	bl	8002ad8 <__aeabi_dsub>
 80077f6:	0032      	movs	r2, r6
 80077f8:	003b      	movs	r3, r7
 80077fa:	f7fa fea5 	bl	8002548 <__aeabi_dmul>
 80077fe:	4a39      	ldr	r2, [pc, #228]	@ (80078e4 <__kernel_cos+0x154>)
 8007800:	4b39      	ldr	r3, [pc, #228]	@ (80078e8 <__kernel_cos+0x158>)
 8007802:	f7f9 fef9 	bl	80015f8 <__aeabi_dadd>
 8007806:	0032      	movs	r2, r6
 8007808:	003b      	movs	r3, r7
 800780a:	f7fa fe9d 	bl	8002548 <__aeabi_dmul>
 800780e:	4a37      	ldr	r2, [pc, #220]	@ (80078ec <__kernel_cos+0x15c>)
 8007810:	4b37      	ldr	r3, [pc, #220]	@ (80078f0 <__kernel_cos+0x160>)
 8007812:	f7fb f961 	bl	8002ad8 <__aeabi_dsub>
 8007816:	0032      	movs	r2, r6
 8007818:	003b      	movs	r3, r7
 800781a:	f7fa fe95 	bl	8002548 <__aeabi_dmul>
 800781e:	4a35      	ldr	r2, [pc, #212]	@ (80078f4 <__kernel_cos+0x164>)
 8007820:	4b35      	ldr	r3, [pc, #212]	@ (80078f8 <__kernel_cos+0x168>)
 8007822:	f7f9 fee9 	bl	80015f8 <__aeabi_dadd>
 8007826:	0032      	movs	r2, r6
 8007828:	003b      	movs	r3, r7
 800782a:	f7fa fe8d 	bl	8002548 <__aeabi_dmul>
 800782e:	0032      	movs	r2, r6
 8007830:	003b      	movs	r3, r7
 8007832:	f7fa fe89 	bl	8002548 <__aeabi_dmul>
 8007836:	9a04      	ldr	r2, [sp, #16]
 8007838:	9b05      	ldr	r3, [sp, #20]
 800783a:	0006      	movs	r6, r0
 800783c:	000f      	movs	r7, r1
 800783e:	0020      	movs	r0, r4
 8007840:	0029      	movs	r1, r5
 8007842:	f7fa fe81 	bl	8002548 <__aeabi_dmul>
 8007846:	0002      	movs	r2, r0
 8007848:	000b      	movs	r3, r1
 800784a:	0030      	movs	r0, r6
 800784c:	0039      	movs	r1, r7
 800784e:	f7fb f943 	bl	8002ad8 <__aeabi_dsub>
 8007852:	4b2a      	ldr	r3, [pc, #168]	@ (80078fc <__kernel_cos+0x16c>)
 8007854:	9a01      	ldr	r2, [sp, #4]
 8007856:	9004      	str	r0, [sp, #16]
 8007858:	9105      	str	r1, [sp, #20]
 800785a:	429a      	cmp	r2, r3
 800785c:	d80d      	bhi.n	800787a <__kernel_cos+0xea>
 800785e:	0002      	movs	r2, r0
 8007860:	000b      	movs	r3, r1
 8007862:	9802      	ldr	r0, [sp, #8]
 8007864:	9903      	ldr	r1, [sp, #12]
 8007866:	f7fb f937 	bl	8002ad8 <__aeabi_dsub>
 800786a:	0002      	movs	r2, r0
 800786c:	2000      	movs	r0, #0
 800786e:	000b      	movs	r3, r1
 8007870:	4923      	ldr	r1, [pc, #140]	@ (8007900 <__kernel_cos+0x170>)
 8007872:	f7fb f931 	bl	8002ad8 <__aeabi_dsub>
 8007876:	b007      	add	sp, #28
 8007878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800787a:	4b22      	ldr	r3, [pc, #136]	@ (8007904 <__kernel_cos+0x174>)
 800787c:	9a01      	ldr	r2, [sp, #4]
 800787e:	2600      	movs	r6, #0
 8007880:	429a      	cmp	r2, r3
 8007882:	d81b      	bhi.n	80078bc <__kernel_cos+0x12c>
 8007884:	0013      	movs	r3, r2
 8007886:	4a20      	ldr	r2, [pc, #128]	@ (8007908 <__kernel_cos+0x178>)
 8007888:	4694      	mov	ip, r2
 800788a:	4463      	add	r3, ip
 800788c:	001f      	movs	r7, r3
 800788e:	0032      	movs	r2, r6
 8007890:	003b      	movs	r3, r7
 8007892:	2000      	movs	r0, #0
 8007894:	491a      	ldr	r1, [pc, #104]	@ (8007900 <__kernel_cos+0x170>)
 8007896:	f7fb f91f 	bl	8002ad8 <__aeabi_dsub>
 800789a:	0032      	movs	r2, r6
 800789c:	0004      	movs	r4, r0
 800789e:	000d      	movs	r5, r1
 80078a0:	9802      	ldr	r0, [sp, #8]
 80078a2:	9903      	ldr	r1, [sp, #12]
 80078a4:	003b      	movs	r3, r7
 80078a6:	f7fb f917 	bl	8002ad8 <__aeabi_dsub>
 80078aa:	9a04      	ldr	r2, [sp, #16]
 80078ac:	9b05      	ldr	r3, [sp, #20]
 80078ae:	f7fb f913 	bl	8002ad8 <__aeabi_dsub>
 80078b2:	0002      	movs	r2, r0
 80078b4:	000b      	movs	r3, r1
 80078b6:	0020      	movs	r0, r4
 80078b8:	0029      	movs	r1, r5
 80078ba:	e7da      	b.n	8007872 <__kernel_cos+0xe2>
 80078bc:	4f13      	ldr	r7, [pc, #76]	@ (800790c <__kernel_cos+0x17c>)
 80078be:	e7e6      	b.n	800788e <__kernel_cos+0xfe>
 80078c0:	2000      	movs	r0, #0
 80078c2:	490f      	ldr	r1, [pc, #60]	@ (8007900 <__kernel_cos+0x170>)
 80078c4:	e7d7      	b.n	8007876 <__kernel_cos+0xe6>
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	3fe00000 	.word	0x3fe00000
 80078cc:	be8838d4 	.word	0xbe8838d4
 80078d0:	bda8fae9 	.word	0xbda8fae9
 80078d4:	bdb4b1c4 	.word	0xbdb4b1c4
 80078d8:	3e21ee9e 	.word	0x3e21ee9e
 80078dc:	809c52ad 	.word	0x809c52ad
 80078e0:	3e927e4f 	.word	0x3e927e4f
 80078e4:	19cb1590 	.word	0x19cb1590
 80078e8:	3efa01a0 	.word	0x3efa01a0
 80078ec:	16c15177 	.word	0x16c15177
 80078f0:	3f56c16c 	.word	0x3f56c16c
 80078f4:	5555554c 	.word	0x5555554c
 80078f8:	3fa55555 	.word	0x3fa55555
 80078fc:	3fd33332 	.word	0x3fd33332
 8007900:	3ff00000 	.word	0x3ff00000
 8007904:	3fe90000 	.word	0x3fe90000
 8007908:	ffe00000 	.word	0xffe00000
 800790c:	3fd20000 	.word	0x3fd20000

08007910 <__kernel_sin>:
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007912:	b089      	sub	sp, #36	@ 0x24
 8007914:	9202      	str	r2, [sp, #8]
 8007916:	9303      	str	r3, [sp, #12]
 8007918:	22f9      	movs	r2, #249	@ 0xf9
 800791a:	004b      	lsls	r3, r1, #1
 800791c:	0006      	movs	r6, r0
 800791e:	000f      	movs	r7, r1
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	0592      	lsls	r2, r2, #22
 8007924:	4293      	cmp	r3, r2
 8007926:	d203      	bcs.n	8007930 <__kernel_sin+0x20>
 8007928:	f7fb fc94 	bl	8003254 <__aeabi_d2iz>
 800792c:	2800      	cmp	r0, #0
 800792e:	d04c      	beq.n	80079ca <__kernel_sin+0xba>
 8007930:	0032      	movs	r2, r6
 8007932:	003b      	movs	r3, r7
 8007934:	0030      	movs	r0, r6
 8007936:	0039      	movs	r1, r7
 8007938:	f7fa fe06 	bl	8002548 <__aeabi_dmul>
 800793c:	0004      	movs	r4, r0
 800793e:	000d      	movs	r5, r1
 8007940:	0002      	movs	r2, r0
 8007942:	000b      	movs	r3, r1
 8007944:	0030      	movs	r0, r6
 8007946:	0039      	movs	r1, r7
 8007948:	f7fa fdfe 	bl	8002548 <__aeabi_dmul>
 800794c:	4a39      	ldr	r2, [pc, #228]	@ (8007a34 <__kernel_sin+0x124>)
 800794e:	9000      	str	r0, [sp, #0]
 8007950:	9101      	str	r1, [sp, #4]
 8007952:	4b39      	ldr	r3, [pc, #228]	@ (8007a38 <__kernel_sin+0x128>)
 8007954:	0020      	movs	r0, r4
 8007956:	0029      	movs	r1, r5
 8007958:	f7fa fdf6 	bl	8002548 <__aeabi_dmul>
 800795c:	4a37      	ldr	r2, [pc, #220]	@ (8007a3c <__kernel_sin+0x12c>)
 800795e:	4b38      	ldr	r3, [pc, #224]	@ (8007a40 <__kernel_sin+0x130>)
 8007960:	f7fb f8ba 	bl	8002ad8 <__aeabi_dsub>
 8007964:	0022      	movs	r2, r4
 8007966:	002b      	movs	r3, r5
 8007968:	f7fa fdee 	bl	8002548 <__aeabi_dmul>
 800796c:	4a35      	ldr	r2, [pc, #212]	@ (8007a44 <__kernel_sin+0x134>)
 800796e:	4b36      	ldr	r3, [pc, #216]	@ (8007a48 <__kernel_sin+0x138>)
 8007970:	f7f9 fe42 	bl	80015f8 <__aeabi_dadd>
 8007974:	0022      	movs	r2, r4
 8007976:	002b      	movs	r3, r5
 8007978:	f7fa fde6 	bl	8002548 <__aeabi_dmul>
 800797c:	4a33      	ldr	r2, [pc, #204]	@ (8007a4c <__kernel_sin+0x13c>)
 800797e:	4b34      	ldr	r3, [pc, #208]	@ (8007a50 <__kernel_sin+0x140>)
 8007980:	f7fb f8aa 	bl	8002ad8 <__aeabi_dsub>
 8007984:	0022      	movs	r2, r4
 8007986:	002b      	movs	r3, r5
 8007988:	f7fa fdde 	bl	8002548 <__aeabi_dmul>
 800798c:	4b31      	ldr	r3, [pc, #196]	@ (8007a54 <__kernel_sin+0x144>)
 800798e:	4a32      	ldr	r2, [pc, #200]	@ (8007a58 <__kernel_sin+0x148>)
 8007990:	f7f9 fe32 	bl	80015f8 <__aeabi_dadd>
 8007994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007996:	9004      	str	r0, [sp, #16]
 8007998:	9105      	str	r1, [sp, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d119      	bne.n	80079d2 <__kernel_sin+0xc2>
 800799e:	0002      	movs	r2, r0
 80079a0:	000b      	movs	r3, r1
 80079a2:	0020      	movs	r0, r4
 80079a4:	0029      	movs	r1, r5
 80079a6:	f7fa fdcf 	bl	8002548 <__aeabi_dmul>
 80079aa:	4a2c      	ldr	r2, [pc, #176]	@ (8007a5c <__kernel_sin+0x14c>)
 80079ac:	4b2c      	ldr	r3, [pc, #176]	@ (8007a60 <__kernel_sin+0x150>)
 80079ae:	f7fb f893 	bl	8002ad8 <__aeabi_dsub>
 80079b2:	9a00      	ldr	r2, [sp, #0]
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	f7fa fdc7 	bl	8002548 <__aeabi_dmul>
 80079ba:	0002      	movs	r2, r0
 80079bc:	000b      	movs	r3, r1
 80079be:	0030      	movs	r0, r6
 80079c0:	0039      	movs	r1, r7
 80079c2:	f7f9 fe19 	bl	80015f8 <__aeabi_dadd>
 80079c6:	0006      	movs	r6, r0
 80079c8:	000f      	movs	r7, r1
 80079ca:	0030      	movs	r0, r6
 80079cc:	0039      	movs	r1, r7
 80079ce:	b009      	add	sp, #36	@ 0x24
 80079d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d2:	2200      	movs	r2, #0
 80079d4:	9802      	ldr	r0, [sp, #8]
 80079d6:	9903      	ldr	r1, [sp, #12]
 80079d8:	4b22      	ldr	r3, [pc, #136]	@ (8007a64 <__kernel_sin+0x154>)
 80079da:	f7fa fdb5 	bl	8002548 <__aeabi_dmul>
 80079de:	9a04      	ldr	r2, [sp, #16]
 80079e0:	9b05      	ldr	r3, [sp, #20]
 80079e2:	9006      	str	r0, [sp, #24]
 80079e4:	9107      	str	r1, [sp, #28]
 80079e6:	9800      	ldr	r0, [sp, #0]
 80079e8:	9901      	ldr	r1, [sp, #4]
 80079ea:	f7fa fdad 	bl	8002548 <__aeabi_dmul>
 80079ee:	0002      	movs	r2, r0
 80079f0:	000b      	movs	r3, r1
 80079f2:	9806      	ldr	r0, [sp, #24]
 80079f4:	9907      	ldr	r1, [sp, #28]
 80079f6:	f7fb f86f 	bl	8002ad8 <__aeabi_dsub>
 80079fa:	0022      	movs	r2, r4
 80079fc:	002b      	movs	r3, r5
 80079fe:	f7fa fda3 	bl	8002548 <__aeabi_dmul>
 8007a02:	9a02      	ldr	r2, [sp, #8]
 8007a04:	9b03      	ldr	r3, [sp, #12]
 8007a06:	f7fb f867 	bl	8002ad8 <__aeabi_dsub>
 8007a0a:	4a14      	ldr	r2, [pc, #80]	@ (8007a5c <__kernel_sin+0x14c>)
 8007a0c:	0004      	movs	r4, r0
 8007a0e:	000d      	movs	r5, r1
 8007a10:	9800      	ldr	r0, [sp, #0]
 8007a12:	9901      	ldr	r1, [sp, #4]
 8007a14:	4b12      	ldr	r3, [pc, #72]	@ (8007a60 <__kernel_sin+0x150>)
 8007a16:	f7fa fd97 	bl	8002548 <__aeabi_dmul>
 8007a1a:	0002      	movs	r2, r0
 8007a1c:	000b      	movs	r3, r1
 8007a1e:	0020      	movs	r0, r4
 8007a20:	0029      	movs	r1, r5
 8007a22:	f7f9 fde9 	bl	80015f8 <__aeabi_dadd>
 8007a26:	0002      	movs	r2, r0
 8007a28:	000b      	movs	r3, r1
 8007a2a:	0030      	movs	r0, r6
 8007a2c:	0039      	movs	r1, r7
 8007a2e:	f7fb f853 	bl	8002ad8 <__aeabi_dsub>
 8007a32:	e7c8      	b.n	80079c6 <__kernel_sin+0xb6>
 8007a34:	5acfd57c 	.word	0x5acfd57c
 8007a38:	3de5d93a 	.word	0x3de5d93a
 8007a3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a40:	3e5ae5e6 	.word	0x3e5ae5e6
 8007a44:	57b1fe7d 	.word	0x57b1fe7d
 8007a48:	3ec71de3 	.word	0x3ec71de3
 8007a4c:	19c161d5 	.word	0x19c161d5
 8007a50:	3f2a01a0 	.word	0x3f2a01a0
 8007a54:	3f811111 	.word	0x3f811111
 8007a58:	1110f8a6 	.word	0x1110f8a6
 8007a5c:	55555549 	.word	0x55555549
 8007a60:	3fc55555 	.word	0x3fc55555
 8007a64:	3fe00000 	.word	0x3fe00000

08007a68 <__ieee754_rem_pio2>:
 8007a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6a:	4baf      	ldr	r3, [pc, #700]	@ (8007d28 <__ieee754_rem_pio2+0x2c0>)
 8007a6c:	b095      	sub	sp, #84	@ 0x54
 8007a6e:	004d      	lsls	r5, r1, #1
 8007a70:	0017      	movs	r7, r2
 8007a72:	910d      	str	r1, [sp, #52]	@ 0x34
 8007a74:	086d      	lsrs	r5, r5, #1
 8007a76:	429d      	cmp	r5, r3
 8007a78:	d807      	bhi.n	8007a8a <__ieee754_rem_pio2+0x22>
 8007a7a:	6010      	str	r0, [r2, #0]
 8007a7c:	6051      	str	r1, [r2, #4]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2200      	movs	r2, #0
 8007a82:	60ba      	str	r2, [r7, #8]
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	2300      	movs	r3, #0
 8007a88:	e024      	b.n	8007ad4 <__ieee754_rem_pio2+0x6c>
 8007a8a:	4ba8      	ldr	r3, [pc, #672]	@ (8007d2c <__ieee754_rem_pio2+0x2c4>)
 8007a8c:	429d      	cmp	r5, r3
 8007a8e:	d900      	bls.n	8007a92 <__ieee754_rem_pio2+0x2a>
 8007a90:	e072      	b.n	8007b78 <__ieee754_rem_pio2+0x110>
 8007a92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a94:	4ca6      	ldr	r4, [pc, #664]	@ (8007d30 <__ieee754_rem_pio2+0x2c8>)
 8007a96:	4aa7      	ldr	r2, [pc, #668]	@ (8007d34 <__ieee754_rem_pio2+0x2cc>)
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dd37      	ble.n	8007b0c <__ieee754_rem_pio2+0xa4>
 8007a9c:	4ba4      	ldr	r3, [pc, #656]	@ (8007d30 <__ieee754_rem_pio2+0x2c8>)
 8007a9e:	f7fb f81b 	bl	8002ad8 <__aeabi_dsub>
 8007aa2:	9002      	str	r0, [sp, #8]
 8007aa4:	9103      	str	r1, [sp, #12]
 8007aa6:	42a5      	cmp	r5, r4
 8007aa8:	d018      	beq.n	8007adc <__ieee754_rem_pio2+0x74>
 8007aaa:	4aa3      	ldr	r2, [pc, #652]	@ (8007d38 <__ieee754_rem_pio2+0x2d0>)
 8007aac:	4ba3      	ldr	r3, [pc, #652]	@ (8007d3c <__ieee754_rem_pio2+0x2d4>)
 8007aae:	f7fb f813 	bl	8002ad8 <__aeabi_dsub>
 8007ab2:	0002      	movs	r2, r0
 8007ab4:	000b      	movs	r3, r1
 8007ab6:	0004      	movs	r4, r0
 8007ab8:	000d      	movs	r5, r1
 8007aba:	9802      	ldr	r0, [sp, #8]
 8007abc:	9903      	ldr	r1, [sp, #12]
 8007abe:	f7fb f80b 	bl	8002ad8 <__aeabi_dsub>
 8007ac2:	4a9d      	ldr	r2, [pc, #628]	@ (8007d38 <__ieee754_rem_pio2+0x2d0>)
 8007ac4:	4b9d      	ldr	r3, [pc, #628]	@ (8007d3c <__ieee754_rem_pio2+0x2d4>)
 8007ac6:	f7fb f807 	bl	8002ad8 <__aeabi_dsub>
 8007aca:	2301      	movs	r3, #1
 8007acc:	603c      	str	r4, [r7, #0]
 8007ace:	607d      	str	r5, [r7, #4]
 8007ad0:	60b8      	str	r0, [r7, #8]
 8007ad2:	60f9      	str	r1, [r7, #12]
 8007ad4:	9302      	str	r3, [sp, #8]
 8007ad6:	9802      	ldr	r0, [sp, #8]
 8007ad8:	b015      	add	sp, #84	@ 0x54
 8007ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007adc:	22d3      	movs	r2, #211	@ 0xd3
 8007ade:	9802      	ldr	r0, [sp, #8]
 8007ae0:	9903      	ldr	r1, [sp, #12]
 8007ae2:	4b96      	ldr	r3, [pc, #600]	@ (8007d3c <__ieee754_rem_pio2+0x2d4>)
 8007ae4:	0552      	lsls	r2, r2, #21
 8007ae6:	f7fa fff7 	bl	8002ad8 <__aeabi_dsub>
 8007aea:	4a95      	ldr	r2, [pc, #596]	@ (8007d40 <__ieee754_rem_pio2+0x2d8>)
 8007aec:	4b95      	ldr	r3, [pc, #596]	@ (8007d44 <__ieee754_rem_pio2+0x2dc>)
 8007aee:	9002      	str	r0, [sp, #8]
 8007af0:	9103      	str	r1, [sp, #12]
 8007af2:	f7fa fff1 	bl	8002ad8 <__aeabi_dsub>
 8007af6:	0002      	movs	r2, r0
 8007af8:	000b      	movs	r3, r1
 8007afa:	0004      	movs	r4, r0
 8007afc:	000d      	movs	r5, r1
 8007afe:	9802      	ldr	r0, [sp, #8]
 8007b00:	9903      	ldr	r1, [sp, #12]
 8007b02:	f7fa ffe9 	bl	8002ad8 <__aeabi_dsub>
 8007b06:	4a8e      	ldr	r2, [pc, #568]	@ (8007d40 <__ieee754_rem_pio2+0x2d8>)
 8007b08:	4b8e      	ldr	r3, [pc, #568]	@ (8007d44 <__ieee754_rem_pio2+0x2dc>)
 8007b0a:	e7dc      	b.n	8007ac6 <__ieee754_rem_pio2+0x5e>
 8007b0c:	4b88      	ldr	r3, [pc, #544]	@ (8007d30 <__ieee754_rem_pio2+0x2c8>)
 8007b0e:	f7f9 fd73 	bl	80015f8 <__aeabi_dadd>
 8007b12:	9002      	str	r0, [sp, #8]
 8007b14:	9103      	str	r1, [sp, #12]
 8007b16:	42a5      	cmp	r5, r4
 8007b18:	d016      	beq.n	8007b48 <__ieee754_rem_pio2+0xe0>
 8007b1a:	4a87      	ldr	r2, [pc, #540]	@ (8007d38 <__ieee754_rem_pio2+0x2d0>)
 8007b1c:	4b87      	ldr	r3, [pc, #540]	@ (8007d3c <__ieee754_rem_pio2+0x2d4>)
 8007b1e:	f7f9 fd6b 	bl	80015f8 <__aeabi_dadd>
 8007b22:	0002      	movs	r2, r0
 8007b24:	000b      	movs	r3, r1
 8007b26:	0004      	movs	r4, r0
 8007b28:	000d      	movs	r5, r1
 8007b2a:	9802      	ldr	r0, [sp, #8]
 8007b2c:	9903      	ldr	r1, [sp, #12]
 8007b2e:	f7fa ffd3 	bl	8002ad8 <__aeabi_dsub>
 8007b32:	4a81      	ldr	r2, [pc, #516]	@ (8007d38 <__ieee754_rem_pio2+0x2d0>)
 8007b34:	4b81      	ldr	r3, [pc, #516]	@ (8007d3c <__ieee754_rem_pio2+0x2d4>)
 8007b36:	f7f9 fd5f 	bl	80015f8 <__aeabi_dadd>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	603c      	str	r4, [r7, #0]
 8007b3e:	607d      	str	r5, [r7, #4]
 8007b40:	60b8      	str	r0, [r7, #8]
 8007b42:	60f9      	str	r1, [r7, #12]
 8007b44:	425b      	negs	r3, r3
 8007b46:	e7c5      	b.n	8007ad4 <__ieee754_rem_pio2+0x6c>
 8007b48:	22d3      	movs	r2, #211	@ 0xd3
 8007b4a:	9802      	ldr	r0, [sp, #8]
 8007b4c:	9903      	ldr	r1, [sp, #12]
 8007b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8007d3c <__ieee754_rem_pio2+0x2d4>)
 8007b50:	0552      	lsls	r2, r2, #21
 8007b52:	f7f9 fd51 	bl	80015f8 <__aeabi_dadd>
 8007b56:	4a7a      	ldr	r2, [pc, #488]	@ (8007d40 <__ieee754_rem_pio2+0x2d8>)
 8007b58:	4b7a      	ldr	r3, [pc, #488]	@ (8007d44 <__ieee754_rem_pio2+0x2dc>)
 8007b5a:	9002      	str	r0, [sp, #8]
 8007b5c:	9103      	str	r1, [sp, #12]
 8007b5e:	f7f9 fd4b 	bl	80015f8 <__aeabi_dadd>
 8007b62:	0002      	movs	r2, r0
 8007b64:	000b      	movs	r3, r1
 8007b66:	0004      	movs	r4, r0
 8007b68:	000d      	movs	r5, r1
 8007b6a:	9802      	ldr	r0, [sp, #8]
 8007b6c:	9903      	ldr	r1, [sp, #12]
 8007b6e:	f7fa ffb3 	bl	8002ad8 <__aeabi_dsub>
 8007b72:	4a73      	ldr	r2, [pc, #460]	@ (8007d40 <__ieee754_rem_pio2+0x2d8>)
 8007b74:	4b73      	ldr	r3, [pc, #460]	@ (8007d44 <__ieee754_rem_pio2+0x2dc>)
 8007b76:	e7de      	b.n	8007b36 <__ieee754_rem_pio2+0xce>
 8007b78:	4b73      	ldr	r3, [pc, #460]	@ (8007d48 <__ieee754_rem_pio2+0x2e0>)
 8007b7a:	429d      	cmp	r5, r3
 8007b7c:	d900      	bls.n	8007b80 <__ieee754_rem_pio2+0x118>
 8007b7e:	e0c6      	b.n	8007d0e <__ieee754_rem_pio2+0x2a6>
 8007b80:	f000 f94e 	bl	8007e20 <fabs>
 8007b84:	4a71      	ldr	r2, [pc, #452]	@ (8007d4c <__ieee754_rem_pio2+0x2e4>)
 8007b86:	4b72      	ldr	r3, [pc, #456]	@ (8007d50 <__ieee754_rem_pio2+0x2e8>)
 8007b88:	9004      	str	r0, [sp, #16]
 8007b8a:	9105      	str	r1, [sp, #20]
 8007b8c:	f7fa fcdc 	bl	8002548 <__aeabi_dmul>
 8007b90:	2200      	movs	r2, #0
 8007b92:	4b70      	ldr	r3, [pc, #448]	@ (8007d54 <__ieee754_rem_pio2+0x2ec>)
 8007b94:	f7f9 fd30 	bl	80015f8 <__aeabi_dadd>
 8007b98:	f7fb fb5c 	bl	8003254 <__aeabi_d2iz>
 8007b9c:	9002      	str	r0, [sp, #8]
 8007b9e:	f7fb fb95 	bl	80032cc <__aeabi_i2d>
 8007ba2:	4a64      	ldr	r2, [pc, #400]	@ (8007d34 <__ieee754_rem_pio2+0x2cc>)
 8007ba4:	4b62      	ldr	r3, [pc, #392]	@ (8007d30 <__ieee754_rem_pio2+0x2c8>)
 8007ba6:	9008      	str	r0, [sp, #32]
 8007ba8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007baa:	f7fa fccd 	bl	8002548 <__aeabi_dmul>
 8007bae:	0002      	movs	r2, r0
 8007bb0:	000b      	movs	r3, r1
 8007bb2:	9804      	ldr	r0, [sp, #16]
 8007bb4:	9905      	ldr	r1, [sp, #20]
 8007bb6:	f7fa ff8f 	bl	8002ad8 <__aeabi_dsub>
 8007bba:	4b60      	ldr	r3, [pc, #384]	@ (8007d3c <__ieee754_rem_pio2+0x2d4>)
 8007bbc:	9004      	str	r0, [sp, #16]
 8007bbe:	9105      	str	r1, [sp, #20]
 8007bc0:	9808      	ldr	r0, [sp, #32]
 8007bc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bc4:	4a5c      	ldr	r2, [pc, #368]	@ (8007d38 <__ieee754_rem_pio2+0x2d0>)
 8007bc6:	f7fa fcbf 	bl	8002548 <__aeabi_dmul>
 8007bca:	9b02      	ldr	r3, [sp, #8]
 8007bcc:	9006      	str	r0, [sp, #24]
 8007bce:	9107      	str	r1, [sp, #28]
 8007bd0:	2b1f      	cmp	r3, #31
 8007bd2:	dc0d      	bgt.n	8007bf0 <__ieee754_rem_pio2+0x188>
 8007bd4:	9a02      	ldr	r2, [sp, #8]
 8007bd6:	4b60      	ldr	r3, [pc, #384]	@ (8007d58 <__ieee754_rem_pio2+0x2f0>)
 8007bd8:	3a01      	subs	r2, #1
 8007bda:	0092      	lsls	r2, r2, #2
 8007bdc:	58d3      	ldr	r3, [r2, r3]
 8007bde:	42ab      	cmp	r3, r5
 8007be0:	d006      	beq.n	8007bf0 <__ieee754_rem_pio2+0x188>
 8007be2:	0002      	movs	r2, r0
 8007be4:	000b      	movs	r3, r1
 8007be6:	9804      	ldr	r0, [sp, #16]
 8007be8:	9905      	ldr	r1, [sp, #20]
 8007bea:	f7fa ff75 	bl	8002ad8 <__aeabi_dsub>
 8007bee:	e00b      	b.n	8007c08 <__ieee754_rem_pio2+0x1a0>
 8007bf0:	9a06      	ldr	r2, [sp, #24]
 8007bf2:	9b07      	ldr	r3, [sp, #28]
 8007bf4:	9804      	ldr	r0, [sp, #16]
 8007bf6:	9905      	ldr	r1, [sp, #20]
 8007bf8:	f7fa ff6e 	bl	8002ad8 <__aeabi_dsub>
 8007bfc:	004b      	lsls	r3, r1, #1
 8007bfe:	152e      	asrs	r6, r5, #20
 8007c00:	0d5b      	lsrs	r3, r3, #21
 8007c02:	1af3      	subs	r3, r6, r3
 8007c04:	2b10      	cmp	r3, #16
 8007c06:	dc02      	bgt.n	8007c0e <__ieee754_rem_pio2+0x1a6>
 8007c08:	6038      	str	r0, [r7, #0]
 8007c0a:	6079      	str	r1, [r7, #4]
 8007c0c:	e039      	b.n	8007c82 <__ieee754_rem_pio2+0x21a>
 8007c0e:	22d3      	movs	r2, #211	@ 0xd3
 8007c10:	9808      	ldr	r0, [sp, #32]
 8007c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c14:	4b49      	ldr	r3, [pc, #292]	@ (8007d3c <__ieee754_rem_pio2+0x2d4>)
 8007c16:	0552      	lsls	r2, r2, #21
 8007c18:	f7fa fc96 	bl	8002548 <__aeabi_dmul>
 8007c1c:	0004      	movs	r4, r0
 8007c1e:	000d      	movs	r5, r1
 8007c20:	0002      	movs	r2, r0
 8007c22:	000b      	movs	r3, r1
 8007c24:	9804      	ldr	r0, [sp, #16]
 8007c26:	9905      	ldr	r1, [sp, #20]
 8007c28:	f7fa ff56 	bl	8002ad8 <__aeabi_dsub>
 8007c2c:	0002      	movs	r2, r0
 8007c2e:	000b      	movs	r3, r1
 8007c30:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c32:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c34:	9804      	ldr	r0, [sp, #16]
 8007c36:	9905      	ldr	r1, [sp, #20]
 8007c38:	f7fa ff4e 	bl	8002ad8 <__aeabi_dsub>
 8007c3c:	0022      	movs	r2, r4
 8007c3e:	002b      	movs	r3, r5
 8007c40:	f7fa ff4a 	bl	8002ad8 <__aeabi_dsub>
 8007c44:	0004      	movs	r4, r0
 8007c46:	000d      	movs	r5, r1
 8007c48:	9808      	ldr	r0, [sp, #32]
 8007c4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007d40 <__ieee754_rem_pio2+0x2d8>)
 8007c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8007d44 <__ieee754_rem_pio2+0x2dc>)
 8007c50:	f7fa fc7a 	bl	8002548 <__aeabi_dmul>
 8007c54:	0022      	movs	r2, r4
 8007c56:	002b      	movs	r3, r5
 8007c58:	f7fa ff3e 	bl	8002ad8 <__aeabi_dsub>
 8007c5c:	000b      	movs	r3, r1
 8007c5e:	0002      	movs	r2, r0
 8007c60:	9006      	str	r0, [sp, #24]
 8007c62:	9107      	str	r1, [sp, #28]
 8007c64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c68:	f7fa ff36 	bl	8002ad8 <__aeabi_dsub>
 8007c6c:	004b      	lsls	r3, r1, #1
 8007c6e:	0d5b      	lsrs	r3, r3, #21
 8007c70:	1af3      	subs	r3, r6, r3
 8007c72:	2b31      	cmp	r3, #49	@ 0x31
 8007c74:	dc21      	bgt.n	8007cba <__ieee754_rem_pio2+0x252>
 8007c76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007c7a:	6038      	str	r0, [r7, #0]
 8007c7c:	6079      	str	r1, [r7, #4]
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	9405      	str	r4, [sp, #20]
 8007c82:	683c      	ldr	r4, [r7, #0]
 8007c84:	687d      	ldr	r5, [r7, #4]
 8007c86:	9804      	ldr	r0, [sp, #16]
 8007c88:	9905      	ldr	r1, [sp, #20]
 8007c8a:	0022      	movs	r2, r4
 8007c8c:	002b      	movs	r3, r5
 8007c8e:	f7fa ff23 	bl	8002ad8 <__aeabi_dsub>
 8007c92:	9a06      	ldr	r2, [sp, #24]
 8007c94:	9b07      	ldr	r3, [sp, #28]
 8007c96:	f7fa ff1f 	bl	8002ad8 <__aeabi_dsub>
 8007c9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c9c:	60b8      	str	r0, [r7, #8]
 8007c9e:	60f9      	str	r1, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db00      	blt.n	8007ca6 <__ieee754_rem_pio2+0x23e>
 8007ca4:	e717      	b.n	8007ad6 <__ieee754_rem_pio2+0x6e>
 8007ca6:	2280      	movs	r2, #128	@ 0x80
 8007ca8:	0612      	lsls	r2, r2, #24
 8007caa:	18ab      	adds	r3, r5, r2
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	188b      	adds	r3, r1, r2
 8007cb0:	603c      	str	r4, [r7, #0]
 8007cb2:	60b8      	str	r0, [r7, #8]
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	9b02      	ldr	r3, [sp, #8]
 8007cb8:	e744      	b.n	8007b44 <__ieee754_rem_pio2+0xdc>
 8007cba:	22b8      	movs	r2, #184	@ 0xb8
 8007cbc:	9808      	ldr	r0, [sp, #32]
 8007cbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cc0:	4b20      	ldr	r3, [pc, #128]	@ (8007d44 <__ieee754_rem_pio2+0x2dc>)
 8007cc2:	0592      	lsls	r2, r2, #22
 8007cc4:	f7fa fc40 	bl	8002548 <__aeabi_dmul>
 8007cc8:	0004      	movs	r4, r0
 8007cca:	000d      	movs	r5, r1
 8007ccc:	0002      	movs	r2, r0
 8007cce:	000b      	movs	r3, r1
 8007cd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cd4:	f7fa ff00 	bl	8002ad8 <__aeabi_dsub>
 8007cd8:	0002      	movs	r2, r0
 8007cda:	000b      	movs	r3, r1
 8007cdc:	9004      	str	r0, [sp, #16]
 8007cde:	9105      	str	r1, [sp, #20]
 8007ce0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ce2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ce4:	f7fa fef8 	bl	8002ad8 <__aeabi_dsub>
 8007ce8:	0022      	movs	r2, r4
 8007cea:	002b      	movs	r3, r5
 8007cec:	f7fa fef4 	bl	8002ad8 <__aeabi_dsub>
 8007cf0:	0004      	movs	r4, r0
 8007cf2:	000d      	movs	r5, r1
 8007cf4:	9808      	ldr	r0, [sp, #32]
 8007cf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cf8:	4a18      	ldr	r2, [pc, #96]	@ (8007d5c <__ieee754_rem_pio2+0x2f4>)
 8007cfa:	4b19      	ldr	r3, [pc, #100]	@ (8007d60 <__ieee754_rem_pio2+0x2f8>)
 8007cfc:	f7fa fc24 	bl	8002548 <__aeabi_dmul>
 8007d00:	0022      	movs	r2, r4
 8007d02:	002b      	movs	r3, r5
 8007d04:	f7fa fee8 	bl	8002ad8 <__aeabi_dsub>
 8007d08:	9006      	str	r0, [sp, #24]
 8007d0a:	9107      	str	r1, [sp, #28]
 8007d0c:	e769      	b.n	8007be2 <__ieee754_rem_pio2+0x17a>
 8007d0e:	4b15      	ldr	r3, [pc, #84]	@ (8007d64 <__ieee754_rem_pio2+0x2fc>)
 8007d10:	429d      	cmp	r5, r3
 8007d12:	d929      	bls.n	8007d68 <__ieee754_rem_pio2+0x300>
 8007d14:	0002      	movs	r2, r0
 8007d16:	000b      	movs	r3, r1
 8007d18:	f7fa fede 	bl	8002ad8 <__aeabi_dsub>
 8007d1c:	60b8      	str	r0, [r7, #8]
 8007d1e:	60f9      	str	r1, [r7, #12]
 8007d20:	6038      	str	r0, [r7, #0]
 8007d22:	6079      	str	r1, [r7, #4]
 8007d24:	e6af      	b.n	8007a86 <__ieee754_rem_pio2+0x1e>
 8007d26:	46c0      	nop			@ (mov r8, r8)
 8007d28:	3fe921fb 	.word	0x3fe921fb
 8007d2c:	4002d97b 	.word	0x4002d97b
 8007d30:	3ff921fb 	.word	0x3ff921fb
 8007d34:	54400000 	.word	0x54400000
 8007d38:	1a626331 	.word	0x1a626331
 8007d3c:	3dd0b461 	.word	0x3dd0b461
 8007d40:	2e037073 	.word	0x2e037073
 8007d44:	3ba3198a 	.word	0x3ba3198a
 8007d48:	413921fb 	.word	0x413921fb
 8007d4c:	6dc9c883 	.word	0x6dc9c883
 8007d50:	3fe45f30 	.word	0x3fe45f30
 8007d54:	3fe00000 	.word	0x3fe00000
 8007d58:	0800cc4c 	.word	0x0800cc4c
 8007d5c:	252049c1 	.word	0x252049c1
 8007d60:	397b839a 	.word	0x397b839a
 8007d64:	7fefffff 	.word	0x7fefffff
 8007d68:	4b2a      	ldr	r3, [pc, #168]	@ (8007e14 <__ieee754_rem_pio2+0x3ac>)
 8007d6a:	152e      	asrs	r6, r5, #20
 8007d6c:	18f6      	adds	r6, r6, r3
 8007d6e:	0531      	lsls	r1, r6, #20
 8007d70:	1a6b      	subs	r3, r5, r1
 8007d72:	0019      	movs	r1, r3
 8007d74:	001d      	movs	r5, r3
 8007d76:	0004      	movs	r4, r0
 8007d78:	f7fb fa6c 	bl	8003254 <__aeabi_d2iz>
 8007d7c:	f7fb faa6 	bl	80032cc <__aeabi_i2d>
 8007d80:	0002      	movs	r2, r0
 8007d82:	000b      	movs	r3, r1
 8007d84:	0020      	movs	r0, r4
 8007d86:	0029      	movs	r1, r5
 8007d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d8c:	f7fa fea4 	bl	8002ad8 <__aeabi_dsub>
 8007d90:	2200      	movs	r2, #0
 8007d92:	4b21      	ldr	r3, [pc, #132]	@ (8007e18 <__ieee754_rem_pio2+0x3b0>)
 8007d94:	f7fa fbd8 	bl	8002548 <__aeabi_dmul>
 8007d98:	000d      	movs	r5, r1
 8007d9a:	0004      	movs	r4, r0
 8007d9c:	f7fb fa5a 	bl	8003254 <__aeabi_d2iz>
 8007da0:	f7fb fa94 	bl	80032cc <__aeabi_i2d>
 8007da4:	0002      	movs	r2, r0
 8007da6:	000b      	movs	r3, r1
 8007da8:	0020      	movs	r0, r4
 8007daa:	0029      	movs	r1, r5
 8007dac:	9210      	str	r2, [sp, #64]	@ 0x40
 8007dae:	9311      	str	r3, [sp, #68]	@ 0x44
 8007db0:	f7fa fe92 	bl	8002ad8 <__aeabi_dsub>
 8007db4:	2200      	movs	r2, #0
 8007db6:	4b18      	ldr	r3, [pc, #96]	@ (8007e18 <__ieee754_rem_pio2+0x3b0>)
 8007db8:	f7fa fbc6 	bl	8002548 <__aeabi_dmul>
 8007dbc:	2503      	movs	r5, #3
 8007dbe:	9012      	str	r0, [sp, #72]	@ 0x48
 8007dc0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007dc2:	ac0e      	add	r4, sp, #56	@ 0x38
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	6920      	ldr	r0, [r4, #16]
 8007dc8:	6961      	ldr	r1, [r4, #20]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9502      	str	r5, [sp, #8]
 8007dce:	3c08      	subs	r4, #8
 8007dd0:	3d01      	subs	r5, #1
 8007dd2:	f7f8 fb37 	bl	8000444 <__aeabi_dcmpeq>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d1f4      	bne.n	8007dc4 <__ieee754_rem_pio2+0x35c>
 8007dda:	4b10      	ldr	r3, [pc, #64]	@ (8007e1c <__ieee754_rem_pio2+0x3b4>)
 8007ddc:	0032      	movs	r2, r6
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	2302      	movs	r3, #2
 8007de2:	0039      	movs	r1, r7
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	a80e      	add	r0, sp, #56	@ 0x38
 8007de8:	9b02      	ldr	r3, [sp, #8]
 8007dea:	f000 f81d 	bl	8007e28 <__kernel_rem_pio2>
 8007dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007df0:	9002      	str	r0, [sp, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	db00      	blt.n	8007df8 <__ieee754_rem_pio2+0x390>
 8007df6:	e66e      	b.n	8007ad6 <__ieee754_rem_pio2+0x6e>
 8007df8:	2080      	movs	r0, #128	@ 0x80
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	0600      	lsls	r0, r0, #24
 8007e00:	180b      	adds	r3, r1, r0
 8007e02:	68f9      	ldr	r1, [r7, #12]
 8007e04:	603a      	str	r2, [r7, #0]
 8007e06:	607b      	str	r3, [r7, #4]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	180b      	adds	r3, r1, r0
 8007e0c:	60ba      	str	r2, [r7, #8]
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e751      	b.n	8007cb6 <__ieee754_rem_pio2+0x24e>
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	fffffbea 	.word	0xfffffbea
 8007e18:	41700000 	.word	0x41700000
 8007e1c:	0800cccc 	.word	0x0800cccc

08007e20 <fabs>:
 8007e20:	0049      	lsls	r1, r1, #1
 8007e22:	084b      	lsrs	r3, r1, #1
 8007e24:	0019      	movs	r1, r3
 8007e26:	4770      	bx	lr

08007e28 <__kernel_rem_pio2>:
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	4cc6      	ldr	r4, [pc, #792]	@ (8008144 <__kernel_rem_pio2+0x31c>)
 8007e2c:	44a5      	add	sp, r4
 8007e2e:	0014      	movs	r4, r2
 8007e30:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 8007e32:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e34:	4bc4      	ldr	r3, [pc, #784]	@ (8008148 <__kernel_rem_pio2+0x320>)
 8007e36:	0092      	lsls	r2, r2, #2
 8007e38:	58d3      	ldr	r3, [r2, r3]
 8007e3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007e3c:	9308      	str	r3, [sp, #32]
 8007e3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e40:	9105      	str	r1, [sp, #20]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e46:	2300      	movs	r3, #0
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	0023      	movs	r3, r4
 8007e4c:	3314      	adds	r3, #20
 8007e4e:	db04      	blt.n	8007e5a <__kernel_rem_pio2+0x32>
 8007e50:	2118      	movs	r1, #24
 8007e52:	1ee0      	subs	r0, r4, #3
 8007e54:	f7f8 f9fa 	bl	800024c <__divsi3>
 8007e58:	9000      	str	r0, [sp, #0]
 8007e5a:	9b00      	ldr	r3, [sp, #0]
 8007e5c:	ae26      	add	r6, sp, #152	@ 0x98
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	2318      	movs	r3, #24
 8007e62:	425b      	negs	r3, r3
 8007e64:	4353      	muls	r3, r2
 8007e66:	191b      	adds	r3, r3, r4
 8007e68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e6a:	9302      	str	r3, [sp, #8]
 8007e6c:	9b00      	ldr	r3, [sp, #0]
 8007e6e:	1a9d      	subs	r5, r3, r2
 8007e70:	002c      	movs	r4, r5
 8007e72:	9b08      	ldr	r3, [sp, #32]
 8007e74:	189f      	adds	r7, r3, r2
 8007e76:	1b63      	subs	r3, r4, r5
 8007e78:	429f      	cmp	r7, r3
 8007e7a:	da0f      	bge.n	8007e9c <__kernel_rem_pio2+0x74>
 8007e7c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8007e7e:	af76      	add	r7, sp, #472	@ 0x1d8
 8007e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e82:	9a08      	ldr	r2, [sp, #32]
 8007e84:	1aeb      	subs	r3, r5, r3
 8007e86:	429a      	cmp	r2, r3
 8007e88:	db30      	blt.n	8007eec <__kernel_rem_pio2+0xc4>
 8007e8a:	00eb      	lsls	r3, r5, #3
 8007e8c:	aa26      	add	r2, sp, #152	@ 0x98
 8007e8e:	2400      	movs	r4, #0
 8007e90:	189e      	adds	r6, r3, r2
 8007e92:	2300      	movs	r3, #0
 8007e94:	9306      	str	r3, [sp, #24]
 8007e96:	9407      	str	r4, [sp, #28]
 8007e98:	2400      	movs	r4, #0
 8007e9a:	e01e      	b.n	8007eda <__kernel_rem_pio2+0xb2>
 8007e9c:	2c00      	cmp	r4, #0
 8007e9e:	db07      	blt.n	8007eb0 <__kernel_rem_pio2+0x88>
 8007ea0:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 8007ea2:	00a3      	lsls	r3, r4, #2
 8007ea4:	58d0      	ldr	r0, [r2, r3]
 8007ea6:	f7fb fa11 	bl	80032cc <__aeabi_i2d>
 8007eaa:	c603      	stmia	r6!, {r0, r1}
 8007eac:	3401      	adds	r4, #1
 8007eae:	e7e2      	b.n	8007e76 <__kernel_rem_pio2+0x4e>
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	e7f9      	b.n	8007eaa <__kernel_rem_pio2+0x82>
 8007eb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eb8:	00e1      	lsls	r1, r4, #3
 8007eba:	1859      	adds	r1, r3, r1
 8007ebc:	6808      	ldr	r0, [r1, #0]
 8007ebe:	6849      	ldr	r1, [r1, #4]
 8007ec0:	6832      	ldr	r2, [r6, #0]
 8007ec2:	6873      	ldr	r3, [r6, #4]
 8007ec4:	f7fa fb40 	bl	8002548 <__aeabi_dmul>
 8007ec8:	0002      	movs	r2, r0
 8007eca:	000b      	movs	r3, r1
 8007ecc:	9806      	ldr	r0, [sp, #24]
 8007ece:	9907      	ldr	r1, [sp, #28]
 8007ed0:	f7f9 fb92 	bl	80015f8 <__aeabi_dadd>
 8007ed4:	9006      	str	r0, [sp, #24]
 8007ed6:	9107      	str	r1, [sp, #28]
 8007ed8:	3401      	adds	r4, #1
 8007eda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007edc:	3e08      	subs	r6, #8
 8007ede:	429c      	cmp	r4, r3
 8007ee0:	dde9      	ble.n	8007eb6 <__kernel_rem_pio2+0x8e>
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	9c07      	ldr	r4, [sp, #28]
 8007ee6:	3501      	adds	r5, #1
 8007ee8:	c718      	stmia	r7!, {r3, r4}
 8007eea:	e7c9      	b.n	8007e80 <__kernel_rem_pio2+0x58>
 8007eec:	9b08      	ldr	r3, [sp, #32]
 8007eee:	aa12      	add	r2, sp, #72	@ 0x48
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	189b      	adds	r3, r3, r2
 8007ef4:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	18d3      	adds	r3, r2, r3
 8007efe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f00:	9b08      	ldr	r3, [sp, #32]
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	9b00      	ldr	r3, [sp, #0]
 8007f06:	aa76      	add	r2, sp, #472	@ 0x1d8
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	18d3      	adds	r3, r2, r3
 8007f0c:	681e      	ldr	r6, [r3, #0]
 8007f0e:	685f      	ldr	r7, [r3, #4]
 8007f10:	ab12      	add	r3, sp, #72	@ 0x48
 8007f12:	001d      	movs	r5, r3
 8007f14:	9c00      	ldr	r4, [sp, #0]
 8007f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f18:	2c00      	cmp	r4, #0
 8007f1a:	dc73      	bgt.n	8008004 <__kernel_rem_pio2+0x1dc>
 8007f1c:	0030      	movs	r0, r6
 8007f1e:	0039      	movs	r1, r7
 8007f20:	9a02      	ldr	r2, [sp, #8]
 8007f22:	f000 fad3 	bl	80084cc <scalbn>
 8007f26:	23ff      	movs	r3, #255	@ 0xff
 8007f28:	2200      	movs	r2, #0
 8007f2a:	059b      	lsls	r3, r3, #22
 8007f2c:	0004      	movs	r4, r0
 8007f2e:	000d      	movs	r5, r1
 8007f30:	f7fa fb0a 	bl	8002548 <__aeabi_dmul>
 8007f34:	f000 fb36 	bl	80085a4 <floor>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4b84      	ldr	r3, [pc, #528]	@ (800814c <__kernel_rem_pio2+0x324>)
 8007f3c:	f7fa fb04 	bl	8002548 <__aeabi_dmul>
 8007f40:	0002      	movs	r2, r0
 8007f42:	000b      	movs	r3, r1
 8007f44:	0020      	movs	r0, r4
 8007f46:	0029      	movs	r1, r5
 8007f48:	f7fa fdc6 	bl	8002ad8 <__aeabi_dsub>
 8007f4c:	000d      	movs	r5, r1
 8007f4e:	0004      	movs	r4, r0
 8007f50:	f7fb f980 	bl	8003254 <__aeabi_d2iz>
 8007f54:	900c      	str	r0, [sp, #48]	@ 0x30
 8007f56:	f7fb f9b9 	bl	80032cc <__aeabi_i2d>
 8007f5a:	000b      	movs	r3, r1
 8007f5c:	0002      	movs	r2, r0
 8007f5e:	0029      	movs	r1, r5
 8007f60:	0020      	movs	r0, r4
 8007f62:	f7fa fdb9 	bl	8002ad8 <__aeabi_dsub>
 8007f66:	9b02      	ldr	r3, [sp, #8]
 8007f68:	0006      	movs	r6, r0
 8007f6a:	000f      	movs	r7, r1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd6f      	ble.n	8008050 <__kernel_rem_pio2+0x228>
 8007f70:	2018      	movs	r0, #24
 8007f72:	9b00      	ldr	r3, [sp, #0]
 8007f74:	aa12      	add	r2, sp, #72	@ 0x48
 8007f76:	3b01      	subs	r3, #1
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	589a      	ldr	r2, [r3, r2]
 8007f7c:	9902      	ldr	r1, [sp, #8]
 8007f7e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007f80:	1a40      	subs	r0, r0, r1
 8007f82:	0011      	movs	r1, r2
 8007f84:	4101      	asrs	r1, r0
 8007f86:	1864      	adds	r4, r4, r1
 8007f88:	4081      	lsls	r1, r0
 8007f8a:	1a52      	subs	r2, r2, r1
 8007f8c:	a912      	add	r1, sp, #72	@ 0x48
 8007f8e:	505a      	str	r2, [r3, r1]
 8007f90:	2317      	movs	r3, #23
 8007f92:	9902      	ldr	r1, [sp, #8]
 8007f94:	940c      	str	r4, [sp, #48]	@ 0x30
 8007f96:	1a5b      	subs	r3, r3, r1
 8007f98:	411a      	asrs	r2, r3
 8007f9a:	9206      	str	r2, [sp, #24]
 8007f9c:	9b06      	ldr	r3, [sp, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	dd68      	ble.n	8008074 <__kernel_rem_pio2+0x24c>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2580      	movs	r5, #128	@ 0x80
 8007fa6:	0014      	movs	r4, r2
 8007fa8:	2001      	movs	r0, #1
 8007faa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fac:	4968      	ldr	r1, [pc, #416]	@ (8008150 <__kernel_rem_pio2+0x328>)
 8007fae:	3301      	adds	r3, #1
 8007fb0:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fb2:	046d      	lsls	r5, r5, #17
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	dd00      	ble.n	8007fbc <__kernel_rem_pio2+0x194>
 8007fba:	e098      	b.n	80080ee <__kernel_rem_pio2+0x2c6>
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd05      	ble.n	8007fce <__kernel_rem_pio2+0x1a6>
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d100      	bne.n	8007fc8 <__kernel_rem_pio2+0x1a0>
 8007fc6:	e0a4      	b.n	8008112 <__kernel_rem_pio2+0x2ea>
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d100      	bne.n	8007fce <__kernel_rem_pio2+0x1a6>
 8007fcc:	e0ab      	b.n	8008126 <__kernel_rem_pio2+0x2fe>
 8007fce:	9b06      	ldr	r3, [sp, #24]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d14f      	bne.n	8008074 <__kernel_rem_pio2+0x24c>
 8007fd4:	0032      	movs	r2, r6
 8007fd6:	003b      	movs	r3, r7
 8007fd8:	2000      	movs	r0, #0
 8007fda:	495e      	ldr	r1, [pc, #376]	@ (8008154 <__kernel_rem_pio2+0x32c>)
 8007fdc:	f7fa fd7c 	bl	8002ad8 <__aeabi_dsub>
 8007fe0:	0006      	movs	r6, r0
 8007fe2:	000f      	movs	r7, r1
 8007fe4:	2c00      	cmp	r4, #0
 8007fe6:	d045      	beq.n	8008074 <__kernel_rem_pio2+0x24c>
 8007fe8:	9a02      	ldr	r2, [sp, #8]
 8007fea:	2000      	movs	r0, #0
 8007fec:	4959      	ldr	r1, [pc, #356]	@ (8008154 <__kernel_rem_pio2+0x32c>)
 8007fee:	f000 fa6d 	bl	80084cc <scalbn>
 8007ff2:	0002      	movs	r2, r0
 8007ff4:	000b      	movs	r3, r1
 8007ff6:	0030      	movs	r0, r6
 8007ff8:	0039      	movs	r1, r7
 8007ffa:	f7fa fd6d 	bl	8002ad8 <__aeabi_dsub>
 8007ffe:	0006      	movs	r6, r0
 8008000:	000f      	movs	r7, r1
 8008002:	e037      	b.n	8008074 <__kernel_rem_pio2+0x24c>
 8008004:	2200      	movs	r2, #0
 8008006:	4b54      	ldr	r3, [pc, #336]	@ (8008158 <__kernel_rem_pio2+0x330>)
 8008008:	0030      	movs	r0, r6
 800800a:	0039      	movs	r1, r7
 800800c:	f7fa fa9c 	bl	8002548 <__aeabi_dmul>
 8008010:	f7fb f920 	bl	8003254 <__aeabi_d2iz>
 8008014:	f7fb f95a 	bl	80032cc <__aeabi_i2d>
 8008018:	2200      	movs	r2, #0
 800801a:	4b50      	ldr	r3, [pc, #320]	@ (800815c <__kernel_rem_pio2+0x334>)
 800801c:	9006      	str	r0, [sp, #24]
 800801e:	9107      	str	r1, [sp, #28]
 8008020:	f7fa fa92 	bl	8002548 <__aeabi_dmul>
 8008024:	0002      	movs	r2, r0
 8008026:	000b      	movs	r3, r1
 8008028:	0030      	movs	r0, r6
 800802a:	0039      	movs	r1, r7
 800802c:	f7fa fd54 	bl	8002ad8 <__aeabi_dsub>
 8008030:	f7fb f910 	bl	8003254 <__aeabi_d2iz>
 8008034:	3c01      	subs	r4, #1
 8008036:	aa76      	add	r2, sp, #472	@ 0x1d8
 8008038:	00e3      	lsls	r3, r4, #3
 800803a:	18d3      	adds	r3, r2, r3
 800803c:	c501      	stmia	r5!, {r0}
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	9806      	ldr	r0, [sp, #24]
 8008044:	9907      	ldr	r1, [sp, #28]
 8008046:	f7f9 fad7 	bl	80015f8 <__aeabi_dadd>
 800804a:	0006      	movs	r6, r0
 800804c:	000f      	movs	r7, r1
 800804e:	e763      	b.n	8007f18 <__kernel_rem_pio2+0xf0>
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d107      	bne.n	8008066 <__kernel_rem_pio2+0x23e>
 8008056:	9b00      	ldr	r3, [sp, #0]
 8008058:	aa12      	add	r2, sp, #72	@ 0x48
 800805a:	3b01      	subs	r3, #1
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	589b      	ldr	r3, [r3, r2]
 8008060:	15db      	asrs	r3, r3, #23
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	e79a      	b.n	8007f9c <__kernel_rem_pio2+0x174>
 8008066:	2200      	movs	r2, #0
 8008068:	4b3d      	ldr	r3, [pc, #244]	@ (8008160 <__kernel_rem_pio2+0x338>)
 800806a:	f7f8 fa0f 	bl	800048c <__aeabi_dcmpge>
 800806e:	2800      	cmp	r0, #0
 8008070:	d13a      	bne.n	80080e8 <__kernel_rem_pio2+0x2c0>
 8008072:	9006      	str	r0, [sp, #24]
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	0030      	movs	r0, r6
 800807a:	0039      	movs	r1, r7
 800807c:	f7f8 f9e2 	bl	8000444 <__aeabi_dcmpeq>
 8008080:	2800      	cmp	r0, #0
 8008082:	d100      	bne.n	8008086 <__kernel_rem_pio2+0x25e>
 8008084:	e0b5      	b.n	80081f2 <__kernel_rem_pio2+0x3ca>
 8008086:	2200      	movs	r2, #0
 8008088:	9b00      	ldr	r3, [sp, #0]
 800808a:	3b01      	subs	r3, #1
 800808c:	9908      	ldr	r1, [sp, #32]
 800808e:	428b      	cmp	r3, r1
 8008090:	da51      	bge.n	8008136 <__kernel_rem_pio2+0x30e>
 8008092:	2a00      	cmp	r2, #0
 8008094:	d100      	bne.n	8008098 <__kernel_rem_pio2+0x270>
 8008096:	e096      	b.n	80081c6 <__kernel_rem_pio2+0x39e>
 8008098:	9b00      	ldr	r3, [sp, #0]
 800809a:	aa12      	add	r2, sp, #72	@ 0x48
 800809c:	3b01      	subs	r3, #1
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	9b02      	ldr	r3, [sp, #8]
 80080a2:	3b18      	subs	r3, #24
 80080a4:	9302      	str	r3, [sp, #8]
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	589b      	ldr	r3, [r3, r2]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0f3      	beq.n	8008098 <__kernel_rem_pio2+0x270>
 80080b0:	2000      	movs	r0, #0
 80080b2:	9a02      	ldr	r2, [sp, #8]
 80080b4:	4927      	ldr	r1, [pc, #156]	@ (8008154 <__kernel_rem_pio2+0x32c>)
 80080b6:	f000 fa09 	bl	80084cc <scalbn>
 80080ba:	0004      	movs	r4, r0
 80080bc:	000d      	movs	r5, r1
 80080be:	9e00      	ldr	r6, [sp, #0]
 80080c0:	2e00      	cmp	r6, #0
 80080c2:	db00      	blt.n	80080c6 <__kernel_rem_pio2+0x29e>
 80080c4:	e0d2      	b.n	800826c <__kernel_rem_pio2+0x444>
 80080c6:	4b27      	ldr	r3, [pc, #156]	@ (8008164 <__kernel_rem_pio2+0x33c>)
 80080c8:	9c00      	ldr	r4, [sp, #0]
 80080ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	da00      	bge.n	80080d2 <__kernel_rem_pio2+0x2aa>
 80080d0:	e103      	b.n	80082da <__kernel_rem_pio2+0x4b2>
 80080d2:	00e3      	lsls	r3, r4, #3
 80080d4:	aa76      	add	r2, sp, #472	@ 0x1d8
 80080d6:	189f      	adds	r7, r3, r2
 80080d8:	2300      	movs	r3, #0
 80080da:	2200      	movs	r2, #0
 80080dc:	9202      	str	r2, [sp, #8]
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	9b00      	ldr	r3, [sp, #0]
 80080e2:	2500      	movs	r5, #0
 80080e4:	1b1e      	subs	r6, r3, r4
 80080e6:	e0ea      	b.n	80082be <__kernel_rem_pio2+0x496>
 80080e8:	2302      	movs	r3, #2
 80080ea:	9306      	str	r3, [sp, #24]
 80080ec:	e759      	b.n	8007fa2 <__kernel_rem_pio2+0x17a>
 80080ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2c00      	cmp	r4, #0
 80080f4:	d10b      	bne.n	800810e <__kernel_rem_pio2+0x2e6>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <__kernel_rem_pio2+0x2da>
 80080fa:	1aeb      	subs	r3, r5, r3
 80080fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	0003      	movs	r3, r0
 8008102:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008104:	3201      	adds	r2, #1
 8008106:	3404      	adds	r4, #4
 8008108:	940a      	str	r4, [sp, #40]	@ 0x28
 800810a:	001c      	movs	r4, r3
 800810c:	e752      	b.n	8007fb4 <__kernel_rem_pio2+0x18c>
 800810e:	1acb      	subs	r3, r1, r3
 8008110:	e7f4      	b.n	80080fc <__kernel_rem_pio2+0x2d4>
 8008112:	9b00      	ldr	r3, [sp, #0]
 8008114:	aa12      	add	r2, sp, #72	@ 0x48
 8008116:	3b01      	subs	r3, #1
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	589a      	ldr	r2, [r3, r2]
 800811c:	0252      	lsls	r2, r2, #9
 800811e:	0a52      	lsrs	r2, r2, #9
 8008120:	a912      	add	r1, sp, #72	@ 0x48
 8008122:	505a      	str	r2, [r3, r1]
 8008124:	e753      	b.n	8007fce <__kernel_rem_pio2+0x1a6>
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	aa12      	add	r2, sp, #72	@ 0x48
 800812a:	3b01      	subs	r3, #1
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	589a      	ldr	r2, [r3, r2]
 8008130:	0292      	lsls	r2, r2, #10
 8008132:	0a92      	lsrs	r2, r2, #10
 8008134:	e7f4      	b.n	8008120 <__kernel_rem_pio2+0x2f8>
 8008136:	0099      	lsls	r1, r3, #2
 8008138:	a812      	add	r0, sp, #72	@ 0x48
 800813a:	5809      	ldr	r1, [r1, r0]
 800813c:	3b01      	subs	r3, #1
 800813e:	430a      	orrs	r2, r1
 8008140:	e7a4      	b.n	800808c <__kernel_rem_pio2+0x264>
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	fffffd84 	.word	0xfffffd84
 8008148:	0800ce18 	.word	0x0800ce18
 800814c:	40200000 	.word	0x40200000
 8008150:	00ffffff 	.word	0x00ffffff
 8008154:	3ff00000 	.word	0x3ff00000
 8008158:	3e700000 	.word	0x3e700000
 800815c:	41700000 	.word	0x41700000
 8008160:	3fe00000 	.word	0x3fe00000
 8008164:	0800cdd8 	.word	0x0800cdd8
 8008168:	3301      	adds	r3, #1
 800816a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800816c:	009a      	lsls	r2, r3, #2
 800816e:	4252      	negs	r2, r2
 8008170:	588a      	ldr	r2, [r1, r2]
 8008172:	2a00      	cmp	r2, #0
 8008174:	d0f8      	beq.n	8008168 <__kernel_rem_pio2+0x340>
 8008176:	9a00      	ldr	r2, [sp, #0]
 8008178:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800817a:	1c55      	adds	r5, r2, #1
 800817c:	1852      	adds	r2, r2, r1
 800817e:	00d2      	lsls	r2, r2, #3
 8008180:	a926      	add	r1, sp, #152	@ 0x98
 8008182:	188c      	adds	r4, r1, r2
 8008184:	9a00      	ldr	r2, [sp, #0]
 8008186:	18d3      	adds	r3, r2, r3
 8008188:	9306      	str	r3, [sp, #24]
 800818a:	9b06      	ldr	r3, [sp, #24]
 800818c:	42ab      	cmp	r3, r5
 800818e:	da00      	bge.n	8008192 <__kernel_rem_pio2+0x36a>
 8008190:	e6b7      	b.n	8007f02 <__kernel_rem_pio2+0xda>
 8008192:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008194:	00ab      	lsls	r3, r5, #2
 8008196:	58d0      	ldr	r0, [r2, r3]
 8008198:	f7fb f898 	bl	80032cc <__aeabi_i2d>
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	0027      	movs	r7, r4
 80081a2:	2600      	movs	r6, #0
 80081a4:	6020      	str	r0, [r4, #0]
 80081a6:	6061      	str	r1, [r4, #4]
 80081a8:	9200      	str	r2, [sp, #0]
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081ae:	429e      	cmp	r6, r3
 80081b0:	dd0b      	ble.n	80081ca <__kernel_rem_pio2+0x3a2>
 80081b2:	00eb      	lsls	r3, r5, #3
 80081b4:	aa76      	add	r2, sp, #472	@ 0x1d8
 80081b6:	18d3      	adds	r3, r2, r3
 80081b8:	3501      	adds	r5, #1
 80081ba:	9900      	ldr	r1, [sp, #0]
 80081bc:	9a01      	ldr	r2, [sp, #4]
 80081be:	3408      	adds	r4, #8
 80081c0:	6019      	str	r1, [r3, #0]
 80081c2:	605a      	str	r2, [r3, #4]
 80081c4:	e7e1      	b.n	800818a <__kernel_rem_pio2+0x362>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e7cf      	b.n	800816a <__kernel_rem_pio2+0x342>
 80081ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081cc:	00f1      	lsls	r1, r6, #3
 80081ce:	1859      	adds	r1, r3, r1
 80081d0:	6808      	ldr	r0, [r1, #0]
 80081d2:	6849      	ldr	r1, [r1, #4]
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f7fa f9b6 	bl	8002548 <__aeabi_dmul>
 80081dc:	0002      	movs	r2, r0
 80081de:	000b      	movs	r3, r1
 80081e0:	9800      	ldr	r0, [sp, #0]
 80081e2:	9901      	ldr	r1, [sp, #4]
 80081e4:	f7f9 fa08 	bl	80015f8 <__aeabi_dadd>
 80081e8:	3601      	adds	r6, #1
 80081ea:	9000      	str	r0, [sp, #0]
 80081ec:	9101      	str	r1, [sp, #4]
 80081ee:	3f08      	subs	r7, #8
 80081f0:	e7dc      	b.n	80081ac <__kernel_rem_pio2+0x384>
 80081f2:	9b02      	ldr	r3, [sp, #8]
 80081f4:	0030      	movs	r0, r6
 80081f6:	425a      	negs	r2, r3
 80081f8:	0039      	movs	r1, r7
 80081fa:	f000 f967 	bl	80084cc <scalbn>
 80081fe:	2200      	movs	r2, #0
 8008200:	4bb0      	ldr	r3, [pc, #704]	@ (80084c4 <__kernel_rem_pio2+0x69c>)
 8008202:	0006      	movs	r6, r0
 8008204:	000f      	movs	r7, r1
 8008206:	f7f8 f941 	bl	800048c <__aeabi_dcmpge>
 800820a:	2800      	cmp	r0, #0
 800820c:	d025      	beq.n	800825a <__kernel_rem_pio2+0x432>
 800820e:	2200      	movs	r2, #0
 8008210:	4bad      	ldr	r3, [pc, #692]	@ (80084c8 <__kernel_rem_pio2+0x6a0>)
 8008212:	0030      	movs	r0, r6
 8008214:	0039      	movs	r1, r7
 8008216:	f7fa f997 	bl	8002548 <__aeabi_dmul>
 800821a:	f7fb f81b 	bl	8003254 <__aeabi_d2iz>
 800821e:	9b00      	ldr	r3, [sp, #0]
 8008220:	0004      	movs	r4, r0
 8008222:	009d      	lsls	r5, r3, #2
 8008224:	f7fb f852 	bl	80032cc <__aeabi_i2d>
 8008228:	2200      	movs	r2, #0
 800822a:	4ba6      	ldr	r3, [pc, #664]	@ (80084c4 <__kernel_rem_pio2+0x69c>)
 800822c:	f7fa f98c 	bl	8002548 <__aeabi_dmul>
 8008230:	0002      	movs	r2, r0
 8008232:	000b      	movs	r3, r1
 8008234:	0030      	movs	r0, r6
 8008236:	0039      	movs	r1, r7
 8008238:	f7fa fc4e 	bl	8002ad8 <__aeabi_dsub>
 800823c:	f7fb f80a 	bl	8003254 <__aeabi_d2iz>
 8008240:	ab12      	add	r3, sp, #72	@ 0x48
 8008242:	5158      	str	r0, [r3, r5]
 8008244:	9b00      	ldr	r3, [sp, #0]
 8008246:	aa12      	add	r2, sp, #72	@ 0x48
 8008248:	3301      	adds	r3, #1
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	9b02      	ldr	r3, [sp, #8]
 800824e:	3318      	adds	r3, #24
 8008250:	9302      	str	r3, [sp, #8]
 8008252:	9b00      	ldr	r3, [sp, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	509c      	str	r4, [r3, r2]
 8008258:	e72a      	b.n	80080b0 <__kernel_rem_pio2+0x288>
 800825a:	9b00      	ldr	r3, [sp, #0]
 800825c:	0030      	movs	r0, r6
 800825e:	0039      	movs	r1, r7
 8008260:	009c      	lsls	r4, r3, #2
 8008262:	f7fa fff7 	bl	8003254 <__aeabi_d2iz>
 8008266:	ab12      	add	r3, sp, #72	@ 0x48
 8008268:	5118      	str	r0, [r3, r4]
 800826a:	e721      	b.n	80080b0 <__kernel_rem_pio2+0x288>
 800826c:	00f3      	lsls	r3, r6, #3
 800826e:	aa76      	add	r2, sp, #472	@ 0x1d8
 8008270:	18d7      	adds	r7, r2, r3
 8008272:	00b3      	lsls	r3, r6, #2
 8008274:	aa12      	add	r2, sp, #72	@ 0x48
 8008276:	5898      	ldr	r0, [r3, r2]
 8008278:	f7fb f828 	bl	80032cc <__aeabi_i2d>
 800827c:	0022      	movs	r2, r4
 800827e:	002b      	movs	r3, r5
 8008280:	f7fa f962 	bl	8002548 <__aeabi_dmul>
 8008284:	2200      	movs	r2, #0
 8008286:	6038      	str	r0, [r7, #0]
 8008288:	6079      	str	r1, [r7, #4]
 800828a:	4b8f      	ldr	r3, [pc, #572]	@ (80084c8 <__kernel_rem_pio2+0x6a0>)
 800828c:	0020      	movs	r0, r4
 800828e:	0029      	movs	r1, r5
 8008290:	f7fa f95a 	bl	8002548 <__aeabi_dmul>
 8008294:	3e01      	subs	r6, #1
 8008296:	0004      	movs	r4, r0
 8008298:	000d      	movs	r5, r1
 800829a:	e711      	b.n	80080c0 <__kernel_rem_pio2+0x298>
 800829c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800829e:	00e9      	lsls	r1, r5, #3
 80082a0:	18c9      	adds	r1, r1, r3
 80082a2:	6808      	ldr	r0, [r1, #0]
 80082a4:	6849      	ldr	r1, [r1, #4]
 80082a6:	cf0c      	ldmia	r7!, {r2, r3}
 80082a8:	f7fa f94e 	bl	8002548 <__aeabi_dmul>
 80082ac:	0002      	movs	r2, r0
 80082ae:	000b      	movs	r3, r1
 80082b0:	9802      	ldr	r0, [sp, #8]
 80082b2:	9903      	ldr	r1, [sp, #12]
 80082b4:	f7f9 f9a0 	bl	80015f8 <__aeabi_dadd>
 80082b8:	9002      	str	r0, [sp, #8]
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	3501      	adds	r5, #1
 80082be:	9b08      	ldr	r3, [sp, #32]
 80082c0:	429d      	cmp	r5, r3
 80082c2:	dc01      	bgt.n	80082c8 <__kernel_rem_pio2+0x4a0>
 80082c4:	42ae      	cmp	r6, r5
 80082c6:	dae9      	bge.n	800829c <__kernel_rem_pio2+0x474>
 80082c8:	00f6      	lsls	r6, r6, #3
 80082ca:	ab4e      	add	r3, sp, #312	@ 0x138
 80082cc:	199b      	adds	r3, r3, r6
 80082ce:	9902      	ldr	r1, [sp, #8]
 80082d0:	9a03      	ldr	r2, [sp, #12]
 80082d2:	3c01      	subs	r4, #1
 80082d4:	6019      	str	r1, [r3, #0]
 80082d6:	605a      	str	r2, [r3, #4]
 80082d8:	e6f8      	b.n	80080cc <__kernel_rem_pio2+0x2a4>
 80082da:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80082dc:	2b02      	cmp	r3, #2
 80082de:	dc0b      	bgt.n	80082f8 <__kernel_rem_pio2+0x4d0>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dd00      	ble.n	80082e6 <__kernel_rem_pio2+0x4be>
 80082e4:	e084      	b.n	80083f0 <__kernel_rem_pio2+0x5c8>
 80082e6:	d052      	beq.n	800838e <__kernel_rem_pio2+0x566>
 80082e8:	2007      	movs	r0, #7
 80082ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082ec:	4003      	ands	r3, r0
 80082ee:	0018      	movs	r0, r3
 80082f0:	239f      	movs	r3, #159	@ 0x9f
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	449d      	add	sp, r3
 80082f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f8:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d1f4      	bne.n	80082e8 <__kernel_rem_pio2+0x4c0>
 80082fe:	9b00      	ldr	r3, [sp, #0]
 8008300:	aa4e      	add	r2, sp, #312	@ 0x138
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	18d4      	adds	r4, r2, r3
 8008306:	0025      	movs	r5, r4
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	9302      	str	r3, [sp, #8]
 800830c:	9b02      	ldr	r3, [sp, #8]
 800830e:	3d08      	subs	r5, #8
 8008310:	2b00      	cmp	r3, #0
 8008312:	dd00      	ble.n	8008316 <__kernel_rem_pio2+0x4ee>
 8008314:	e07a      	b.n	800840c <__kernel_rem_pio2+0x5e4>
 8008316:	9d00      	ldr	r5, [sp, #0]
 8008318:	3c08      	subs	r4, #8
 800831a:	2d01      	cmp	r5, #1
 800831c:	dd00      	ble.n	8008320 <__kernel_rem_pio2+0x4f8>
 800831e:	e095      	b.n	800844c <__kernel_rem_pio2+0x624>
 8008320:	2000      	movs	r0, #0
 8008322:	2100      	movs	r1, #0
 8008324:	9b00      	ldr	r3, [sp, #0]
 8008326:	2b01      	cmp	r3, #1
 8008328:	dd00      	ble.n	800832c <__kernel_rem_pio2+0x504>
 800832a:	e0ad      	b.n	8008488 <__kernel_rem_pio2+0x660>
 800832c:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800832e:	9c4f      	ldr	r4, [sp, #316]	@ 0x13c
 8008330:	9e50      	ldr	r6, [sp, #320]	@ 0x140
 8008332:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	9401      	str	r4, [sp, #4]
 8008338:	9b06      	ldr	r3, [sp, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d000      	beq.n	8008340 <__kernel_rem_pio2+0x518>
 800833e:	e0af      	b.n	80084a0 <__kernel_rem_pio2+0x678>
 8008340:	9c00      	ldr	r4, [sp, #0]
 8008342:	9d01      	ldr	r5, [sp, #4]
 8008344:	9b05      	ldr	r3, [sp, #20]
 8008346:	601c      	str	r4, [r3, #0]
 8008348:	605d      	str	r5, [r3, #4]
 800834a:	609e      	str	r6, [r3, #8]
 800834c:	60df      	str	r7, [r3, #12]
 800834e:	6118      	str	r0, [r3, #16]
 8008350:	6159      	str	r1, [r3, #20]
 8008352:	e7c9      	b.n	80082e8 <__kernel_rem_pio2+0x4c0>
 8008354:	9b00      	ldr	r3, [sp, #0]
 8008356:	aa4e      	add	r2, sp, #312	@ 0x138
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	18d3      	adds	r3, r2, r3
 800835c:	0020      	movs	r0, r4
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	0029      	movs	r1, r5
 8008364:	f7f9 f948 	bl	80015f8 <__aeabi_dadd>
 8008368:	0004      	movs	r4, r0
 800836a:	000d      	movs	r5, r1
 800836c:	9b00      	ldr	r3, [sp, #0]
 800836e:	3b01      	subs	r3, #1
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	9b00      	ldr	r3, [sp, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	daed      	bge.n	8008354 <__kernel_rem_pio2+0x52c>
 8008378:	9b06      	ldr	r3, [sp, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <__kernel_rem_pio2+0x55e>
 800837e:	2180      	movs	r1, #128	@ 0x80
 8008380:	0609      	lsls	r1, r1, #24
 8008382:	186b      	adds	r3, r5, r1
 8008384:	001d      	movs	r5, r3
 8008386:	9b05      	ldr	r3, [sp, #20]
 8008388:	601c      	str	r4, [r3, #0]
 800838a:	605d      	str	r5, [r3, #4]
 800838c:	e7ac      	b.n	80082e8 <__kernel_rem_pio2+0x4c0>
 800838e:	2400      	movs	r4, #0
 8008390:	2500      	movs	r5, #0
 8008392:	e7ee      	b.n	8008372 <__kernel_rem_pio2+0x54a>
 8008394:	00e3      	lsls	r3, r4, #3
 8008396:	aa4e      	add	r2, sp, #312	@ 0x138
 8008398:	18d3      	adds	r3, r2, r3
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f7f9 f92b 	bl	80015f8 <__aeabi_dadd>
 80083a2:	3c01      	subs	r4, #1
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	daf5      	bge.n	8008394 <__kernel_rem_pio2+0x56c>
 80083a8:	9c06      	ldr	r4, [sp, #24]
 80083aa:	0002      	movs	r2, r0
 80083ac:	000b      	movs	r3, r1
 80083ae:	2c00      	cmp	r4, #0
 80083b0:	d002      	beq.n	80083b8 <__kernel_rem_pio2+0x590>
 80083b2:	2480      	movs	r4, #128	@ 0x80
 80083b4:	0624      	lsls	r4, r4, #24
 80083b6:	190b      	adds	r3, r1, r4
 80083b8:	9c05      	ldr	r4, [sp, #20]
 80083ba:	2501      	movs	r5, #1
 80083bc:	6022      	str	r2, [r4, #0]
 80083be:	6063      	str	r3, [r4, #4]
 80083c0:	0002      	movs	r2, r0
 80083c2:	000b      	movs	r3, r1
 80083c4:	984e      	ldr	r0, [sp, #312]	@ 0x138
 80083c6:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 80083c8:	f7fa fb86 	bl	8002ad8 <__aeabi_dsub>
 80083cc:	0006      	movs	r6, r0
 80083ce:	000f      	movs	r7, r1
 80083d0:	ac4e      	add	r4, sp, #312	@ 0x138
 80083d2:	9b00      	ldr	r3, [sp, #0]
 80083d4:	3408      	adds	r4, #8
 80083d6:	42ab      	cmp	r3, r5
 80083d8:	da0e      	bge.n	80083f8 <__kernel_rem_pio2+0x5d0>
 80083da:	9b06      	ldr	r3, [sp, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <__kernel_rem_pio2+0x5c0>
 80083e0:	2180      	movs	r1, #128	@ 0x80
 80083e2:	0609      	lsls	r1, r1, #24
 80083e4:	187b      	adds	r3, r7, r1
 80083e6:	001f      	movs	r7, r3
 80083e8:	9b05      	ldr	r3, [sp, #20]
 80083ea:	609e      	str	r6, [r3, #8]
 80083ec:	60df      	str	r7, [r3, #12]
 80083ee:	e77b      	b.n	80082e8 <__kernel_rem_pio2+0x4c0>
 80083f0:	2000      	movs	r0, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	9c00      	ldr	r4, [sp, #0]
 80083f6:	e7d5      	b.n	80083a4 <__kernel_rem_pio2+0x57c>
 80083f8:	0030      	movs	r0, r6
 80083fa:	6822      	ldr	r2, [r4, #0]
 80083fc:	6863      	ldr	r3, [r4, #4]
 80083fe:	0039      	movs	r1, r7
 8008400:	f7f9 f8fa 	bl	80015f8 <__aeabi_dadd>
 8008404:	3501      	adds	r5, #1
 8008406:	0006      	movs	r6, r0
 8008408:	000f      	movs	r7, r1
 800840a:	e7e2      	b.n	80083d2 <__kernel_rem_pio2+0x5aa>
 800840c:	9b02      	ldr	r3, [sp, #8]
 800840e:	3b01      	subs	r3, #1
 8008410:	9302      	str	r3, [sp, #8]
 8008412:	682a      	ldr	r2, [r5, #0]
 8008414:	686b      	ldr	r3, [r5, #4]
 8008416:	9208      	str	r2, [sp, #32]
 8008418:	9309      	str	r3, [sp, #36]	@ 0x24
 800841a:	9808      	ldr	r0, [sp, #32]
 800841c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800841e:	68aa      	ldr	r2, [r5, #8]
 8008420:	68eb      	ldr	r3, [r5, #12]
 8008422:	920a      	str	r2, [sp, #40]	@ 0x28
 8008424:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008426:	f7f9 f8e7 	bl	80015f8 <__aeabi_dadd>
 800842a:	0002      	movs	r2, r0
 800842c:	000b      	movs	r3, r1
 800842e:	0006      	movs	r6, r0
 8008430:	000f      	movs	r7, r1
 8008432:	9808      	ldr	r0, [sp, #32]
 8008434:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008436:	f7fa fb4f 	bl	8002ad8 <__aeabi_dsub>
 800843a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800843c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800843e:	f7f9 f8db 	bl	80015f8 <__aeabi_dadd>
 8008442:	602e      	str	r6, [r5, #0]
 8008444:	606f      	str	r7, [r5, #4]
 8008446:	60a8      	str	r0, [r5, #8]
 8008448:	60e9      	str	r1, [r5, #12]
 800844a:	e75f      	b.n	800830c <__kernel_rem_pio2+0x4e4>
 800844c:	6822      	ldr	r2, [r4, #0]
 800844e:	6863      	ldr	r3, [r4, #4]
 8008450:	9202      	str	r2, [sp, #8]
 8008452:	9303      	str	r3, [sp, #12]
 8008454:	9802      	ldr	r0, [sp, #8]
 8008456:	9903      	ldr	r1, [sp, #12]
 8008458:	68a2      	ldr	r2, [r4, #8]
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	9208      	str	r2, [sp, #32]
 800845e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008460:	f7f9 f8ca 	bl	80015f8 <__aeabi_dadd>
 8008464:	0002      	movs	r2, r0
 8008466:	000b      	movs	r3, r1
 8008468:	0006      	movs	r6, r0
 800846a:	000f      	movs	r7, r1
 800846c:	9802      	ldr	r0, [sp, #8]
 800846e:	9903      	ldr	r1, [sp, #12]
 8008470:	f7fa fb32 	bl	8002ad8 <__aeabi_dsub>
 8008474:	9a08      	ldr	r2, [sp, #32]
 8008476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008478:	f7f9 f8be 	bl	80015f8 <__aeabi_dadd>
 800847c:	3d01      	subs	r5, #1
 800847e:	60a0      	str	r0, [r4, #8]
 8008480:	60e1      	str	r1, [r4, #12]
 8008482:	6026      	str	r6, [r4, #0]
 8008484:	6067      	str	r7, [r4, #4]
 8008486:	e747      	b.n	8008318 <__kernel_rem_pio2+0x4f0>
 8008488:	9b00      	ldr	r3, [sp, #0]
 800848a:	aa4e      	add	r2, sp, #312	@ 0x138
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	18d3      	adds	r3, r2, r3
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f7f9 f8b0 	bl	80015f8 <__aeabi_dadd>
 8008498:	9b00      	ldr	r3, [sp, #0]
 800849a:	3b01      	subs	r3, #1
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	e741      	b.n	8008324 <__kernel_rem_pio2+0x4fc>
 80084a0:	9c00      	ldr	r4, [sp, #0]
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	9a01      	ldr	r2, [sp, #4]
 80084a6:	601c      	str	r4, [r3, #0]
 80084a8:	2380      	movs	r3, #128	@ 0x80
 80084aa:	061b      	lsls	r3, r3, #24
 80084ac:	18d4      	adds	r4, r2, r3
 80084ae:	9a05      	ldr	r2, [sp, #20]
 80084b0:	6054      	str	r4, [r2, #4]
 80084b2:	001a      	movs	r2, r3
 80084b4:	9c05      	ldr	r4, [sp, #20]
 80084b6:	18fb      	adds	r3, r7, r3
 80084b8:	60e3      	str	r3, [r4, #12]
 80084ba:	188b      	adds	r3, r1, r2
 80084bc:	60a6      	str	r6, [r4, #8]
 80084be:	6120      	str	r0, [r4, #16]
 80084c0:	6163      	str	r3, [r4, #20]
 80084c2:	e711      	b.n	80082e8 <__kernel_rem_pio2+0x4c0>
 80084c4:	41700000 	.word	0x41700000
 80084c8:	3e700000 	.word	0x3e700000

080084cc <scalbn>:
 80084cc:	004b      	lsls	r3, r1, #1
 80084ce:	b570      	push	{r4, r5, r6, lr}
 80084d0:	0d5b      	lsrs	r3, r3, #21
 80084d2:	0014      	movs	r4, r2
 80084d4:	000d      	movs	r5, r1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10f      	bne.n	80084fa <scalbn+0x2e>
 80084da:	004b      	lsls	r3, r1, #1
 80084dc:	085b      	lsrs	r3, r3, #1
 80084de:	4303      	orrs	r3, r0
 80084e0:	d012      	beq.n	8008508 <scalbn+0x3c>
 80084e2:	4b23      	ldr	r3, [pc, #140]	@ (8008570 <scalbn+0xa4>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	f7fa f82f 	bl	8002548 <__aeabi_dmul>
 80084ea:	4b22      	ldr	r3, [pc, #136]	@ (8008574 <scalbn+0xa8>)
 80084ec:	429c      	cmp	r4, r3
 80084ee:	da0c      	bge.n	800850a <scalbn+0x3e>
 80084f0:	4a21      	ldr	r2, [pc, #132]	@ (8008578 <scalbn+0xac>)
 80084f2:	4b22      	ldr	r3, [pc, #136]	@ (800857c <scalbn+0xb0>)
 80084f4:	f7fa f828 	bl	8002548 <__aeabi_dmul>
 80084f8:	e006      	b.n	8008508 <scalbn+0x3c>
 80084fa:	4a21      	ldr	r2, [pc, #132]	@ (8008580 <scalbn+0xb4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d108      	bne.n	8008512 <scalbn+0x46>
 8008500:	0002      	movs	r2, r0
 8008502:	000b      	movs	r3, r1
 8008504:	f7f9 f878 	bl	80015f8 <__aeabi_dadd>
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	000d      	movs	r5, r1
 800850c:	004b      	lsls	r3, r1, #1
 800850e:	0d5b      	lsrs	r3, r3, #21
 8008510:	3b36      	subs	r3, #54	@ 0x36
 8008512:	4a1c      	ldr	r2, [pc, #112]	@ (8008584 <scalbn+0xb8>)
 8008514:	4294      	cmp	r4, r2
 8008516:	dd0a      	ble.n	800852e <scalbn+0x62>
 8008518:	4c1b      	ldr	r4, [pc, #108]	@ (8008588 <scalbn+0xbc>)
 800851a:	4d1c      	ldr	r5, [pc, #112]	@ (800858c <scalbn+0xc0>)
 800851c:	2900      	cmp	r1, #0
 800851e:	da01      	bge.n	8008524 <scalbn+0x58>
 8008520:	4c19      	ldr	r4, [pc, #100]	@ (8008588 <scalbn+0xbc>)
 8008522:	4d1b      	ldr	r5, [pc, #108]	@ (8008590 <scalbn+0xc4>)
 8008524:	4a18      	ldr	r2, [pc, #96]	@ (8008588 <scalbn+0xbc>)
 8008526:	4b19      	ldr	r3, [pc, #100]	@ (800858c <scalbn+0xc0>)
 8008528:	0020      	movs	r0, r4
 800852a:	0029      	movs	r1, r5
 800852c:	e7e2      	b.n	80084f4 <scalbn+0x28>
 800852e:	18e2      	adds	r2, r4, r3
 8008530:	4b18      	ldr	r3, [pc, #96]	@ (8008594 <scalbn+0xc8>)
 8008532:	429a      	cmp	r2, r3
 8008534:	dcf0      	bgt.n	8008518 <scalbn+0x4c>
 8008536:	2a00      	cmp	r2, #0
 8008538:	dd05      	ble.n	8008546 <scalbn+0x7a>
 800853a:	4b17      	ldr	r3, [pc, #92]	@ (8008598 <scalbn+0xcc>)
 800853c:	0512      	lsls	r2, r2, #20
 800853e:	402b      	ands	r3, r5
 8008540:	431a      	orrs	r2, r3
 8008542:	0011      	movs	r1, r2
 8008544:	e7e0      	b.n	8008508 <scalbn+0x3c>
 8008546:	0013      	movs	r3, r2
 8008548:	3335      	adds	r3, #53	@ 0x35
 800854a:	da08      	bge.n	800855e <scalbn+0x92>
 800854c:	4c0a      	ldr	r4, [pc, #40]	@ (8008578 <scalbn+0xac>)
 800854e:	4d0b      	ldr	r5, [pc, #44]	@ (800857c <scalbn+0xb0>)
 8008550:	2900      	cmp	r1, #0
 8008552:	da01      	bge.n	8008558 <scalbn+0x8c>
 8008554:	4c08      	ldr	r4, [pc, #32]	@ (8008578 <scalbn+0xac>)
 8008556:	4d11      	ldr	r5, [pc, #68]	@ (800859c <scalbn+0xd0>)
 8008558:	4a07      	ldr	r2, [pc, #28]	@ (8008578 <scalbn+0xac>)
 800855a:	4b08      	ldr	r3, [pc, #32]	@ (800857c <scalbn+0xb0>)
 800855c:	e7e4      	b.n	8008528 <scalbn+0x5c>
 800855e:	4b0e      	ldr	r3, [pc, #56]	@ (8008598 <scalbn+0xcc>)
 8008560:	3236      	adds	r2, #54	@ 0x36
 8008562:	401d      	ands	r5, r3
 8008564:	0512      	lsls	r2, r2, #20
 8008566:	432a      	orrs	r2, r5
 8008568:	0011      	movs	r1, r2
 800856a:	4b0d      	ldr	r3, [pc, #52]	@ (80085a0 <scalbn+0xd4>)
 800856c:	2200      	movs	r2, #0
 800856e:	e7c1      	b.n	80084f4 <scalbn+0x28>
 8008570:	43500000 	.word	0x43500000
 8008574:	ffff3cb0 	.word	0xffff3cb0
 8008578:	c2f8f359 	.word	0xc2f8f359
 800857c:	01a56e1f 	.word	0x01a56e1f
 8008580:	000007ff 	.word	0x000007ff
 8008584:	0000c350 	.word	0x0000c350
 8008588:	8800759c 	.word	0x8800759c
 800858c:	7e37e43c 	.word	0x7e37e43c
 8008590:	fe37e43c 	.word	0xfe37e43c
 8008594:	000007fe 	.word	0x000007fe
 8008598:	800fffff 	.word	0x800fffff
 800859c:	81a56e1f 	.word	0x81a56e1f
 80085a0:	3c900000 	.word	0x3c900000

080085a4 <floor>:
 80085a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085a6:	004b      	lsls	r3, r1, #1
 80085a8:	4a36      	ldr	r2, [pc, #216]	@ (8008684 <floor+0xe0>)
 80085aa:	0d5b      	lsrs	r3, r3, #21
 80085ac:	189e      	adds	r6, r3, r2
 80085ae:	000c      	movs	r4, r1
 80085b0:	0005      	movs	r5, r0
 80085b2:	9001      	str	r0, [sp, #4]
 80085b4:	2e13      	cmp	r6, #19
 80085b6:	dc2f      	bgt.n	8008618 <floor+0x74>
 80085b8:	2e00      	cmp	r6, #0
 80085ba:	da14      	bge.n	80085e6 <floor+0x42>
 80085bc:	4a32      	ldr	r2, [pc, #200]	@ (8008688 <floor+0xe4>)
 80085be:	4b33      	ldr	r3, [pc, #204]	@ (800868c <floor+0xe8>)
 80085c0:	f7f9 f81a 	bl	80015f8 <__aeabi_dadd>
 80085c4:	2200      	movs	r2, #0
 80085c6:	2300      	movs	r3, #0
 80085c8:	f7f7 ff56 	bl	8000478 <__aeabi_dcmpgt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d007      	beq.n	80085e0 <floor+0x3c>
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	da50      	bge.n	8008676 <floor+0xd2>
 80085d4:	0064      	lsls	r4, r4, #1
 80085d6:	0864      	lsrs	r4, r4, #1
 80085d8:	4325      	orrs	r5, r4
 80085da:	d14f      	bne.n	800867c <floor+0xd8>
 80085dc:	2480      	movs	r4, #128	@ 0x80
 80085de:	0624      	lsls	r4, r4, #24
 80085e0:	0021      	movs	r1, r4
 80085e2:	0028      	movs	r0, r5
 80085e4:	e022      	b.n	800862c <floor+0x88>
 80085e6:	4f2a      	ldr	r7, [pc, #168]	@ (8008690 <floor+0xec>)
 80085e8:	4137      	asrs	r7, r6
 80085ea:	003b      	movs	r3, r7
 80085ec:	400b      	ands	r3, r1
 80085ee:	4303      	orrs	r3, r0
 80085f0:	d01c      	beq.n	800862c <floor+0x88>
 80085f2:	4a25      	ldr	r2, [pc, #148]	@ (8008688 <floor+0xe4>)
 80085f4:	4b25      	ldr	r3, [pc, #148]	@ (800868c <floor+0xe8>)
 80085f6:	f7f8 ffff 	bl	80015f8 <__aeabi_dadd>
 80085fa:	2200      	movs	r2, #0
 80085fc:	2300      	movs	r3, #0
 80085fe:	f7f7 ff3b 	bl	8000478 <__aeabi_dcmpgt>
 8008602:	2800      	cmp	r0, #0
 8008604:	d0ec      	beq.n	80085e0 <floor+0x3c>
 8008606:	2c00      	cmp	r4, #0
 8008608:	da03      	bge.n	8008612 <floor+0x6e>
 800860a:	2380      	movs	r3, #128	@ 0x80
 800860c:	035b      	lsls	r3, r3, #13
 800860e:	4133      	asrs	r3, r6
 8008610:	18e4      	adds	r4, r4, r3
 8008612:	2500      	movs	r5, #0
 8008614:	43bc      	bics	r4, r7
 8008616:	e7e3      	b.n	80085e0 <floor+0x3c>
 8008618:	2e33      	cmp	r6, #51	@ 0x33
 800861a:	dd09      	ble.n	8008630 <floor+0x8c>
 800861c:	2380      	movs	r3, #128	@ 0x80
 800861e:	00db      	lsls	r3, r3, #3
 8008620:	429e      	cmp	r6, r3
 8008622:	d103      	bne.n	800862c <floor+0x88>
 8008624:	0002      	movs	r2, r0
 8008626:	000b      	movs	r3, r1
 8008628:	f7f8 ffe6 	bl	80015f8 <__aeabi_dadd>
 800862c:	b003      	add	sp, #12
 800862e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008630:	2701      	movs	r7, #1
 8008632:	4a18      	ldr	r2, [pc, #96]	@ (8008694 <floor+0xf0>)
 8008634:	427f      	negs	r7, r7
 8008636:	189b      	adds	r3, r3, r2
 8008638:	40df      	lsrs	r7, r3
 800863a:	4238      	tst	r0, r7
 800863c:	d0f6      	beq.n	800862c <floor+0x88>
 800863e:	4a12      	ldr	r2, [pc, #72]	@ (8008688 <floor+0xe4>)
 8008640:	4b12      	ldr	r3, [pc, #72]	@ (800868c <floor+0xe8>)
 8008642:	f7f8 ffd9 	bl	80015f8 <__aeabi_dadd>
 8008646:	2200      	movs	r2, #0
 8008648:	2300      	movs	r3, #0
 800864a:	f7f7 ff15 	bl	8000478 <__aeabi_dcmpgt>
 800864e:	2800      	cmp	r0, #0
 8008650:	d0c6      	beq.n	80085e0 <floor+0x3c>
 8008652:	2c00      	cmp	r4, #0
 8008654:	da02      	bge.n	800865c <floor+0xb8>
 8008656:	2e14      	cmp	r6, #20
 8008658:	d102      	bne.n	8008660 <floor+0xbc>
 800865a:	3401      	adds	r4, #1
 800865c:	43bd      	bics	r5, r7
 800865e:	e7bf      	b.n	80085e0 <floor+0x3c>
 8008660:	2234      	movs	r2, #52	@ 0x34
 8008662:	2301      	movs	r3, #1
 8008664:	1b92      	subs	r2, r2, r6
 8008666:	4093      	lsls	r3, r2
 8008668:	18ed      	adds	r5, r5, r3
 800866a:	9b01      	ldr	r3, [sp, #4]
 800866c:	429d      	cmp	r5, r3
 800866e:	419b      	sbcs	r3, r3
 8008670:	425b      	negs	r3, r3
 8008672:	18e4      	adds	r4, r4, r3
 8008674:	e7f2      	b.n	800865c <floor+0xb8>
 8008676:	2500      	movs	r5, #0
 8008678:	002c      	movs	r4, r5
 800867a:	e7b1      	b.n	80085e0 <floor+0x3c>
 800867c:	2500      	movs	r5, #0
 800867e:	4c06      	ldr	r4, [pc, #24]	@ (8008698 <floor+0xf4>)
 8008680:	e7ae      	b.n	80085e0 <floor+0x3c>
 8008682:	46c0      	nop			@ (mov r8, r8)
 8008684:	fffffc01 	.word	0xfffffc01
 8008688:	8800759c 	.word	0x8800759c
 800868c:	7e37e43c 	.word	0x7e37e43c
 8008690:	000fffff 	.word	0x000fffff
 8008694:	fffffbed 	.word	0xfffffbed
 8008698:	bff00000 	.word	0xbff00000

0800869c <atof>:
 800869c:	b510      	push	{r4, lr}
 800869e:	2100      	movs	r1, #0
 80086a0:	f000 fe12 	bl	80092c8 <strtod>
 80086a4:	bd10      	pop	{r4, pc}

080086a6 <atoi>:
 80086a6:	b510      	push	{r4, lr}
 80086a8:	220a      	movs	r2, #10
 80086aa:	2100      	movs	r1, #0
 80086ac:	f000 fea4 	bl	80093f8 <strtol>
 80086b0:	bd10      	pop	{r4, pc}
	...

080086b4 <sulp>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	0016      	movs	r6, r2
 80086b8:	000d      	movs	r5, r1
 80086ba:	f003 fc63 	bl	800bf84 <__ulp>
 80086be:	2e00      	cmp	r6, #0
 80086c0:	d00d      	beq.n	80086de <sulp+0x2a>
 80086c2:	236b      	movs	r3, #107	@ 0x6b
 80086c4:	006a      	lsls	r2, r5, #1
 80086c6:	0d52      	lsrs	r2, r2, #21
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dd07      	ble.n	80086de <sulp+0x2a>
 80086ce:	2400      	movs	r4, #0
 80086d0:	4a03      	ldr	r2, [pc, #12]	@ (80086e0 <sulp+0x2c>)
 80086d2:	051b      	lsls	r3, r3, #20
 80086d4:	189d      	adds	r5, r3, r2
 80086d6:	002b      	movs	r3, r5
 80086d8:	0022      	movs	r2, r4
 80086da:	f7f9 ff35 	bl	8002548 <__aeabi_dmul>
 80086de:	bd70      	pop	{r4, r5, r6, pc}
 80086e0:	3ff00000 	.word	0x3ff00000

080086e4 <_strtod_l>:
 80086e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e6:	b0a3      	sub	sp, #140	@ 0x8c
 80086e8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80086ea:	2200      	movs	r2, #0
 80086ec:	2600      	movs	r6, #0
 80086ee:	2700      	movs	r7, #0
 80086f0:	9005      	str	r0, [sp, #20]
 80086f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80086f4:	921e      	str	r2, [sp, #120]	@ 0x78
 80086f6:	911d      	str	r1, [sp, #116]	@ 0x74
 80086f8:	780a      	ldrb	r2, [r1, #0]
 80086fa:	2a2b      	cmp	r2, #43	@ 0x2b
 80086fc:	d053      	beq.n	80087a6 <_strtod_l+0xc2>
 80086fe:	d83f      	bhi.n	8008780 <_strtod_l+0x9c>
 8008700:	2a0d      	cmp	r2, #13
 8008702:	d839      	bhi.n	8008778 <_strtod_l+0x94>
 8008704:	2a08      	cmp	r2, #8
 8008706:	d839      	bhi.n	800877c <_strtod_l+0x98>
 8008708:	2a00      	cmp	r2, #0
 800870a:	d042      	beq.n	8008792 <_strtod_l+0xae>
 800870c:	2200      	movs	r2, #0
 800870e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008710:	2100      	movs	r1, #0
 8008712:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008714:	910c      	str	r1, [sp, #48]	@ 0x30
 8008716:	782a      	ldrb	r2, [r5, #0]
 8008718:	2a30      	cmp	r2, #48	@ 0x30
 800871a:	d000      	beq.n	800871e <_strtod_l+0x3a>
 800871c:	e083      	b.n	8008826 <_strtod_l+0x142>
 800871e:	786a      	ldrb	r2, [r5, #1]
 8008720:	3120      	adds	r1, #32
 8008722:	438a      	bics	r2, r1
 8008724:	2a58      	cmp	r2, #88	@ 0x58
 8008726:	d000      	beq.n	800872a <_strtod_l+0x46>
 8008728:	e073      	b.n	8008812 <_strtod_l+0x12e>
 800872a:	9302      	str	r3, [sp, #8]
 800872c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800872e:	4a95      	ldr	r2, [pc, #596]	@ (8008984 <_strtod_l+0x2a0>)
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	ab1e      	add	r3, sp, #120	@ 0x78
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	9805      	ldr	r0, [sp, #20]
 8008738:	ab1f      	add	r3, sp, #124	@ 0x7c
 800873a:	a91d      	add	r1, sp, #116	@ 0x74
 800873c:	f002 fcd2 	bl	800b0e4 <__gethex>
 8008740:	230f      	movs	r3, #15
 8008742:	0002      	movs	r2, r0
 8008744:	401a      	ands	r2, r3
 8008746:	0004      	movs	r4, r0
 8008748:	9206      	str	r2, [sp, #24]
 800874a:	4218      	tst	r0, r3
 800874c:	d005      	beq.n	800875a <_strtod_l+0x76>
 800874e:	2a06      	cmp	r2, #6
 8008750:	d12b      	bne.n	80087aa <_strtod_l+0xc6>
 8008752:	2300      	movs	r3, #0
 8008754:	3501      	adds	r5, #1
 8008756:	951d      	str	r5, [sp, #116]	@ 0x74
 8008758:	9312      	str	r3, [sp, #72]	@ 0x48
 800875a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <_strtod_l+0x82>
 8008760:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008762:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008768:	2b00      	cmp	r3, #0
 800876a:	d019      	beq.n	80087a0 <_strtod_l+0xbc>
 800876c:	2380      	movs	r3, #128	@ 0x80
 800876e:	0030      	movs	r0, r6
 8008770:	061b      	lsls	r3, r3, #24
 8008772:	18f9      	adds	r1, r7, r3
 8008774:	b023      	add	sp, #140	@ 0x8c
 8008776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008778:	2a20      	cmp	r2, #32
 800877a:	d1c7      	bne.n	800870c <_strtod_l+0x28>
 800877c:	3101      	adds	r1, #1
 800877e:	e7ba      	b.n	80086f6 <_strtod_l+0x12>
 8008780:	2a2d      	cmp	r2, #45	@ 0x2d
 8008782:	d1c3      	bne.n	800870c <_strtod_l+0x28>
 8008784:	3a2c      	subs	r2, #44	@ 0x2c
 8008786:	9212      	str	r2, [sp, #72]	@ 0x48
 8008788:	1c4a      	adds	r2, r1, #1
 800878a:	921d      	str	r2, [sp, #116]	@ 0x74
 800878c:	784a      	ldrb	r2, [r1, #1]
 800878e:	2a00      	cmp	r2, #0
 8008790:	d1be      	bne.n	8008710 <_strtod_l+0x2c>
 8008792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008794:	931d      	str	r3, [sp, #116]	@ 0x74
 8008796:	2300      	movs	r3, #0
 8008798:	9312      	str	r3, [sp, #72]	@ 0x48
 800879a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1df      	bne.n	8008760 <_strtod_l+0x7c>
 80087a0:	0030      	movs	r0, r6
 80087a2:	0039      	movs	r1, r7
 80087a4:	e7e6      	b.n	8008774 <_strtod_l+0x90>
 80087a6:	2200      	movs	r2, #0
 80087a8:	e7ed      	b.n	8008786 <_strtod_l+0xa2>
 80087aa:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80087ac:	2a00      	cmp	r2, #0
 80087ae:	d007      	beq.n	80087c0 <_strtod_l+0xdc>
 80087b0:	2135      	movs	r1, #53	@ 0x35
 80087b2:	a820      	add	r0, sp, #128	@ 0x80
 80087b4:	f003 fcdc 	bl	800c170 <__copybits>
 80087b8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80087ba:	9805      	ldr	r0, [sp, #20]
 80087bc:	f003 f896 	bl	800b8ec <_Bfree>
 80087c0:	9806      	ldr	r0, [sp, #24]
 80087c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80087c4:	3801      	subs	r0, #1
 80087c6:	2804      	cmp	r0, #4
 80087c8:	d806      	bhi.n	80087d8 <_strtod_l+0xf4>
 80087ca:	f7f7 fca1 	bl	8000110 <__gnu_thumb1_case_uqi>
 80087ce:	0312      	.short	0x0312
 80087d0:	1e1c      	.short	0x1e1c
 80087d2:	12          	.byte	0x12
 80087d3:	00          	.byte	0x00
 80087d4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80087d6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 80087d8:	05e4      	lsls	r4, r4, #23
 80087da:	d502      	bpl.n	80087e2 <_strtod_l+0xfe>
 80087dc:	2380      	movs	r3, #128	@ 0x80
 80087de:	061b      	lsls	r3, r3, #24
 80087e0:	431f      	orrs	r7, r3
 80087e2:	4b69      	ldr	r3, [pc, #420]	@ (8008988 <_strtod_l+0x2a4>)
 80087e4:	423b      	tst	r3, r7
 80087e6:	d1b8      	bne.n	800875a <_strtod_l+0x76>
 80087e8:	f001 fd00 	bl	800a1ec <__errno>
 80087ec:	2322      	movs	r3, #34	@ 0x22
 80087ee:	6003      	str	r3, [r0, #0]
 80087f0:	e7b3      	b.n	800875a <_strtod_l+0x76>
 80087f2:	4966      	ldr	r1, [pc, #408]	@ (800898c <_strtod_l+0x2a8>)
 80087f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80087f6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80087f8:	400a      	ands	r2, r1
 80087fa:	4965      	ldr	r1, [pc, #404]	@ (8008990 <_strtod_l+0x2ac>)
 80087fc:	185b      	adds	r3, r3, r1
 80087fe:	051b      	lsls	r3, r3, #20
 8008800:	431a      	orrs	r2, r3
 8008802:	0017      	movs	r7, r2
 8008804:	e7e8      	b.n	80087d8 <_strtod_l+0xf4>
 8008806:	4f60      	ldr	r7, [pc, #384]	@ (8008988 <_strtod_l+0x2a4>)
 8008808:	e7e6      	b.n	80087d8 <_strtod_l+0xf4>
 800880a:	2601      	movs	r6, #1
 800880c:	4f61      	ldr	r7, [pc, #388]	@ (8008994 <_strtod_l+0x2b0>)
 800880e:	4276      	negs	r6, r6
 8008810:	e7e2      	b.n	80087d8 <_strtod_l+0xf4>
 8008812:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	921d      	str	r2, [sp, #116]	@ 0x74
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b30      	cmp	r3, #48	@ 0x30
 800881c:	d0f9      	beq.n	8008812 <_strtod_l+0x12e>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d09b      	beq.n	800875a <_strtod_l+0x76>
 8008822:	2301      	movs	r3, #1
 8008824:	930c      	str	r3, [sp, #48]	@ 0x30
 8008826:	2500      	movs	r5, #0
 8008828:	220a      	movs	r2, #10
 800882a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800882c:	950d      	str	r5, [sp, #52]	@ 0x34
 800882e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008830:	9508      	str	r5, [sp, #32]
 8008832:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8008834:	7804      	ldrb	r4, [r0, #0]
 8008836:	0023      	movs	r3, r4
 8008838:	3b30      	subs	r3, #48	@ 0x30
 800883a:	b2d9      	uxtb	r1, r3
 800883c:	2909      	cmp	r1, #9
 800883e:	d927      	bls.n	8008890 <_strtod_l+0x1ac>
 8008840:	2201      	movs	r2, #1
 8008842:	4955      	ldr	r1, [pc, #340]	@ (8008998 <_strtod_l+0x2b4>)
 8008844:	f001 fc6e 	bl	800a124 <strncmp>
 8008848:	2800      	cmp	r0, #0
 800884a:	d031      	beq.n	80088b0 <_strtod_l+0x1cc>
 800884c:	2000      	movs	r0, #0
 800884e:	0023      	movs	r3, r4
 8008850:	4684      	mov	ip, r0
 8008852:	9a08      	ldr	r2, [sp, #32]
 8008854:	900e      	str	r0, [sp, #56]	@ 0x38
 8008856:	9206      	str	r2, [sp, #24]
 8008858:	2220      	movs	r2, #32
 800885a:	0019      	movs	r1, r3
 800885c:	4391      	bics	r1, r2
 800885e:	000a      	movs	r2, r1
 8008860:	2100      	movs	r1, #0
 8008862:	9107      	str	r1, [sp, #28]
 8008864:	2a45      	cmp	r2, #69	@ 0x45
 8008866:	d000      	beq.n	800886a <_strtod_l+0x186>
 8008868:	e0c0      	b.n	80089ec <_strtod_l+0x308>
 800886a:	9b06      	ldr	r3, [sp, #24]
 800886c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800886e:	4303      	orrs	r3, r0
 8008870:	4313      	orrs	r3, r2
 8008872:	428b      	cmp	r3, r1
 8008874:	d08d      	beq.n	8008792 <_strtod_l+0xae>
 8008876:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008878:	9309      	str	r3, [sp, #36]	@ 0x24
 800887a:	3301      	adds	r3, #1
 800887c:	931d      	str	r3, [sp, #116]	@ 0x74
 800887e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b2b      	cmp	r3, #43	@ 0x2b
 8008884:	d070      	beq.n	8008968 <_strtod_l+0x284>
 8008886:	000c      	movs	r4, r1
 8008888:	2b2d      	cmp	r3, #45	@ 0x2d
 800888a:	d173      	bne.n	8008974 <_strtod_l+0x290>
 800888c:	2401      	movs	r4, #1
 800888e:	e06c      	b.n	800896a <_strtod_l+0x286>
 8008890:	9908      	ldr	r1, [sp, #32]
 8008892:	2908      	cmp	r1, #8
 8008894:	dc09      	bgt.n	80088aa <_strtod_l+0x1c6>
 8008896:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008898:	4351      	muls	r1, r2
 800889a:	185b      	adds	r3, r3, r1
 800889c:	930d      	str	r3, [sp, #52]	@ 0x34
 800889e:	9b08      	ldr	r3, [sp, #32]
 80088a0:	3001      	adds	r0, #1
 80088a2:	3301      	adds	r3, #1
 80088a4:	9308      	str	r3, [sp, #32]
 80088a6:	901d      	str	r0, [sp, #116]	@ 0x74
 80088a8:	e7c3      	b.n	8008832 <_strtod_l+0x14e>
 80088aa:	4355      	muls	r5, r2
 80088ac:	195d      	adds	r5, r3, r5
 80088ae:	e7f6      	b.n	800889e <_strtod_l+0x1ba>
 80088b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	921d      	str	r2, [sp, #116]	@ 0x74
 80088b6:	9a08      	ldr	r2, [sp, #32]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	d03a      	beq.n	8008934 <_strtod_l+0x250>
 80088be:	900e      	str	r0, [sp, #56]	@ 0x38
 80088c0:	9206      	str	r2, [sp, #24]
 80088c2:	001a      	movs	r2, r3
 80088c4:	3a30      	subs	r2, #48	@ 0x30
 80088c6:	2a09      	cmp	r2, #9
 80088c8:	d912      	bls.n	80088f0 <_strtod_l+0x20c>
 80088ca:	2201      	movs	r2, #1
 80088cc:	4694      	mov	ip, r2
 80088ce:	e7c3      	b.n	8008858 <_strtod_l+0x174>
 80088d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088d2:	3001      	adds	r0, #1
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	921d      	str	r2, [sp, #116]	@ 0x74
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b30      	cmp	r3, #48	@ 0x30
 80088dc:	d0f8      	beq.n	80088d0 <_strtod_l+0x1ec>
 80088de:	001a      	movs	r2, r3
 80088e0:	3a31      	subs	r2, #49	@ 0x31
 80088e2:	2a08      	cmp	r2, #8
 80088e4:	d83b      	bhi.n	800895e <_strtod_l+0x27a>
 80088e6:	900e      	str	r0, [sp, #56]	@ 0x38
 80088e8:	2000      	movs	r0, #0
 80088ea:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80088ec:	9006      	str	r0, [sp, #24]
 80088ee:	9213      	str	r2, [sp, #76]	@ 0x4c
 80088f0:	001a      	movs	r2, r3
 80088f2:	1c41      	adds	r1, r0, #1
 80088f4:	3a30      	subs	r2, #48	@ 0x30
 80088f6:	2b30      	cmp	r3, #48	@ 0x30
 80088f8:	d016      	beq.n	8008928 <_strtod_l+0x244>
 80088fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088fc:	185b      	adds	r3, r3, r1
 80088fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8008900:	9b06      	ldr	r3, [sp, #24]
 8008902:	210a      	movs	r1, #10
 8008904:	469c      	mov	ip, r3
 8008906:	4484      	add	ip, r0
 8008908:	459c      	cmp	ip, r3
 800890a:	d115      	bne.n	8008938 <_strtod_l+0x254>
 800890c:	9906      	ldr	r1, [sp, #24]
 800890e:	9b06      	ldr	r3, [sp, #24]
 8008910:	3101      	adds	r1, #1
 8008912:	1809      	adds	r1, r1, r0
 8008914:	181b      	adds	r3, r3, r0
 8008916:	9106      	str	r1, [sp, #24]
 8008918:	2b08      	cmp	r3, #8
 800891a:	dc19      	bgt.n	8008950 <_strtod_l+0x26c>
 800891c:	230a      	movs	r3, #10
 800891e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008920:	434b      	muls	r3, r1
 8008922:	2100      	movs	r1, #0
 8008924:	18d3      	adds	r3, r2, r3
 8008926:	930d      	str	r3, [sp, #52]	@ 0x34
 8008928:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800892a:	0008      	movs	r0, r1
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	921d      	str	r2, [sp, #116]	@ 0x74
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	e7c6      	b.n	80088c2 <_strtod_l+0x1de>
 8008934:	9808      	ldr	r0, [sp, #32]
 8008936:	e7d0      	b.n	80088da <_strtod_l+0x1f6>
 8008938:	1c5c      	adds	r4, r3, #1
 800893a:	2b08      	cmp	r3, #8
 800893c:	dc04      	bgt.n	8008948 <_strtod_l+0x264>
 800893e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008940:	434b      	muls	r3, r1
 8008942:	930d      	str	r3, [sp, #52]	@ 0x34
 8008944:	0023      	movs	r3, r4
 8008946:	e7df      	b.n	8008908 <_strtod_l+0x224>
 8008948:	2c10      	cmp	r4, #16
 800894a:	dcfb      	bgt.n	8008944 <_strtod_l+0x260>
 800894c:	434d      	muls	r5, r1
 800894e:	e7f9      	b.n	8008944 <_strtod_l+0x260>
 8008950:	2100      	movs	r1, #0
 8008952:	2b0f      	cmp	r3, #15
 8008954:	dce8      	bgt.n	8008928 <_strtod_l+0x244>
 8008956:	230a      	movs	r3, #10
 8008958:	435d      	muls	r5, r3
 800895a:	1955      	adds	r5, r2, r5
 800895c:	e7e4      	b.n	8008928 <_strtod_l+0x244>
 800895e:	2200      	movs	r2, #0
 8008960:	920e      	str	r2, [sp, #56]	@ 0x38
 8008962:	9206      	str	r2, [sp, #24]
 8008964:	3201      	adds	r2, #1
 8008966:	e7b1      	b.n	80088cc <_strtod_l+0x1e8>
 8008968:	2400      	movs	r4, #0
 800896a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800896c:	3302      	adds	r3, #2
 800896e:	931d      	str	r3, [sp, #116]	@ 0x74
 8008970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008972:	789b      	ldrb	r3, [r3, #2]
 8008974:	001a      	movs	r2, r3
 8008976:	3a30      	subs	r2, #48	@ 0x30
 8008978:	2a09      	cmp	r2, #9
 800897a:	d913      	bls.n	80089a4 <_strtod_l+0x2c0>
 800897c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800897e:	921d      	str	r2, [sp, #116]	@ 0x74
 8008980:	2200      	movs	r2, #0
 8008982:	e032      	b.n	80089ea <_strtod_l+0x306>
 8008984:	0800ce40 	.word	0x0800ce40
 8008988:	7ff00000 	.word	0x7ff00000
 800898c:	ffefffff 	.word	0xffefffff
 8008990:	00000433 	.word	0x00000433
 8008994:	7fffffff 	.word	0x7fffffff
 8008998:	0800ce28 	.word	0x0800ce28
 800899c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	921d      	str	r2, [sp, #116]	@ 0x74
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	2b30      	cmp	r3, #48	@ 0x30
 80089a6:	d0f9      	beq.n	800899c <_strtod_l+0x2b8>
 80089a8:	2200      	movs	r2, #0
 80089aa:	9207      	str	r2, [sp, #28]
 80089ac:	001a      	movs	r2, r3
 80089ae:	3a31      	subs	r2, #49	@ 0x31
 80089b0:	2a08      	cmp	r2, #8
 80089b2:	d81b      	bhi.n	80089ec <_strtod_l+0x308>
 80089b4:	3b30      	subs	r3, #48	@ 0x30
 80089b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80089b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80089ba:	9307      	str	r3, [sp, #28]
 80089bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80089be:	1c59      	adds	r1, r3, #1
 80089c0:	911d      	str	r1, [sp, #116]	@ 0x74
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	001a      	movs	r2, r3
 80089c6:	3a30      	subs	r2, #48	@ 0x30
 80089c8:	2a09      	cmp	r2, #9
 80089ca:	d93a      	bls.n	8008a42 <_strtod_l+0x35e>
 80089cc:	9a07      	ldr	r2, [sp, #28]
 80089ce:	1a8a      	subs	r2, r1, r2
 80089d0:	49b4      	ldr	r1, [pc, #720]	@ (8008ca4 <_strtod_l+0x5c0>)
 80089d2:	9107      	str	r1, [sp, #28]
 80089d4:	2a08      	cmp	r2, #8
 80089d6:	dc04      	bgt.n	80089e2 <_strtod_l+0x2fe>
 80089d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80089da:	9207      	str	r2, [sp, #28]
 80089dc:	428a      	cmp	r2, r1
 80089de:	dd00      	ble.n	80089e2 <_strtod_l+0x2fe>
 80089e0:	9107      	str	r1, [sp, #28]
 80089e2:	2c00      	cmp	r4, #0
 80089e4:	d002      	beq.n	80089ec <_strtod_l+0x308>
 80089e6:	9a07      	ldr	r2, [sp, #28]
 80089e8:	4252      	negs	r2, r2
 80089ea:	9207      	str	r2, [sp, #28]
 80089ec:	9a06      	ldr	r2, [sp, #24]
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	d14d      	bne.n	8008a8e <_strtod_l+0x3aa>
 80089f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80089f4:	4310      	orrs	r0, r2
 80089f6:	d000      	beq.n	80089fa <_strtod_l+0x316>
 80089f8:	e6af      	b.n	800875a <_strtod_l+0x76>
 80089fa:	4662      	mov	r2, ip
 80089fc:	2a00      	cmp	r2, #0
 80089fe:	d000      	beq.n	8008a02 <_strtod_l+0x31e>
 8008a00:	e6c7      	b.n	8008792 <_strtod_l+0xae>
 8008a02:	2b69      	cmp	r3, #105	@ 0x69
 8008a04:	d027      	beq.n	8008a56 <_strtod_l+0x372>
 8008a06:	dc23      	bgt.n	8008a50 <_strtod_l+0x36c>
 8008a08:	2b49      	cmp	r3, #73	@ 0x49
 8008a0a:	d024      	beq.n	8008a56 <_strtod_l+0x372>
 8008a0c:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a0e:	d000      	beq.n	8008a12 <_strtod_l+0x32e>
 8008a10:	e6bf      	b.n	8008792 <_strtod_l+0xae>
 8008a12:	49a5      	ldr	r1, [pc, #660]	@ (8008ca8 <_strtod_l+0x5c4>)
 8008a14:	a81d      	add	r0, sp, #116	@ 0x74
 8008a16:	f002 fd9b 	bl	800b550 <__match>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d100      	bne.n	8008a20 <_strtod_l+0x33c>
 8008a1e:	e6b8      	b.n	8008792 <_strtod_l+0xae>
 8008a20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b28      	cmp	r3, #40	@ 0x28
 8008a26:	d12c      	bne.n	8008a82 <_strtod_l+0x39e>
 8008a28:	49a0      	ldr	r1, [pc, #640]	@ (8008cac <_strtod_l+0x5c8>)
 8008a2a:	aa20      	add	r2, sp, #128	@ 0x80
 8008a2c:	a81d      	add	r0, sp, #116	@ 0x74
 8008a2e:	f002 fda3 	bl	800b578 <__hexnan>
 8008a32:	2805      	cmp	r0, #5
 8008a34:	d125      	bne.n	8008a82 <_strtod_l+0x39e>
 8008a36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a38:	4a9d      	ldr	r2, [pc, #628]	@ (8008cb0 <_strtod_l+0x5cc>)
 8008a3a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	0017      	movs	r7, r2
 8008a40:	e68b      	b.n	800875a <_strtod_l+0x76>
 8008a42:	220a      	movs	r2, #10
 8008a44:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008a46:	434a      	muls	r2, r1
 8008a48:	18d2      	adds	r2, r2, r3
 8008a4a:	3a30      	subs	r2, #48	@ 0x30
 8008a4c:	9210      	str	r2, [sp, #64]	@ 0x40
 8008a4e:	e7b5      	b.n	80089bc <_strtod_l+0x2d8>
 8008a50:	2b6e      	cmp	r3, #110	@ 0x6e
 8008a52:	d0de      	beq.n	8008a12 <_strtod_l+0x32e>
 8008a54:	e69d      	b.n	8008792 <_strtod_l+0xae>
 8008a56:	4997      	ldr	r1, [pc, #604]	@ (8008cb4 <_strtod_l+0x5d0>)
 8008a58:	a81d      	add	r0, sp, #116	@ 0x74
 8008a5a:	f002 fd79 	bl	800b550 <__match>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d100      	bne.n	8008a64 <_strtod_l+0x380>
 8008a62:	e696      	b.n	8008792 <_strtod_l+0xae>
 8008a64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a66:	4994      	ldr	r1, [pc, #592]	@ (8008cb8 <_strtod_l+0x5d4>)
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	a81d      	add	r0, sp, #116	@ 0x74
 8008a6c:	931d      	str	r3, [sp, #116]	@ 0x74
 8008a6e:	f002 fd6f 	bl	800b550 <__match>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d102      	bne.n	8008a7c <_strtod_l+0x398>
 8008a76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a78:	3301      	adds	r3, #1
 8008a7a:	931d      	str	r3, [sp, #116]	@ 0x74
 8008a7c:	2600      	movs	r6, #0
 8008a7e:	4f8c      	ldr	r7, [pc, #560]	@ (8008cb0 <_strtod_l+0x5cc>)
 8008a80:	e66b      	b.n	800875a <_strtod_l+0x76>
 8008a82:	488e      	ldr	r0, [pc, #568]	@ (8008cbc <_strtod_l+0x5d8>)
 8008a84:	f001 fbf4 	bl	800a270 <nan>
 8008a88:	0006      	movs	r6, r0
 8008a8a:	000f      	movs	r7, r1
 8008a8c:	e665      	b.n	800875a <_strtod_l+0x76>
 8008a8e:	9b07      	ldr	r3, [sp, #28]
 8008a90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a96:	9b08      	ldr	r3, [sp, #32]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <_strtod_l+0x3bc>
 8008a9c:	9b06      	ldr	r3, [sp, #24]
 8008a9e:	9308      	str	r3, [sp, #32]
 8008aa0:	9c06      	ldr	r4, [sp, #24]
 8008aa2:	2c10      	cmp	r4, #16
 8008aa4:	dd00      	ble.n	8008aa8 <_strtod_l+0x3c4>
 8008aa6:	2410      	movs	r4, #16
 8008aa8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008aaa:	f7fa fc3d 	bl	8003328 <__aeabi_ui2d>
 8008aae:	9b06      	ldr	r3, [sp, #24]
 8008ab0:	0006      	movs	r6, r0
 8008ab2:	000f      	movs	r7, r1
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	dc13      	bgt.n	8008ae0 <_strtod_l+0x3fc>
 8008ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d100      	bne.n	8008ac0 <_strtod_l+0x3dc>
 8008abe:	e64c      	b.n	800875a <_strtod_l+0x76>
 8008ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dc00      	bgt.n	8008ac8 <_strtod_l+0x3e4>
 8008ac6:	e07e      	b.n	8008bc6 <_strtod_l+0x4e2>
 8008ac8:	2b16      	cmp	r3, #22
 8008aca:	dc63      	bgt.n	8008b94 <_strtod_l+0x4b0>
 8008acc:	497c      	ldr	r1, [pc, #496]	@ (8008cc0 <_strtod_l+0x5dc>)
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	18c9      	adds	r1, r1, r3
 8008ad2:	0032      	movs	r2, r6
 8008ad4:	6808      	ldr	r0, [r1, #0]
 8008ad6:	6849      	ldr	r1, [r1, #4]
 8008ad8:	003b      	movs	r3, r7
 8008ada:	f7f9 fd35 	bl	8002548 <__aeabi_dmul>
 8008ade:	e7d3      	b.n	8008a88 <_strtod_l+0x3a4>
 8008ae0:	0022      	movs	r2, r4
 8008ae2:	4b77      	ldr	r3, [pc, #476]	@ (8008cc0 <_strtod_l+0x5dc>)
 8008ae4:	3a09      	subs	r2, #9
 8008ae6:	00d2      	lsls	r2, r2, #3
 8008ae8:	189b      	adds	r3, r3, r2
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f7f9 fd2b 	bl	8002548 <__aeabi_dmul>
 8008af2:	0006      	movs	r6, r0
 8008af4:	0028      	movs	r0, r5
 8008af6:	000f      	movs	r7, r1
 8008af8:	f7fa fc16 	bl	8003328 <__aeabi_ui2d>
 8008afc:	000b      	movs	r3, r1
 8008afe:	0002      	movs	r2, r0
 8008b00:	0039      	movs	r1, r7
 8008b02:	0030      	movs	r0, r6
 8008b04:	f7f8 fd78 	bl	80015f8 <__aeabi_dadd>
 8008b08:	9b06      	ldr	r3, [sp, #24]
 8008b0a:	0006      	movs	r6, r0
 8008b0c:	000f      	movs	r7, r1
 8008b0e:	2b0f      	cmp	r3, #15
 8008b10:	ddd2      	ble.n	8008ab8 <_strtod_l+0x3d4>
 8008b12:	9b06      	ldr	r3, [sp, #24]
 8008b14:	1b1c      	subs	r4, r3, r4
 8008b16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b18:	18e4      	adds	r4, r4, r3
 8008b1a:	2c00      	cmp	r4, #0
 8008b1c:	dc00      	bgt.n	8008b20 <_strtod_l+0x43c>
 8008b1e:	e09b      	b.n	8008c58 <_strtod_l+0x574>
 8008b20:	220f      	movs	r2, #15
 8008b22:	0023      	movs	r3, r4
 8008b24:	4013      	ands	r3, r2
 8008b26:	4214      	tst	r4, r2
 8008b28:	d00a      	beq.n	8008b40 <_strtod_l+0x45c>
 8008b2a:	4965      	ldr	r1, [pc, #404]	@ (8008cc0 <_strtod_l+0x5dc>)
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	18c9      	adds	r1, r1, r3
 8008b30:	0032      	movs	r2, r6
 8008b32:	6808      	ldr	r0, [r1, #0]
 8008b34:	6849      	ldr	r1, [r1, #4]
 8008b36:	003b      	movs	r3, r7
 8008b38:	f7f9 fd06 	bl	8002548 <__aeabi_dmul>
 8008b3c:	0006      	movs	r6, r0
 8008b3e:	000f      	movs	r7, r1
 8008b40:	230f      	movs	r3, #15
 8008b42:	439c      	bics	r4, r3
 8008b44:	d073      	beq.n	8008c2e <_strtod_l+0x54a>
 8008b46:	3326      	adds	r3, #38	@ 0x26
 8008b48:	33ff      	adds	r3, #255	@ 0xff
 8008b4a:	429c      	cmp	r4, r3
 8008b4c:	dd4b      	ble.n	8008be6 <_strtod_l+0x502>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9306      	str	r3, [sp, #24]
 8008b52:	9307      	str	r3, [sp, #28]
 8008b54:	930d      	str	r3, [sp, #52]	@ 0x34
 8008b56:	9308      	str	r3, [sp, #32]
 8008b58:	2322      	movs	r3, #34	@ 0x22
 8008b5a:	2600      	movs	r6, #0
 8008b5c:	9a05      	ldr	r2, [sp, #20]
 8008b5e:	4f54      	ldr	r7, [pc, #336]	@ (8008cb0 <_strtod_l+0x5cc>)
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b64:	42b3      	cmp	r3, r6
 8008b66:	d100      	bne.n	8008b6a <_strtod_l+0x486>
 8008b68:	e5f7      	b.n	800875a <_strtod_l+0x76>
 8008b6a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	f002 febd 	bl	800b8ec <_Bfree>
 8008b72:	9908      	ldr	r1, [sp, #32]
 8008b74:	9805      	ldr	r0, [sp, #20]
 8008b76:	f002 feb9 	bl	800b8ec <_Bfree>
 8008b7a:	9907      	ldr	r1, [sp, #28]
 8008b7c:	9805      	ldr	r0, [sp, #20]
 8008b7e:	f002 feb5 	bl	800b8ec <_Bfree>
 8008b82:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008b84:	9805      	ldr	r0, [sp, #20]
 8008b86:	f002 feb1 	bl	800b8ec <_Bfree>
 8008b8a:	9906      	ldr	r1, [sp, #24]
 8008b8c:	9805      	ldr	r0, [sp, #20]
 8008b8e:	f002 fead 	bl	800b8ec <_Bfree>
 8008b92:	e5e2      	b.n	800875a <_strtod_l+0x76>
 8008b94:	2325      	movs	r3, #37	@ 0x25
 8008b96:	9a06      	ldr	r2, [sp, #24]
 8008b98:	1a9b      	subs	r3, r3, r2
 8008b9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	dbb8      	blt.n	8008b12 <_strtod_l+0x42e>
 8008ba0:	240f      	movs	r4, #15
 8008ba2:	9b06      	ldr	r3, [sp, #24]
 8008ba4:	4d46      	ldr	r5, [pc, #280]	@ (8008cc0 <_strtod_l+0x5dc>)
 8008ba6:	1ae4      	subs	r4, r4, r3
 8008ba8:	00e1      	lsls	r1, r4, #3
 8008baa:	1869      	adds	r1, r5, r1
 8008bac:	0032      	movs	r2, r6
 8008bae:	6808      	ldr	r0, [r1, #0]
 8008bb0:	6849      	ldr	r1, [r1, #4]
 8008bb2:	003b      	movs	r3, r7
 8008bb4:	f7f9 fcc8 	bl	8002548 <__aeabi_dmul>
 8008bb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bba:	1b1c      	subs	r4, r3, r4
 8008bbc:	00e4      	lsls	r4, r4, #3
 8008bbe:	192d      	adds	r5, r5, r4
 8008bc0:	682a      	ldr	r2, [r5, #0]
 8008bc2:	686b      	ldr	r3, [r5, #4]
 8008bc4:	e789      	b.n	8008ada <_strtod_l+0x3f6>
 8008bc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bc8:	3316      	adds	r3, #22
 8008bca:	dba2      	blt.n	8008b12 <_strtod_l+0x42e>
 8008bcc:	9907      	ldr	r1, [sp, #28]
 8008bce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8008cc0 <_strtod_l+0x5dc>)
 8008bd2:	1a52      	subs	r2, r2, r1
 8008bd4:	00d2      	lsls	r2, r2, #3
 8008bd6:	189b      	adds	r3, r3, r2
 8008bd8:	0030      	movs	r0, r6
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	0039      	movs	r1, r7
 8008be0:	f7f9 f86e 	bl	8001cc0 <__aeabi_ddiv>
 8008be4:	e750      	b.n	8008a88 <_strtod_l+0x3a4>
 8008be6:	2300      	movs	r3, #0
 8008be8:	0030      	movs	r0, r6
 8008bea:	0039      	movs	r1, r7
 8008bec:	4d35      	ldr	r5, [pc, #212]	@ (8008cc4 <_strtod_l+0x5e0>)
 8008bee:	1124      	asrs	r4, r4, #4
 8008bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bf2:	2c01      	cmp	r4, #1
 8008bf4:	dc1e      	bgt.n	8008c34 <_strtod_l+0x550>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <_strtod_l+0x51a>
 8008bfa:	0006      	movs	r6, r0
 8008bfc:	000f      	movs	r7, r1
 8008bfe:	4b32      	ldr	r3, [pc, #200]	@ (8008cc8 <_strtod_l+0x5e4>)
 8008c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c02:	18ff      	adds	r7, r7, r3
 8008c04:	4b2f      	ldr	r3, [pc, #188]	@ (8008cc4 <_strtod_l+0x5e0>)
 8008c06:	00d5      	lsls	r5, r2, #3
 8008c08:	195d      	adds	r5, r3, r5
 8008c0a:	0032      	movs	r2, r6
 8008c0c:	6828      	ldr	r0, [r5, #0]
 8008c0e:	6869      	ldr	r1, [r5, #4]
 8008c10:	003b      	movs	r3, r7
 8008c12:	f7f9 fc99 	bl	8002548 <__aeabi_dmul>
 8008c16:	4b26      	ldr	r3, [pc, #152]	@ (8008cb0 <_strtod_l+0x5cc>)
 8008c18:	4a2c      	ldr	r2, [pc, #176]	@ (8008ccc <_strtod_l+0x5e8>)
 8008c1a:	0006      	movs	r6, r0
 8008c1c:	400b      	ands	r3, r1
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d895      	bhi.n	8008b4e <_strtod_l+0x46a>
 8008c22:	4a2b      	ldr	r2, [pc, #172]	@ (8008cd0 <_strtod_l+0x5ec>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d913      	bls.n	8008c50 <_strtod_l+0x56c>
 8008c28:	2601      	movs	r6, #1
 8008c2a:	4f2a      	ldr	r7, [pc, #168]	@ (8008cd4 <_strtod_l+0x5f0>)
 8008c2c:	4276      	negs	r6, r6
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c32:	e086      	b.n	8008d42 <_strtod_l+0x65e>
 8008c34:	2201      	movs	r2, #1
 8008c36:	4214      	tst	r4, r2
 8008c38:	d004      	beq.n	8008c44 <_strtod_l+0x560>
 8008c3a:	682a      	ldr	r2, [r5, #0]
 8008c3c:	686b      	ldr	r3, [r5, #4]
 8008c3e:	f7f9 fc83 	bl	8002548 <__aeabi_dmul>
 8008c42:	2301      	movs	r3, #1
 8008c44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c46:	1064      	asrs	r4, r4, #1
 8008c48:	3201      	adds	r2, #1
 8008c4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c4c:	3508      	adds	r5, #8
 8008c4e:	e7d0      	b.n	8008bf2 <_strtod_l+0x50e>
 8008c50:	23d4      	movs	r3, #212	@ 0xd4
 8008c52:	049b      	lsls	r3, r3, #18
 8008c54:	18cf      	adds	r7, r1, r3
 8008c56:	e7ea      	b.n	8008c2e <_strtod_l+0x54a>
 8008c58:	2c00      	cmp	r4, #0
 8008c5a:	d0e8      	beq.n	8008c2e <_strtod_l+0x54a>
 8008c5c:	4264      	negs	r4, r4
 8008c5e:	230f      	movs	r3, #15
 8008c60:	0022      	movs	r2, r4
 8008c62:	401a      	ands	r2, r3
 8008c64:	421c      	tst	r4, r3
 8008c66:	d00a      	beq.n	8008c7e <_strtod_l+0x59a>
 8008c68:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <_strtod_l+0x5dc>)
 8008c6a:	00d2      	lsls	r2, r2, #3
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	0030      	movs	r0, r6
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	0039      	movs	r1, r7
 8008c76:	f7f9 f823 	bl	8001cc0 <__aeabi_ddiv>
 8008c7a:	0006      	movs	r6, r0
 8008c7c:	000f      	movs	r7, r1
 8008c7e:	1124      	asrs	r4, r4, #4
 8008c80:	d0d5      	beq.n	8008c2e <_strtod_l+0x54a>
 8008c82:	2c1f      	cmp	r4, #31
 8008c84:	dd28      	ble.n	8008cd8 <_strtod_l+0x5f4>
 8008c86:	2300      	movs	r3, #0
 8008c88:	9306      	str	r3, [sp, #24]
 8008c8a:	9307      	str	r3, [sp, #28]
 8008c8c:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c8e:	9308      	str	r3, [sp, #32]
 8008c90:	2322      	movs	r3, #34	@ 0x22
 8008c92:	9a05      	ldr	r2, [sp, #20]
 8008c94:	2600      	movs	r6, #0
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c9a:	2700      	movs	r7, #0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d000      	beq.n	8008ca2 <_strtod_l+0x5be>
 8008ca0:	e763      	b.n	8008b6a <_strtod_l+0x486>
 8008ca2:	e55a      	b.n	800875a <_strtod_l+0x76>
 8008ca4:	00004e1f 	.word	0x00004e1f
 8008ca8:	0800cf8e 	.word	0x0800cf8e
 8008cac:	0800ce2c 	.word	0x0800ce2c
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	0800cf86 	.word	0x0800cf86
 8008cb8:	0800cfc0 	.word	0x0800cfc0
 8008cbc:	0800d24c 	.word	0x0800d24c
 8008cc0:	0800d138 	.word	0x0800d138
 8008cc4:	0800d110 	.word	0x0800d110
 8008cc8:	fcb00000 	.word	0xfcb00000
 8008ccc:	7ca00000 	.word	0x7ca00000
 8008cd0:	7c900000 	.word	0x7c900000
 8008cd4:	7fefffff 	.word	0x7fefffff
 8008cd8:	2310      	movs	r3, #16
 8008cda:	0022      	movs	r2, r4
 8008cdc:	401a      	ands	r2, r3
 8008cde:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ce0:	421c      	tst	r4, r3
 8008ce2:	d001      	beq.n	8008ce8 <_strtod_l+0x604>
 8008ce4:	335a      	adds	r3, #90	@ 0x5a
 8008ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ce8:	0030      	movs	r0, r6
 8008cea:	0039      	movs	r1, r7
 8008cec:	2300      	movs	r3, #0
 8008cee:	4dbf      	ldr	r5, [pc, #764]	@ (8008fec <_strtod_l+0x908>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	4214      	tst	r4, r2
 8008cf4:	d004      	beq.n	8008d00 <_strtod_l+0x61c>
 8008cf6:	682a      	ldr	r2, [r5, #0]
 8008cf8:	686b      	ldr	r3, [r5, #4]
 8008cfa:	f7f9 fc25 	bl	8002548 <__aeabi_dmul>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	1064      	asrs	r4, r4, #1
 8008d02:	3508      	adds	r5, #8
 8008d04:	2c00      	cmp	r4, #0
 8008d06:	d1f3      	bne.n	8008cf0 <_strtod_l+0x60c>
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <_strtod_l+0x62c>
 8008d0c:	0006      	movs	r6, r0
 8008d0e:	000f      	movs	r7, r1
 8008d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00d      	beq.n	8008d32 <_strtod_l+0x64e>
 8008d16:	236b      	movs	r3, #107	@ 0x6b
 8008d18:	007a      	lsls	r2, r7, #1
 8008d1a:	0d52      	lsrs	r2, r2, #21
 8008d1c:	0039      	movs	r1, r7
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dd06      	ble.n	8008d32 <_strtod_l+0x64e>
 8008d24:	2b1f      	cmp	r3, #31
 8008d26:	dd5a      	ble.n	8008dde <_strtod_l+0x6fa>
 8008d28:	2600      	movs	r6, #0
 8008d2a:	2b34      	cmp	r3, #52	@ 0x34
 8008d2c:	dd50      	ble.n	8008dd0 <_strtod_l+0x6ec>
 8008d2e:	27dc      	movs	r7, #220	@ 0xdc
 8008d30:	04bf      	lsls	r7, r7, #18
 8008d32:	2200      	movs	r2, #0
 8008d34:	2300      	movs	r3, #0
 8008d36:	0030      	movs	r0, r6
 8008d38:	0039      	movs	r1, r7
 8008d3a:	f7f7 fb83 	bl	8000444 <__aeabi_dcmpeq>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d1a1      	bne.n	8008c86 <_strtod_l+0x5a2>
 8008d42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d44:	9a08      	ldr	r2, [sp, #32]
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008d4a:	9b06      	ldr	r3, [sp, #24]
 8008d4c:	9805      	ldr	r0, [sp, #20]
 8008d4e:	f002 fe35 	bl	800b9bc <__s2b>
 8008d52:	900d      	str	r0, [sp, #52]	@ 0x34
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d100      	bne.n	8008d5a <_strtod_l+0x676>
 8008d58:	e6f9      	b.n	8008b4e <_strtod_l+0x46a>
 8008d5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d5c:	9907      	ldr	r1, [sp, #28]
 8008d5e:	17da      	asrs	r2, r3, #31
 8008d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d62:	1a5b      	subs	r3, r3, r1
 8008d64:	401a      	ands	r2, r3
 8008d66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d6e:	17db      	asrs	r3, r3, #31
 8008d70:	401a      	ands	r2, r3
 8008d72:	2300      	movs	r3, #0
 8008d74:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d76:	9306      	str	r3, [sp, #24]
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d7c:	9805      	ldr	r0, [sp, #20]
 8008d7e:	6859      	ldr	r1, [r3, #4]
 8008d80:	f002 fd70 	bl	800b864 <_Balloc>
 8008d84:	9008      	str	r0, [sp, #32]
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d100      	bne.n	8008d8c <_strtod_l+0x6a8>
 8008d8a:	e6e5      	b.n	8008b58 <_strtod_l+0x474>
 8008d8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d8e:	300c      	adds	r0, #12
 8008d90:	0019      	movs	r1, r3
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	310c      	adds	r1, #12
 8008d96:	3202      	adds	r2, #2
 8008d98:	0092      	lsls	r2, r2, #2
 8008d9a:	f001 fa5f 	bl	800a25c <memcpy>
 8008d9e:	ab20      	add	r3, sp, #128	@ 0x80
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	0032      	movs	r2, r6
 8008da8:	003b      	movs	r3, r7
 8008daa:	9805      	ldr	r0, [sp, #20]
 8008dac:	9610      	str	r6, [sp, #64]	@ 0x40
 8008dae:	9711      	str	r7, [sp, #68]	@ 0x44
 8008db0:	f003 f954 	bl	800c05c <__d2b>
 8008db4:	901e      	str	r0, [sp, #120]	@ 0x78
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d100      	bne.n	8008dbc <_strtod_l+0x6d8>
 8008dba:	e6cd      	b.n	8008b58 <_strtod_l+0x474>
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	9805      	ldr	r0, [sp, #20]
 8008dc0:	f002 fe98 	bl	800baf4 <__i2b>
 8008dc4:	9007      	str	r0, [sp, #28]
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d10e      	bne.n	8008de8 <_strtod_l+0x704>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	e6c3      	b.n	8008b58 <_strtod_l+0x474>
 8008dd0:	234b      	movs	r3, #75	@ 0x4b
 8008dd2:	1a9a      	subs	r2, r3, r2
 8008dd4:	3b4c      	subs	r3, #76	@ 0x4c
 8008dd6:	4093      	lsls	r3, r2
 8008dd8:	4019      	ands	r1, r3
 8008dda:	000f      	movs	r7, r1
 8008ddc:	e7a9      	b.n	8008d32 <_strtod_l+0x64e>
 8008dde:	2201      	movs	r2, #1
 8008de0:	4252      	negs	r2, r2
 8008de2:	409a      	lsls	r2, r3
 8008de4:	4016      	ands	r6, r2
 8008de6:	e7a4      	b.n	8008d32 <_strtod_l+0x64e>
 8008de8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008dea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008dec:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8008dee:	1ad4      	subs	r4, r2, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	db01      	blt.n	8008df8 <_strtod_l+0x714>
 8008df4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008df6:	195d      	adds	r5, r3, r5
 8008df8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dfa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008dfc:	1a5b      	subs	r3, r3, r1
 8008dfe:	2136      	movs	r1, #54	@ 0x36
 8008e00:	189b      	adds	r3, r3, r2
 8008e02:	1a8a      	subs	r2, r1, r2
 8008e04:	497a      	ldr	r1, [pc, #488]	@ (8008ff0 <_strtod_l+0x90c>)
 8008e06:	2001      	movs	r0, #1
 8008e08:	468c      	mov	ip, r1
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	9116      	str	r1, [sp, #88]	@ 0x58
 8008e10:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e12:	4563      	cmp	r3, ip
 8008e14:	da06      	bge.n	8008e24 <_strtod_l+0x740>
 8008e16:	4661      	mov	r1, ip
 8008e18:	1ac9      	subs	r1, r1, r3
 8008e1a:	1a52      	subs	r2, r2, r1
 8008e1c:	291f      	cmp	r1, #31
 8008e1e:	dc3f      	bgt.n	8008ea0 <_strtod_l+0x7bc>
 8008e20:	4088      	lsls	r0, r1
 8008e22:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e24:	18ab      	adds	r3, r5, r2
 8008e26:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e28:	18a4      	adds	r4, r4, r2
 8008e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e2e:	191c      	adds	r4, r3, r4
 8008e30:	002b      	movs	r3, r5
 8008e32:	4295      	cmp	r5, r2
 8008e34:	dd00      	ble.n	8008e38 <_strtod_l+0x754>
 8008e36:	0013      	movs	r3, r2
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	dd00      	ble.n	8008e3e <_strtod_l+0x75a>
 8008e3c:	0023      	movs	r3, r4
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd04      	ble.n	8008e4c <_strtod_l+0x768>
 8008e42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e44:	1ae4      	subs	r4, r4, r3
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e4a:	1aed      	subs	r5, r5, r3
 8008e4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dd16      	ble.n	8008e80 <_strtod_l+0x79c>
 8008e52:	001a      	movs	r2, r3
 8008e54:	9907      	ldr	r1, [sp, #28]
 8008e56:	9805      	ldr	r0, [sp, #20]
 8008e58:	f002 ff16 	bl	800bc88 <__pow5mult>
 8008e5c:	9007      	str	r0, [sp, #28]
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d0b3      	beq.n	8008dca <_strtod_l+0x6e6>
 8008e62:	0001      	movs	r1, r0
 8008e64:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008e66:	9805      	ldr	r0, [sp, #20]
 8008e68:	f002 fe5c 	bl	800bb24 <__multiply>
 8008e6c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d100      	bne.n	8008e74 <_strtod_l+0x790>
 8008e72:	e671      	b.n	8008b58 <_strtod_l+0x474>
 8008e74:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008e76:	9805      	ldr	r0, [sp, #20]
 8008e78:	f002 fd38 	bl	800b8ec <_Bfree>
 8008e7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e7e:	931e      	str	r3, [sp, #120]	@ 0x78
 8008e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	dc12      	bgt.n	8008eac <_strtod_l+0x7c8>
 8008e86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dd18      	ble.n	8008ebe <_strtod_l+0x7da>
 8008e8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e8e:	9908      	ldr	r1, [sp, #32]
 8008e90:	9805      	ldr	r0, [sp, #20]
 8008e92:	f002 fef9 	bl	800bc88 <__pow5mult>
 8008e96:	9008      	str	r0, [sp, #32]
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d110      	bne.n	8008ebe <_strtod_l+0x7da>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e65a      	b.n	8008b56 <_strtod_l+0x472>
 8008ea0:	4954      	ldr	r1, [pc, #336]	@ (8008ff4 <_strtod_l+0x910>)
 8008ea2:	1acb      	subs	r3, r1, r3
 8008ea4:	0001      	movs	r1, r0
 8008ea6:	4099      	lsls	r1, r3
 8008ea8:	9116      	str	r1, [sp, #88]	@ 0x58
 8008eaa:	e7ba      	b.n	8008e22 <_strtod_l+0x73e>
 8008eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eae:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008eb0:	9805      	ldr	r0, [sp, #20]
 8008eb2:	f002 ff45 	bl	800bd40 <__lshift>
 8008eb6:	901e      	str	r0, [sp, #120]	@ 0x78
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1e4      	bne.n	8008e86 <_strtod_l+0x7a2>
 8008ebc:	e64c      	b.n	8008b58 <_strtod_l+0x474>
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	dd07      	ble.n	8008ed2 <_strtod_l+0x7ee>
 8008ec2:	0022      	movs	r2, r4
 8008ec4:	9908      	ldr	r1, [sp, #32]
 8008ec6:	9805      	ldr	r0, [sp, #20]
 8008ec8:	f002 ff3a 	bl	800bd40 <__lshift>
 8008ecc:	9008      	str	r0, [sp, #32]
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d0e4      	beq.n	8008e9c <_strtod_l+0x7b8>
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	dd08      	ble.n	8008ee8 <_strtod_l+0x804>
 8008ed6:	002a      	movs	r2, r5
 8008ed8:	9907      	ldr	r1, [sp, #28]
 8008eda:	9805      	ldr	r0, [sp, #20]
 8008edc:	f002 ff30 	bl	800bd40 <__lshift>
 8008ee0:	9007      	str	r0, [sp, #28]
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d100      	bne.n	8008ee8 <_strtod_l+0x804>
 8008ee6:	e637      	b.n	8008b58 <_strtod_l+0x474>
 8008ee8:	9a08      	ldr	r2, [sp, #32]
 8008eea:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008eec:	9805      	ldr	r0, [sp, #20]
 8008eee:	f002 ffaf 	bl	800be50 <__mdiff>
 8008ef2:	9006      	str	r0, [sp, #24]
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d100      	bne.n	8008efa <_strtod_l+0x816>
 8008ef8:	e62e      	b.n	8008b58 <_strtod_l+0x474>
 8008efa:	68c3      	ldr	r3, [r0, #12]
 8008efc:	9907      	ldr	r1, [sp, #28]
 8008efe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f00:	2300      	movs	r3, #0
 8008f02:	60c3      	str	r3, [r0, #12]
 8008f04:	f002 ff88 	bl	800be18 <__mcmp>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	da3b      	bge.n	8008f84 <_strtod_l+0x8a0>
 8008f0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f0e:	4333      	orrs	r3, r6
 8008f10:	d167      	bne.n	8008fe2 <_strtod_l+0x8fe>
 8008f12:	033b      	lsls	r3, r7, #12
 8008f14:	d165      	bne.n	8008fe2 <_strtod_l+0x8fe>
 8008f16:	22d6      	movs	r2, #214	@ 0xd6
 8008f18:	4b37      	ldr	r3, [pc, #220]	@ (8008ff8 <_strtod_l+0x914>)
 8008f1a:	04d2      	lsls	r2, r2, #19
 8008f1c:	403b      	ands	r3, r7
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d95f      	bls.n	8008fe2 <_strtod_l+0x8fe>
 8008f22:	9b06      	ldr	r3, [sp, #24]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d103      	bne.n	8008f32 <_strtod_l+0x84e>
 8008f2a:	9b06      	ldr	r3, [sp, #24]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	dd57      	ble.n	8008fe2 <_strtod_l+0x8fe>
 8008f32:	9906      	ldr	r1, [sp, #24]
 8008f34:	2201      	movs	r2, #1
 8008f36:	9805      	ldr	r0, [sp, #20]
 8008f38:	f002 ff02 	bl	800bd40 <__lshift>
 8008f3c:	9907      	ldr	r1, [sp, #28]
 8008f3e:	9006      	str	r0, [sp, #24]
 8008f40:	f002 ff6a 	bl	800be18 <__mcmp>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	dd4c      	ble.n	8008fe2 <_strtod_l+0x8fe>
 8008f48:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff8 <_strtod_l+0x914>)
 8008f4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f4c:	403b      	ands	r3, r7
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d074      	beq.n	800903c <_strtod_l+0x958>
 8008f52:	22d6      	movs	r2, #214	@ 0xd6
 8008f54:	04d2      	lsls	r2, r2, #19
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d870      	bhi.n	800903c <_strtod_l+0x958>
 8008f5a:	22dc      	movs	r2, #220	@ 0xdc
 8008f5c:	0492      	lsls	r2, r2, #18
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d800      	bhi.n	8008f64 <_strtod_l+0x880>
 8008f62:	e695      	b.n	8008c90 <_strtod_l+0x5ac>
 8008f64:	0030      	movs	r0, r6
 8008f66:	0039      	movs	r1, r7
 8008f68:	4b24      	ldr	r3, [pc, #144]	@ (8008ffc <_strtod_l+0x918>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f7f9 faec 	bl	8002548 <__aeabi_dmul>
 8008f70:	4b21      	ldr	r3, [pc, #132]	@ (8008ff8 <_strtod_l+0x914>)
 8008f72:	0006      	movs	r6, r0
 8008f74:	000f      	movs	r7, r1
 8008f76:	420b      	tst	r3, r1
 8008f78:	d000      	beq.n	8008f7c <_strtod_l+0x898>
 8008f7a:	e5f6      	b.n	8008b6a <_strtod_l+0x486>
 8008f7c:	2322      	movs	r3, #34	@ 0x22
 8008f7e:	9a05      	ldr	r2, [sp, #20]
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	e5f2      	b.n	8008b6a <_strtod_l+0x486>
 8008f84:	970e      	str	r7, [sp, #56]	@ 0x38
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d175      	bne.n	8009076 <_strtod_l+0x992>
 8008f8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f8c:	033b      	lsls	r3, r7, #12
 8008f8e:	0b1b      	lsrs	r3, r3, #12
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	d039      	beq.n	8009008 <_strtod_l+0x924>
 8008f94:	4a1a      	ldr	r2, [pc, #104]	@ (8009000 <_strtod_l+0x91c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d138      	bne.n	800900c <_strtod_l+0x928>
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f9e:	4249      	negs	r1, r1
 8008fa0:	0032      	movs	r2, r6
 8008fa2:	0008      	movs	r0, r1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <_strtod_l+0x8dc>
 8008fa8:	24d4      	movs	r4, #212	@ 0xd4
 8008faa:	4b13      	ldr	r3, [pc, #76]	@ (8008ff8 <_strtod_l+0x914>)
 8008fac:	0008      	movs	r0, r1
 8008fae:	403b      	ands	r3, r7
 8008fb0:	04e4      	lsls	r4, r4, #19
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	d804      	bhi.n	8008fc0 <_strtod_l+0x8dc>
 8008fb6:	306c      	adds	r0, #108	@ 0x6c
 8008fb8:	0d1b      	lsrs	r3, r3, #20
 8008fba:	1ac3      	subs	r3, r0, r3
 8008fbc:	4099      	lsls	r1, r3
 8008fbe:	0008      	movs	r0, r1
 8008fc0:	4282      	cmp	r2, r0
 8008fc2:	d123      	bne.n	800900c <_strtod_l+0x928>
 8008fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8009004 <_strtod_l+0x920>)
 8008fc6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d102      	bne.n	8008fd2 <_strtod_l+0x8ee>
 8008fcc:	3201      	adds	r2, #1
 8008fce:	d100      	bne.n	8008fd2 <_strtod_l+0x8ee>
 8008fd0:	e5c2      	b.n	8008b58 <_strtod_l+0x474>
 8008fd2:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <_strtod_l+0x914>)
 8008fd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fd6:	2600      	movs	r6, #0
 8008fd8:	401a      	ands	r2, r3
 8008fda:	0013      	movs	r3, r2
 8008fdc:	2280      	movs	r2, #128	@ 0x80
 8008fde:	0352      	lsls	r2, r2, #13
 8008fe0:	189f      	adds	r7, r3, r2
 8008fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1bd      	bne.n	8008f64 <_strtod_l+0x880>
 8008fe8:	e5bf      	b.n	8008b6a <_strtod_l+0x486>
 8008fea:	46c0      	nop			@ (mov r8, r8)
 8008fec:	0800ce58 	.word	0x0800ce58
 8008ff0:	fffffc02 	.word	0xfffffc02
 8008ff4:	fffffbe2 	.word	0xfffffbe2
 8008ff8:	7ff00000 	.word	0x7ff00000
 8008ffc:	39500000 	.word	0x39500000
 8009000:	000fffff 	.word	0x000fffff
 8009004:	7fefffff 	.word	0x7fefffff
 8009008:	4333      	orrs	r3, r6
 800900a:	d09d      	beq.n	8008f48 <_strtod_l+0x864>
 800900c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01c      	beq.n	800904c <_strtod_l+0x968>
 8009012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009014:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009016:	4213      	tst	r3, r2
 8009018:	d0e3      	beq.n	8008fe2 <_strtod_l+0x8fe>
 800901a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800901c:	0030      	movs	r0, r6
 800901e:	0039      	movs	r1, r7
 8009020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009022:	2b00      	cmp	r3, #0
 8009024:	d016      	beq.n	8009054 <_strtod_l+0x970>
 8009026:	f7ff fb45 	bl	80086b4 <sulp>
 800902a:	0002      	movs	r2, r0
 800902c:	000b      	movs	r3, r1
 800902e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009030:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009032:	f7f8 fae1 	bl	80015f8 <__aeabi_dadd>
 8009036:	0006      	movs	r6, r0
 8009038:	000f      	movs	r7, r1
 800903a:	e7d2      	b.n	8008fe2 <_strtod_l+0x8fe>
 800903c:	2601      	movs	r6, #1
 800903e:	4a92      	ldr	r2, [pc, #584]	@ (8009288 <_strtod_l+0xba4>)
 8009040:	4276      	negs	r6, r6
 8009042:	189b      	adds	r3, r3, r2
 8009044:	4a91      	ldr	r2, [pc, #580]	@ (800928c <_strtod_l+0xba8>)
 8009046:	431a      	orrs	r2, r3
 8009048:	0017      	movs	r7, r2
 800904a:	e7ca      	b.n	8008fe2 <_strtod_l+0x8fe>
 800904c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800904e:	4233      	tst	r3, r6
 8009050:	d0c7      	beq.n	8008fe2 <_strtod_l+0x8fe>
 8009052:	e7e2      	b.n	800901a <_strtod_l+0x936>
 8009054:	f7ff fb2e 	bl	80086b4 <sulp>
 8009058:	0002      	movs	r2, r0
 800905a:	000b      	movs	r3, r1
 800905c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800905e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009060:	f7f9 fd3a 	bl	8002ad8 <__aeabi_dsub>
 8009064:	2200      	movs	r2, #0
 8009066:	2300      	movs	r3, #0
 8009068:	0006      	movs	r6, r0
 800906a:	000f      	movs	r7, r1
 800906c:	f7f7 f9ea 	bl	8000444 <__aeabi_dcmpeq>
 8009070:	2800      	cmp	r0, #0
 8009072:	d0b6      	beq.n	8008fe2 <_strtod_l+0x8fe>
 8009074:	e60c      	b.n	8008c90 <_strtod_l+0x5ac>
 8009076:	9907      	ldr	r1, [sp, #28]
 8009078:	9806      	ldr	r0, [sp, #24]
 800907a:	f003 f84f 	bl	800c11c <__ratio>
 800907e:	2380      	movs	r3, #128	@ 0x80
 8009080:	2200      	movs	r2, #0
 8009082:	05db      	lsls	r3, r3, #23
 8009084:	0004      	movs	r4, r0
 8009086:	000d      	movs	r5, r1
 8009088:	f7f7 f9ec 	bl	8000464 <__aeabi_dcmple>
 800908c:	2800      	cmp	r0, #0
 800908e:	d06c      	beq.n	800916a <_strtod_l+0xa86>
 8009090:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d177      	bne.n	8009186 <_strtod_l+0xaa2>
 8009096:	2e00      	cmp	r6, #0
 8009098:	d157      	bne.n	800914a <_strtod_l+0xa66>
 800909a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800909c:	031b      	lsls	r3, r3, #12
 800909e:	d15a      	bne.n	8009156 <_strtod_l+0xa72>
 80090a0:	2200      	movs	r2, #0
 80090a2:	0020      	movs	r0, r4
 80090a4:	0029      	movs	r1, r5
 80090a6:	4b7a      	ldr	r3, [pc, #488]	@ (8009290 <_strtod_l+0xbac>)
 80090a8:	f7f7 f9d2 	bl	8000450 <__aeabi_dcmplt>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d159      	bne.n	8009164 <_strtod_l+0xa80>
 80090b0:	0020      	movs	r0, r4
 80090b2:	0029      	movs	r1, r5
 80090b4:	2200      	movs	r2, #0
 80090b6:	4b77      	ldr	r3, [pc, #476]	@ (8009294 <_strtod_l+0xbb0>)
 80090b8:	f7f9 fa46 	bl	8002548 <__aeabi_dmul>
 80090bc:	0004      	movs	r4, r0
 80090be:	000d      	movs	r5, r1
 80090c0:	2380      	movs	r3, #128	@ 0x80
 80090c2:	061b      	lsls	r3, r3, #24
 80090c4:	18eb      	adds	r3, r5, r3
 80090c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80090c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090ce:	9214      	str	r2, [sp, #80]	@ 0x50
 80090d0:	9315      	str	r3, [sp, #84]	@ 0x54
 80090d2:	4a71      	ldr	r2, [pc, #452]	@ (8009298 <_strtod_l+0xbb4>)
 80090d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090d6:	4013      	ands	r3, r2
 80090d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80090da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090dc:	4b6f      	ldr	r3, [pc, #444]	@ (800929c <_strtod_l+0xbb8>)
 80090de:	429a      	cmp	r2, r3
 80090e0:	d000      	beq.n	80090e4 <_strtod_l+0xa00>
 80090e2:	e087      	b.n	80091f4 <_strtod_l+0xb10>
 80090e4:	4a6e      	ldr	r2, [pc, #440]	@ (80092a0 <_strtod_l+0xbbc>)
 80090e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090e8:	4694      	mov	ip, r2
 80090ea:	4463      	add	r3, ip
 80090ec:	001f      	movs	r7, r3
 80090ee:	0030      	movs	r0, r6
 80090f0:	0019      	movs	r1, r3
 80090f2:	f002 ff47 	bl	800bf84 <__ulp>
 80090f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090fa:	f7f9 fa25 	bl	8002548 <__aeabi_dmul>
 80090fe:	0032      	movs	r2, r6
 8009100:	003b      	movs	r3, r7
 8009102:	f7f8 fa79 	bl	80015f8 <__aeabi_dadd>
 8009106:	4a64      	ldr	r2, [pc, #400]	@ (8009298 <_strtod_l+0xbb4>)
 8009108:	4b66      	ldr	r3, [pc, #408]	@ (80092a4 <_strtod_l+0xbc0>)
 800910a:	0006      	movs	r6, r0
 800910c:	400a      	ands	r2, r1
 800910e:	429a      	cmp	r2, r3
 8009110:	d940      	bls.n	8009194 <_strtod_l+0xab0>
 8009112:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009114:	4a64      	ldr	r2, [pc, #400]	@ (80092a8 <_strtod_l+0xbc4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d103      	bne.n	8009122 <_strtod_l+0xa3e>
 800911a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800911c:	3301      	adds	r3, #1
 800911e:	d100      	bne.n	8009122 <_strtod_l+0xa3e>
 8009120:	e51a      	b.n	8008b58 <_strtod_l+0x474>
 8009122:	2601      	movs	r6, #1
 8009124:	4f60      	ldr	r7, [pc, #384]	@ (80092a8 <_strtod_l+0xbc4>)
 8009126:	4276      	negs	r6, r6
 8009128:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800912a:	9805      	ldr	r0, [sp, #20]
 800912c:	f002 fbde 	bl	800b8ec <_Bfree>
 8009130:	9908      	ldr	r1, [sp, #32]
 8009132:	9805      	ldr	r0, [sp, #20]
 8009134:	f002 fbda 	bl	800b8ec <_Bfree>
 8009138:	9907      	ldr	r1, [sp, #28]
 800913a:	9805      	ldr	r0, [sp, #20]
 800913c:	f002 fbd6 	bl	800b8ec <_Bfree>
 8009140:	9906      	ldr	r1, [sp, #24]
 8009142:	9805      	ldr	r0, [sp, #20]
 8009144:	f002 fbd2 	bl	800b8ec <_Bfree>
 8009148:	e617      	b.n	8008d7a <_strtod_l+0x696>
 800914a:	2e01      	cmp	r6, #1
 800914c:	d103      	bne.n	8009156 <_strtod_l+0xa72>
 800914e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009150:	2b00      	cmp	r3, #0
 8009152:	d100      	bne.n	8009156 <_strtod_l+0xa72>
 8009154:	e59c      	b.n	8008c90 <_strtod_l+0x5ac>
 8009156:	2300      	movs	r3, #0
 8009158:	4c54      	ldr	r4, [pc, #336]	@ (80092ac <_strtod_l+0xbc8>)
 800915a:	4d4d      	ldr	r5, [pc, #308]	@ (8009290 <_strtod_l+0xbac>)
 800915c:	930a      	str	r3, [sp, #40]	@ 0x28
 800915e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009160:	2400      	movs	r4, #0
 8009162:	e7b2      	b.n	80090ca <_strtod_l+0x9e6>
 8009164:	2400      	movs	r4, #0
 8009166:	4d4b      	ldr	r5, [pc, #300]	@ (8009294 <_strtod_l+0xbb0>)
 8009168:	e7aa      	b.n	80090c0 <_strtod_l+0x9dc>
 800916a:	0020      	movs	r0, r4
 800916c:	0029      	movs	r1, r5
 800916e:	4b49      	ldr	r3, [pc, #292]	@ (8009294 <_strtod_l+0xbb0>)
 8009170:	2200      	movs	r2, #0
 8009172:	f7f9 f9e9 	bl	8002548 <__aeabi_dmul>
 8009176:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009178:	0004      	movs	r4, r0
 800917a:	000d      	movs	r5, r1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d09f      	beq.n	80090c0 <_strtod_l+0x9dc>
 8009180:	940a      	str	r4, [sp, #40]	@ 0x28
 8009182:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009184:	e7a1      	b.n	80090ca <_strtod_l+0x9e6>
 8009186:	2300      	movs	r3, #0
 8009188:	4c41      	ldr	r4, [pc, #260]	@ (8009290 <_strtod_l+0xbac>)
 800918a:	0025      	movs	r5, r4
 800918c:	930a      	str	r3, [sp, #40]	@ 0x28
 800918e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009190:	001c      	movs	r4, r3
 8009192:	e79a      	b.n	80090ca <_strtod_l+0x9e6>
 8009194:	23d4      	movs	r3, #212	@ 0xd4
 8009196:	049b      	lsls	r3, r3, #18
 8009198:	18cf      	adds	r7, r1, r3
 800919a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800919c:	9710      	str	r7, [sp, #64]	@ 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1c2      	bne.n	8009128 <_strtod_l+0xa44>
 80091a2:	4b3d      	ldr	r3, [pc, #244]	@ (8009298 <_strtod_l+0xbb4>)
 80091a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80091a6:	403b      	ands	r3, r7
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d1bd      	bne.n	8009128 <_strtod_l+0xa44>
 80091ac:	0020      	movs	r0, r4
 80091ae:	0029      	movs	r1, r5
 80091b0:	f7f7 fa06 	bl	80005c0 <__aeabi_d2lz>
 80091b4:	f7f7 fa3e 	bl	8000634 <__aeabi_l2d>
 80091b8:	0002      	movs	r2, r0
 80091ba:	000b      	movs	r3, r1
 80091bc:	0020      	movs	r0, r4
 80091be:	0029      	movs	r1, r5
 80091c0:	f7f9 fc8a 	bl	8002ad8 <__aeabi_dsub>
 80091c4:	033c      	lsls	r4, r7, #12
 80091c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091c8:	0b24      	lsrs	r4, r4, #12
 80091ca:	4334      	orrs	r4, r6
 80091cc:	900e      	str	r0, [sp, #56]	@ 0x38
 80091ce:	910f      	str	r1, [sp, #60]	@ 0x3c
 80091d0:	4a37      	ldr	r2, [pc, #220]	@ (80092b0 <_strtod_l+0xbcc>)
 80091d2:	431c      	orrs	r4, r3
 80091d4:	d052      	beq.n	800927c <_strtod_l+0xb98>
 80091d6:	4b37      	ldr	r3, [pc, #220]	@ (80092b4 <_strtod_l+0xbd0>)
 80091d8:	f7f7 f93a 	bl	8000450 <__aeabi_dcmplt>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d000      	beq.n	80091e2 <_strtod_l+0xafe>
 80091e0:	e4c3      	b.n	8008b6a <_strtod_l+0x486>
 80091e2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80091e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091e6:	4a34      	ldr	r2, [pc, #208]	@ (80092b8 <_strtod_l+0xbd4>)
 80091e8:	4b2a      	ldr	r3, [pc, #168]	@ (8009294 <_strtod_l+0xbb0>)
 80091ea:	f7f7 f945 	bl	8000478 <__aeabi_dcmpgt>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d09a      	beq.n	8009128 <_strtod_l+0xa44>
 80091f2:	e4ba      	b.n	8008b6a <_strtod_l+0x486>
 80091f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d02a      	beq.n	8009250 <_strtod_l+0xb6c>
 80091fa:	23d4      	movs	r3, #212	@ 0xd4
 80091fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80091fe:	04db      	lsls	r3, r3, #19
 8009200:	429a      	cmp	r2, r3
 8009202:	d825      	bhi.n	8009250 <_strtod_l+0xb6c>
 8009204:	0020      	movs	r0, r4
 8009206:	0029      	movs	r1, r5
 8009208:	4a2c      	ldr	r2, [pc, #176]	@ (80092bc <_strtod_l+0xbd8>)
 800920a:	4b2d      	ldr	r3, [pc, #180]	@ (80092c0 <_strtod_l+0xbdc>)
 800920c:	f7f7 f92a 	bl	8000464 <__aeabi_dcmple>
 8009210:	2800      	cmp	r0, #0
 8009212:	d016      	beq.n	8009242 <_strtod_l+0xb5e>
 8009214:	0020      	movs	r0, r4
 8009216:	0029      	movs	r1, r5
 8009218:	f7f7 f9b4 	bl	8000584 <__aeabi_d2uiz>
 800921c:	2800      	cmp	r0, #0
 800921e:	d100      	bne.n	8009222 <_strtod_l+0xb3e>
 8009220:	3001      	adds	r0, #1
 8009222:	f7fa f881 	bl	8003328 <__aeabi_ui2d>
 8009226:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009228:	0004      	movs	r4, r0
 800922a:	000d      	movs	r5, r1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d122      	bne.n	8009276 <_strtod_l+0xb92>
 8009230:	2380      	movs	r3, #128	@ 0x80
 8009232:	061b      	lsls	r3, r3, #24
 8009234:	18cb      	adds	r3, r1, r3
 8009236:	9018      	str	r0, [sp, #96]	@ 0x60
 8009238:	9319      	str	r3, [sp, #100]	@ 0x64
 800923a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800923c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800923e:	9214      	str	r2, [sp, #80]	@ 0x50
 8009240:	9315      	str	r3, [sp, #84]	@ 0x54
 8009242:	22d6      	movs	r2, #214	@ 0xd6
 8009244:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009246:	04d2      	lsls	r2, r2, #19
 8009248:	189b      	adds	r3, r3, r2
 800924a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009250:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009252:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009254:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009256:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8009258:	f002 fe94 	bl	800bf84 <__ulp>
 800925c:	0002      	movs	r2, r0
 800925e:	000b      	movs	r3, r1
 8009260:	0030      	movs	r0, r6
 8009262:	0039      	movs	r1, r7
 8009264:	f7f9 f970 	bl	8002548 <__aeabi_dmul>
 8009268:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800926a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800926c:	f7f8 f9c4 	bl	80015f8 <__aeabi_dadd>
 8009270:	0006      	movs	r6, r0
 8009272:	000f      	movs	r7, r1
 8009274:	e791      	b.n	800919a <_strtod_l+0xab6>
 8009276:	9418      	str	r4, [sp, #96]	@ 0x60
 8009278:	9519      	str	r5, [sp, #100]	@ 0x64
 800927a:	e7de      	b.n	800923a <_strtod_l+0xb56>
 800927c:	4b11      	ldr	r3, [pc, #68]	@ (80092c4 <_strtod_l+0xbe0>)
 800927e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009280:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009282:	f7f7 f8e5 	bl	8000450 <__aeabi_dcmplt>
 8009286:	e7b2      	b.n	80091ee <_strtod_l+0xb0a>
 8009288:	fff00000 	.word	0xfff00000
 800928c:	000fffff 	.word	0x000fffff
 8009290:	3ff00000 	.word	0x3ff00000
 8009294:	3fe00000 	.word	0x3fe00000
 8009298:	7ff00000 	.word	0x7ff00000
 800929c:	7fe00000 	.word	0x7fe00000
 80092a0:	fcb00000 	.word	0xfcb00000
 80092a4:	7c9fffff 	.word	0x7c9fffff
 80092a8:	7fefffff 	.word	0x7fefffff
 80092ac:	bff00000 	.word	0xbff00000
 80092b0:	94a03595 	.word	0x94a03595
 80092b4:	3fdfffff 	.word	0x3fdfffff
 80092b8:	35afe535 	.word	0x35afe535
 80092bc:	ffc00000 	.word	0xffc00000
 80092c0:	41dfffff 	.word	0x41dfffff
 80092c4:	3fcfffff 	.word	0x3fcfffff

080092c8 <strtod>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	4c04      	ldr	r4, [pc, #16]	@ (80092dc <strtod+0x14>)
 80092cc:	000a      	movs	r2, r1
 80092ce:	0001      	movs	r1, r0
 80092d0:	4b03      	ldr	r3, [pc, #12]	@ (80092e0 <strtod+0x18>)
 80092d2:	6820      	ldr	r0, [r4, #0]
 80092d4:	f7ff fa06 	bl	80086e4 <_strtod_l>
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	46c0      	nop			@ (mov r8, r8)
 80092dc:	20000188 	.word	0x20000188
 80092e0:	2000001c 	.word	0x2000001c

080092e4 <_strtol_l.constprop.0>:
 80092e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e6:	b085      	sub	sp, #20
 80092e8:	0017      	movs	r7, r2
 80092ea:	001e      	movs	r6, r3
 80092ec:	9003      	str	r0, [sp, #12]
 80092ee:	9101      	str	r1, [sp, #4]
 80092f0:	2b24      	cmp	r3, #36	@ 0x24
 80092f2:	d844      	bhi.n	800937e <_strtol_l.constprop.0+0x9a>
 80092f4:	000c      	movs	r4, r1
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d041      	beq.n	800937e <_strtol_l.constprop.0+0x9a>
 80092fa:	4b3d      	ldr	r3, [pc, #244]	@ (80093f0 <_strtol_l.constprop.0+0x10c>)
 80092fc:	2208      	movs	r2, #8
 80092fe:	469c      	mov	ip, r3
 8009300:	0023      	movs	r3, r4
 8009302:	4661      	mov	r1, ip
 8009304:	781d      	ldrb	r5, [r3, #0]
 8009306:	3401      	adds	r4, #1
 8009308:	5d48      	ldrb	r0, [r1, r5]
 800930a:	0001      	movs	r1, r0
 800930c:	4011      	ands	r1, r2
 800930e:	4210      	tst	r0, r2
 8009310:	d1f6      	bne.n	8009300 <_strtol_l.constprop.0+0x1c>
 8009312:	2d2d      	cmp	r5, #45	@ 0x2d
 8009314:	d13a      	bne.n	800938c <_strtol_l.constprop.0+0xa8>
 8009316:	7825      	ldrb	r5, [r4, #0]
 8009318:	1c9c      	adds	r4, r3, #2
 800931a:	2301      	movs	r3, #1
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	2210      	movs	r2, #16
 8009320:	0033      	movs	r3, r6
 8009322:	4393      	bics	r3, r2
 8009324:	d109      	bne.n	800933a <_strtol_l.constprop.0+0x56>
 8009326:	2d30      	cmp	r5, #48	@ 0x30
 8009328:	d136      	bne.n	8009398 <_strtol_l.constprop.0+0xb4>
 800932a:	2120      	movs	r1, #32
 800932c:	7823      	ldrb	r3, [r4, #0]
 800932e:	438b      	bics	r3, r1
 8009330:	2b58      	cmp	r3, #88	@ 0x58
 8009332:	d131      	bne.n	8009398 <_strtol_l.constprop.0+0xb4>
 8009334:	0016      	movs	r6, r2
 8009336:	7865      	ldrb	r5, [r4, #1]
 8009338:	3402      	adds	r4, #2
 800933a:	4a2e      	ldr	r2, [pc, #184]	@ (80093f4 <_strtol_l.constprop.0+0x110>)
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	4694      	mov	ip, r2
 8009340:	4463      	add	r3, ip
 8009342:	0031      	movs	r1, r6
 8009344:	0018      	movs	r0, r3
 8009346:	9302      	str	r3, [sp, #8]
 8009348:	f7f6 ff7c 	bl	8000244 <__aeabi_uidivmod>
 800934c:	2200      	movs	r2, #0
 800934e:	4684      	mov	ip, r0
 8009350:	0010      	movs	r0, r2
 8009352:	002b      	movs	r3, r5
 8009354:	3b30      	subs	r3, #48	@ 0x30
 8009356:	2b09      	cmp	r3, #9
 8009358:	d825      	bhi.n	80093a6 <_strtol_l.constprop.0+0xc2>
 800935a:	001d      	movs	r5, r3
 800935c:	42ae      	cmp	r6, r5
 800935e:	dd31      	ble.n	80093c4 <_strtol_l.constprop.0+0xe0>
 8009360:	1c53      	adds	r3, r2, #1
 8009362:	d009      	beq.n	8009378 <_strtol_l.constprop.0+0x94>
 8009364:	2201      	movs	r2, #1
 8009366:	4252      	negs	r2, r2
 8009368:	4584      	cmp	ip, r0
 800936a:	d305      	bcc.n	8009378 <_strtol_l.constprop.0+0x94>
 800936c:	d101      	bne.n	8009372 <_strtol_l.constprop.0+0x8e>
 800936e:	42a9      	cmp	r1, r5
 8009370:	db25      	blt.n	80093be <_strtol_l.constprop.0+0xda>
 8009372:	2201      	movs	r2, #1
 8009374:	4370      	muls	r0, r6
 8009376:	1828      	adds	r0, r5, r0
 8009378:	7825      	ldrb	r5, [r4, #0]
 800937a:	3401      	adds	r4, #1
 800937c:	e7e9      	b.n	8009352 <_strtol_l.constprop.0+0x6e>
 800937e:	f000 ff35 	bl	800a1ec <__errno>
 8009382:	2316      	movs	r3, #22
 8009384:	6003      	str	r3, [r0, #0]
 8009386:	2000      	movs	r0, #0
 8009388:	b005      	add	sp, #20
 800938a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938c:	9100      	str	r1, [sp, #0]
 800938e:	2d2b      	cmp	r5, #43	@ 0x2b
 8009390:	d1c5      	bne.n	800931e <_strtol_l.constprop.0+0x3a>
 8009392:	7825      	ldrb	r5, [r4, #0]
 8009394:	1c9c      	adds	r4, r3, #2
 8009396:	e7c2      	b.n	800931e <_strtol_l.constprop.0+0x3a>
 8009398:	2e00      	cmp	r6, #0
 800939a:	d1ce      	bne.n	800933a <_strtol_l.constprop.0+0x56>
 800939c:	3608      	adds	r6, #8
 800939e:	2d30      	cmp	r5, #48	@ 0x30
 80093a0:	d0cb      	beq.n	800933a <_strtol_l.constprop.0+0x56>
 80093a2:	3602      	adds	r6, #2
 80093a4:	e7c9      	b.n	800933a <_strtol_l.constprop.0+0x56>
 80093a6:	002b      	movs	r3, r5
 80093a8:	3b41      	subs	r3, #65	@ 0x41
 80093aa:	2b19      	cmp	r3, #25
 80093ac:	d801      	bhi.n	80093b2 <_strtol_l.constprop.0+0xce>
 80093ae:	3d37      	subs	r5, #55	@ 0x37
 80093b0:	e7d4      	b.n	800935c <_strtol_l.constprop.0+0x78>
 80093b2:	002b      	movs	r3, r5
 80093b4:	3b61      	subs	r3, #97	@ 0x61
 80093b6:	2b19      	cmp	r3, #25
 80093b8:	d804      	bhi.n	80093c4 <_strtol_l.constprop.0+0xe0>
 80093ba:	3d57      	subs	r5, #87	@ 0x57
 80093bc:	e7ce      	b.n	800935c <_strtol_l.constprop.0+0x78>
 80093be:	2201      	movs	r2, #1
 80093c0:	4252      	negs	r2, r2
 80093c2:	e7d9      	b.n	8009378 <_strtol_l.constprop.0+0x94>
 80093c4:	1c53      	adds	r3, r2, #1
 80093c6:	d108      	bne.n	80093da <_strtol_l.constprop.0+0xf6>
 80093c8:	2322      	movs	r3, #34	@ 0x22
 80093ca:	9a03      	ldr	r2, [sp, #12]
 80093cc:	9802      	ldr	r0, [sp, #8]
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	2f00      	cmp	r7, #0
 80093d2:	d0d9      	beq.n	8009388 <_strtol_l.constprop.0+0xa4>
 80093d4:	1e63      	subs	r3, r4, #1
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	e007      	b.n	80093ea <_strtol_l.constprop.0+0x106>
 80093da:	9b00      	ldr	r3, [sp, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d000      	beq.n	80093e2 <_strtol_l.constprop.0+0xfe>
 80093e0:	4240      	negs	r0, r0
 80093e2:	2f00      	cmp	r7, #0
 80093e4:	d0d0      	beq.n	8009388 <_strtol_l.constprop.0+0xa4>
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	d1f4      	bne.n	80093d4 <_strtol_l.constprop.0+0xf0>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	e7cb      	b.n	8009388 <_strtol_l.constprop.0+0xa4>
 80093f0:	0800ce81 	.word	0x0800ce81
 80093f4:	7fffffff 	.word	0x7fffffff

080093f8 <strtol>:
 80093f8:	b510      	push	{r4, lr}
 80093fa:	4c04      	ldr	r4, [pc, #16]	@ (800940c <strtol+0x14>)
 80093fc:	0013      	movs	r3, r2
 80093fe:	000a      	movs	r2, r1
 8009400:	0001      	movs	r1, r0
 8009402:	6820      	ldr	r0, [r4, #0]
 8009404:	f7ff ff6e 	bl	80092e4 <_strtol_l.constprop.0>
 8009408:	bd10      	pop	{r4, pc}
 800940a:	46c0      	nop			@ (mov r8, r8)
 800940c:	20000188 	.word	0x20000188

08009410 <__cvt>:
 8009410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009412:	001f      	movs	r7, r3
 8009414:	2300      	movs	r3, #0
 8009416:	0016      	movs	r6, r2
 8009418:	b08b      	sub	sp, #44	@ 0x2c
 800941a:	429f      	cmp	r7, r3
 800941c:	da04      	bge.n	8009428 <__cvt+0x18>
 800941e:	2180      	movs	r1, #128	@ 0x80
 8009420:	0609      	lsls	r1, r1, #24
 8009422:	187b      	adds	r3, r7, r1
 8009424:	001f      	movs	r7, r3
 8009426:	232d      	movs	r3, #45	@ 0x2d
 8009428:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800942a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800942c:	7013      	strb	r3, [r2, #0]
 800942e:	2320      	movs	r3, #32
 8009430:	2203      	movs	r2, #3
 8009432:	439d      	bics	r5, r3
 8009434:	2d46      	cmp	r5, #70	@ 0x46
 8009436:	d007      	beq.n	8009448 <__cvt+0x38>
 8009438:	002b      	movs	r3, r5
 800943a:	3b45      	subs	r3, #69	@ 0x45
 800943c:	4259      	negs	r1, r3
 800943e:	414b      	adcs	r3, r1
 8009440:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009442:	3a01      	subs	r2, #1
 8009444:	18cb      	adds	r3, r1, r3
 8009446:	9310      	str	r3, [sp, #64]	@ 0x40
 8009448:	ab09      	add	r3, sp, #36	@ 0x24
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	ab08      	add	r3, sp, #32
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009452:	9200      	str	r2, [sp, #0]
 8009454:	9302      	str	r3, [sp, #8]
 8009456:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009458:	0032      	movs	r2, r6
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	003b      	movs	r3, r7
 800945e:	f000 ff9b 	bl	800a398 <_dtoa_r>
 8009462:	0004      	movs	r4, r0
 8009464:	2d47      	cmp	r5, #71	@ 0x47
 8009466:	d11b      	bne.n	80094a0 <__cvt+0x90>
 8009468:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800946a:	07db      	lsls	r3, r3, #31
 800946c:	d511      	bpl.n	8009492 <__cvt+0x82>
 800946e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009470:	18c3      	adds	r3, r0, r3
 8009472:	9307      	str	r3, [sp, #28]
 8009474:	2200      	movs	r2, #0
 8009476:	2300      	movs	r3, #0
 8009478:	0030      	movs	r0, r6
 800947a:	0039      	movs	r1, r7
 800947c:	f7f6 ffe2 	bl	8000444 <__aeabi_dcmpeq>
 8009480:	2800      	cmp	r0, #0
 8009482:	d001      	beq.n	8009488 <__cvt+0x78>
 8009484:	9b07      	ldr	r3, [sp, #28]
 8009486:	9309      	str	r3, [sp, #36]	@ 0x24
 8009488:	2230      	movs	r2, #48	@ 0x30
 800948a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948c:	9907      	ldr	r1, [sp, #28]
 800948e:	428b      	cmp	r3, r1
 8009490:	d320      	bcc.n	80094d4 <__cvt+0xc4>
 8009492:	0020      	movs	r0, r4
 8009494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009496:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009498:	1b1b      	subs	r3, r3, r4
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	b00b      	add	sp, #44	@ 0x2c
 800949e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094a2:	18c3      	adds	r3, r0, r3
 80094a4:	9307      	str	r3, [sp, #28]
 80094a6:	2d46      	cmp	r5, #70	@ 0x46
 80094a8:	d1e4      	bne.n	8009474 <__cvt+0x64>
 80094aa:	7803      	ldrb	r3, [r0, #0]
 80094ac:	2b30      	cmp	r3, #48	@ 0x30
 80094ae:	d10c      	bne.n	80094ca <__cvt+0xba>
 80094b0:	2200      	movs	r2, #0
 80094b2:	2300      	movs	r3, #0
 80094b4:	0030      	movs	r0, r6
 80094b6:	0039      	movs	r1, r7
 80094b8:	f7f6 ffc4 	bl	8000444 <__aeabi_dcmpeq>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d104      	bne.n	80094ca <__cvt+0xba>
 80094c0:	2301      	movs	r3, #1
 80094c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094cc:	9a07      	ldr	r2, [sp, #28]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	18d3      	adds	r3, r2, r3
 80094d2:	e7ce      	b.n	8009472 <__cvt+0x62>
 80094d4:	1c59      	adds	r1, r3, #1
 80094d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	e7d6      	b.n	800948a <__cvt+0x7a>

080094dc <__exponent>:
 80094dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094de:	232b      	movs	r3, #43	@ 0x2b
 80094e0:	0005      	movs	r5, r0
 80094e2:	000c      	movs	r4, r1
 80094e4:	b085      	sub	sp, #20
 80094e6:	7002      	strb	r2, [r0, #0]
 80094e8:	2900      	cmp	r1, #0
 80094ea:	da01      	bge.n	80094f0 <__exponent+0x14>
 80094ec:	424c      	negs	r4, r1
 80094ee:	3302      	adds	r3, #2
 80094f0:	706b      	strb	r3, [r5, #1]
 80094f2:	2c09      	cmp	r4, #9
 80094f4:	dd2c      	ble.n	8009550 <__exponent+0x74>
 80094f6:	ab02      	add	r3, sp, #8
 80094f8:	1dde      	adds	r6, r3, #7
 80094fa:	0020      	movs	r0, r4
 80094fc:	210a      	movs	r1, #10
 80094fe:	f7f6 ff8b 	bl	8000418 <__aeabi_idivmod>
 8009502:	0037      	movs	r7, r6
 8009504:	3130      	adds	r1, #48	@ 0x30
 8009506:	3e01      	subs	r6, #1
 8009508:	0020      	movs	r0, r4
 800950a:	7031      	strb	r1, [r6, #0]
 800950c:	210a      	movs	r1, #10
 800950e:	9401      	str	r4, [sp, #4]
 8009510:	f7f6 fe9c 	bl	800024c <__divsi3>
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	0004      	movs	r4, r0
 8009518:	2b63      	cmp	r3, #99	@ 0x63
 800951a:	dcee      	bgt.n	80094fa <__exponent+0x1e>
 800951c:	1eba      	subs	r2, r7, #2
 800951e:	1ca8      	adds	r0, r5, #2
 8009520:	0001      	movs	r1, r0
 8009522:	0013      	movs	r3, r2
 8009524:	3430      	adds	r4, #48	@ 0x30
 8009526:	7014      	strb	r4, [r2, #0]
 8009528:	ac02      	add	r4, sp, #8
 800952a:	3407      	adds	r4, #7
 800952c:	429c      	cmp	r4, r3
 800952e:	d80a      	bhi.n	8009546 <__exponent+0x6a>
 8009530:	2300      	movs	r3, #0
 8009532:	42a2      	cmp	r2, r4
 8009534:	d803      	bhi.n	800953e <__exponent+0x62>
 8009536:	3309      	adds	r3, #9
 8009538:	aa02      	add	r2, sp, #8
 800953a:	189b      	adds	r3, r3, r2
 800953c:	1bdb      	subs	r3, r3, r7
 800953e:	18c0      	adds	r0, r0, r3
 8009540:	1b40      	subs	r0, r0, r5
 8009542:	b005      	add	sp, #20
 8009544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009546:	781c      	ldrb	r4, [r3, #0]
 8009548:	3301      	adds	r3, #1
 800954a:	700c      	strb	r4, [r1, #0]
 800954c:	3101      	adds	r1, #1
 800954e:	e7eb      	b.n	8009528 <__exponent+0x4c>
 8009550:	2330      	movs	r3, #48	@ 0x30
 8009552:	18e4      	adds	r4, r4, r3
 8009554:	70ab      	strb	r3, [r5, #2]
 8009556:	1d28      	adds	r0, r5, #4
 8009558:	70ec      	strb	r4, [r5, #3]
 800955a:	e7f1      	b.n	8009540 <__exponent+0x64>

0800955c <_printf_float>:
 800955c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800955e:	b097      	sub	sp, #92	@ 0x5c
 8009560:	000d      	movs	r5, r1
 8009562:	920a      	str	r2, [sp, #40]	@ 0x28
 8009564:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009566:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009568:	9009      	str	r0, [sp, #36]	@ 0x24
 800956a:	f000 fded 	bl	800a148 <_localeconv_r>
 800956e:	6803      	ldr	r3, [r0, #0]
 8009570:	0018      	movs	r0, r3
 8009572:	930d      	str	r3, [sp, #52]	@ 0x34
 8009574:	f7f6 fdc4 	bl	8000100 <strlen>
 8009578:	2300      	movs	r3, #0
 800957a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800957c:	9314      	str	r3, [sp, #80]	@ 0x50
 800957e:	7e2b      	ldrb	r3, [r5, #24]
 8009580:	2207      	movs	r2, #7
 8009582:	930c      	str	r3, [sp, #48]	@ 0x30
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	930e      	str	r3, [sp, #56]	@ 0x38
 8009588:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	05c9      	lsls	r1, r1, #23
 800958e:	d545      	bpl.n	800961c <_printf_float+0xc0>
 8009590:	189b      	adds	r3, r3, r2
 8009592:	4393      	bics	r3, r2
 8009594:	001a      	movs	r2, r3
 8009596:	3208      	adds	r2, #8
 8009598:	6022      	str	r2, [r4, #0]
 800959a:	2201      	movs	r2, #1
 800959c:	681e      	ldr	r6, [r3, #0]
 800959e:	685f      	ldr	r7, [r3, #4]
 80095a0:	007b      	lsls	r3, r7, #1
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80095a6:	9610      	str	r6, [sp, #64]	@ 0x40
 80095a8:	64ae      	str	r6, [r5, #72]	@ 0x48
 80095aa:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80095ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80095ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80095b0:	4ba7      	ldr	r3, [pc, #668]	@ (8009850 <_printf_float+0x2f4>)
 80095b2:	4252      	negs	r2, r2
 80095b4:	f7f9 fe2c 	bl	8003210 <__aeabi_dcmpun>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d131      	bne.n	8009620 <_printf_float+0xc4>
 80095bc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80095be:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80095c0:	2201      	movs	r2, #1
 80095c2:	4ba3      	ldr	r3, [pc, #652]	@ (8009850 <_printf_float+0x2f4>)
 80095c4:	4252      	negs	r2, r2
 80095c6:	f7f6 ff4d 	bl	8000464 <__aeabi_dcmple>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d128      	bne.n	8009620 <_printf_float+0xc4>
 80095ce:	2200      	movs	r2, #0
 80095d0:	2300      	movs	r3, #0
 80095d2:	0030      	movs	r0, r6
 80095d4:	0039      	movs	r1, r7
 80095d6:	f7f6 ff3b 	bl	8000450 <__aeabi_dcmplt>
 80095da:	2800      	cmp	r0, #0
 80095dc:	d003      	beq.n	80095e6 <_printf_float+0x8a>
 80095de:	002b      	movs	r3, r5
 80095e0:	222d      	movs	r2, #45	@ 0x2d
 80095e2:	3343      	adds	r3, #67	@ 0x43
 80095e4:	701a      	strb	r2, [r3, #0]
 80095e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095e8:	4f9a      	ldr	r7, [pc, #616]	@ (8009854 <_printf_float+0x2f8>)
 80095ea:	2b47      	cmp	r3, #71	@ 0x47
 80095ec:	d900      	bls.n	80095f0 <_printf_float+0x94>
 80095ee:	4f9a      	ldr	r7, [pc, #616]	@ (8009858 <_printf_float+0x2fc>)
 80095f0:	2303      	movs	r3, #3
 80095f2:	2400      	movs	r4, #0
 80095f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095f6:	612b      	str	r3, [r5, #16]
 80095f8:	3301      	adds	r3, #1
 80095fa:	439a      	bics	r2, r3
 80095fc:	602a      	str	r2, [r5, #0]
 80095fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009600:	0029      	movs	r1, r5
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009608:	aa15      	add	r2, sp, #84	@ 0x54
 800960a:	f000 f9e5 	bl	80099d8 <_printf_common>
 800960e:	3001      	adds	r0, #1
 8009610:	d000      	beq.n	8009614 <_printf_float+0xb8>
 8009612:	e09f      	b.n	8009754 <_printf_float+0x1f8>
 8009614:	2001      	movs	r0, #1
 8009616:	4240      	negs	r0, r0
 8009618:	b017      	add	sp, #92	@ 0x5c
 800961a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800961c:	3307      	adds	r3, #7
 800961e:	e7b8      	b.n	8009592 <_printf_float+0x36>
 8009620:	0032      	movs	r2, r6
 8009622:	003b      	movs	r3, r7
 8009624:	0030      	movs	r0, r6
 8009626:	0039      	movs	r1, r7
 8009628:	f7f9 fdf2 	bl	8003210 <__aeabi_dcmpun>
 800962c:	2800      	cmp	r0, #0
 800962e:	d00b      	beq.n	8009648 <_printf_float+0xec>
 8009630:	2f00      	cmp	r7, #0
 8009632:	da03      	bge.n	800963c <_printf_float+0xe0>
 8009634:	002b      	movs	r3, r5
 8009636:	222d      	movs	r2, #45	@ 0x2d
 8009638:	3343      	adds	r3, #67	@ 0x43
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800963e:	4f87      	ldr	r7, [pc, #540]	@ (800985c <_printf_float+0x300>)
 8009640:	2b47      	cmp	r3, #71	@ 0x47
 8009642:	d9d5      	bls.n	80095f0 <_printf_float+0x94>
 8009644:	4f86      	ldr	r7, [pc, #536]	@ (8009860 <_printf_float+0x304>)
 8009646:	e7d3      	b.n	80095f0 <_printf_float+0x94>
 8009648:	2220      	movs	r2, #32
 800964a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800964c:	686b      	ldr	r3, [r5, #4]
 800964e:	4394      	bics	r4, r2
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	d146      	bne.n	80096e2 <_printf_float+0x186>
 8009654:	3307      	adds	r3, #7
 8009656:	606b      	str	r3, [r5, #4]
 8009658:	2380      	movs	r3, #128	@ 0x80
 800965a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	4313      	orrs	r3, r2
 8009660:	2200      	movs	r2, #0
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	9206      	str	r2, [sp, #24]
 8009666:	aa14      	add	r2, sp, #80	@ 0x50
 8009668:	9205      	str	r2, [sp, #20]
 800966a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800966c:	a90a      	add	r1, sp, #40	@ 0x28
 800966e:	9204      	str	r2, [sp, #16]
 8009670:	aa13      	add	r2, sp, #76	@ 0x4c
 8009672:	9203      	str	r2, [sp, #12]
 8009674:	2223      	movs	r2, #35	@ 0x23
 8009676:	1852      	adds	r2, r2, r1
 8009678:	9202      	str	r2, [sp, #8]
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	686b      	ldr	r3, [r5, #4]
 800967e:	0032      	movs	r2, r6
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009684:	003b      	movs	r3, r7
 8009686:	f7ff fec3 	bl	8009410 <__cvt>
 800968a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800968c:	0007      	movs	r7, r0
 800968e:	2c47      	cmp	r4, #71	@ 0x47
 8009690:	d12d      	bne.n	80096ee <_printf_float+0x192>
 8009692:	1cd3      	adds	r3, r2, #3
 8009694:	db02      	blt.n	800969c <_printf_float+0x140>
 8009696:	686b      	ldr	r3, [r5, #4]
 8009698:	429a      	cmp	r2, r3
 800969a:	dd48      	ble.n	800972e <_printf_float+0x1d2>
 800969c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800969e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80096a0:	3b02      	subs	r3, #2
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80096a6:	0028      	movs	r0, r5
 80096a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80096aa:	3901      	subs	r1, #1
 80096ac:	3050      	adds	r0, #80	@ 0x50
 80096ae:	9113      	str	r1, [sp, #76]	@ 0x4c
 80096b0:	f7ff ff14 	bl	80094dc <__exponent>
 80096b4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80096b6:	0004      	movs	r4, r0
 80096b8:	1813      	adds	r3, r2, r0
 80096ba:	612b      	str	r3, [r5, #16]
 80096bc:	2a01      	cmp	r2, #1
 80096be:	dc02      	bgt.n	80096c6 <_printf_float+0x16a>
 80096c0:	682a      	ldr	r2, [r5, #0]
 80096c2:	07d2      	lsls	r2, r2, #31
 80096c4:	d501      	bpl.n	80096ca <_printf_float+0x16e>
 80096c6:	3301      	adds	r3, #1
 80096c8:	612b      	str	r3, [r5, #16]
 80096ca:	2323      	movs	r3, #35	@ 0x23
 80096cc:	aa0a      	add	r2, sp, #40	@ 0x28
 80096ce:	189b      	adds	r3, r3, r2
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d100      	bne.n	80096d8 <_printf_float+0x17c>
 80096d6:	e792      	b.n	80095fe <_printf_float+0xa2>
 80096d8:	002b      	movs	r3, r5
 80096da:	222d      	movs	r2, #45	@ 0x2d
 80096dc:	3343      	adds	r3, #67	@ 0x43
 80096de:	701a      	strb	r2, [r3, #0]
 80096e0:	e78d      	b.n	80095fe <_printf_float+0xa2>
 80096e2:	2c47      	cmp	r4, #71	@ 0x47
 80096e4:	d1b8      	bne.n	8009658 <_printf_float+0xfc>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1b6      	bne.n	8009658 <_printf_float+0xfc>
 80096ea:	3301      	adds	r3, #1
 80096ec:	e7b3      	b.n	8009656 <_printf_float+0xfa>
 80096ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096f0:	0011      	movs	r1, r2
 80096f2:	2b65      	cmp	r3, #101	@ 0x65
 80096f4:	d9d7      	bls.n	80096a6 <_printf_float+0x14a>
 80096f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096f8:	2b66      	cmp	r3, #102	@ 0x66
 80096fa:	d11a      	bne.n	8009732 <_printf_float+0x1d6>
 80096fc:	686b      	ldr	r3, [r5, #4]
 80096fe:	2a00      	cmp	r2, #0
 8009700:	dd09      	ble.n	8009716 <_printf_float+0x1ba>
 8009702:	612a      	str	r2, [r5, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d102      	bne.n	800970e <_printf_float+0x1b2>
 8009708:	6829      	ldr	r1, [r5, #0]
 800970a:	07c9      	lsls	r1, r1, #31
 800970c:	d50b      	bpl.n	8009726 <_printf_float+0x1ca>
 800970e:	3301      	adds	r3, #1
 8009710:	189b      	adds	r3, r3, r2
 8009712:	612b      	str	r3, [r5, #16]
 8009714:	e007      	b.n	8009726 <_printf_float+0x1ca>
 8009716:	2b00      	cmp	r3, #0
 8009718:	d103      	bne.n	8009722 <_printf_float+0x1c6>
 800971a:	2201      	movs	r2, #1
 800971c:	6829      	ldr	r1, [r5, #0]
 800971e:	4211      	tst	r1, r2
 8009720:	d000      	beq.n	8009724 <_printf_float+0x1c8>
 8009722:	1c9a      	adds	r2, r3, #2
 8009724:	612a      	str	r2, [r5, #16]
 8009726:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009728:	2400      	movs	r4, #0
 800972a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800972c:	e7cd      	b.n	80096ca <_printf_float+0x16e>
 800972e:	2367      	movs	r3, #103	@ 0x67
 8009730:	930c      	str	r3, [sp, #48]	@ 0x30
 8009732:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009734:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009736:	4299      	cmp	r1, r3
 8009738:	db06      	blt.n	8009748 <_printf_float+0x1ec>
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	6129      	str	r1, [r5, #16]
 800973e:	07db      	lsls	r3, r3, #31
 8009740:	d5f1      	bpl.n	8009726 <_printf_float+0x1ca>
 8009742:	3101      	adds	r1, #1
 8009744:	6129      	str	r1, [r5, #16]
 8009746:	e7ee      	b.n	8009726 <_printf_float+0x1ca>
 8009748:	2201      	movs	r2, #1
 800974a:	2900      	cmp	r1, #0
 800974c:	dce0      	bgt.n	8009710 <_printf_float+0x1b4>
 800974e:	1892      	adds	r2, r2, r2
 8009750:	1a52      	subs	r2, r2, r1
 8009752:	e7dd      	b.n	8009710 <_printf_float+0x1b4>
 8009754:	682a      	ldr	r2, [r5, #0]
 8009756:	0553      	lsls	r3, r2, #21
 8009758:	d408      	bmi.n	800976c <_printf_float+0x210>
 800975a:	692b      	ldr	r3, [r5, #16]
 800975c:	003a      	movs	r2, r7
 800975e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009760:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009762:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009764:	47a0      	blx	r4
 8009766:	3001      	adds	r0, #1
 8009768:	d129      	bne.n	80097be <_printf_float+0x262>
 800976a:	e753      	b.n	8009614 <_printf_float+0xb8>
 800976c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800976e:	2b65      	cmp	r3, #101	@ 0x65
 8009770:	d800      	bhi.n	8009774 <_printf_float+0x218>
 8009772:	e0da      	b.n	800992a <_printf_float+0x3ce>
 8009774:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009776:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009778:	2200      	movs	r2, #0
 800977a:	2300      	movs	r3, #0
 800977c:	f7f6 fe62 	bl	8000444 <__aeabi_dcmpeq>
 8009780:	2800      	cmp	r0, #0
 8009782:	d033      	beq.n	80097ec <_printf_float+0x290>
 8009784:	2301      	movs	r3, #1
 8009786:	4a37      	ldr	r2, [pc, #220]	@ (8009864 <_printf_float+0x308>)
 8009788:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800978a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800978c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800978e:	47a0      	blx	r4
 8009790:	3001      	adds	r0, #1
 8009792:	d100      	bne.n	8009796 <_printf_float+0x23a>
 8009794:	e73e      	b.n	8009614 <_printf_float+0xb8>
 8009796:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009798:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800979a:	42b3      	cmp	r3, r6
 800979c:	db02      	blt.n	80097a4 <_printf_float+0x248>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	07db      	lsls	r3, r3, #31
 80097a2:	d50c      	bpl.n	80097be <_printf_float+0x262>
 80097a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80097a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097ae:	47a0      	blx	r4
 80097b0:	2400      	movs	r4, #0
 80097b2:	3001      	adds	r0, #1
 80097b4:	d100      	bne.n	80097b8 <_printf_float+0x25c>
 80097b6:	e72d      	b.n	8009614 <_printf_float+0xb8>
 80097b8:	1e73      	subs	r3, r6, #1
 80097ba:	42a3      	cmp	r3, r4
 80097bc:	dc0a      	bgt.n	80097d4 <_printf_float+0x278>
 80097be:	682b      	ldr	r3, [r5, #0]
 80097c0:	079b      	lsls	r3, r3, #30
 80097c2:	d500      	bpl.n	80097c6 <_printf_float+0x26a>
 80097c4:	e105      	b.n	80099d2 <_printf_float+0x476>
 80097c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097c8:	68e8      	ldr	r0, [r5, #12]
 80097ca:	4298      	cmp	r0, r3
 80097cc:	db00      	blt.n	80097d0 <_printf_float+0x274>
 80097ce:	e723      	b.n	8009618 <_printf_float+0xbc>
 80097d0:	0018      	movs	r0, r3
 80097d2:	e721      	b.n	8009618 <_printf_float+0xbc>
 80097d4:	002a      	movs	r2, r5
 80097d6:	2301      	movs	r3, #1
 80097d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097dc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80097de:	321a      	adds	r2, #26
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	d100      	bne.n	80097e8 <_printf_float+0x28c>
 80097e6:	e715      	b.n	8009614 <_printf_float+0xb8>
 80097e8:	3401      	adds	r4, #1
 80097ea:	e7e5      	b.n	80097b8 <_printf_float+0x25c>
 80097ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dc3a      	bgt.n	8009868 <_printf_float+0x30c>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009864 <_printf_float+0x308>)
 80097f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80097fc:	47a0      	blx	r4
 80097fe:	3001      	adds	r0, #1
 8009800:	d100      	bne.n	8009804 <_printf_float+0x2a8>
 8009802:	e707      	b.n	8009614 <_printf_float+0xb8>
 8009804:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009806:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009808:	4333      	orrs	r3, r6
 800980a:	d102      	bne.n	8009812 <_printf_float+0x2b6>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	07db      	lsls	r3, r3, #31
 8009810:	d5d5      	bpl.n	80097be <_printf_float+0x262>
 8009812:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009816:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009818:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800981a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800981c:	47a0      	blx	r4
 800981e:	2300      	movs	r3, #0
 8009820:	3001      	adds	r0, #1
 8009822:	d100      	bne.n	8009826 <_printf_float+0x2ca>
 8009824:	e6f6      	b.n	8009614 <_printf_float+0xb8>
 8009826:	930c      	str	r3, [sp, #48]	@ 0x30
 8009828:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800982a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800982c:	425b      	negs	r3, r3
 800982e:	4293      	cmp	r3, r2
 8009830:	dc01      	bgt.n	8009836 <_printf_float+0x2da>
 8009832:	0033      	movs	r3, r6
 8009834:	e792      	b.n	800975c <_printf_float+0x200>
 8009836:	002a      	movs	r2, r5
 8009838:	2301      	movs	r3, #1
 800983a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800983c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800983e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009840:	321a      	adds	r2, #26
 8009842:	47a0      	blx	r4
 8009844:	3001      	adds	r0, #1
 8009846:	d100      	bne.n	800984a <_printf_float+0x2ee>
 8009848:	e6e4      	b.n	8009614 <_printf_float+0xb8>
 800984a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800984c:	3301      	adds	r3, #1
 800984e:	e7ea      	b.n	8009826 <_printf_float+0x2ca>
 8009850:	7fefffff 	.word	0x7fefffff
 8009854:	0800cf81 	.word	0x0800cf81
 8009858:	0800cf85 	.word	0x0800cf85
 800985c:	0800cf89 	.word	0x0800cf89
 8009860:	0800cf8d 	.word	0x0800cf8d
 8009864:	0800cf91 	.word	0x0800cf91
 8009868:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800986a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800986c:	930c      	str	r3, [sp, #48]	@ 0x30
 800986e:	429e      	cmp	r6, r3
 8009870:	dd00      	ble.n	8009874 <_printf_float+0x318>
 8009872:	001e      	movs	r6, r3
 8009874:	2e00      	cmp	r6, #0
 8009876:	dc31      	bgt.n	80098dc <_printf_float+0x380>
 8009878:	43f3      	mvns	r3, r6
 800987a:	2400      	movs	r4, #0
 800987c:	17db      	asrs	r3, r3, #31
 800987e:	4033      	ands	r3, r6
 8009880:	930e      	str	r3, [sp, #56]	@ 0x38
 8009882:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009886:	1af3      	subs	r3, r6, r3
 8009888:	42a3      	cmp	r3, r4
 800988a:	dc30      	bgt.n	80098ee <_printf_float+0x392>
 800988c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800988e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009890:	429a      	cmp	r2, r3
 8009892:	dc38      	bgt.n	8009906 <_printf_float+0x3aa>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	07db      	lsls	r3, r3, #31
 8009898:	d435      	bmi.n	8009906 <_printf_float+0x3aa>
 800989a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800989c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800989e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098a0:	1b9b      	subs	r3, r3, r6
 80098a2:	1b14      	subs	r4, r2, r4
 80098a4:	429c      	cmp	r4, r3
 80098a6:	dd00      	ble.n	80098aa <_printf_float+0x34e>
 80098a8:	001c      	movs	r4, r3
 80098aa:	2c00      	cmp	r4, #0
 80098ac:	dc34      	bgt.n	8009918 <_printf_float+0x3bc>
 80098ae:	43e3      	mvns	r3, r4
 80098b0:	2600      	movs	r6, #0
 80098b2:	17db      	asrs	r3, r3, #31
 80098b4:	401c      	ands	r4, r3
 80098b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	1b1b      	subs	r3, r3, r4
 80098be:	42b3      	cmp	r3, r6
 80098c0:	dc00      	bgt.n	80098c4 <_printf_float+0x368>
 80098c2:	e77c      	b.n	80097be <_printf_float+0x262>
 80098c4:	002a      	movs	r2, r5
 80098c6:	2301      	movs	r3, #1
 80098c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80098ce:	321a      	adds	r2, #26
 80098d0:	47b8      	blx	r7
 80098d2:	3001      	adds	r0, #1
 80098d4:	d100      	bne.n	80098d8 <_printf_float+0x37c>
 80098d6:	e69d      	b.n	8009614 <_printf_float+0xb8>
 80098d8:	3601      	adds	r6, #1
 80098da:	e7ec      	b.n	80098b6 <_printf_float+0x35a>
 80098dc:	0033      	movs	r3, r6
 80098de:	003a      	movs	r2, r7
 80098e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80098e6:	47a0      	blx	r4
 80098e8:	3001      	adds	r0, #1
 80098ea:	d1c5      	bne.n	8009878 <_printf_float+0x31c>
 80098ec:	e692      	b.n	8009614 <_printf_float+0xb8>
 80098ee:	002a      	movs	r2, r5
 80098f0:	2301      	movs	r3, #1
 80098f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098f6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80098f8:	321a      	adds	r2, #26
 80098fa:	47b0      	blx	r6
 80098fc:	3001      	adds	r0, #1
 80098fe:	d100      	bne.n	8009902 <_printf_float+0x3a6>
 8009900:	e688      	b.n	8009614 <_printf_float+0xb8>
 8009902:	3401      	adds	r4, #1
 8009904:	e7bd      	b.n	8009882 <_printf_float+0x326>
 8009906:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009908:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800990a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800990c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800990e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009910:	47a0      	blx	r4
 8009912:	3001      	adds	r0, #1
 8009914:	d1c1      	bne.n	800989a <_printf_float+0x33e>
 8009916:	e67d      	b.n	8009614 <_printf_float+0xb8>
 8009918:	19ba      	adds	r2, r7, r6
 800991a:	0023      	movs	r3, r4
 800991c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800991e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009920:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009922:	47b0      	blx	r6
 8009924:	3001      	adds	r0, #1
 8009926:	d1c2      	bne.n	80098ae <_printf_float+0x352>
 8009928:	e674      	b.n	8009614 <_printf_float+0xb8>
 800992a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800992c:	930c      	str	r3, [sp, #48]	@ 0x30
 800992e:	2b01      	cmp	r3, #1
 8009930:	dc02      	bgt.n	8009938 <_printf_float+0x3dc>
 8009932:	2301      	movs	r3, #1
 8009934:	421a      	tst	r2, r3
 8009936:	d039      	beq.n	80099ac <_printf_float+0x450>
 8009938:	2301      	movs	r3, #1
 800993a:	003a      	movs	r2, r7
 800993c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800993e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009940:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009942:	47b0      	blx	r6
 8009944:	3001      	adds	r0, #1
 8009946:	d100      	bne.n	800994a <_printf_float+0x3ee>
 8009948:	e664      	b.n	8009614 <_printf_float+0xb8>
 800994a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800994c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800994e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009950:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009952:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009954:	47b0      	blx	r6
 8009956:	3001      	adds	r0, #1
 8009958:	d100      	bne.n	800995c <_printf_float+0x400>
 800995a:	e65b      	b.n	8009614 <_printf_float+0xb8>
 800995c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800995e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009962:	2200      	movs	r2, #0
 8009964:	3b01      	subs	r3, #1
 8009966:	930c      	str	r3, [sp, #48]	@ 0x30
 8009968:	2300      	movs	r3, #0
 800996a:	f7f6 fd6b 	bl	8000444 <__aeabi_dcmpeq>
 800996e:	2800      	cmp	r0, #0
 8009970:	d11a      	bne.n	80099a8 <_printf_float+0x44c>
 8009972:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009974:	1c7a      	adds	r2, r7, #1
 8009976:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009978:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800997a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800997c:	47b0      	blx	r6
 800997e:	3001      	adds	r0, #1
 8009980:	d10e      	bne.n	80099a0 <_printf_float+0x444>
 8009982:	e647      	b.n	8009614 <_printf_float+0xb8>
 8009984:	002a      	movs	r2, r5
 8009986:	2301      	movs	r3, #1
 8009988:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800998a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800998c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800998e:	321a      	adds	r2, #26
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	d100      	bne.n	8009998 <_printf_float+0x43c>
 8009996:	e63d      	b.n	8009614 <_printf_float+0xb8>
 8009998:	3601      	adds	r6, #1
 800999a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800999c:	429e      	cmp	r6, r3
 800999e:	dbf1      	blt.n	8009984 <_printf_float+0x428>
 80099a0:	002a      	movs	r2, r5
 80099a2:	0023      	movs	r3, r4
 80099a4:	3250      	adds	r2, #80	@ 0x50
 80099a6:	e6da      	b.n	800975e <_printf_float+0x202>
 80099a8:	2600      	movs	r6, #0
 80099aa:	e7f6      	b.n	800999a <_printf_float+0x43e>
 80099ac:	003a      	movs	r2, r7
 80099ae:	e7e2      	b.n	8009976 <_printf_float+0x41a>
 80099b0:	002a      	movs	r2, r5
 80099b2:	2301      	movs	r3, #1
 80099b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80099ba:	3219      	adds	r2, #25
 80099bc:	47b0      	blx	r6
 80099be:	3001      	adds	r0, #1
 80099c0:	d100      	bne.n	80099c4 <_printf_float+0x468>
 80099c2:	e627      	b.n	8009614 <_printf_float+0xb8>
 80099c4:	3401      	adds	r4, #1
 80099c6:	68eb      	ldr	r3, [r5, #12]
 80099c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	dcef      	bgt.n	80099b0 <_printf_float+0x454>
 80099d0:	e6f9      	b.n	80097c6 <_printf_float+0x26a>
 80099d2:	2400      	movs	r4, #0
 80099d4:	e7f7      	b.n	80099c6 <_printf_float+0x46a>
 80099d6:	46c0      	nop			@ (mov r8, r8)

080099d8 <_printf_common>:
 80099d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099da:	0016      	movs	r6, r2
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	688a      	ldr	r2, [r1, #8]
 80099e0:	690b      	ldr	r3, [r1, #16]
 80099e2:	000c      	movs	r4, r1
 80099e4:	9000      	str	r0, [sp, #0]
 80099e6:	4293      	cmp	r3, r2
 80099e8:	da00      	bge.n	80099ec <_printf_common+0x14>
 80099ea:	0013      	movs	r3, r2
 80099ec:	0022      	movs	r2, r4
 80099ee:	6033      	str	r3, [r6, #0]
 80099f0:	3243      	adds	r2, #67	@ 0x43
 80099f2:	7812      	ldrb	r2, [r2, #0]
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	d001      	beq.n	80099fc <_printf_common+0x24>
 80099f8:	3301      	adds	r3, #1
 80099fa:	6033      	str	r3, [r6, #0]
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	069b      	lsls	r3, r3, #26
 8009a00:	d502      	bpl.n	8009a08 <_printf_common+0x30>
 8009a02:	6833      	ldr	r3, [r6, #0]
 8009a04:	3302      	adds	r3, #2
 8009a06:	6033      	str	r3, [r6, #0]
 8009a08:	6822      	ldr	r2, [r4, #0]
 8009a0a:	2306      	movs	r3, #6
 8009a0c:	0015      	movs	r5, r2
 8009a0e:	401d      	ands	r5, r3
 8009a10:	421a      	tst	r2, r3
 8009a12:	d027      	beq.n	8009a64 <_printf_common+0x8c>
 8009a14:	0023      	movs	r3, r4
 8009a16:	3343      	adds	r3, #67	@ 0x43
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	1e5a      	subs	r2, r3, #1
 8009a1c:	4193      	sbcs	r3, r2
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	0692      	lsls	r2, r2, #26
 8009a22:	d430      	bmi.n	8009a86 <_printf_common+0xae>
 8009a24:	0022      	movs	r2, r4
 8009a26:	9901      	ldr	r1, [sp, #4]
 8009a28:	9800      	ldr	r0, [sp, #0]
 8009a2a:	9d08      	ldr	r5, [sp, #32]
 8009a2c:	3243      	adds	r2, #67	@ 0x43
 8009a2e:	47a8      	blx	r5
 8009a30:	3001      	adds	r0, #1
 8009a32:	d025      	beq.n	8009a80 <_printf_common+0xa8>
 8009a34:	2206      	movs	r2, #6
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	2500      	movs	r5, #0
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d105      	bne.n	8009a4c <_printf_common+0x74>
 8009a40:	6833      	ldr	r3, [r6, #0]
 8009a42:	68e5      	ldr	r5, [r4, #12]
 8009a44:	1aed      	subs	r5, r5, r3
 8009a46:	43eb      	mvns	r3, r5
 8009a48:	17db      	asrs	r3, r3, #31
 8009a4a:	401d      	ands	r5, r3
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	6922      	ldr	r2, [r4, #16]
 8009a50:	4293      	cmp	r3, r2
 8009a52:	dd01      	ble.n	8009a58 <_printf_common+0x80>
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	18ed      	adds	r5, r5, r3
 8009a58:	2600      	movs	r6, #0
 8009a5a:	42b5      	cmp	r5, r6
 8009a5c:	d120      	bne.n	8009aa0 <_printf_common+0xc8>
 8009a5e:	2000      	movs	r0, #0
 8009a60:	e010      	b.n	8009a84 <_printf_common+0xac>
 8009a62:	3501      	adds	r5, #1
 8009a64:	68e3      	ldr	r3, [r4, #12]
 8009a66:	6832      	ldr	r2, [r6, #0]
 8009a68:	1a9b      	subs	r3, r3, r2
 8009a6a:	42ab      	cmp	r3, r5
 8009a6c:	ddd2      	ble.n	8009a14 <_printf_common+0x3c>
 8009a6e:	0022      	movs	r2, r4
 8009a70:	2301      	movs	r3, #1
 8009a72:	9901      	ldr	r1, [sp, #4]
 8009a74:	9800      	ldr	r0, [sp, #0]
 8009a76:	9f08      	ldr	r7, [sp, #32]
 8009a78:	3219      	adds	r2, #25
 8009a7a:	47b8      	blx	r7
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d1f0      	bne.n	8009a62 <_printf_common+0x8a>
 8009a80:	2001      	movs	r0, #1
 8009a82:	4240      	negs	r0, r0
 8009a84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a86:	2030      	movs	r0, #48	@ 0x30
 8009a88:	18e1      	adds	r1, r4, r3
 8009a8a:	3143      	adds	r1, #67	@ 0x43
 8009a8c:	7008      	strb	r0, [r1, #0]
 8009a8e:	0021      	movs	r1, r4
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	3145      	adds	r1, #69	@ 0x45
 8009a94:	7809      	ldrb	r1, [r1, #0]
 8009a96:	18a2      	adds	r2, r4, r2
 8009a98:	3243      	adds	r2, #67	@ 0x43
 8009a9a:	3302      	adds	r3, #2
 8009a9c:	7011      	strb	r1, [r2, #0]
 8009a9e:	e7c1      	b.n	8009a24 <_printf_common+0x4c>
 8009aa0:	0022      	movs	r2, r4
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	9901      	ldr	r1, [sp, #4]
 8009aa6:	9800      	ldr	r0, [sp, #0]
 8009aa8:	9f08      	ldr	r7, [sp, #32]
 8009aaa:	321a      	adds	r2, #26
 8009aac:	47b8      	blx	r7
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d0e6      	beq.n	8009a80 <_printf_common+0xa8>
 8009ab2:	3601      	adds	r6, #1
 8009ab4:	e7d1      	b.n	8009a5a <_printf_common+0x82>
	...

08009ab8 <_printf_i>:
 8009ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aba:	b08b      	sub	sp, #44	@ 0x2c
 8009abc:	9206      	str	r2, [sp, #24]
 8009abe:	000a      	movs	r2, r1
 8009ac0:	3243      	adds	r2, #67	@ 0x43
 8009ac2:	9307      	str	r3, [sp, #28]
 8009ac4:	9005      	str	r0, [sp, #20]
 8009ac6:	9203      	str	r2, [sp, #12]
 8009ac8:	7e0a      	ldrb	r2, [r1, #24]
 8009aca:	000c      	movs	r4, r1
 8009acc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ace:	2a78      	cmp	r2, #120	@ 0x78
 8009ad0:	d809      	bhi.n	8009ae6 <_printf_i+0x2e>
 8009ad2:	2a62      	cmp	r2, #98	@ 0x62
 8009ad4:	d80b      	bhi.n	8009aee <_printf_i+0x36>
 8009ad6:	2a00      	cmp	r2, #0
 8009ad8:	d100      	bne.n	8009adc <_printf_i+0x24>
 8009ada:	e0bc      	b.n	8009c56 <_printf_i+0x19e>
 8009adc:	497b      	ldr	r1, [pc, #492]	@ (8009ccc <_printf_i+0x214>)
 8009ade:	9104      	str	r1, [sp, #16]
 8009ae0:	2a58      	cmp	r2, #88	@ 0x58
 8009ae2:	d100      	bne.n	8009ae6 <_printf_i+0x2e>
 8009ae4:	e090      	b.n	8009c08 <_printf_i+0x150>
 8009ae6:	0025      	movs	r5, r4
 8009ae8:	3542      	adds	r5, #66	@ 0x42
 8009aea:	702a      	strb	r2, [r5, #0]
 8009aec:	e022      	b.n	8009b34 <_printf_i+0x7c>
 8009aee:	0010      	movs	r0, r2
 8009af0:	3863      	subs	r0, #99	@ 0x63
 8009af2:	2815      	cmp	r0, #21
 8009af4:	d8f7      	bhi.n	8009ae6 <_printf_i+0x2e>
 8009af6:	f7f6 fb15 	bl	8000124 <__gnu_thumb1_case_shi>
 8009afa:	0016      	.short	0x0016
 8009afc:	fff6001f 	.word	0xfff6001f
 8009b00:	fff6fff6 	.word	0xfff6fff6
 8009b04:	001ffff6 	.word	0x001ffff6
 8009b08:	fff6fff6 	.word	0xfff6fff6
 8009b0c:	fff6fff6 	.word	0xfff6fff6
 8009b10:	003600a1 	.word	0x003600a1
 8009b14:	fff60080 	.word	0xfff60080
 8009b18:	00b2fff6 	.word	0x00b2fff6
 8009b1c:	0036fff6 	.word	0x0036fff6
 8009b20:	fff6fff6 	.word	0xfff6fff6
 8009b24:	0084      	.short	0x0084
 8009b26:	0025      	movs	r5, r4
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	3542      	adds	r5, #66	@ 0x42
 8009b2c:	1d11      	adds	r1, r2, #4
 8009b2e:	6019      	str	r1, [r3, #0]
 8009b30:	6813      	ldr	r3, [r2, #0]
 8009b32:	702b      	strb	r3, [r5, #0]
 8009b34:	2301      	movs	r3, #1
 8009b36:	e0a0      	b.n	8009c7a <_printf_i+0x1c2>
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	6809      	ldr	r1, [r1, #0]
 8009b3c:	1d02      	adds	r2, r0, #4
 8009b3e:	060d      	lsls	r5, r1, #24
 8009b40:	d50b      	bpl.n	8009b5a <_printf_i+0xa2>
 8009b42:	6806      	ldr	r6, [r0, #0]
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	da03      	bge.n	8009b52 <_printf_i+0x9a>
 8009b4a:	232d      	movs	r3, #45	@ 0x2d
 8009b4c:	9a03      	ldr	r2, [sp, #12]
 8009b4e:	4276      	negs	r6, r6
 8009b50:	7013      	strb	r3, [r2, #0]
 8009b52:	4b5e      	ldr	r3, [pc, #376]	@ (8009ccc <_printf_i+0x214>)
 8009b54:	270a      	movs	r7, #10
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	e018      	b.n	8009b8c <_printf_i+0xd4>
 8009b5a:	6806      	ldr	r6, [r0, #0]
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	0649      	lsls	r1, r1, #25
 8009b60:	d5f1      	bpl.n	8009b46 <_printf_i+0x8e>
 8009b62:	b236      	sxth	r6, r6
 8009b64:	e7ef      	b.n	8009b46 <_printf_i+0x8e>
 8009b66:	6808      	ldr	r0, [r1, #0]
 8009b68:	6819      	ldr	r1, [r3, #0]
 8009b6a:	c940      	ldmia	r1!, {r6}
 8009b6c:	0605      	lsls	r5, r0, #24
 8009b6e:	d402      	bmi.n	8009b76 <_printf_i+0xbe>
 8009b70:	0640      	lsls	r0, r0, #25
 8009b72:	d500      	bpl.n	8009b76 <_printf_i+0xbe>
 8009b74:	b2b6      	uxth	r6, r6
 8009b76:	6019      	str	r1, [r3, #0]
 8009b78:	4b54      	ldr	r3, [pc, #336]	@ (8009ccc <_printf_i+0x214>)
 8009b7a:	270a      	movs	r7, #10
 8009b7c:	9304      	str	r3, [sp, #16]
 8009b7e:	2a6f      	cmp	r2, #111	@ 0x6f
 8009b80:	d100      	bne.n	8009b84 <_printf_i+0xcc>
 8009b82:	3f02      	subs	r7, #2
 8009b84:	0023      	movs	r3, r4
 8009b86:	2200      	movs	r2, #0
 8009b88:	3343      	adds	r3, #67	@ 0x43
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	6863      	ldr	r3, [r4, #4]
 8009b8e:	60a3      	str	r3, [r4, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	db03      	blt.n	8009b9c <_printf_i+0xe4>
 8009b94:	2104      	movs	r1, #4
 8009b96:	6822      	ldr	r2, [r4, #0]
 8009b98:	438a      	bics	r2, r1
 8009b9a:	6022      	str	r2, [r4, #0]
 8009b9c:	2e00      	cmp	r6, #0
 8009b9e:	d102      	bne.n	8009ba6 <_printf_i+0xee>
 8009ba0:	9d03      	ldr	r5, [sp, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00c      	beq.n	8009bc0 <_printf_i+0x108>
 8009ba6:	9d03      	ldr	r5, [sp, #12]
 8009ba8:	0030      	movs	r0, r6
 8009baa:	0039      	movs	r1, r7
 8009bac:	f7f6 fb4a 	bl	8000244 <__aeabi_uidivmod>
 8009bb0:	9b04      	ldr	r3, [sp, #16]
 8009bb2:	3d01      	subs	r5, #1
 8009bb4:	5c5b      	ldrb	r3, [r3, r1]
 8009bb6:	702b      	strb	r3, [r5, #0]
 8009bb8:	0033      	movs	r3, r6
 8009bba:	0006      	movs	r6, r0
 8009bbc:	429f      	cmp	r7, r3
 8009bbe:	d9f3      	bls.n	8009ba8 <_printf_i+0xf0>
 8009bc0:	2f08      	cmp	r7, #8
 8009bc2:	d109      	bne.n	8009bd8 <_printf_i+0x120>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	07db      	lsls	r3, r3, #31
 8009bc8:	d506      	bpl.n	8009bd8 <_printf_i+0x120>
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	dc02      	bgt.n	8009bd8 <_printf_i+0x120>
 8009bd2:	2330      	movs	r3, #48	@ 0x30
 8009bd4:	3d01      	subs	r5, #1
 8009bd6:	702b      	strb	r3, [r5, #0]
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	1b5b      	subs	r3, r3, r5
 8009bdc:	6123      	str	r3, [r4, #16]
 8009bde:	9b07      	ldr	r3, [sp, #28]
 8009be0:	0021      	movs	r1, r4
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	9805      	ldr	r0, [sp, #20]
 8009be6:	9b06      	ldr	r3, [sp, #24]
 8009be8:	aa09      	add	r2, sp, #36	@ 0x24
 8009bea:	f7ff fef5 	bl	80099d8 <_printf_common>
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d148      	bne.n	8009c84 <_printf_i+0x1cc>
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	4240      	negs	r0, r0
 8009bf6:	b00b      	add	sp, #44	@ 0x2c
 8009bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	6809      	ldr	r1, [r1, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	6022      	str	r2, [r4, #0]
 8009c02:	2278      	movs	r2, #120	@ 0x78
 8009c04:	4932      	ldr	r1, [pc, #200]	@ (8009cd0 <_printf_i+0x218>)
 8009c06:	9104      	str	r1, [sp, #16]
 8009c08:	0021      	movs	r1, r4
 8009c0a:	3145      	adds	r1, #69	@ 0x45
 8009c0c:	700a      	strb	r2, [r1, #0]
 8009c0e:	6819      	ldr	r1, [r3, #0]
 8009c10:	6822      	ldr	r2, [r4, #0]
 8009c12:	c940      	ldmia	r1!, {r6}
 8009c14:	0610      	lsls	r0, r2, #24
 8009c16:	d402      	bmi.n	8009c1e <_printf_i+0x166>
 8009c18:	0650      	lsls	r0, r2, #25
 8009c1a:	d500      	bpl.n	8009c1e <_printf_i+0x166>
 8009c1c:	b2b6      	uxth	r6, r6
 8009c1e:	6019      	str	r1, [r3, #0]
 8009c20:	07d3      	lsls	r3, r2, #31
 8009c22:	d502      	bpl.n	8009c2a <_printf_i+0x172>
 8009c24:	2320      	movs	r3, #32
 8009c26:	4313      	orrs	r3, r2
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d001      	beq.n	8009c32 <_printf_i+0x17a>
 8009c2e:	2710      	movs	r7, #16
 8009c30:	e7a8      	b.n	8009b84 <_printf_i+0xcc>
 8009c32:	2220      	movs	r2, #32
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	4393      	bics	r3, r2
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	e7f8      	b.n	8009c2e <_printf_i+0x176>
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	680d      	ldr	r5, [r1, #0]
 8009c40:	1d10      	adds	r0, r2, #4
 8009c42:	6949      	ldr	r1, [r1, #20]
 8009c44:	6018      	str	r0, [r3, #0]
 8009c46:	6813      	ldr	r3, [r2, #0]
 8009c48:	062e      	lsls	r6, r5, #24
 8009c4a:	d501      	bpl.n	8009c50 <_printf_i+0x198>
 8009c4c:	6019      	str	r1, [r3, #0]
 8009c4e:	e002      	b.n	8009c56 <_printf_i+0x19e>
 8009c50:	066d      	lsls	r5, r5, #25
 8009c52:	d5fb      	bpl.n	8009c4c <_printf_i+0x194>
 8009c54:	8019      	strh	r1, [r3, #0]
 8009c56:	2300      	movs	r3, #0
 8009c58:	9d03      	ldr	r5, [sp, #12]
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	e7bf      	b.n	8009bde <_printf_i+0x126>
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	1d11      	adds	r1, r2, #4
 8009c62:	6019      	str	r1, [r3, #0]
 8009c64:	6815      	ldr	r5, [r2, #0]
 8009c66:	2100      	movs	r1, #0
 8009c68:	0028      	movs	r0, r5
 8009c6a:	6862      	ldr	r2, [r4, #4]
 8009c6c:	f000 faeb 	bl	800a246 <memchr>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d001      	beq.n	8009c78 <_printf_i+0x1c0>
 8009c74:	1b40      	subs	r0, r0, r5
 8009c76:	6060      	str	r0, [r4, #4]
 8009c78:	6863      	ldr	r3, [r4, #4]
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9a03      	ldr	r2, [sp, #12]
 8009c80:	7013      	strb	r3, [r2, #0]
 8009c82:	e7ac      	b.n	8009bde <_printf_i+0x126>
 8009c84:	002a      	movs	r2, r5
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	9906      	ldr	r1, [sp, #24]
 8009c8a:	9805      	ldr	r0, [sp, #20]
 8009c8c:	9d07      	ldr	r5, [sp, #28]
 8009c8e:	47a8      	blx	r5
 8009c90:	3001      	adds	r0, #1
 8009c92:	d0ae      	beq.n	8009bf2 <_printf_i+0x13a>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	079b      	lsls	r3, r3, #30
 8009c98:	d415      	bmi.n	8009cc6 <_printf_i+0x20e>
 8009c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c9c:	68e0      	ldr	r0, [r4, #12]
 8009c9e:	4298      	cmp	r0, r3
 8009ca0:	daa9      	bge.n	8009bf6 <_printf_i+0x13e>
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	e7a7      	b.n	8009bf6 <_printf_i+0x13e>
 8009ca6:	0022      	movs	r2, r4
 8009ca8:	2301      	movs	r3, #1
 8009caa:	9906      	ldr	r1, [sp, #24]
 8009cac:	9805      	ldr	r0, [sp, #20]
 8009cae:	9e07      	ldr	r6, [sp, #28]
 8009cb0:	3219      	adds	r2, #25
 8009cb2:	47b0      	blx	r6
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d09c      	beq.n	8009bf2 <_printf_i+0x13a>
 8009cb8:	3501      	adds	r5, #1
 8009cba:	68e3      	ldr	r3, [r4, #12]
 8009cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cbe:	1a9b      	subs	r3, r3, r2
 8009cc0:	42ab      	cmp	r3, r5
 8009cc2:	dcf0      	bgt.n	8009ca6 <_printf_i+0x1ee>
 8009cc4:	e7e9      	b.n	8009c9a <_printf_i+0x1e2>
 8009cc6:	2500      	movs	r5, #0
 8009cc8:	e7f7      	b.n	8009cba <_printf_i+0x202>
 8009cca:	46c0      	nop			@ (mov r8, r8)
 8009ccc:	0800cf93 	.word	0x0800cf93
 8009cd0:	0800cfa4 	.word	0x0800cfa4

08009cd4 <std>:
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	b510      	push	{r4, lr}
 8009cd8:	0004      	movs	r4, r0
 8009cda:	6003      	str	r3, [r0, #0]
 8009cdc:	6043      	str	r3, [r0, #4]
 8009cde:	6083      	str	r3, [r0, #8]
 8009ce0:	8181      	strh	r1, [r0, #12]
 8009ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ce4:	81c2      	strh	r2, [r0, #14]
 8009ce6:	6103      	str	r3, [r0, #16]
 8009ce8:	6143      	str	r3, [r0, #20]
 8009cea:	6183      	str	r3, [r0, #24]
 8009cec:	0019      	movs	r1, r3
 8009cee:	2208      	movs	r2, #8
 8009cf0:	305c      	adds	r0, #92	@ 0x5c
 8009cf2:	f000 fa0f 	bl	800a114 <memset>
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d24 <std+0x50>)
 8009cf8:	6224      	str	r4, [r4, #32]
 8009cfa:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009d28 <std+0x54>)
 8009cfe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d00:	4b0a      	ldr	r3, [pc, #40]	@ (8009d2c <std+0x58>)
 8009d02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d04:	4b0a      	ldr	r3, [pc, #40]	@ (8009d30 <std+0x5c>)
 8009d06:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d08:	4b0a      	ldr	r3, [pc, #40]	@ (8009d34 <std+0x60>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d005      	beq.n	8009d1a <std+0x46>
 8009d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d38 <std+0x64>)
 8009d10:	429c      	cmp	r4, r3
 8009d12:	d002      	beq.n	8009d1a <std+0x46>
 8009d14:	4b09      	ldr	r3, [pc, #36]	@ (8009d3c <std+0x68>)
 8009d16:	429c      	cmp	r4, r3
 8009d18:	d103      	bne.n	8009d22 <std+0x4e>
 8009d1a:	0020      	movs	r0, r4
 8009d1c:	3058      	adds	r0, #88	@ 0x58
 8009d1e:	f000 fa8f 	bl	800a240 <__retarget_lock_init_recursive>
 8009d22:	bd10      	pop	{r4, pc}
 8009d24:	08009f3d 	.word	0x08009f3d
 8009d28:	08009f65 	.word	0x08009f65
 8009d2c:	08009f9d 	.word	0x08009f9d
 8009d30:	08009fc9 	.word	0x08009fc9
 8009d34:	200005e4 	.word	0x200005e4
 8009d38:	2000064c 	.word	0x2000064c
 8009d3c:	200006b4 	.word	0x200006b4

08009d40 <stdio_exit_handler>:
 8009d40:	b510      	push	{r4, lr}
 8009d42:	4a03      	ldr	r2, [pc, #12]	@ (8009d50 <stdio_exit_handler+0x10>)
 8009d44:	4903      	ldr	r1, [pc, #12]	@ (8009d54 <stdio_exit_handler+0x14>)
 8009d46:	4804      	ldr	r0, [pc, #16]	@ (8009d58 <stdio_exit_handler+0x18>)
 8009d48:	f000 f86c 	bl	8009e24 <_fwalk_sglue>
 8009d4c:	bd10      	pop	{r4, pc}
 8009d4e:	46c0      	nop			@ (mov r8, r8)
 8009d50:	20000010 	.word	0x20000010
 8009d54:	0800c5a5 	.word	0x0800c5a5
 8009d58:	2000018c 	.word	0x2000018c

08009d5c <cleanup_stdio>:
 8009d5c:	6841      	ldr	r1, [r0, #4]
 8009d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d8c <cleanup_stdio+0x30>)
 8009d60:	b510      	push	{r4, lr}
 8009d62:	0004      	movs	r4, r0
 8009d64:	4299      	cmp	r1, r3
 8009d66:	d001      	beq.n	8009d6c <cleanup_stdio+0x10>
 8009d68:	f002 fc1c 	bl	800c5a4 <_fflush_r>
 8009d6c:	68a1      	ldr	r1, [r4, #8]
 8009d6e:	4b08      	ldr	r3, [pc, #32]	@ (8009d90 <cleanup_stdio+0x34>)
 8009d70:	4299      	cmp	r1, r3
 8009d72:	d002      	beq.n	8009d7a <cleanup_stdio+0x1e>
 8009d74:	0020      	movs	r0, r4
 8009d76:	f002 fc15 	bl	800c5a4 <_fflush_r>
 8009d7a:	68e1      	ldr	r1, [r4, #12]
 8009d7c:	4b05      	ldr	r3, [pc, #20]	@ (8009d94 <cleanup_stdio+0x38>)
 8009d7e:	4299      	cmp	r1, r3
 8009d80:	d002      	beq.n	8009d88 <cleanup_stdio+0x2c>
 8009d82:	0020      	movs	r0, r4
 8009d84:	f002 fc0e 	bl	800c5a4 <_fflush_r>
 8009d88:	bd10      	pop	{r4, pc}
 8009d8a:	46c0      	nop			@ (mov r8, r8)
 8009d8c:	200005e4 	.word	0x200005e4
 8009d90:	2000064c 	.word	0x2000064c
 8009d94:	200006b4 	.word	0x200006b4

08009d98 <global_stdio_init.part.0>:
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	4b09      	ldr	r3, [pc, #36]	@ (8009dc0 <global_stdio_init.part.0+0x28>)
 8009d9c:	4a09      	ldr	r2, [pc, #36]	@ (8009dc4 <global_stdio_init.part.0+0x2c>)
 8009d9e:	2104      	movs	r1, #4
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	4809      	ldr	r0, [pc, #36]	@ (8009dc8 <global_stdio_init.part.0+0x30>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	f7ff ff95 	bl	8009cd4 <std>
 8009daa:	2201      	movs	r2, #1
 8009dac:	2109      	movs	r1, #9
 8009dae:	4807      	ldr	r0, [pc, #28]	@ (8009dcc <global_stdio_init.part.0+0x34>)
 8009db0:	f7ff ff90 	bl	8009cd4 <std>
 8009db4:	2202      	movs	r2, #2
 8009db6:	2112      	movs	r1, #18
 8009db8:	4805      	ldr	r0, [pc, #20]	@ (8009dd0 <global_stdio_init.part.0+0x38>)
 8009dba:	f7ff ff8b 	bl	8009cd4 <std>
 8009dbe:	bd10      	pop	{r4, pc}
 8009dc0:	2000071c 	.word	0x2000071c
 8009dc4:	08009d41 	.word	0x08009d41
 8009dc8:	200005e4 	.word	0x200005e4
 8009dcc:	2000064c 	.word	0x2000064c
 8009dd0:	200006b4 	.word	0x200006b4

08009dd4 <__sfp_lock_acquire>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	4802      	ldr	r0, [pc, #8]	@ (8009de0 <__sfp_lock_acquire+0xc>)
 8009dd8:	f000 fa33 	bl	800a242 <__retarget_lock_acquire_recursive>
 8009ddc:	bd10      	pop	{r4, pc}
 8009dde:	46c0      	nop			@ (mov r8, r8)
 8009de0:	20000725 	.word	0x20000725

08009de4 <__sfp_lock_release>:
 8009de4:	b510      	push	{r4, lr}
 8009de6:	4802      	ldr	r0, [pc, #8]	@ (8009df0 <__sfp_lock_release+0xc>)
 8009de8:	f000 fa2c 	bl	800a244 <__retarget_lock_release_recursive>
 8009dec:	bd10      	pop	{r4, pc}
 8009dee:	46c0      	nop			@ (mov r8, r8)
 8009df0:	20000725 	.word	0x20000725

08009df4 <__sinit>:
 8009df4:	b510      	push	{r4, lr}
 8009df6:	0004      	movs	r4, r0
 8009df8:	f7ff ffec 	bl	8009dd4 <__sfp_lock_acquire>
 8009dfc:	6a23      	ldr	r3, [r4, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <__sinit+0x14>
 8009e02:	f7ff ffef 	bl	8009de4 <__sfp_lock_release>
 8009e06:	bd10      	pop	{r4, pc}
 8009e08:	4b04      	ldr	r3, [pc, #16]	@ (8009e1c <__sinit+0x28>)
 8009e0a:	6223      	str	r3, [r4, #32]
 8009e0c:	4b04      	ldr	r3, [pc, #16]	@ (8009e20 <__sinit+0x2c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1f6      	bne.n	8009e02 <__sinit+0xe>
 8009e14:	f7ff ffc0 	bl	8009d98 <global_stdio_init.part.0>
 8009e18:	e7f3      	b.n	8009e02 <__sinit+0xe>
 8009e1a:	46c0      	nop			@ (mov r8, r8)
 8009e1c:	08009d5d 	.word	0x08009d5d
 8009e20:	2000071c 	.word	0x2000071c

08009e24 <_fwalk_sglue>:
 8009e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e26:	0014      	movs	r4, r2
 8009e28:	2600      	movs	r6, #0
 8009e2a:	9000      	str	r0, [sp, #0]
 8009e2c:	9101      	str	r1, [sp, #4]
 8009e2e:	68a5      	ldr	r5, [r4, #8]
 8009e30:	6867      	ldr	r7, [r4, #4]
 8009e32:	3f01      	subs	r7, #1
 8009e34:	d504      	bpl.n	8009e40 <_fwalk_sglue+0x1c>
 8009e36:	6824      	ldr	r4, [r4, #0]
 8009e38:	2c00      	cmp	r4, #0
 8009e3a:	d1f8      	bne.n	8009e2e <_fwalk_sglue+0xa>
 8009e3c:	0030      	movs	r0, r6
 8009e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e40:	89ab      	ldrh	r3, [r5, #12]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d908      	bls.n	8009e58 <_fwalk_sglue+0x34>
 8009e46:	220e      	movs	r2, #14
 8009e48:	5eab      	ldrsh	r3, [r5, r2]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	d004      	beq.n	8009e58 <_fwalk_sglue+0x34>
 8009e4e:	0029      	movs	r1, r5
 8009e50:	9800      	ldr	r0, [sp, #0]
 8009e52:	9b01      	ldr	r3, [sp, #4]
 8009e54:	4798      	blx	r3
 8009e56:	4306      	orrs	r6, r0
 8009e58:	3568      	adds	r5, #104	@ 0x68
 8009e5a:	e7ea      	b.n	8009e32 <_fwalk_sglue+0xe>

08009e5c <iprintf>:
 8009e5c:	b40f      	push	{r0, r1, r2, r3}
 8009e5e:	b507      	push	{r0, r1, r2, lr}
 8009e60:	4905      	ldr	r1, [pc, #20]	@ (8009e78 <iprintf+0x1c>)
 8009e62:	ab04      	add	r3, sp, #16
 8009e64:	6808      	ldr	r0, [r1, #0]
 8009e66:	cb04      	ldmia	r3!, {r2}
 8009e68:	6881      	ldr	r1, [r0, #8]
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	f002 f9f8 	bl	800c260 <_vfiprintf_r>
 8009e70:	b003      	add	sp, #12
 8009e72:	bc08      	pop	{r3}
 8009e74:	b004      	add	sp, #16
 8009e76:	4718      	bx	r3
 8009e78:	20000188 	.word	0x20000188

08009e7c <_puts_r>:
 8009e7c:	6a03      	ldr	r3, [r0, #32]
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	0005      	movs	r5, r0
 8009e82:	000e      	movs	r6, r1
 8009e84:	6884      	ldr	r4, [r0, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <_puts_r+0x12>
 8009e8a:	f7ff ffb3 	bl	8009df4 <__sinit>
 8009e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e90:	07db      	lsls	r3, r3, #31
 8009e92:	d405      	bmi.n	8009ea0 <_puts_r+0x24>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	059b      	lsls	r3, r3, #22
 8009e98:	d402      	bmi.n	8009ea0 <_puts_r+0x24>
 8009e9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e9c:	f000 f9d1 	bl	800a242 <__retarget_lock_acquire_recursive>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	071b      	lsls	r3, r3, #28
 8009ea4:	d502      	bpl.n	8009eac <_puts_r+0x30>
 8009ea6:	6923      	ldr	r3, [r4, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d11f      	bne.n	8009eec <_puts_r+0x70>
 8009eac:	0021      	movs	r1, r4
 8009eae:	0028      	movs	r0, r5
 8009eb0:	f000 f8d2 	bl	800a058 <__swsetup_r>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d019      	beq.n	8009eec <_puts_r+0x70>
 8009eb8:	2501      	movs	r5, #1
 8009eba:	426d      	negs	r5, r5
 8009ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ebe:	07db      	lsls	r3, r3, #31
 8009ec0:	d405      	bmi.n	8009ece <_puts_r+0x52>
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	059b      	lsls	r3, r3, #22
 8009ec6:	d402      	bmi.n	8009ece <_puts_r+0x52>
 8009ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009eca:	f000 f9bb 	bl	800a244 <__retarget_lock_release_recursive>
 8009ece:	0028      	movs	r0, r5
 8009ed0:	bd70      	pop	{r4, r5, r6, pc}
 8009ed2:	3601      	adds	r6, #1
 8009ed4:	60a3      	str	r3, [r4, #8]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	da04      	bge.n	8009ee4 <_puts_r+0x68>
 8009eda:	69a2      	ldr	r2, [r4, #24]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	dc16      	bgt.n	8009f0e <_puts_r+0x92>
 8009ee0:	290a      	cmp	r1, #10
 8009ee2:	d014      	beq.n	8009f0e <_puts_r+0x92>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	6022      	str	r2, [r4, #0]
 8009eea:	7019      	strb	r1, [r3, #0]
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	7831      	ldrb	r1, [r6, #0]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	2900      	cmp	r1, #0
 8009ef4:	d1ed      	bne.n	8009ed2 <_puts_r+0x56>
 8009ef6:	60a3      	str	r3, [r4, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	da0f      	bge.n	8009f1c <_puts_r+0xa0>
 8009efc:	0022      	movs	r2, r4
 8009efe:	0028      	movs	r0, r5
 8009f00:	310a      	adds	r1, #10
 8009f02:	f000 f867 	bl	8009fd4 <__swbuf_r>
 8009f06:	3001      	adds	r0, #1
 8009f08:	d0d6      	beq.n	8009eb8 <_puts_r+0x3c>
 8009f0a:	250a      	movs	r5, #10
 8009f0c:	e7d6      	b.n	8009ebc <_puts_r+0x40>
 8009f0e:	0022      	movs	r2, r4
 8009f10:	0028      	movs	r0, r5
 8009f12:	f000 f85f 	bl	8009fd4 <__swbuf_r>
 8009f16:	3001      	adds	r0, #1
 8009f18:	d1e8      	bne.n	8009eec <_puts_r+0x70>
 8009f1a:	e7cd      	b.n	8009eb8 <_puts_r+0x3c>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	6022      	str	r2, [r4, #0]
 8009f22:	220a      	movs	r2, #10
 8009f24:	701a      	strb	r2, [r3, #0]
 8009f26:	e7f0      	b.n	8009f0a <_puts_r+0x8e>

08009f28 <puts>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	4b03      	ldr	r3, [pc, #12]	@ (8009f38 <puts+0x10>)
 8009f2c:	0001      	movs	r1, r0
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	f7ff ffa4 	bl	8009e7c <_puts_r>
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	46c0      	nop			@ (mov r8, r8)
 8009f38:	20000188 	.word	0x20000188

08009f3c <__sread>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	000c      	movs	r4, r1
 8009f40:	250e      	movs	r5, #14
 8009f42:	5f49      	ldrsh	r1, [r1, r5]
 8009f44:	f000 f92a 	bl	800a19c <_read_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	db03      	blt.n	8009f54 <__sread+0x18>
 8009f4c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009f4e:	181b      	adds	r3, r3, r0
 8009f50:	6563      	str	r3, [r4, #84]	@ 0x54
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	4a02      	ldr	r2, [pc, #8]	@ (8009f60 <__sread+0x24>)
 8009f58:	4013      	ands	r3, r2
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	e7f9      	b.n	8009f52 <__sread+0x16>
 8009f5e:	46c0      	nop			@ (mov r8, r8)
 8009f60:	ffffefff 	.word	0xffffefff

08009f64 <__swrite>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	001f      	movs	r7, r3
 8009f68:	898b      	ldrh	r3, [r1, #12]
 8009f6a:	0005      	movs	r5, r0
 8009f6c:	000c      	movs	r4, r1
 8009f6e:	0016      	movs	r6, r2
 8009f70:	05db      	lsls	r3, r3, #23
 8009f72:	d505      	bpl.n	8009f80 <__swrite+0x1c>
 8009f74:	230e      	movs	r3, #14
 8009f76:	5ec9      	ldrsh	r1, [r1, r3]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	f000 f8fa 	bl	800a174 <_lseek_r>
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	4a05      	ldr	r2, [pc, #20]	@ (8009f98 <__swrite+0x34>)
 8009f84:	0028      	movs	r0, r5
 8009f86:	4013      	ands	r3, r2
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	0032      	movs	r2, r6
 8009f8c:	230e      	movs	r3, #14
 8009f8e:	5ee1      	ldrsh	r1, [r4, r3]
 8009f90:	003b      	movs	r3, r7
 8009f92:	f000 f917 	bl	800a1c4 <_write_r>
 8009f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f98:	ffffefff 	.word	0xffffefff

08009f9c <__sseek>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	000c      	movs	r4, r1
 8009fa0:	250e      	movs	r5, #14
 8009fa2:	5f49      	ldrsh	r1, [r1, r5]
 8009fa4:	f000 f8e6 	bl	800a174 <_lseek_r>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	1c42      	adds	r2, r0, #1
 8009fac:	d103      	bne.n	8009fb6 <__sseek+0x1a>
 8009fae:	4a05      	ldr	r2, [pc, #20]	@ (8009fc4 <__sseek+0x28>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	81a3      	strh	r3, [r4, #12]
 8009fb4:	bd70      	pop	{r4, r5, r6, pc}
 8009fb6:	2280      	movs	r2, #128	@ 0x80
 8009fb8:	0152      	lsls	r2, r2, #5
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fc0:	e7f8      	b.n	8009fb4 <__sseek+0x18>
 8009fc2:	46c0      	nop			@ (mov r8, r8)
 8009fc4:	ffffefff 	.word	0xffffefff

08009fc8 <__sclose>:
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	230e      	movs	r3, #14
 8009fcc:	5ec9      	ldrsh	r1, [r1, r3]
 8009fce:	f000 f8bf 	bl	800a150 <_close_r>
 8009fd2:	bd10      	pop	{r4, pc}

08009fd4 <__swbuf_r>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	0006      	movs	r6, r0
 8009fd8:	000d      	movs	r5, r1
 8009fda:	0014      	movs	r4, r2
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d004      	beq.n	8009fea <__swbuf_r+0x16>
 8009fe0:	6a03      	ldr	r3, [r0, #32]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <__swbuf_r+0x16>
 8009fe6:	f7ff ff05 	bl	8009df4 <__sinit>
 8009fea:	69a3      	ldr	r3, [r4, #24]
 8009fec:	60a3      	str	r3, [r4, #8]
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	071b      	lsls	r3, r3, #28
 8009ff2:	d502      	bpl.n	8009ffa <__swbuf_r+0x26>
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d109      	bne.n	800a00e <__swbuf_r+0x3a>
 8009ffa:	0021      	movs	r1, r4
 8009ffc:	0030      	movs	r0, r6
 8009ffe:	f000 f82b 	bl	800a058 <__swsetup_r>
 800a002:	2800      	cmp	r0, #0
 800a004:	d003      	beq.n	800a00e <__swbuf_r+0x3a>
 800a006:	2501      	movs	r5, #1
 800a008:	426d      	negs	r5, r5
 800a00a:	0028      	movs	r0, r5
 800a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	b2ef      	uxtb	r7, r5
 800a014:	1ac0      	subs	r0, r0, r3
 800a016:	6963      	ldr	r3, [r4, #20]
 800a018:	b2ed      	uxtb	r5, r5
 800a01a:	4283      	cmp	r3, r0
 800a01c:	dc05      	bgt.n	800a02a <__swbuf_r+0x56>
 800a01e:	0021      	movs	r1, r4
 800a020:	0030      	movs	r0, r6
 800a022:	f002 fabf 	bl	800c5a4 <_fflush_r>
 800a026:	2800      	cmp	r0, #0
 800a028:	d1ed      	bne.n	800a006 <__swbuf_r+0x32>
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	3001      	adds	r0, #1
 800a02e:	3b01      	subs	r3, #1
 800a030:	60a3      	str	r3, [r4, #8]
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	1c5a      	adds	r2, r3, #1
 800a036:	6022      	str	r2, [r4, #0]
 800a038:	701f      	strb	r7, [r3, #0]
 800a03a:	6963      	ldr	r3, [r4, #20]
 800a03c:	4283      	cmp	r3, r0
 800a03e:	d004      	beq.n	800a04a <__swbuf_r+0x76>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	07db      	lsls	r3, r3, #31
 800a044:	d5e1      	bpl.n	800a00a <__swbuf_r+0x36>
 800a046:	2d0a      	cmp	r5, #10
 800a048:	d1df      	bne.n	800a00a <__swbuf_r+0x36>
 800a04a:	0021      	movs	r1, r4
 800a04c:	0030      	movs	r0, r6
 800a04e:	f002 faa9 	bl	800c5a4 <_fflush_r>
 800a052:	2800      	cmp	r0, #0
 800a054:	d0d9      	beq.n	800a00a <__swbuf_r+0x36>
 800a056:	e7d6      	b.n	800a006 <__swbuf_r+0x32>

0800a058 <__swsetup_r>:
 800a058:	4b2d      	ldr	r3, [pc, #180]	@ (800a110 <__swsetup_r+0xb8>)
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	0005      	movs	r5, r0
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	000c      	movs	r4, r1
 800a062:	2800      	cmp	r0, #0
 800a064:	d004      	beq.n	800a070 <__swsetup_r+0x18>
 800a066:	6a03      	ldr	r3, [r0, #32]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <__swsetup_r+0x18>
 800a06c:	f7ff fec2 	bl	8009df4 <__sinit>
 800a070:	230c      	movs	r3, #12
 800a072:	5ee2      	ldrsh	r2, [r4, r3]
 800a074:	0713      	lsls	r3, r2, #28
 800a076:	d423      	bmi.n	800a0c0 <__swsetup_r+0x68>
 800a078:	06d3      	lsls	r3, r2, #27
 800a07a:	d407      	bmi.n	800a08c <__swsetup_r+0x34>
 800a07c:	2309      	movs	r3, #9
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	2340      	movs	r3, #64	@ 0x40
 800a082:	2001      	movs	r0, #1
 800a084:	4313      	orrs	r3, r2
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	4240      	negs	r0, r0
 800a08a:	e03a      	b.n	800a102 <__swsetup_r+0xaa>
 800a08c:	0752      	lsls	r2, r2, #29
 800a08e:	d513      	bpl.n	800a0b8 <__swsetup_r+0x60>
 800a090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a092:	2900      	cmp	r1, #0
 800a094:	d008      	beq.n	800a0a8 <__swsetup_r+0x50>
 800a096:	0023      	movs	r3, r4
 800a098:	3344      	adds	r3, #68	@ 0x44
 800a09a:	4299      	cmp	r1, r3
 800a09c:	d002      	beq.n	800a0a4 <__swsetup_r+0x4c>
 800a09e:	0028      	movs	r0, r5
 800a0a0:	f000 ff6e 	bl	800af80 <_free_r>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0a8:	2224      	movs	r2, #36	@ 0x24
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	4393      	bics	r3, r2
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6063      	str	r3, [r4, #4]
 800a0b4:	6923      	ldr	r3, [r4, #16]
 800a0b6:	6023      	str	r3, [r4, #0]
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	89a2      	ldrh	r2, [r4, #12]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	81a3      	strh	r3, [r4, #12]
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10b      	bne.n	800a0de <__swsetup_r+0x86>
 800a0c6:	21a0      	movs	r1, #160	@ 0xa0
 800a0c8:	2280      	movs	r2, #128	@ 0x80
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	0089      	lsls	r1, r1, #2
 800a0ce:	0092      	lsls	r2, r2, #2
 800a0d0:	400b      	ands	r3, r1
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d003      	beq.n	800a0de <__swsetup_r+0x86>
 800a0d6:	0021      	movs	r1, r4
 800a0d8:	0028      	movs	r0, r5
 800a0da:	f002 fab9 	bl	800c650 <__smakebuf_r>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	5ee2      	ldrsh	r2, [r4, r3]
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	0013      	movs	r3, r2
 800a0e6:	400b      	ands	r3, r1
 800a0e8:	420a      	tst	r2, r1
 800a0ea:	d00b      	beq.n	800a104 <__swsetup_r+0xac>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60a3      	str	r3, [r4, #8]
 800a0f0:	6963      	ldr	r3, [r4, #20]
 800a0f2:	425b      	negs	r3, r3
 800a0f4:	61a3      	str	r3, [r4, #24]
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	4283      	cmp	r3, r0
 800a0fc:	d101      	bne.n	800a102 <__swsetup_r+0xaa>
 800a0fe:	0613      	lsls	r3, r2, #24
 800a100:	d4be      	bmi.n	800a080 <__swsetup_r+0x28>
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	0791      	lsls	r1, r2, #30
 800a106:	d400      	bmi.n	800a10a <__swsetup_r+0xb2>
 800a108:	6963      	ldr	r3, [r4, #20]
 800a10a:	60a3      	str	r3, [r4, #8]
 800a10c:	e7f3      	b.n	800a0f6 <__swsetup_r+0x9e>
 800a10e:	46c0      	nop			@ (mov r8, r8)
 800a110:	20000188 	.word	0x20000188

0800a114 <memset>:
 800a114:	0003      	movs	r3, r0
 800a116:	1882      	adds	r2, r0, r2
 800a118:	4293      	cmp	r3, r2
 800a11a:	d100      	bne.n	800a11e <memset+0xa>
 800a11c:	4770      	bx	lr
 800a11e:	7019      	strb	r1, [r3, #0]
 800a120:	3301      	adds	r3, #1
 800a122:	e7f9      	b.n	800a118 <memset+0x4>

0800a124 <strncmp>:
 800a124:	b530      	push	{r4, r5, lr}
 800a126:	0005      	movs	r5, r0
 800a128:	1e10      	subs	r0, r2, #0
 800a12a:	d00b      	beq.n	800a144 <strncmp+0x20>
 800a12c:	2400      	movs	r4, #0
 800a12e:	3a01      	subs	r2, #1
 800a130:	5d2b      	ldrb	r3, [r5, r4]
 800a132:	5d08      	ldrb	r0, [r1, r4]
 800a134:	4283      	cmp	r3, r0
 800a136:	d104      	bne.n	800a142 <strncmp+0x1e>
 800a138:	42a2      	cmp	r2, r4
 800a13a:	d002      	beq.n	800a142 <strncmp+0x1e>
 800a13c:	3401      	adds	r4, #1
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1f6      	bne.n	800a130 <strncmp+0xc>
 800a142:	1a18      	subs	r0, r3, r0
 800a144:	bd30      	pop	{r4, r5, pc}
	...

0800a148 <_localeconv_r>:
 800a148:	4800      	ldr	r0, [pc, #0]	@ (800a14c <_localeconv_r+0x4>)
 800a14a:	4770      	bx	lr
 800a14c:	2000010c 	.word	0x2000010c

0800a150 <_close_r>:
 800a150:	2300      	movs	r3, #0
 800a152:	b570      	push	{r4, r5, r6, lr}
 800a154:	4d06      	ldr	r5, [pc, #24]	@ (800a170 <_close_r+0x20>)
 800a156:	0004      	movs	r4, r0
 800a158:	0008      	movs	r0, r1
 800a15a:	602b      	str	r3, [r5, #0]
 800a15c:	f7fa f908 	bl	8004370 <_close>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d103      	bne.n	800a16c <_close_r+0x1c>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d000      	beq.n	800a16c <_close_r+0x1c>
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
 800a16e:	46c0      	nop			@ (mov r8, r8)
 800a170:	20000720 	.word	0x20000720

0800a174 <_lseek_r>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	0004      	movs	r4, r0
 800a178:	0008      	movs	r0, r1
 800a17a:	0011      	movs	r1, r2
 800a17c:	001a      	movs	r2, r3
 800a17e:	2300      	movs	r3, #0
 800a180:	4d05      	ldr	r5, [pc, #20]	@ (800a198 <_lseek_r+0x24>)
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	f7fa f900 	bl	8004388 <_lseek>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d103      	bne.n	800a194 <_lseek_r+0x20>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d000      	beq.n	800a194 <_lseek_r+0x20>
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	bd70      	pop	{r4, r5, r6, pc}
 800a196:	46c0      	nop			@ (mov r8, r8)
 800a198:	20000720 	.word	0x20000720

0800a19c <_read_r>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	0004      	movs	r4, r0
 800a1a0:	0008      	movs	r0, r1
 800a1a2:	0011      	movs	r1, r2
 800a1a4:	001a      	movs	r2, r3
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	4d05      	ldr	r5, [pc, #20]	@ (800a1c0 <_read_r+0x24>)
 800a1aa:	602b      	str	r3, [r5, #0]
 800a1ac:	f7fa f8d2 	bl	8004354 <_read>
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	d103      	bne.n	800a1bc <_read_r+0x20>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d000      	beq.n	800a1bc <_read_r+0x20>
 800a1ba:	6023      	str	r3, [r4, #0]
 800a1bc:	bd70      	pop	{r4, r5, r6, pc}
 800a1be:	46c0      	nop			@ (mov r8, r8)
 800a1c0:	20000720 	.word	0x20000720

0800a1c4 <_write_r>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	0004      	movs	r4, r0
 800a1c8:	0008      	movs	r0, r1
 800a1ca:	0011      	movs	r1, r2
 800a1cc:	001a      	movs	r2, r3
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4d05      	ldr	r5, [pc, #20]	@ (800a1e8 <_write_r+0x24>)
 800a1d2:	602b      	str	r3, [r5, #0]
 800a1d4:	f7f9 fa2e 	bl	8003634 <_write>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	d103      	bne.n	800a1e4 <_write_r+0x20>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d000      	beq.n	800a1e4 <_write_r+0x20>
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	46c0      	nop			@ (mov r8, r8)
 800a1e8:	20000720 	.word	0x20000720

0800a1ec <__errno>:
 800a1ec:	4b01      	ldr	r3, [pc, #4]	@ (800a1f4 <__errno+0x8>)
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	4770      	bx	lr
 800a1f2:	46c0      	nop			@ (mov r8, r8)
 800a1f4:	20000188 	.word	0x20000188

0800a1f8 <__libc_init_array>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	4c0c      	ldr	r4, [pc, #48]	@ (800a230 <__libc_init_array+0x38>)
 800a1fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a234 <__libc_init_array+0x3c>)
 800a200:	1b64      	subs	r4, r4, r5
 800a202:	10a4      	asrs	r4, r4, #2
 800a204:	42a6      	cmp	r6, r4
 800a206:	d109      	bne.n	800a21c <__libc_init_array+0x24>
 800a208:	2600      	movs	r6, #0
 800a20a:	f002 fb45 	bl	800c898 <_init>
 800a20e:	4c0a      	ldr	r4, [pc, #40]	@ (800a238 <__libc_init_array+0x40>)
 800a210:	4d0a      	ldr	r5, [pc, #40]	@ (800a23c <__libc_init_array+0x44>)
 800a212:	1b64      	subs	r4, r4, r5
 800a214:	10a4      	asrs	r4, r4, #2
 800a216:	42a6      	cmp	r6, r4
 800a218:	d105      	bne.n	800a226 <__libc_init_array+0x2e>
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	00b3      	lsls	r3, r6, #2
 800a21e:	58eb      	ldr	r3, [r5, r3]
 800a220:	4798      	blx	r3
 800a222:	3601      	adds	r6, #1
 800a224:	e7ee      	b.n	800a204 <__libc_init_array+0xc>
 800a226:	00b3      	lsls	r3, r6, #2
 800a228:	58eb      	ldr	r3, [r5, r3]
 800a22a:	4798      	blx	r3
 800a22c:	3601      	adds	r6, #1
 800a22e:	e7f2      	b.n	800a216 <__libc_init_array+0x1e>
 800a230:	0800d258 	.word	0x0800d258
 800a234:	0800d258 	.word	0x0800d258
 800a238:	0800d25c 	.word	0x0800d25c
 800a23c:	0800d258 	.word	0x0800d258

0800a240 <__retarget_lock_init_recursive>:
 800a240:	4770      	bx	lr

0800a242 <__retarget_lock_acquire_recursive>:
 800a242:	4770      	bx	lr

0800a244 <__retarget_lock_release_recursive>:
 800a244:	4770      	bx	lr

0800a246 <memchr>:
 800a246:	b2c9      	uxtb	r1, r1
 800a248:	1882      	adds	r2, r0, r2
 800a24a:	4290      	cmp	r0, r2
 800a24c:	d101      	bne.n	800a252 <memchr+0xc>
 800a24e:	2000      	movs	r0, #0
 800a250:	4770      	bx	lr
 800a252:	7803      	ldrb	r3, [r0, #0]
 800a254:	428b      	cmp	r3, r1
 800a256:	d0fb      	beq.n	800a250 <memchr+0xa>
 800a258:	3001      	adds	r0, #1
 800a25a:	e7f6      	b.n	800a24a <memchr+0x4>

0800a25c <memcpy>:
 800a25c:	2300      	movs	r3, #0
 800a25e:	b510      	push	{r4, lr}
 800a260:	429a      	cmp	r2, r3
 800a262:	d100      	bne.n	800a266 <memcpy+0xa>
 800a264:	bd10      	pop	{r4, pc}
 800a266:	5ccc      	ldrb	r4, [r1, r3]
 800a268:	54c4      	strb	r4, [r0, r3]
 800a26a:	3301      	adds	r3, #1
 800a26c:	e7f8      	b.n	800a260 <memcpy+0x4>
	...

0800a270 <nan>:
 800a270:	2000      	movs	r0, #0
 800a272:	4901      	ldr	r1, [pc, #4]	@ (800a278 <nan+0x8>)
 800a274:	4770      	bx	lr
 800a276:	46c0      	nop			@ (mov r8, r8)
 800a278:	7ff80000 	.word	0x7ff80000

0800a27c <quorem>:
 800a27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a27e:	6902      	ldr	r2, [r0, #16]
 800a280:	690f      	ldr	r7, [r1, #16]
 800a282:	b087      	sub	sp, #28
 800a284:	0006      	movs	r6, r0
 800a286:	000b      	movs	r3, r1
 800a288:	2000      	movs	r0, #0
 800a28a:	9102      	str	r1, [sp, #8]
 800a28c:	42ba      	cmp	r2, r7
 800a28e:	db6d      	blt.n	800a36c <quorem+0xf0>
 800a290:	3f01      	subs	r7, #1
 800a292:	00bc      	lsls	r4, r7, #2
 800a294:	3314      	adds	r3, #20
 800a296:	9305      	str	r3, [sp, #20]
 800a298:	191b      	adds	r3, r3, r4
 800a29a:	9303      	str	r3, [sp, #12]
 800a29c:	0033      	movs	r3, r6
 800a29e:	3314      	adds	r3, #20
 800a2a0:	191c      	adds	r4, r3, r4
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	9304      	str	r3, [sp, #16]
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	9804      	ldr	r0, [sp, #16]
 800a2ac:	681d      	ldr	r5, [r3, #0]
 800a2ae:	3501      	adds	r5, #1
 800a2b0:	0029      	movs	r1, r5
 800a2b2:	f7f5 ff41 	bl	8000138 <__udivsi3>
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	9000      	str	r0, [sp, #0]
 800a2ba:	42ab      	cmp	r3, r5
 800a2bc:	d32b      	bcc.n	800a316 <quorem+0x9a>
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	9d01      	ldr	r5, [sp, #4]
 800a2c2:	469c      	mov	ip, r3
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9305      	str	r3, [sp, #20]
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	4662      	mov	r2, ip
 800a2cc:	ca08      	ldmia	r2!, {r3}
 800a2ce:	6828      	ldr	r0, [r5, #0]
 800a2d0:	4694      	mov	ip, r2
 800a2d2:	9a00      	ldr	r2, [sp, #0]
 800a2d4:	b299      	uxth	r1, r3
 800a2d6:	4351      	muls	r1, r2
 800a2d8:	9a05      	ldr	r2, [sp, #20]
 800a2da:	0c1b      	lsrs	r3, r3, #16
 800a2dc:	1889      	adds	r1, r1, r2
 800a2de:	9a00      	ldr	r2, [sp, #0]
 800a2e0:	4353      	muls	r3, r2
 800a2e2:	0c0a      	lsrs	r2, r1, #16
 800a2e4:	189b      	adds	r3, r3, r2
 800a2e6:	0c1a      	lsrs	r2, r3, #16
 800a2e8:	b289      	uxth	r1, r1
 800a2ea:	9205      	str	r2, [sp, #20]
 800a2ec:	b282      	uxth	r2, r0
 800a2ee:	1a52      	subs	r2, r2, r1
 800a2f0:	9904      	ldr	r1, [sp, #16]
 800a2f2:	0c00      	lsrs	r0, r0, #16
 800a2f4:	1852      	adds	r2, r2, r1
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	1411      	asrs	r1, r2, #16
 800a2fa:	1ac3      	subs	r3, r0, r3
 800a2fc:	185b      	adds	r3, r3, r1
 800a2fe:	1419      	asrs	r1, r3, #16
 800a300:	b292      	uxth	r2, r2
 800a302:	041b      	lsls	r3, r3, #16
 800a304:	431a      	orrs	r2, r3
 800a306:	9b03      	ldr	r3, [sp, #12]
 800a308:	9104      	str	r1, [sp, #16]
 800a30a:	c504      	stmia	r5!, {r2}
 800a30c:	4563      	cmp	r3, ip
 800a30e:	d2dc      	bcs.n	800a2ca <quorem+0x4e>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d030      	beq.n	800a378 <quorem+0xfc>
 800a316:	0030      	movs	r0, r6
 800a318:	9902      	ldr	r1, [sp, #8]
 800a31a:	f001 fd7d 	bl	800be18 <__mcmp>
 800a31e:	2800      	cmp	r0, #0
 800a320:	db23      	blt.n	800a36a <quorem+0xee>
 800a322:	0034      	movs	r4, r6
 800a324:	2500      	movs	r5, #0
 800a326:	9902      	ldr	r1, [sp, #8]
 800a328:	3414      	adds	r4, #20
 800a32a:	3114      	adds	r1, #20
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	c901      	ldmia	r1!, {r0}
 800a330:	9302      	str	r3, [sp, #8]
 800a332:	466b      	mov	r3, sp
 800a334:	891b      	ldrh	r3, [r3, #8]
 800a336:	b282      	uxth	r2, r0
 800a338:	1a9a      	subs	r2, r3, r2
 800a33a:	9b02      	ldr	r3, [sp, #8]
 800a33c:	1952      	adds	r2, r2, r5
 800a33e:	0c00      	lsrs	r0, r0, #16
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	1a1b      	subs	r3, r3, r0
 800a344:	1410      	asrs	r0, r2, #16
 800a346:	181b      	adds	r3, r3, r0
 800a348:	141d      	asrs	r5, r3, #16
 800a34a:	b292      	uxth	r2, r2
 800a34c:	041b      	lsls	r3, r3, #16
 800a34e:	431a      	orrs	r2, r3
 800a350:	9b03      	ldr	r3, [sp, #12]
 800a352:	c404      	stmia	r4!, {r2}
 800a354:	428b      	cmp	r3, r1
 800a356:	d2e9      	bcs.n	800a32c <quorem+0xb0>
 800a358:	9a01      	ldr	r2, [sp, #4]
 800a35a:	00bb      	lsls	r3, r7, #2
 800a35c:	18d3      	adds	r3, r2, r3
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	2a00      	cmp	r2, #0
 800a362:	d013      	beq.n	800a38c <quorem+0x110>
 800a364:	9b00      	ldr	r3, [sp, #0]
 800a366:	3301      	adds	r3, #1
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	9800      	ldr	r0, [sp, #0]
 800a36c:	b007      	add	sp, #28
 800a36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d104      	bne.n	800a380 <quorem+0x104>
 800a376:	3f01      	subs	r7, #1
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	3c04      	subs	r4, #4
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d3f7      	bcc.n	800a370 <quorem+0xf4>
 800a380:	6137      	str	r7, [r6, #16]
 800a382:	e7c8      	b.n	800a316 <quorem+0x9a>
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	2a00      	cmp	r2, #0
 800a388:	d104      	bne.n	800a394 <quorem+0x118>
 800a38a:	3f01      	subs	r7, #1
 800a38c:	9a01      	ldr	r2, [sp, #4]
 800a38e:	3b04      	subs	r3, #4
 800a390:	429a      	cmp	r2, r3
 800a392:	d3f7      	bcc.n	800a384 <quorem+0x108>
 800a394:	6137      	str	r7, [r6, #16]
 800a396:	e7e5      	b.n	800a364 <quorem+0xe8>

0800a398 <_dtoa_r>:
 800a398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a39a:	0014      	movs	r4, r2
 800a39c:	001d      	movs	r5, r3
 800a39e:	69c6      	ldr	r6, [r0, #28]
 800a3a0:	b09d      	sub	sp, #116	@ 0x74
 800a3a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3a4:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a3a6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a3a8:	9003      	str	r0, [sp, #12]
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	d10f      	bne.n	800a3ce <_dtoa_r+0x36>
 800a3ae:	2010      	movs	r0, #16
 800a3b0:	f001 f98a 	bl	800b6c8 <malloc>
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	1e02      	subs	r2, r0, #0
 800a3b8:	61d8      	str	r0, [r3, #28]
 800a3ba:	d104      	bne.n	800a3c6 <_dtoa_r+0x2e>
 800a3bc:	21ef      	movs	r1, #239	@ 0xef
 800a3be:	4bc7      	ldr	r3, [pc, #796]	@ (800a6dc <_dtoa_r+0x344>)
 800a3c0:	48c7      	ldr	r0, [pc, #796]	@ (800a6e0 <_dtoa_r+0x348>)
 800a3c2:	f002 f9bd 	bl	800c740 <__assert_func>
 800a3c6:	6046      	str	r6, [r0, #4]
 800a3c8:	6086      	str	r6, [r0, #8]
 800a3ca:	6006      	str	r6, [r0, #0]
 800a3cc:	60c6      	str	r6, [r0, #12]
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	6819      	ldr	r1, [r3, #0]
 800a3d4:	2900      	cmp	r1, #0
 800a3d6:	d00b      	beq.n	800a3f0 <_dtoa_r+0x58>
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4093      	lsls	r3, r2
 800a3de:	604a      	str	r2, [r1, #4]
 800a3e0:	608b      	str	r3, [r1, #8]
 800a3e2:	9803      	ldr	r0, [sp, #12]
 800a3e4:	f001 fa82 	bl	800b8ec <_Bfree>
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	9b03      	ldr	r3, [sp, #12]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	2d00      	cmp	r5, #0
 800a3f2:	da1e      	bge.n	800a432 <_dtoa_r+0x9a>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	603b      	str	r3, [r7, #0]
 800a3f8:	006b      	lsls	r3, r5, #1
 800a3fa:	085b      	lsrs	r3, r3, #1
 800a3fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a400:	4bb8      	ldr	r3, [pc, #736]	@ (800a6e4 <_dtoa_r+0x34c>)
 800a402:	4ab8      	ldr	r2, [pc, #736]	@ (800a6e4 <_dtoa_r+0x34c>)
 800a404:	403b      	ands	r3, r7
 800a406:	4293      	cmp	r3, r2
 800a408:	d116      	bne.n	800a438 <_dtoa_r+0xa0>
 800a40a:	4bb7      	ldr	r3, [pc, #732]	@ (800a6e8 <_dtoa_r+0x350>)
 800a40c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	033b      	lsls	r3, r7, #12
 800a412:	0b1b      	lsrs	r3, r3, #12
 800a414:	4323      	orrs	r3, r4
 800a416:	d101      	bne.n	800a41c <_dtoa_r+0x84>
 800a418:	f000 fd83 	bl	800af22 <_dtoa_r+0xb8a>
 800a41c:	4bb3      	ldr	r3, [pc, #716]	@ (800a6ec <_dtoa_r+0x354>)
 800a41e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a420:	9308      	str	r3, [sp, #32]
 800a422:	2a00      	cmp	r2, #0
 800a424:	d002      	beq.n	800a42c <_dtoa_r+0x94>
 800a426:	4bb2      	ldr	r3, [pc, #712]	@ (800a6f0 <_dtoa_r+0x358>)
 800a428:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	9808      	ldr	r0, [sp, #32]
 800a42e:	b01d      	add	sp, #116	@ 0x74
 800a430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a432:	2300      	movs	r3, #0
 800a434:	603b      	str	r3, [r7, #0]
 800a436:	e7e2      	b.n	800a3fe <_dtoa_r+0x66>
 800a438:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a43a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a43c:	9212      	str	r2, [sp, #72]	@ 0x48
 800a43e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a440:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a442:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a444:	2200      	movs	r2, #0
 800a446:	2300      	movs	r3, #0
 800a448:	f7f5 fffc 	bl	8000444 <__aeabi_dcmpeq>
 800a44c:	1e06      	subs	r6, r0, #0
 800a44e:	d00b      	beq.n	800a468 <_dtoa_r+0xd0>
 800a450:	2301      	movs	r3, #1
 800a452:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <_dtoa_r+0xca>
 800a45c:	4ba5      	ldr	r3, [pc, #660]	@ (800a6f4 <_dtoa_r+0x35c>)
 800a45e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	4ba5      	ldr	r3, [pc, #660]	@ (800a6f8 <_dtoa_r+0x360>)
 800a464:	9308      	str	r3, [sp, #32]
 800a466:	e7e1      	b.n	800a42c <_dtoa_r+0x94>
 800a468:	ab1a      	add	r3, sp, #104	@ 0x68
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	9803      	ldr	r0, [sp, #12]
 800a472:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a476:	f001 fdf1 	bl	800c05c <__d2b>
 800a47a:	007a      	lsls	r2, r7, #1
 800a47c:	9005      	str	r0, [sp, #20]
 800a47e:	0d52      	lsrs	r2, r2, #21
 800a480:	d100      	bne.n	800a484 <_dtoa_r+0xec>
 800a482:	e07b      	b.n	800a57c <_dtoa_r+0x1e4>
 800a484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a486:	9618      	str	r6, [sp, #96]	@ 0x60
 800a488:	0319      	lsls	r1, r3, #12
 800a48a:	4b9c      	ldr	r3, [pc, #624]	@ (800a6fc <_dtoa_r+0x364>)
 800a48c:	0b09      	lsrs	r1, r1, #12
 800a48e:	430b      	orrs	r3, r1
 800a490:	499b      	ldr	r1, [pc, #620]	@ (800a700 <_dtoa_r+0x368>)
 800a492:	1857      	adds	r7, r2, r1
 800a494:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a496:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a498:	0019      	movs	r1, r3
 800a49a:	2200      	movs	r2, #0
 800a49c:	4b99      	ldr	r3, [pc, #612]	@ (800a704 <_dtoa_r+0x36c>)
 800a49e:	f7f8 fb1b 	bl	8002ad8 <__aeabi_dsub>
 800a4a2:	4a99      	ldr	r2, [pc, #612]	@ (800a708 <_dtoa_r+0x370>)
 800a4a4:	4b99      	ldr	r3, [pc, #612]	@ (800a70c <_dtoa_r+0x374>)
 800a4a6:	f7f8 f84f 	bl	8002548 <__aeabi_dmul>
 800a4aa:	4a99      	ldr	r2, [pc, #612]	@ (800a710 <_dtoa_r+0x378>)
 800a4ac:	4b99      	ldr	r3, [pc, #612]	@ (800a714 <_dtoa_r+0x37c>)
 800a4ae:	f7f7 f8a3 	bl	80015f8 <__aeabi_dadd>
 800a4b2:	0004      	movs	r4, r0
 800a4b4:	0038      	movs	r0, r7
 800a4b6:	000d      	movs	r5, r1
 800a4b8:	f7f8 ff08 	bl	80032cc <__aeabi_i2d>
 800a4bc:	4a96      	ldr	r2, [pc, #600]	@ (800a718 <_dtoa_r+0x380>)
 800a4be:	4b97      	ldr	r3, [pc, #604]	@ (800a71c <_dtoa_r+0x384>)
 800a4c0:	f7f8 f842 	bl	8002548 <__aeabi_dmul>
 800a4c4:	0002      	movs	r2, r0
 800a4c6:	000b      	movs	r3, r1
 800a4c8:	0020      	movs	r0, r4
 800a4ca:	0029      	movs	r1, r5
 800a4cc:	f7f7 f894 	bl	80015f8 <__aeabi_dadd>
 800a4d0:	0004      	movs	r4, r0
 800a4d2:	000d      	movs	r5, r1
 800a4d4:	f7f8 febe 	bl	8003254 <__aeabi_d2iz>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	9004      	str	r0, [sp, #16]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	0020      	movs	r0, r4
 800a4e0:	0029      	movs	r1, r5
 800a4e2:	f7f5 ffb5 	bl	8000450 <__aeabi_dcmplt>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d00b      	beq.n	800a502 <_dtoa_r+0x16a>
 800a4ea:	9804      	ldr	r0, [sp, #16]
 800a4ec:	f7f8 feee 	bl	80032cc <__aeabi_i2d>
 800a4f0:	002b      	movs	r3, r5
 800a4f2:	0022      	movs	r2, r4
 800a4f4:	f7f5 ffa6 	bl	8000444 <__aeabi_dcmpeq>
 800a4f8:	4243      	negs	r3, r0
 800a4fa:	4158      	adcs	r0, r3
 800a4fc:	9b04      	ldr	r3, [sp, #16]
 800a4fe:	1a1b      	subs	r3, r3, r0
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	2301      	movs	r3, #1
 800a504:	9315      	str	r3, [sp, #84]	@ 0x54
 800a506:	9b04      	ldr	r3, [sp, #16]
 800a508:	2b16      	cmp	r3, #22
 800a50a:	d810      	bhi.n	800a52e <_dtoa_r+0x196>
 800a50c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a50e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a510:	9a04      	ldr	r2, [sp, #16]
 800a512:	4b83      	ldr	r3, [pc, #524]	@ (800a720 <_dtoa_r+0x388>)
 800a514:	00d2      	lsls	r2, r2, #3
 800a516:	189b      	adds	r3, r3, r2
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f7f5 ff98 	bl	8000450 <__aeabi_dcmplt>
 800a520:	2800      	cmp	r0, #0
 800a522:	d047      	beq.n	800a5b4 <_dtoa_r+0x21c>
 800a524:	9b04      	ldr	r3, [sp, #16]
 800a526:	3b01      	subs	r3, #1
 800a528:	9304      	str	r3, [sp, #16]
 800a52a:	2300      	movs	r3, #0
 800a52c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a52e:	2200      	movs	r2, #0
 800a530:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a532:	9206      	str	r2, [sp, #24]
 800a534:	1bdb      	subs	r3, r3, r7
 800a536:	1e5a      	subs	r2, r3, #1
 800a538:	d53e      	bpl.n	800a5b8 <_dtoa_r+0x220>
 800a53a:	2201      	movs	r2, #1
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	9306      	str	r3, [sp, #24]
 800a540:	2300      	movs	r3, #0
 800a542:	930d      	str	r3, [sp, #52]	@ 0x34
 800a544:	9b04      	ldr	r3, [sp, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	db38      	blt.n	800a5bc <_dtoa_r+0x224>
 800a54a:	9a04      	ldr	r2, [sp, #16]
 800a54c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a54e:	4694      	mov	ip, r2
 800a550:	4463      	add	r3, ip
 800a552:	930d      	str	r3, [sp, #52]	@ 0x34
 800a554:	2300      	movs	r3, #0
 800a556:	9214      	str	r2, [sp, #80]	@ 0x50
 800a558:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a55a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a55c:	2401      	movs	r4, #1
 800a55e:	2b09      	cmp	r3, #9
 800a560:	d867      	bhi.n	800a632 <_dtoa_r+0x29a>
 800a562:	2b05      	cmp	r3, #5
 800a564:	dd02      	ble.n	800a56c <_dtoa_r+0x1d4>
 800a566:	2400      	movs	r4, #0
 800a568:	3b04      	subs	r3, #4
 800a56a:	9322      	str	r3, [sp, #136]	@ 0x88
 800a56c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a56e:	1e98      	subs	r0, r3, #2
 800a570:	2803      	cmp	r0, #3
 800a572:	d867      	bhi.n	800a644 <_dtoa_r+0x2ac>
 800a574:	f7f5 fdcc 	bl	8000110 <__gnu_thumb1_case_uqi>
 800a578:	5b383a2b 	.word	0x5b383a2b
 800a57c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a57e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a580:	18f6      	adds	r6, r6, r3
 800a582:	4b68      	ldr	r3, [pc, #416]	@ (800a724 <_dtoa_r+0x38c>)
 800a584:	18f2      	adds	r2, r6, r3
 800a586:	2a20      	cmp	r2, #32
 800a588:	dd0f      	ble.n	800a5aa <_dtoa_r+0x212>
 800a58a:	2340      	movs	r3, #64	@ 0x40
 800a58c:	1a9b      	subs	r3, r3, r2
 800a58e:	409f      	lsls	r7, r3
 800a590:	4b65      	ldr	r3, [pc, #404]	@ (800a728 <_dtoa_r+0x390>)
 800a592:	0038      	movs	r0, r7
 800a594:	18f3      	adds	r3, r6, r3
 800a596:	40dc      	lsrs	r4, r3
 800a598:	4320      	orrs	r0, r4
 800a59a:	f7f8 fec5 	bl	8003328 <__aeabi_ui2d>
 800a59e:	2201      	movs	r2, #1
 800a5a0:	4b62      	ldr	r3, [pc, #392]	@ (800a72c <_dtoa_r+0x394>)
 800a5a2:	1e77      	subs	r7, r6, #1
 800a5a4:	18cb      	adds	r3, r1, r3
 800a5a6:	9218      	str	r2, [sp, #96]	@ 0x60
 800a5a8:	e776      	b.n	800a498 <_dtoa_r+0x100>
 800a5aa:	2320      	movs	r3, #32
 800a5ac:	0020      	movs	r0, r4
 800a5ae:	1a9b      	subs	r3, r3, r2
 800a5b0:	4098      	lsls	r0, r3
 800a5b2:	e7f2      	b.n	800a59a <_dtoa_r+0x202>
 800a5b4:	9015      	str	r0, [sp, #84]	@ 0x54
 800a5b6:	e7ba      	b.n	800a52e <_dtoa_r+0x196>
 800a5b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a5ba:	e7c3      	b.n	800a544 <_dtoa_r+0x1ac>
 800a5bc:	9b06      	ldr	r3, [sp, #24]
 800a5be:	9a04      	ldr	r2, [sp, #16]
 800a5c0:	1a9b      	subs	r3, r3, r2
 800a5c2:	9306      	str	r3, [sp, #24]
 800a5c4:	4253      	negs	r3, r2
 800a5c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9314      	str	r3, [sp, #80]	@ 0x50
 800a5cc:	e7c5      	b.n	800a55a <_dtoa_r+0x1c2>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dc13      	bgt.n	800a604 <_dtoa_r+0x26c>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	001a      	movs	r2, r3
 800a5e0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5e4:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a5e6:	e00d      	b.n	800a604 <_dtoa_r+0x26c>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e7f1      	b.n	800a5d0 <_dtoa_r+0x238>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a5f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5f2:	4694      	mov	ip, r2
 800a5f4:	9b04      	ldr	r3, [sp, #16]
 800a5f6:	4463      	add	r3, ip
 800a5f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	dc00      	bgt.n	800a604 <_dtoa_r+0x26c>
 800a602:	2301      	movs	r3, #1
 800a604:	9a03      	ldr	r2, [sp, #12]
 800a606:	2100      	movs	r1, #0
 800a608:	69d0      	ldr	r0, [r2, #28]
 800a60a:	2204      	movs	r2, #4
 800a60c:	0015      	movs	r5, r2
 800a60e:	3514      	adds	r5, #20
 800a610:	429d      	cmp	r5, r3
 800a612:	d91b      	bls.n	800a64c <_dtoa_r+0x2b4>
 800a614:	6041      	str	r1, [r0, #4]
 800a616:	9803      	ldr	r0, [sp, #12]
 800a618:	f001 f924 	bl	800b864 <_Balloc>
 800a61c:	9008      	str	r0, [sp, #32]
 800a61e:	2800      	cmp	r0, #0
 800a620:	d117      	bne.n	800a652 <_dtoa_r+0x2ba>
 800a622:	21b0      	movs	r1, #176	@ 0xb0
 800a624:	4b42      	ldr	r3, [pc, #264]	@ (800a730 <_dtoa_r+0x398>)
 800a626:	482e      	ldr	r0, [pc, #184]	@ (800a6e0 <_dtoa_r+0x348>)
 800a628:	9a08      	ldr	r2, [sp, #32]
 800a62a:	31ff      	adds	r1, #255	@ 0xff
 800a62c:	e6c9      	b.n	800a3c2 <_dtoa_r+0x2a>
 800a62e:	2301      	movs	r3, #1
 800a630:	e7dd      	b.n	800a5ee <_dtoa_r+0x256>
 800a632:	2300      	movs	r3, #0
 800a634:	9410      	str	r4, [sp, #64]	@ 0x40
 800a636:	9322      	str	r3, [sp, #136]	@ 0x88
 800a638:	3b01      	subs	r3, #1
 800a63a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63e:	2200      	movs	r2, #0
 800a640:	3313      	adds	r3, #19
 800a642:	e7cf      	b.n	800a5e4 <_dtoa_r+0x24c>
 800a644:	2301      	movs	r3, #1
 800a646:	9310      	str	r3, [sp, #64]	@ 0x40
 800a648:	3b02      	subs	r3, #2
 800a64a:	e7f6      	b.n	800a63a <_dtoa_r+0x2a2>
 800a64c:	3101      	adds	r1, #1
 800a64e:	0052      	lsls	r2, r2, #1
 800a650:	e7dc      	b.n	800a60c <_dtoa_r+0x274>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	9a08      	ldr	r2, [sp, #32]
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65c:	2b0e      	cmp	r3, #14
 800a65e:	d900      	bls.n	800a662 <_dtoa_r+0x2ca>
 800a660:	e0d9      	b.n	800a816 <_dtoa_r+0x47e>
 800a662:	2c00      	cmp	r4, #0
 800a664:	d100      	bne.n	800a668 <_dtoa_r+0x2d0>
 800a666:	e0d6      	b.n	800a816 <_dtoa_r+0x47e>
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	dd64      	ble.n	800a738 <_dtoa_r+0x3a0>
 800a66e:	210f      	movs	r1, #15
 800a670:	9a04      	ldr	r2, [sp, #16]
 800a672:	4b2b      	ldr	r3, [pc, #172]	@ (800a720 <_dtoa_r+0x388>)
 800a674:	400a      	ands	r2, r1
 800a676:	00d2      	lsls	r2, r2, #3
 800a678:	189b      	adds	r3, r3, r2
 800a67a:	681e      	ldr	r6, [r3, #0]
 800a67c:	685f      	ldr	r7, [r3, #4]
 800a67e:	9b04      	ldr	r3, [sp, #16]
 800a680:	2402      	movs	r4, #2
 800a682:	111d      	asrs	r5, r3, #4
 800a684:	05db      	lsls	r3, r3, #23
 800a686:	d50a      	bpl.n	800a69e <_dtoa_r+0x306>
 800a688:	4b2a      	ldr	r3, [pc, #168]	@ (800a734 <_dtoa_r+0x39c>)
 800a68a:	400d      	ands	r5, r1
 800a68c:	6a1a      	ldr	r2, [r3, #32]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a690:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a692:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a694:	f7f7 fb14 	bl	8001cc0 <__aeabi_ddiv>
 800a698:	900a      	str	r0, [sp, #40]	@ 0x28
 800a69a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a69c:	3401      	adds	r4, #1
 800a69e:	4b25      	ldr	r3, [pc, #148]	@ (800a734 <_dtoa_r+0x39c>)
 800a6a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6a2:	2d00      	cmp	r5, #0
 800a6a4:	d108      	bne.n	800a6b8 <_dtoa_r+0x320>
 800a6a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6aa:	0032      	movs	r2, r6
 800a6ac:	003b      	movs	r3, r7
 800a6ae:	f7f7 fb07 	bl	8001cc0 <__aeabi_ddiv>
 800a6b2:	900a      	str	r0, [sp, #40]	@ 0x28
 800a6b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a6b6:	e05a      	b.n	800a76e <_dtoa_r+0x3d6>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	421d      	tst	r5, r3
 800a6bc:	d009      	beq.n	800a6d2 <_dtoa_r+0x33a>
 800a6be:	18e4      	adds	r4, r4, r3
 800a6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6c2:	0030      	movs	r0, r6
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	0039      	movs	r1, r7
 800a6ca:	f7f7 ff3d 	bl	8002548 <__aeabi_dmul>
 800a6ce:	0006      	movs	r6, r0
 800a6d0:	000f      	movs	r7, r1
 800a6d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6d4:	106d      	asrs	r5, r5, #1
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	e7e2      	b.n	800a6a0 <_dtoa_r+0x308>
 800a6da:	46c0      	nop			@ (mov r8, r8)
 800a6dc:	0800cfca 	.word	0x0800cfca
 800a6e0:	0800cfe1 	.word	0x0800cfe1
 800a6e4:	7ff00000 	.word	0x7ff00000
 800a6e8:	0000270f 	.word	0x0000270f
 800a6ec:	0800cfc6 	.word	0x0800cfc6
 800a6f0:	0800cfc9 	.word	0x0800cfc9
 800a6f4:	0800cf92 	.word	0x0800cf92
 800a6f8:	0800cf91 	.word	0x0800cf91
 800a6fc:	3ff00000 	.word	0x3ff00000
 800a700:	fffffc01 	.word	0xfffffc01
 800a704:	3ff80000 	.word	0x3ff80000
 800a708:	636f4361 	.word	0x636f4361
 800a70c:	3fd287a7 	.word	0x3fd287a7
 800a710:	8b60c8b3 	.word	0x8b60c8b3
 800a714:	3fc68a28 	.word	0x3fc68a28
 800a718:	509f79fb 	.word	0x509f79fb
 800a71c:	3fd34413 	.word	0x3fd34413
 800a720:	0800d138 	.word	0x0800d138
 800a724:	00000432 	.word	0x00000432
 800a728:	00000412 	.word	0x00000412
 800a72c:	fe100000 	.word	0xfe100000
 800a730:	0800d039 	.word	0x0800d039
 800a734:	0800d110 	.word	0x0800d110
 800a738:	9b04      	ldr	r3, [sp, #16]
 800a73a:	2402      	movs	r4, #2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d016      	beq.n	800a76e <_dtoa_r+0x3d6>
 800a740:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a742:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a744:	220f      	movs	r2, #15
 800a746:	425d      	negs	r5, r3
 800a748:	402a      	ands	r2, r5
 800a74a:	4bd7      	ldr	r3, [pc, #860]	@ (800aaa8 <_dtoa_r+0x710>)
 800a74c:	00d2      	lsls	r2, r2, #3
 800a74e:	189b      	adds	r3, r3, r2
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f7f7 fef8 	bl	8002548 <__aeabi_dmul>
 800a758:	2701      	movs	r7, #1
 800a75a:	2300      	movs	r3, #0
 800a75c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a75e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a760:	4ed2      	ldr	r6, [pc, #840]	@ (800aaac <_dtoa_r+0x714>)
 800a762:	112d      	asrs	r5, r5, #4
 800a764:	2d00      	cmp	r5, #0
 800a766:	d000      	beq.n	800a76a <_dtoa_r+0x3d2>
 800a768:	e0ba      	b.n	800a8e0 <_dtoa_r+0x548>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1a1      	bne.n	800a6b2 <_dtoa_r+0x31a>
 800a76e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a770:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a772:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a774:	2b00      	cmp	r3, #0
 800a776:	d100      	bne.n	800a77a <_dtoa_r+0x3e2>
 800a778:	e0bd      	b.n	800a8f6 <_dtoa_r+0x55e>
 800a77a:	2200      	movs	r2, #0
 800a77c:	0030      	movs	r0, r6
 800a77e:	0039      	movs	r1, r7
 800a780:	4bcb      	ldr	r3, [pc, #812]	@ (800aab0 <_dtoa_r+0x718>)
 800a782:	f7f5 fe65 	bl	8000450 <__aeabi_dcmplt>
 800a786:	2800      	cmp	r0, #0
 800a788:	d100      	bne.n	800a78c <_dtoa_r+0x3f4>
 800a78a:	e0b4      	b.n	800a8f6 <_dtoa_r+0x55e>
 800a78c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d100      	bne.n	800a794 <_dtoa_r+0x3fc>
 800a792:	e0b0      	b.n	800a8f6 <_dtoa_r+0x55e>
 800a794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a796:	2b00      	cmp	r3, #0
 800a798:	dd39      	ble.n	800a80e <_dtoa_r+0x476>
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	2200      	movs	r2, #0
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7a2:	0030      	movs	r0, r6
 800a7a4:	4bc3      	ldr	r3, [pc, #780]	@ (800aab4 <_dtoa_r+0x71c>)
 800a7a6:	0039      	movs	r1, r7
 800a7a8:	f7f7 fece 	bl	8002548 <__aeabi_dmul>
 800a7ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800a7ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a7b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7b2:	3401      	adds	r4, #1
 800a7b4:	0020      	movs	r0, r4
 800a7b6:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7b8:	f7f8 fd88 	bl	80032cc <__aeabi_i2d>
 800a7bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7c0:	f7f7 fec2 	bl	8002548 <__aeabi_dmul>
 800a7c4:	4bbc      	ldr	r3, [pc, #752]	@ (800aab8 <_dtoa_r+0x720>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f7f6 ff16 	bl	80015f8 <__aeabi_dadd>
 800a7cc:	4bbb      	ldr	r3, [pc, #748]	@ (800aabc <_dtoa_r+0x724>)
 800a7ce:	0006      	movs	r6, r0
 800a7d0:	18cf      	adds	r7, r1, r3
 800a7d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d000      	beq.n	800a7da <_dtoa_r+0x442>
 800a7d8:	e091      	b.n	800a8fe <_dtoa_r+0x566>
 800a7da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a7dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7de:	2200      	movs	r2, #0
 800a7e0:	4bb7      	ldr	r3, [pc, #732]	@ (800aac0 <_dtoa_r+0x728>)
 800a7e2:	f7f8 f979 	bl	8002ad8 <__aeabi_dsub>
 800a7e6:	0032      	movs	r2, r6
 800a7e8:	003b      	movs	r3, r7
 800a7ea:	0004      	movs	r4, r0
 800a7ec:	000d      	movs	r5, r1
 800a7ee:	f7f5 fe43 	bl	8000478 <__aeabi_dcmpgt>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d000      	beq.n	800a7f8 <_dtoa_r+0x460>
 800a7f6:	e29d      	b.n	800ad34 <_dtoa_r+0x99c>
 800a7f8:	2180      	movs	r1, #128	@ 0x80
 800a7fa:	0609      	lsls	r1, r1, #24
 800a7fc:	187b      	adds	r3, r7, r1
 800a7fe:	0032      	movs	r2, r6
 800a800:	0020      	movs	r0, r4
 800a802:	0029      	movs	r1, r5
 800a804:	f7f5 fe24 	bl	8000450 <__aeabi_dcmplt>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d000      	beq.n	800a80e <_dtoa_r+0x476>
 800a80c:	e130      	b.n	800aa70 <_dtoa_r+0x6d8>
 800a80e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a810:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a812:	930a      	str	r3, [sp, #40]	@ 0x28
 800a814:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a816:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	da00      	bge.n	800a81e <_dtoa_r+0x486>
 800a81c:	e177      	b.n	800ab0e <_dtoa_r+0x776>
 800a81e:	9a04      	ldr	r2, [sp, #16]
 800a820:	2a0e      	cmp	r2, #14
 800a822:	dd00      	ble.n	800a826 <_dtoa_r+0x48e>
 800a824:	e173      	b.n	800ab0e <_dtoa_r+0x776>
 800a826:	4ba0      	ldr	r3, [pc, #640]	@ (800aaa8 <_dtoa_r+0x710>)
 800a828:	00d2      	lsls	r2, r2, #3
 800a82a:	189b      	adds	r3, r3, r2
 800a82c:	685c      	ldr	r4, [r3, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	9306      	str	r3, [sp, #24]
 800a832:	9407      	str	r4, [sp, #28]
 800a834:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a836:	2b00      	cmp	r3, #0
 800a838:	da03      	bge.n	800a842 <_dtoa_r+0x4aa>
 800a83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	dc00      	bgt.n	800a842 <_dtoa_r+0x4aa>
 800a840:	e106      	b.n	800aa50 <_dtoa_r+0x6b8>
 800a842:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a844:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a848:	9d08      	ldr	r5, [sp, #32]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	195b      	adds	r3, r3, r5
 800a84e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a850:	9a06      	ldr	r2, [sp, #24]
 800a852:	9b07      	ldr	r3, [sp, #28]
 800a854:	0030      	movs	r0, r6
 800a856:	0039      	movs	r1, r7
 800a858:	f7f7 fa32 	bl	8001cc0 <__aeabi_ddiv>
 800a85c:	f7f8 fcfa 	bl	8003254 <__aeabi_d2iz>
 800a860:	9009      	str	r0, [sp, #36]	@ 0x24
 800a862:	f7f8 fd33 	bl	80032cc <__aeabi_i2d>
 800a866:	9a06      	ldr	r2, [sp, #24]
 800a868:	9b07      	ldr	r3, [sp, #28]
 800a86a:	f7f7 fe6d 	bl	8002548 <__aeabi_dmul>
 800a86e:	0002      	movs	r2, r0
 800a870:	000b      	movs	r3, r1
 800a872:	0030      	movs	r0, r6
 800a874:	0039      	movs	r1, r7
 800a876:	f7f8 f92f 	bl	8002ad8 <__aeabi_dsub>
 800a87a:	002b      	movs	r3, r5
 800a87c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a87e:	3501      	adds	r5, #1
 800a880:	3230      	adds	r2, #48	@ 0x30
 800a882:	701a      	strb	r2, [r3, #0]
 800a884:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a886:	002c      	movs	r4, r5
 800a888:	429a      	cmp	r2, r3
 800a88a:	d000      	beq.n	800a88e <_dtoa_r+0x4f6>
 800a88c:	e131      	b.n	800aaf2 <_dtoa_r+0x75a>
 800a88e:	0002      	movs	r2, r0
 800a890:	000b      	movs	r3, r1
 800a892:	f7f6 feb1 	bl	80015f8 <__aeabi_dadd>
 800a896:	9a06      	ldr	r2, [sp, #24]
 800a898:	9b07      	ldr	r3, [sp, #28]
 800a89a:	0006      	movs	r6, r0
 800a89c:	000f      	movs	r7, r1
 800a89e:	f7f5 fdeb 	bl	8000478 <__aeabi_dcmpgt>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d000      	beq.n	800a8a8 <_dtoa_r+0x510>
 800a8a6:	e10f      	b.n	800aac8 <_dtoa_r+0x730>
 800a8a8:	9a06      	ldr	r2, [sp, #24]
 800a8aa:	9b07      	ldr	r3, [sp, #28]
 800a8ac:	0030      	movs	r0, r6
 800a8ae:	0039      	movs	r1, r7
 800a8b0:	f7f5 fdc8 	bl	8000444 <__aeabi_dcmpeq>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d003      	beq.n	800a8c0 <_dtoa_r+0x528>
 800a8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ba:	07dd      	lsls	r5, r3, #31
 800a8bc:	d500      	bpl.n	800a8c0 <_dtoa_r+0x528>
 800a8be:	e103      	b.n	800aac8 <_dtoa_r+0x730>
 800a8c0:	9905      	ldr	r1, [sp, #20]
 800a8c2:	9803      	ldr	r0, [sp, #12]
 800a8c4:	f001 f812 	bl	800b8ec <_Bfree>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	7023      	strb	r3, [r4, #0]
 800a8cc:	9b04      	ldr	r3, [sp, #16]
 800a8ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d100      	bne.n	800a8dc <_dtoa_r+0x544>
 800a8da:	e5a7      	b.n	800a42c <_dtoa_r+0x94>
 800a8dc:	601c      	str	r4, [r3, #0]
 800a8de:	e5a5      	b.n	800a42c <_dtoa_r+0x94>
 800a8e0:	423d      	tst	r5, r7
 800a8e2:	d005      	beq.n	800a8f0 <_dtoa_r+0x558>
 800a8e4:	6832      	ldr	r2, [r6, #0]
 800a8e6:	6873      	ldr	r3, [r6, #4]
 800a8e8:	f7f7 fe2e 	bl	8002548 <__aeabi_dmul>
 800a8ec:	003b      	movs	r3, r7
 800a8ee:	3401      	adds	r4, #1
 800a8f0:	106d      	asrs	r5, r5, #1
 800a8f2:	3608      	adds	r6, #8
 800a8f4:	e736      	b.n	800a764 <_dtoa_r+0x3cc>
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fc:	e75a      	b.n	800a7b4 <_dtoa_r+0x41c>
 800a8fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a900:	4b69      	ldr	r3, [pc, #420]	@ (800aaa8 <_dtoa_r+0x710>)
 800a902:	3a01      	subs	r2, #1
 800a904:	00d2      	lsls	r2, r2, #3
 800a906:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a908:	189b      	adds	r3, r3, r2
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	2900      	cmp	r1, #0
 800a910:	d04c      	beq.n	800a9ac <_dtoa_r+0x614>
 800a912:	2000      	movs	r0, #0
 800a914:	496b      	ldr	r1, [pc, #428]	@ (800aac4 <_dtoa_r+0x72c>)
 800a916:	f7f7 f9d3 	bl	8001cc0 <__aeabi_ddiv>
 800a91a:	0032      	movs	r2, r6
 800a91c:	003b      	movs	r3, r7
 800a91e:	f7f8 f8db 	bl	8002ad8 <__aeabi_dsub>
 800a922:	9a08      	ldr	r2, [sp, #32]
 800a924:	0006      	movs	r6, r0
 800a926:	4694      	mov	ip, r2
 800a928:	000f      	movs	r7, r1
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	9316      	str	r3, [sp, #88]	@ 0x58
 800a92e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a930:	4463      	add	r3, ip
 800a932:	9311      	str	r3, [sp, #68]	@ 0x44
 800a934:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a936:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a938:	f7f8 fc8c 	bl	8003254 <__aeabi_d2iz>
 800a93c:	0005      	movs	r5, r0
 800a93e:	f7f8 fcc5 	bl	80032cc <__aeabi_i2d>
 800a942:	0002      	movs	r2, r0
 800a944:	000b      	movs	r3, r1
 800a946:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a94a:	f7f8 f8c5 	bl	8002ad8 <__aeabi_dsub>
 800a94e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a950:	3530      	adds	r5, #48	@ 0x30
 800a952:	1c5c      	adds	r4, r3, #1
 800a954:	701d      	strb	r5, [r3, #0]
 800a956:	0032      	movs	r2, r6
 800a958:	003b      	movs	r3, r7
 800a95a:	900a      	str	r0, [sp, #40]	@ 0x28
 800a95c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a95e:	f7f5 fd77 	bl	8000450 <__aeabi_dcmplt>
 800a962:	2800      	cmp	r0, #0
 800a964:	d16a      	bne.n	800aa3c <_dtoa_r+0x6a4>
 800a966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a968:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a96a:	2000      	movs	r0, #0
 800a96c:	4950      	ldr	r1, [pc, #320]	@ (800aab0 <_dtoa_r+0x718>)
 800a96e:	f7f8 f8b3 	bl	8002ad8 <__aeabi_dsub>
 800a972:	0032      	movs	r2, r6
 800a974:	003b      	movs	r3, r7
 800a976:	f7f5 fd6b 	bl	8000450 <__aeabi_dcmplt>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d000      	beq.n	800a980 <_dtoa_r+0x5e8>
 800a97e:	e0a5      	b.n	800aacc <_dtoa_r+0x734>
 800a980:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a982:	42a3      	cmp	r3, r4
 800a984:	d100      	bne.n	800a988 <_dtoa_r+0x5f0>
 800a986:	e742      	b.n	800a80e <_dtoa_r+0x476>
 800a988:	2200      	movs	r2, #0
 800a98a:	0030      	movs	r0, r6
 800a98c:	0039      	movs	r1, r7
 800a98e:	4b49      	ldr	r3, [pc, #292]	@ (800aab4 <_dtoa_r+0x71c>)
 800a990:	f7f7 fdda 	bl	8002548 <__aeabi_dmul>
 800a994:	2200      	movs	r2, #0
 800a996:	0006      	movs	r6, r0
 800a998:	000f      	movs	r7, r1
 800a99a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a99c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a99e:	4b45      	ldr	r3, [pc, #276]	@ (800aab4 <_dtoa_r+0x71c>)
 800a9a0:	f7f7 fdd2 	bl	8002548 <__aeabi_dmul>
 800a9a4:	9416      	str	r4, [sp, #88]	@ 0x58
 800a9a6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a9a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9aa:	e7c3      	b.n	800a934 <_dtoa_r+0x59c>
 800a9ac:	0030      	movs	r0, r6
 800a9ae:	0039      	movs	r1, r7
 800a9b0:	f7f7 fdca 	bl	8002548 <__aeabi_dmul>
 800a9b4:	9d08      	ldr	r5, [sp, #32]
 800a9b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a9b8:	002b      	movs	r3, r5
 800a9ba:	4694      	mov	ip, r2
 800a9bc:	9016      	str	r0, [sp, #88]	@ 0x58
 800a9be:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a9c0:	4463      	add	r3, ip
 800a9c2:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9c8:	f7f8 fc44 	bl	8003254 <__aeabi_d2iz>
 800a9cc:	0004      	movs	r4, r0
 800a9ce:	f7f8 fc7d 	bl	80032cc <__aeabi_i2d>
 800a9d2:	000b      	movs	r3, r1
 800a9d4:	0002      	movs	r2, r0
 800a9d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9da:	f7f8 f87d 	bl	8002ad8 <__aeabi_dsub>
 800a9de:	3430      	adds	r4, #48	@ 0x30
 800a9e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9e2:	702c      	strb	r4, [r5, #0]
 800a9e4:	3501      	adds	r5, #1
 800a9e6:	0006      	movs	r6, r0
 800a9e8:	000f      	movs	r7, r1
 800a9ea:	42ab      	cmp	r3, r5
 800a9ec:	d129      	bne.n	800aa42 <_dtoa_r+0x6aa>
 800a9ee:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a9f0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a9f2:	9b08      	ldr	r3, [sp, #32]
 800a9f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a9f6:	469c      	mov	ip, r3
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4b32      	ldr	r3, [pc, #200]	@ (800aac4 <_dtoa_r+0x72c>)
 800a9fc:	4464      	add	r4, ip
 800a9fe:	f7f6 fdfb 	bl	80015f8 <__aeabi_dadd>
 800aa02:	0002      	movs	r2, r0
 800aa04:	000b      	movs	r3, r1
 800aa06:	0030      	movs	r0, r6
 800aa08:	0039      	movs	r1, r7
 800aa0a:	f7f5 fd35 	bl	8000478 <__aeabi_dcmpgt>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d15c      	bne.n	800aacc <_dtoa_r+0x734>
 800aa12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa14:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa16:	2000      	movs	r0, #0
 800aa18:	492a      	ldr	r1, [pc, #168]	@ (800aac4 <_dtoa_r+0x72c>)
 800aa1a:	f7f8 f85d 	bl	8002ad8 <__aeabi_dsub>
 800aa1e:	0002      	movs	r2, r0
 800aa20:	000b      	movs	r3, r1
 800aa22:	0030      	movs	r0, r6
 800aa24:	0039      	movs	r1, r7
 800aa26:	f7f5 fd13 	bl	8000450 <__aeabi_dcmplt>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d100      	bne.n	800aa30 <_dtoa_r+0x698>
 800aa2e:	e6ee      	b.n	800a80e <_dtoa_r+0x476>
 800aa30:	0023      	movs	r3, r4
 800aa32:	3c01      	subs	r4, #1
 800aa34:	7822      	ldrb	r2, [r4, #0]
 800aa36:	2a30      	cmp	r2, #48	@ 0x30
 800aa38:	d0fa      	beq.n	800aa30 <_dtoa_r+0x698>
 800aa3a:	001c      	movs	r4, r3
 800aa3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa3e:	9304      	str	r3, [sp, #16]
 800aa40:	e73e      	b.n	800a8c0 <_dtoa_r+0x528>
 800aa42:	2200      	movs	r2, #0
 800aa44:	4b1b      	ldr	r3, [pc, #108]	@ (800aab4 <_dtoa_r+0x71c>)
 800aa46:	f7f7 fd7f 	bl	8002548 <__aeabi_dmul>
 800aa4a:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa4e:	e7b9      	b.n	800a9c4 <_dtoa_r+0x62c>
 800aa50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10c      	bne.n	800aa70 <_dtoa_r+0x6d8>
 800aa56:	9806      	ldr	r0, [sp, #24]
 800aa58:	9907      	ldr	r1, [sp, #28]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4b18      	ldr	r3, [pc, #96]	@ (800aac0 <_dtoa_r+0x728>)
 800aa5e:	f7f7 fd73 	bl	8002548 <__aeabi_dmul>
 800aa62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa66:	f7f5 fd11 	bl	800048c <__aeabi_dcmpge>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d100      	bne.n	800aa70 <_dtoa_r+0x6d8>
 800aa6e:	e164      	b.n	800ad3a <_dtoa_r+0x9a2>
 800aa70:	2600      	movs	r6, #0
 800aa72:	0037      	movs	r7, r6
 800aa74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa76:	9c08      	ldr	r4, [sp, #32]
 800aa78:	43db      	mvns	r3, r3
 800aa7a:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9304      	str	r3, [sp, #16]
 800aa80:	0031      	movs	r1, r6
 800aa82:	9803      	ldr	r0, [sp, #12]
 800aa84:	f000 ff32 	bl	800b8ec <_Bfree>
 800aa88:	2f00      	cmp	r7, #0
 800aa8a:	d0d7      	beq.n	800aa3c <_dtoa_r+0x6a4>
 800aa8c:	9b04      	ldr	r3, [sp, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <_dtoa_r+0x706>
 800aa92:	42bb      	cmp	r3, r7
 800aa94:	d003      	beq.n	800aa9e <_dtoa_r+0x706>
 800aa96:	0019      	movs	r1, r3
 800aa98:	9803      	ldr	r0, [sp, #12]
 800aa9a:	f000 ff27 	bl	800b8ec <_Bfree>
 800aa9e:	0039      	movs	r1, r7
 800aaa0:	9803      	ldr	r0, [sp, #12]
 800aaa2:	f000 ff23 	bl	800b8ec <_Bfree>
 800aaa6:	e7c9      	b.n	800aa3c <_dtoa_r+0x6a4>
 800aaa8:	0800d138 	.word	0x0800d138
 800aaac:	0800d110 	.word	0x0800d110
 800aab0:	3ff00000 	.word	0x3ff00000
 800aab4:	40240000 	.word	0x40240000
 800aab8:	401c0000 	.word	0x401c0000
 800aabc:	fcc00000 	.word	0xfcc00000
 800aac0:	40140000 	.word	0x40140000
 800aac4:	3fe00000 	.word	0x3fe00000
 800aac8:	9b04      	ldr	r3, [sp, #16]
 800aaca:	930c      	str	r3, [sp, #48]	@ 0x30
 800aacc:	0023      	movs	r3, r4
 800aace:	001c      	movs	r4, r3
 800aad0:	3b01      	subs	r3, #1
 800aad2:	781a      	ldrb	r2, [r3, #0]
 800aad4:	2a39      	cmp	r2, #57	@ 0x39
 800aad6:	d108      	bne.n	800aaea <_dtoa_r+0x752>
 800aad8:	9a08      	ldr	r2, [sp, #32]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d1f7      	bne.n	800aace <_dtoa_r+0x736>
 800aade:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aae0:	9908      	ldr	r1, [sp, #32]
 800aae2:	3201      	adds	r2, #1
 800aae4:	920c      	str	r2, [sp, #48]	@ 0x30
 800aae6:	2230      	movs	r2, #48	@ 0x30
 800aae8:	700a      	strb	r2, [r1, #0]
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	3201      	adds	r2, #1
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e7a4      	b.n	800aa3c <_dtoa_r+0x6a4>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4bc6      	ldr	r3, [pc, #792]	@ (800ae10 <_dtoa_r+0xa78>)
 800aaf6:	f7f7 fd27 	bl	8002548 <__aeabi_dmul>
 800aafa:	2200      	movs	r2, #0
 800aafc:	2300      	movs	r3, #0
 800aafe:	0006      	movs	r6, r0
 800ab00:	000f      	movs	r7, r1
 800ab02:	f7f5 fc9f 	bl	8000444 <__aeabi_dcmpeq>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d100      	bne.n	800ab0c <_dtoa_r+0x774>
 800ab0a:	e6a1      	b.n	800a850 <_dtoa_r+0x4b8>
 800ab0c:	e6d8      	b.n	800a8c0 <_dtoa_r+0x528>
 800ab0e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800ab10:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ab12:	9c06      	ldr	r4, [sp, #24]
 800ab14:	2f00      	cmp	r7, #0
 800ab16:	d014      	beq.n	800ab42 <_dtoa_r+0x7aa>
 800ab18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ab1a:	2a01      	cmp	r2, #1
 800ab1c:	dd00      	ble.n	800ab20 <_dtoa_r+0x788>
 800ab1e:	e0c8      	b.n	800acb2 <_dtoa_r+0x91a>
 800ab20:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	d100      	bne.n	800ab28 <_dtoa_r+0x790>
 800ab26:	e0be      	b.n	800aca6 <_dtoa_r+0x90e>
 800ab28:	4aba      	ldr	r2, [pc, #744]	@ (800ae14 <_dtoa_r+0xa7c>)
 800ab2a:	189b      	adds	r3, r3, r2
 800ab2c:	9a06      	ldr	r2, [sp, #24]
 800ab2e:	2101      	movs	r1, #1
 800ab30:	18d2      	adds	r2, r2, r3
 800ab32:	9206      	str	r2, [sp, #24]
 800ab34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab36:	9803      	ldr	r0, [sp, #12]
 800ab38:	18d3      	adds	r3, r2, r3
 800ab3a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ab3c:	f000 ffda 	bl	800baf4 <__i2b>
 800ab40:	0007      	movs	r7, r0
 800ab42:	2c00      	cmp	r4, #0
 800ab44:	d00e      	beq.n	800ab64 <_dtoa_r+0x7cc>
 800ab46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	dd0b      	ble.n	800ab64 <_dtoa_r+0x7cc>
 800ab4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab4e:	0023      	movs	r3, r4
 800ab50:	4294      	cmp	r4, r2
 800ab52:	dd00      	ble.n	800ab56 <_dtoa_r+0x7be>
 800ab54:	0013      	movs	r3, r2
 800ab56:	9a06      	ldr	r2, [sp, #24]
 800ab58:	1ae4      	subs	r4, r4, r3
 800ab5a:	1ad2      	subs	r2, r2, r3
 800ab5c:	9206      	str	r2, [sp, #24]
 800ab5e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	930d      	str	r3, [sp, #52]	@ 0x34
 800ab64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d01f      	beq.n	800abaa <_dtoa_r+0x812>
 800ab6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d100      	bne.n	800ab72 <_dtoa_r+0x7da>
 800ab70:	e0b5      	b.n	800acde <_dtoa_r+0x946>
 800ab72:	2d00      	cmp	r5, #0
 800ab74:	d010      	beq.n	800ab98 <_dtoa_r+0x800>
 800ab76:	0039      	movs	r1, r7
 800ab78:	002a      	movs	r2, r5
 800ab7a:	9803      	ldr	r0, [sp, #12]
 800ab7c:	f001 f884 	bl	800bc88 <__pow5mult>
 800ab80:	9a05      	ldr	r2, [sp, #20]
 800ab82:	0001      	movs	r1, r0
 800ab84:	0007      	movs	r7, r0
 800ab86:	9803      	ldr	r0, [sp, #12]
 800ab88:	f000 ffcc 	bl	800bb24 <__multiply>
 800ab8c:	0006      	movs	r6, r0
 800ab8e:	9905      	ldr	r1, [sp, #20]
 800ab90:	9803      	ldr	r0, [sp, #12]
 800ab92:	f000 feab 	bl	800b8ec <_Bfree>
 800ab96:	9605      	str	r6, [sp, #20]
 800ab98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab9a:	1b5a      	subs	r2, r3, r5
 800ab9c:	42ab      	cmp	r3, r5
 800ab9e:	d004      	beq.n	800abaa <_dtoa_r+0x812>
 800aba0:	9905      	ldr	r1, [sp, #20]
 800aba2:	9803      	ldr	r0, [sp, #12]
 800aba4:	f001 f870 	bl	800bc88 <__pow5mult>
 800aba8:	9005      	str	r0, [sp, #20]
 800abaa:	2101      	movs	r1, #1
 800abac:	9803      	ldr	r0, [sp, #12]
 800abae:	f000 ffa1 	bl	800baf4 <__i2b>
 800abb2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800abb4:	0006      	movs	r6, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d100      	bne.n	800abbc <_dtoa_r+0x824>
 800abba:	e1bc      	b.n	800af36 <_dtoa_r+0xb9e>
 800abbc:	001a      	movs	r2, r3
 800abbe:	0001      	movs	r1, r0
 800abc0:	9803      	ldr	r0, [sp, #12]
 800abc2:	f001 f861 	bl	800bc88 <__pow5mult>
 800abc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800abc8:	0006      	movs	r6, r0
 800abca:	2500      	movs	r5, #0
 800abcc:	2b01      	cmp	r3, #1
 800abce:	dc16      	bgt.n	800abfe <_dtoa_r+0x866>
 800abd0:	2500      	movs	r5, #0
 800abd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abd4:	42ab      	cmp	r3, r5
 800abd6:	d10e      	bne.n	800abf6 <_dtoa_r+0x85e>
 800abd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abda:	031b      	lsls	r3, r3, #12
 800abdc:	42ab      	cmp	r3, r5
 800abde:	d10a      	bne.n	800abf6 <_dtoa_r+0x85e>
 800abe0:	4b8d      	ldr	r3, [pc, #564]	@ (800ae18 <_dtoa_r+0xa80>)
 800abe2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800abe4:	4213      	tst	r3, r2
 800abe6:	d006      	beq.n	800abf6 <_dtoa_r+0x85e>
 800abe8:	9b06      	ldr	r3, [sp, #24]
 800abea:	3501      	adds	r5, #1
 800abec:	3301      	adds	r3, #1
 800abee:	9306      	str	r3, [sp, #24]
 800abf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abf2:	3301      	adds	r3, #1
 800abf4:	930d      	str	r3, [sp, #52]	@ 0x34
 800abf6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800abf8:	2001      	movs	r0, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d008      	beq.n	800ac10 <_dtoa_r+0x878>
 800abfe:	6933      	ldr	r3, [r6, #16]
 800ac00:	3303      	adds	r3, #3
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	18f3      	adds	r3, r6, r3
 800ac06:	6858      	ldr	r0, [r3, #4]
 800ac08:	f000 ff24 	bl	800ba54 <__hi0bits>
 800ac0c:	2320      	movs	r3, #32
 800ac0e:	1a18      	subs	r0, r3, r0
 800ac10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac12:	1818      	adds	r0, r3, r0
 800ac14:	0002      	movs	r2, r0
 800ac16:	231f      	movs	r3, #31
 800ac18:	401a      	ands	r2, r3
 800ac1a:	4218      	tst	r0, r3
 800ac1c:	d065      	beq.n	800acea <_dtoa_r+0x952>
 800ac1e:	3301      	adds	r3, #1
 800ac20:	1a9b      	subs	r3, r3, r2
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	dd5d      	ble.n	800ace2 <_dtoa_r+0x94a>
 800ac26:	231c      	movs	r3, #28
 800ac28:	1a9b      	subs	r3, r3, r2
 800ac2a:	9a06      	ldr	r2, [sp, #24]
 800ac2c:	18e4      	adds	r4, r4, r3
 800ac2e:	18d2      	adds	r2, r2, r3
 800ac30:	9206      	str	r2, [sp, #24]
 800ac32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac34:	18d3      	adds	r3, r2, r3
 800ac36:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac38:	9b06      	ldr	r3, [sp, #24]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dd05      	ble.n	800ac4a <_dtoa_r+0x8b2>
 800ac3e:	001a      	movs	r2, r3
 800ac40:	9905      	ldr	r1, [sp, #20]
 800ac42:	9803      	ldr	r0, [sp, #12]
 800ac44:	f001 f87c 	bl	800bd40 <__lshift>
 800ac48:	9005      	str	r0, [sp, #20]
 800ac4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dd05      	ble.n	800ac5c <_dtoa_r+0x8c4>
 800ac50:	0031      	movs	r1, r6
 800ac52:	001a      	movs	r2, r3
 800ac54:	9803      	ldr	r0, [sp, #12]
 800ac56:	f001 f873 	bl	800bd40 <__lshift>
 800ac5a:	0006      	movs	r6, r0
 800ac5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d045      	beq.n	800acee <_dtoa_r+0x956>
 800ac62:	0031      	movs	r1, r6
 800ac64:	9805      	ldr	r0, [sp, #20]
 800ac66:	f001 f8d7 	bl	800be18 <__mcmp>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	da3f      	bge.n	800acee <_dtoa_r+0x956>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	220a      	movs	r2, #10
 800ac72:	3b01      	subs	r3, #1
 800ac74:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac76:	9905      	ldr	r1, [sp, #20]
 800ac78:	2300      	movs	r3, #0
 800ac7a:	9803      	ldr	r0, [sp, #12]
 800ac7c:	f000 fe5a 	bl	800b934 <__multadd>
 800ac80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac82:	9005      	str	r0, [sp, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d100      	bne.n	800ac8a <_dtoa_r+0x8f2>
 800ac88:	e15c      	b.n	800af44 <_dtoa_r+0xbac>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	0039      	movs	r1, r7
 800ac8e:	220a      	movs	r2, #10
 800ac90:	9803      	ldr	r0, [sp, #12]
 800ac92:	f000 fe4f 	bl	800b934 <__multadd>
 800ac96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac98:	0007      	movs	r7, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dc55      	bgt.n	800ad4a <_dtoa_r+0x9b2>
 800ac9e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	dc2d      	bgt.n	800ad00 <_dtoa_r+0x968>
 800aca4:	e051      	b.n	800ad4a <_dtoa_r+0x9b2>
 800aca6:	2336      	movs	r3, #54	@ 0x36
 800aca8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800acaa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800acac:	9c06      	ldr	r4, [sp, #24]
 800acae:	1a9b      	subs	r3, r3, r2
 800acb0:	e73c      	b.n	800ab2c <_dtoa_r+0x794>
 800acb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb4:	1e5d      	subs	r5, r3, #1
 800acb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acb8:	42ab      	cmp	r3, r5
 800acba:	db08      	blt.n	800acce <_dtoa_r+0x936>
 800acbc:	1b5d      	subs	r5, r3, r5
 800acbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc0:	9c06      	ldr	r4, [sp, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	db00      	blt.n	800acc8 <_dtoa_r+0x930>
 800acc6:	e731      	b.n	800ab2c <_dtoa_r+0x794>
 800acc8:	1ae4      	subs	r4, r4, r3
 800acca:	2300      	movs	r3, #0
 800accc:	e72e      	b.n	800ab2c <_dtoa_r+0x794>
 800acce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acd0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800acd2:	1aeb      	subs	r3, r5, r3
 800acd4:	18d3      	adds	r3, r2, r3
 800acd6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800acd8:	9314      	str	r3, [sp, #80]	@ 0x50
 800acda:	2500      	movs	r5, #0
 800acdc:	e7ef      	b.n	800acbe <_dtoa_r+0x926>
 800acde:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ace0:	e75e      	b.n	800aba0 <_dtoa_r+0x808>
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	d0a8      	beq.n	800ac38 <_dtoa_r+0x8a0>
 800ace6:	331c      	adds	r3, #28
 800ace8:	e79f      	b.n	800ac2a <_dtoa_r+0x892>
 800acea:	0013      	movs	r3, r2
 800acec:	e7fb      	b.n	800ace6 <_dtoa_r+0x94e>
 800acee:	9b04      	ldr	r3, [sp, #16]
 800acf0:	930c      	str	r3, [sp, #48]	@ 0x30
 800acf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf4:	930e      	str	r3, [sp, #56]	@ 0x38
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dc23      	bgt.n	800ad42 <_dtoa_r+0x9aa>
 800acfa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	dd20      	ble.n	800ad42 <_dtoa_r+0x9aa>
 800ad00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d000      	beq.n	800ad08 <_dtoa_r+0x970>
 800ad06:	e6b5      	b.n	800aa74 <_dtoa_r+0x6dc>
 800ad08:	0031      	movs	r1, r6
 800ad0a:	2205      	movs	r2, #5
 800ad0c:	9803      	ldr	r0, [sp, #12]
 800ad0e:	f000 fe11 	bl	800b934 <__multadd>
 800ad12:	0006      	movs	r6, r0
 800ad14:	0001      	movs	r1, r0
 800ad16:	9805      	ldr	r0, [sp, #20]
 800ad18:	f001 f87e 	bl	800be18 <__mcmp>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	dc00      	bgt.n	800ad22 <_dtoa_r+0x98a>
 800ad20:	e6a8      	b.n	800aa74 <_dtoa_r+0x6dc>
 800ad22:	9b08      	ldr	r3, [sp, #32]
 800ad24:	9a08      	ldr	r2, [sp, #32]
 800ad26:	1c5c      	adds	r4, r3, #1
 800ad28:	2331      	movs	r3, #49	@ 0x31
 800ad2a:	7013      	strb	r3, [r2, #0]
 800ad2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad2e:	3301      	adds	r3, #1
 800ad30:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad32:	e6a3      	b.n	800aa7c <_dtoa_r+0x6e4>
 800ad34:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ad36:	0037      	movs	r7, r6
 800ad38:	e7f3      	b.n	800ad22 <_dtoa_r+0x98a>
 800ad3a:	9b04      	ldr	r3, [sp, #16]
 800ad3c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800ad3e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad40:	e7f9      	b.n	800ad36 <_dtoa_r+0x99e>
 800ad42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d100      	bne.n	800ad4a <_dtoa_r+0x9b2>
 800ad48:	e100      	b.n	800af4c <_dtoa_r+0xbb4>
 800ad4a:	2c00      	cmp	r4, #0
 800ad4c:	dd05      	ble.n	800ad5a <_dtoa_r+0x9c2>
 800ad4e:	0039      	movs	r1, r7
 800ad50:	0022      	movs	r2, r4
 800ad52:	9803      	ldr	r0, [sp, #12]
 800ad54:	f000 fff4 	bl	800bd40 <__lshift>
 800ad58:	0007      	movs	r7, r0
 800ad5a:	0038      	movs	r0, r7
 800ad5c:	2d00      	cmp	r5, #0
 800ad5e:	d018      	beq.n	800ad92 <_dtoa_r+0x9fa>
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	9803      	ldr	r0, [sp, #12]
 800ad64:	f000 fd7e 	bl	800b864 <_Balloc>
 800ad68:	1e04      	subs	r4, r0, #0
 800ad6a:	d105      	bne.n	800ad78 <_dtoa_r+0x9e0>
 800ad6c:	0022      	movs	r2, r4
 800ad6e:	4b2b      	ldr	r3, [pc, #172]	@ (800ae1c <_dtoa_r+0xa84>)
 800ad70:	482b      	ldr	r0, [pc, #172]	@ (800ae20 <_dtoa_r+0xa88>)
 800ad72:	492c      	ldr	r1, [pc, #176]	@ (800ae24 <_dtoa_r+0xa8c>)
 800ad74:	f7ff fb25 	bl	800a3c2 <_dtoa_r+0x2a>
 800ad78:	0039      	movs	r1, r7
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	310c      	adds	r1, #12
 800ad7e:	3202      	adds	r2, #2
 800ad80:	0092      	lsls	r2, r2, #2
 800ad82:	300c      	adds	r0, #12
 800ad84:	f7ff fa6a 	bl	800a25c <memcpy>
 800ad88:	2201      	movs	r2, #1
 800ad8a:	0021      	movs	r1, r4
 800ad8c:	9803      	ldr	r0, [sp, #12]
 800ad8e:	f000 ffd7 	bl	800bd40 <__lshift>
 800ad92:	9b08      	ldr	r3, [sp, #32]
 800ad94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad96:	9306      	str	r3, [sp, #24]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	189b      	adds	r3, r3, r2
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	9704      	str	r7, [sp, #16]
 800ada0:	0007      	movs	r7, r0
 800ada2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ada4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ada6:	4013      	ands	r3, r2
 800ada8:	930e      	str	r3, [sp, #56]	@ 0x38
 800adaa:	0031      	movs	r1, r6
 800adac:	9805      	ldr	r0, [sp, #20]
 800adae:	f7ff fa65 	bl	800a27c <quorem>
 800adb2:	9904      	ldr	r1, [sp, #16]
 800adb4:	0005      	movs	r5, r0
 800adb6:	900a      	str	r0, [sp, #40]	@ 0x28
 800adb8:	9805      	ldr	r0, [sp, #20]
 800adba:	f001 f82d 	bl	800be18 <__mcmp>
 800adbe:	003a      	movs	r2, r7
 800adc0:	900d      	str	r0, [sp, #52]	@ 0x34
 800adc2:	0031      	movs	r1, r6
 800adc4:	9803      	ldr	r0, [sp, #12]
 800adc6:	f001 f843 	bl	800be50 <__mdiff>
 800adca:	2201      	movs	r2, #1
 800adcc:	68c3      	ldr	r3, [r0, #12]
 800adce:	0004      	movs	r4, r0
 800add0:	3530      	adds	r5, #48	@ 0x30
 800add2:	9209      	str	r2, [sp, #36]	@ 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	d104      	bne.n	800ade2 <_dtoa_r+0xa4a>
 800add8:	0001      	movs	r1, r0
 800adda:	9805      	ldr	r0, [sp, #20]
 800addc:	f001 f81c 	bl	800be18 <__mcmp>
 800ade0:	9009      	str	r0, [sp, #36]	@ 0x24
 800ade2:	0021      	movs	r1, r4
 800ade4:	9803      	ldr	r0, [sp, #12]
 800ade6:	f000 fd81 	bl	800b8ec <_Bfree>
 800adea:	9b06      	ldr	r3, [sp, #24]
 800adec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adee:	1c5c      	adds	r4, r3, #1
 800adf0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800adf2:	4313      	orrs	r3, r2
 800adf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adf6:	4313      	orrs	r3, r2
 800adf8:	d116      	bne.n	800ae28 <_dtoa_r+0xa90>
 800adfa:	2d39      	cmp	r5, #57	@ 0x39
 800adfc:	d02f      	beq.n	800ae5e <_dtoa_r+0xac6>
 800adfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	dd01      	ble.n	800ae08 <_dtoa_r+0xa70>
 800ae04:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ae06:	3531      	adds	r5, #49	@ 0x31
 800ae08:	9b06      	ldr	r3, [sp, #24]
 800ae0a:	701d      	strb	r5, [r3, #0]
 800ae0c:	e638      	b.n	800aa80 <_dtoa_r+0x6e8>
 800ae0e:	46c0      	nop			@ (mov r8, r8)
 800ae10:	40240000 	.word	0x40240000
 800ae14:	00000433 	.word	0x00000433
 800ae18:	7ff00000 	.word	0x7ff00000
 800ae1c:	0800d039 	.word	0x0800d039
 800ae20:	0800cfe1 	.word	0x0800cfe1
 800ae24:	000002ef 	.word	0x000002ef
 800ae28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	db04      	blt.n	800ae38 <_dtoa_r+0xaa0>
 800ae2e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ae30:	4313      	orrs	r3, r2
 800ae32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae34:	4313      	orrs	r3, r2
 800ae36:	d11e      	bne.n	800ae76 <_dtoa_r+0xade>
 800ae38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	dde4      	ble.n	800ae08 <_dtoa_r+0xa70>
 800ae3e:	9905      	ldr	r1, [sp, #20]
 800ae40:	2201      	movs	r2, #1
 800ae42:	9803      	ldr	r0, [sp, #12]
 800ae44:	f000 ff7c 	bl	800bd40 <__lshift>
 800ae48:	0031      	movs	r1, r6
 800ae4a:	9005      	str	r0, [sp, #20]
 800ae4c:	f000 ffe4 	bl	800be18 <__mcmp>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	dc02      	bgt.n	800ae5a <_dtoa_r+0xac2>
 800ae54:	d1d8      	bne.n	800ae08 <_dtoa_r+0xa70>
 800ae56:	07eb      	lsls	r3, r5, #31
 800ae58:	d5d6      	bpl.n	800ae08 <_dtoa_r+0xa70>
 800ae5a:	2d39      	cmp	r5, #57	@ 0x39
 800ae5c:	d1d2      	bne.n	800ae04 <_dtoa_r+0xa6c>
 800ae5e:	2339      	movs	r3, #57	@ 0x39
 800ae60:	9a06      	ldr	r2, [sp, #24]
 800ae62:	7013      	strb	r3, [r2, #0]
 800ae64:	0023      	movs	r3, r4
 800ae66:	001c      	movs	r4, r3
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	781a      	ldrb	r2, [r3, #0]
 800ae6c:	2a39      	cmp	r2, #57	@ 0x39
 800ae6e:	d04f      	beq.n	800af10 <_dtoa_r+0xb78>
 800ae70:	3201      	adds	r2, #1
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	e604      	b.n	800aa80 <_dtoa_r+0x6e8>
 800ae76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	dd03      	ble.n	800ae84 <_dtoa_r+0xaec>
 800ae7c:	2d39      	cmp	r5, #57	@ 0x39
 800ae7e:	d0ee      	beq.n	800ae5e <_dtoa_r+0xac6>
 800ae80:	3501      	adds	r5, #1
 800ae82:	e7c1      	b.n	800ae08 <_dtoa_r+0xa70>
 800ae84:	9b06      	ldr	r3, [sp, #24]
 800ae86:	9a06      	ldr	r2, [sp, #24]
 800ae88:	701d      	strb	r5, [r3, #0]
 800ae8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d02a      	beq.n	800aee6 <_dtoa_r+0xb4e>
 800ae90:	2300      	movs	r3, #0
 800ae92:	220a      	movs	r2, #10
 800ae94:	9905      	ldr	r1, [sp, #20]
 800ae96:	9803      	ldr	r0, [sp, #12]
 800ae98:	f000 fd4c 	bl	800b934 <__multadd>
 800ae9c:	9b04      	ldr	r3, [sp, #16]
 800ae9e:	9005      	str	r0, [sp, #20]
 800aea0:	42bb      	cmp	r3, r7
 800aea2:	d109      	bne.n	800aeb8 <_dtoa_r+0xb20>
 800aea4:	2300      	movs	r3, #0
 800aea6:	220a      	movs	r2, #10
 800aea8:	9904      	ldr	r1, [sp, #16]
 800aeaa:	9803      	ldr	r0, [sp, #12]
 800aeac:	f000 fd42 	bl	800b934 <__multadd>
 800aeb0:	9004      	str	r0, [sp, #16]
 800aeb2:	0007      	movs	r7, r0
 800aeb4:	9406      	str	r4, [sp, #24]
 800aeb6:	e778      	b.n	800adaa <_dtoa_r+0xa12>
 800aeb8:	9904      	ldr	r1, [sp, #16]
 800aeba:	2300      	movs	r3, #0
 800aebc:	220a      	movs	r2, #10
 800aebe:	9803      	ldr	r0, [sp, #12]
 800aec0:	f000 fd38 	bl	800b934 <__multadd>
 800aec4:	2300      	movs	r3, #0
 800aec6:	9004      	str	r0, [sp, #16]
 800aec8:	220a      	movs	r2, #10
 800aeca:	0039      	movs	r1, r7
 800aecc:	9803      	ldr	r0, [sp, #12]
 800aece:	f000 fd31 	bl	800b934 <__multadd>
 800aed2:	e7ee      	b.n	800aeb2 <_dtoa_r+0xb1a>
 800aed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aed6:	2401      	movs	r4, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	dd00      	ble.n	800aede <_dtoa_r+0xb46>
 800aedc:	001c      	movs	r4, r3
 800aede:	9b08      	ldr	r3, [sp, #32]
 800aee0:	191c      	adds	r4, r3, r4
 800aee2:	2300      	movs	r3, #0
 800aee4:	9304      	str	r3, [sp, #16]
 800aee6:	9905      	ldr	r1, [sp, #20]
 800aee8:	2201      	movs	r2, #1
 800aeea:	9803      	ldr	r0, [sp, #12]
 800aeec:	f000 ff28 	bl	800bd40 <__lshift>
 800aef0:	0031      	movs	r1, r6
 800aef2:	9005      	str	r0, [sp, #20]
 800aef4:	f000 ff90 	bl	800be18 <__mcmp>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	dcb3      	bgt.n	800ae64 <_dtoa_r+0xacc>
 800aefc:	d101      	bne.n	800af02 <_dtoa_r+0xb6a>
 800aefe:	07ed      	lsls	r5, r5, #31
 800af00:	d4b0      	bmi.n	800ae64 <_dtoa_r+0xacc>
 800af02:	0023      	movs	r3, r4
 800af04:	001c      	movs	r4, r3
 800af06:	3b01      	subs	r3, #1
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	2a30      	cmp	r2, #48	@ 0x30
 800af0c:	d0fa      	beq.n	800af04 <_dtoa_r+0xb6c>
 800af0e:	e5b7      	b.n	800aa80 <_dtoa_r+0x6e8>
 800af10:	9a08      	ldr	r2, [sp, #32]
 800af12:	429a      	cmp	r2, r3
 800af14:	d1a7      	bne.n	800ae66 <_dtoa_r+0xace>
 800af16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af18:	3301      	adds	r3, #1
 800af1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800af1c:	2331      	movs	r3, #49	@ 0x31
 800af1e:	7013      	strb	r3, [r2, #0]
 800af20:	e5ae      	b.n	800aa80 <_dtoa_r+0x6e8>
 800af22:	4b15      	ldr	r3, [pc, #84]	@ (800af78 <_dtoa_r+0xbe0>)
 800af24:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800af26:	9308      	str	r3, [sp, #32]
 800af28:	4b14      	ldr	r3, [pc, #80]	@ (800af7c <_dtoa_r+0xbe4>)
 800af2a:	2a00      	cmp	r2, #0
 800af2c:	d001      	beq.n	800af32 <_dtoa_r+0xb9a>
 800af2e:	f7ff fa7b 	bl	800a428 <_dtoa_r+0x90>
 800af32:	f7ff fa7b 	bl	800a42c <_dtoa_r+0x94>
 800af36:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af38:	2b01      	cmp	r3, #1
 800af3a:	dc00      	bgt.n	800af3e <_dtoa_r+0xba6>
 800af3c:	e648      	b.n	800abd0 <_dtoa_r+0x838>
 800af3e:	2001      	movs	r0, #1
 800af40:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800af42:	e665      	b.n	800ac10 <_dtoa_r+0x878>
 800af44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af46:	2b00      	cmp	r3, #0
 800af48:	dc00      	bgt.n	800af4c <_dtoa_r+0xbb4>
 800af4a:	e6d6      	b.n	800acfa <_dtoa_r+0x962>
 800af4c:	2400      	movs	r4, #0
 800af4e:	0031      	movs	r1, r6
 800af50:	9805      	ldr	r0, [sp, #20]
 800af52:	f7ff f993 	bl	800a27c <quorem>
 800af56:	9b08      	ldr	r3, [sp, #32]
 800af58:	3030      	adds	r0, #48	@ 0x30
 800af5a:	5518      	strb	r0, [r3, r4]
 800af5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af5e:	3401      	adds	r4, #1
 800af60:	0005      	movs	r5, r0
 800af62:	429c      	cmp	r4, r3
 800af64:	dab6      	bge.n	800aed4 <_dtoa_r+0xb3c>
 800af66:	2300      	movs	r3, #0
 800af68:	220a      	movs	r2, #10
 800af6a:	9905      	ldr	r1, [sp, #20]
 800af6c:	9803      	ldr	r0, [sp, #12]
 800af6e:	f000 fce1 	bl	800b934 <__multadd>
 800af72:	9005      	str	r0, [sp, #20]
 800af74:	e7eb      	b.n	800af4e <_dtoa_r+0xbb6>
 800af76:	46c0      	nop			@ (mov r8, r8)
 800af78:	0800cfbd 	.word	0x0800cfbd
 800af7c:	0800cfc5 	.word	0x0800cfc5

0800af80 <_free_r>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	0005      	movs	r5, r0
 800af84:	1e0c      	subs	r4, r1, #0
 800af86:	d010      	beq.n	800afaa <_free_r+0x2a>
 800af88:	3c04      	subs	r4, #4
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	da00      	bge.n	800af92 <_free_r+0x12>
 800af90:	18e4      	adds	r4, r4, r3
 800af92:	0028      	movs	r0, r5
 800af94:	f000 fc56 	bl	800b844 <__malloc_lock>
 800af98:	4a1d      	ldr	r2, [pc, #116]	@ (800b010 <_free_r+0x90>)
 800af9a:	6813      	ldr	r3, [r2, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d105      	bne.n	800afac <_free_r+0x2c>
 800afa0:	6063      	str	r3, [r4, #4]
 800afa2:	6014      	str	r4, [r2, #0]
 800afa4:	0028      	movs	r0, r5
 800afa6:	f000 fc55 	bl	800b854 <__malloc_unlock>
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	42a3      	cmp	r3, r4
 800afae:	d908      	bls.n	800afc2 <_free_r+0x42>
 800afb0:	6820      	ldr	r0, [r4, #0]
 800afb2:	1821      	adds	r1, r4, r0
 800afb4:	428b      	cmp	r3, r1
 800afb6:	d1f3      	bne.n	800afa0 <_free_r+0x20>
 800afb8:	6819      	ldr	r1, [r3, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	1809      	adds	r1, r1, r0
 800afbe:	6021      	str	r1, [r4, #0]
 800afc0:	e7ee      	b.n	800afa0 <_free_r+0x20>
 800afc2:	001a      	movs	r2, r3
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <_free_r+0x4e>
 800afca:	42a3      	cmp	r3, r4
 800afcc:	d9f9      	bls.n	800afc2 <_free_r+0x42>
 800afce:	6811      	ldr	r1, [r2, #0]
 800afd0:	1850      	adds	r0, r2, r1
 800afd2:	42a0      	cmp	r0, r4
 800afd4:	d10b      	bne.n	800afee <_free_r+0x6e>
 800afd6:	6820      	ldr	r0, [r4, #0]
 800afd8:	1809      	adds	r1, r1, r0
 800afda:	1850      	adds	r0, r2, r1
 800afdc:	6011      	str	r1, [r2, #0]
 800afde:	4283      	cmp	r3, r0
 800afe0:	d1e0      	bne.n	800afa4 <_free_r+0x24>
 800afe2:	6818      	ldr	r0, [r3, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	1841      	adds	r1, r0, r1
 800afe8:	6011      	str	r1, [r2, #0]
 800afea:	6053      	str	r3, [r2, #4]
 800afec:	e7da      	b.n	800afa4 <_free_r+0x24>
 800afee:	42a0      	cmp	r0, r4
 800aff0:	d902      	bls.n	800aff8 <_free_r+0x78>
 800aff2:	230c      	movs	r3, #12
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	e7d5      	b.n	800afa4 <_free_r+0x24>
 800aff8:	6820      	ldr	r0, [r4, #0]
 800affa:	1821      	adds	r1, r4, r0
 800affc:	428b      	cmp	r3, r1
 800affe:	d103      	bne.n	800b008 <_free_r+0x88>
 800b000:	6819      	ldr	r1, [r3, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	1809      	adds	r1, r1, r0
 800b006:	6021      	str	r1, [r4, #0]
 800b008:	6063      	str	r3, [r4, #4]
 800b00a:	6054      	str	r4, [r2, #4]
 800b00c:	e7ca      	b.n	800afa4 <_free_r+0x24>
 800b00e:	46c0      	nop			@ (mov r8, r8)
 800b010:	2000072c 	.word	0x2000072c

0800b014 <rshift>:
 800b014:	0002      	movs	r2, r0
 800b016:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b018:	6904      	ldr	r4, [r0, #16]
 800b01a:	b085      	sub	sp, #20
 800b01c:	3214      	adds	r2, #20
 800b01e:	114b      	asrs	r3, r1, #5
 800b020:	0016      	movs	r6, r2
 800b022:	9302      	str	r3, [sp, #8]
 800b024:	429c      	cmp	r4, r3
 800b026:	dd31      	ble.n	800b08c <rshift+0x78>
 800b028:	261f      	movs	r6, #31
 800b02a:	000f      	movs	r7, r1
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	00a5      	lsls	r5, r4, #2
 800b030:	18d3      	adds	r3, r2, r3
 800b032:	4037      	ands	r7, r6
 800b034:	1955      	adds	r5, r2, r5
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	9701      	str	r7, [sp, #4]
 800b03a:	4231      	tst	r1, r6
 800b03c:	d10d      	bne.n	800b05a <rshift+0x46>
 800b03e:	0016      	movs	r6, r2
 800b040:	0019      	movs	r1, r3
 800b042:	428d      	cmp	r5, r1
 800b044:	d836      	bhi.n	800b0b4 <rshift+0xa0>
 800b046:	9b00      	ldr	r3, [sp, #0]
 800b048:	2600      	movs	r6, #0
 800b04a:	3b03      	subs	r3, #3
 800b04c:	429d      	cmp	r5, r3
 800b04e:	d302      	bcc.n	800b056 <rshift+0x42>
 800b050:	9b02      	ldr	r3, [sp, #8]
 800b052:	1ae4      	subs	r4, r4, r3
 800b054:	00a6      	lsls	r6, r4, #2
 800b056:	1996      	adds	r6, r2, r6
 800b058:	e018      	b.n	800b08c <rshift+0x78>
 800b05a:	2120      	movs	r1, #32
 800b05c:	9e01      	ldr	r6, [sp, #4]
 800b05e:	9f01      	ldr	r7, [sp, #4]
 800b060:	1b89      	subs	r1, r1, r6
 800b062:	9e00      	ldr	r6, [sp, #0]
 800b064:	9103      	str	r1, [sp, #12]
 800b066:	ce02      	ldmia	r6!, {r1}
 800b068:	4694      	mov	ip, r2
 800b06a:	40f9      	lsrs	r1, r7
 800b06c:	42b5      	cmp	r5, r6
 800b06e:	d816      	bhi.n	800b09e <rshift+0x8a>
 800b070:	9b00      	ldr	r3, [sp, #0]
 800b072:	2600      	movs	r6, #0
 800b074:	3301      	adds	r3, #1
 800b076:	429d      	cmp	r5, r3
 800b078:	d303      	bcc.n	800b082 <rshift+0x6e>
 800b07a:	9b02      	ldr	r3, [sp, #8]
 800b07c:	1ae4      	subs	r4, r4, r3
 800b07e:	00a6      	lsls	r6, r4, #2
 800b080:	3e04      	subs	r6, #4
 800b082:	1996      	adds	r6, r2, r6
 800b084:	6031      	str	r1, [r6, #0]
 800b086:	2900      	cmp	r1, #0
 800b088:	d000      	beq.n	800b08c <rshift+0x78>
 800b08a:	3604      	adds	r6, #4
 800b08c:	1ab1      	subs	r1, r6, r2
 800b08e:	1089      	asrs	r1, r1, #2
 800b090:	6101      	str	r1, [r0, #16]
 800b092:	4296      	cmp	r6, r2
 800b094:	d101      	bne.n	800b09a <rshift+0x86>
 800b096:	2300      	movs	r3, #0
 800b098:	6143      	str	r3, [r0, #20]
 800b09a:	b005      	add	sp, #20
 800b09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b09e:	6837      	ldr	r7, [r6, #0]
 800b0a0:	9b03      	ldr	r3, [sp, #12]
 800b0a2:	409f      	lsls	r7, r3
 800b0a4:	430f      	orrs	r7, r1
 800b0a6:	4661      	mov	r1, ip
 800b0a8:	c180      	stmia	r1!, {r7}
 800b0aa:	468c      	mov	ip, r1
 800b0ac:	9b01      	ldr	r3, [sp, #4]
 800b0ae:	ce02      	ldmia	r6!, {r1}
 800b0b0:	40d9      	lsrs	r1, r3
 800b0b2:	e7db      	b.n	800b06c <rshift+0x58>
 800b0b4:	c980      	ldmia	r1!, {r7}
 800b0b6:	c680      	stmia	r6!, {r7}
 800b0b8:	e7c3      	b.n	800b042 <rshift+0x2e>

0800b0ba <__hexdig_fun>:
 800b0ba:	0002      	movs	r2, r0
 800b0bc:	3a30      	subs	r2, #48	@ 0x30
 800b0be:	0003      	movs	r3, r0
 800b0c0:	2a09      	cmp	r2, #9
 800b0c2:	d802      	bhi.n	800b0ca <__hexdig_fun+0x10>
 800b0c4:	3b20      	subs	r3, #32
 800b0c6:	b2d8      	uxtb	r0, r3
 800b0c8:	4770      	bx	lr
 800b0ca:	0002      	movs	r2, r0
 800b0cc:	3a61      	subs	r2, #97	@ 0x61
 800b0ce:	2a05      	cmp	r2, #5
 800b0d0:	d801      	bhi.n	800b0d6 <__hexdig_fun+0x1c>
 800b0d2:	3b47      	subs	r3, #71	@ 0x47
 800b0d4:	e7f7      	b.n	800b0c6 <__hexdig_fun+0xc>
 800b0d6:	001a      	movs	r2, r3
 800b0d8:	3a41      	subs	r2, #65	@ 0x41
 800b0da:	2000      	movs	r0, #0
 800b0dc:	2a05      	cmp	r2, #5
 800b0de:	d8f3      	bhi.n	800b0c8 <__hexdig_fun+0xe>
 800b0e0:	3b27      	subs	r3, #39	@ 0x27
 800b0e2:	e7f0      	b.n	800b0c6 <__hexdig_fun+0xc>

0800b0e4 <__gethex>:
 800b0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e6:	b089      	sub	sp, #36	@ 0x24
 800b0e8:	9307      	str	r3, [sp, #28]
 800b0ea:	680b      	ldr	r3, [r1, #0]
 800b0ec:	9201      	str	r2, [sp, #4]
 800b0ee:	9003      	str	r0, [sp, #12]
 800b0f0:	9106      	str	r1, [sp, #24]
 800b0f2:	1c9a      	adds	r2, r3, #2
 800b0f4:	0011      	movs	r1, r2
 800b0f6:	3201      	adds	r2, #1
 800b0f8:	1e50      	subs	r0, r2, #1
 800b0fa:	7800      	ldrb	r0, [r0, #0]
 800b0fc:	2830      	cmp	r0, #48	@ 0x30
 800b0fe:	d0f9      	beq.n	800b0f4 <__gethex+0x10>
 800b100:	1acb      	subs	r3, r1, r3
 800b102:	3b02      	subs	r3, #2
 800b104:	9305      	str	r3, [sp, #20]
 800b106:	9100      	str	r1, [sp, #0]
 800b108:	f7ff ffd7 	bl	800b0ba <__hexdig_fun>
 800b10c:	2300      	movs	r3, #0
 800b10e:	001d      	movs	r5, r3
 800b110:	9302      	str	r3, [sp, #8]
 800b112:	4298      	cmp	r0, r3
 800b114:	d11e      	bne.n	800b154 <__gethex+0x70>
 800b116:	2201      	movs	r2, #1
 800b118:	49a6      	ldr	r1, [pc, #664]	@ (800b3b4 <__gethex+0x2d0>)
 800b11a:	9800      	ldr	r0, [sp, #0]
 800b11c:	f7ff f802 	bl	800a124 <strncmp>
 800b120:	0007      	movs	r7, r0
 800b122:	42a8      	cmp	r0, r5
 800b124:	d000      	beq.n	800b128 <__gethex+0x44>
 800b126:	e06a      	b.n	800b1fe <__gethex+0x11a>
 800b128:	9b00      	ldr	r3, [sp, #0]
 800b12a:	7858      	ldrb	r0, [r3, #1]
 800b12c:	1c5c      	adds	r4, r3, #1
 800b12e:	f7ff ffc4 	bl	800b0ba <__hexdig_fun>
 800b132:	2301      	movs	r3, #1
 800b134:	9302      	str	r3, [sp, #8]
 800b136:	42a8      	cmp	r0, r5
 800b138:	d02f      	beq.n	800b19a <__gethex+0xb6>
 800b13a:	9400      	str	r4, [sp, #0]
 800b13c:	9b00      	ldr	r3, [sp, #0]
 800b13e:	7818      	ldrb	r0, [r3, #0]
 800b140:	2830      	cmp	r0, #48	@ 0x30
 800b142:	d009      	beq.n	800b158 <__gethex+0x74>
 800b144:	f7ff ffb9 	bl	800b0ba <__hexdig_fun>
 800b148:	4242      	negs	r2, r0
 800b14a:	4142      	adcs	r2, r0
 800b14c:	2301      	movs	r3, #1
 800b14e:	0025      	movs	r5, r4
 800b150:	9202      	str	r2, [sp, #8]
 800b152:	9305      	str	r3, [sp, #20]
 800b154:	9c00      	ldr	r4, [sp, #0]
 800b156:	e004      	b.n	800b162 <__gethex+0x7e>
 800b158:	9b00      	ldr	r3, [sp, #0]
 800b15a:	3301      	adds	r3, #1
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	e7ed      	b.n	800b13c <__gethex+0x58>
 800b160:	3401      	adds	r4, #1
 800b162:	7820      	ldrb	r0, [r4, #0]
 800b164:	f7ff ffa9 	bl	800b0ba <__hexdig_fun>
 800b168:	1e07      	subs	r7, r0, #0
 800b16a:	d1f9      	bne.n	800b160 <__gethex+0x7c>
 800b16c:	2201      	movs	r2, #1
 800b16e:	0020      	movs	r0, r4
 800b170:	4990      	ldr	r1, [pc, #576]	@ (800b3b4 <__gethex+0x2d0>)
 800b172:	f7fe ffd7 	bl	800a124 <strncmp>
 800b176:	2800      	cmp	r0, #0
 800b178:	d10d      	bne.n	800b196 <__gethex+0xb2>
 800b17a:	2d00      	cmp	r5, #0
 800b17c:	d106      	bne.n	800b18c <__gethex+0xa8>
 800b17e:	3401      	adds	r4, #1
 800b180:	0025      	movs	r5, r4
 800b182:	7820      	ldrb	r0, [r4, #0]
 800b184:	f7ff ff99 	bl	800b0ba <__hexdig_fun>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d102      	bne.n	800b192 <__gethex+0xae>
 800b18c:	1b2d      	subs	r5, r5, r4
 800b18e:	00af      	lsls	r7, r5, #2
 800b190:	e003      	b.n	800b19a <__gethex+0xb6>
 800b192:	3401      	adds	r4, #1
 800b194:	e7f5      	b.n	800b182 <__gethex+0x9e>
 800b196:	2d00      	cmp	r5, #0
 800b198:	d1f8      	bne.n	800b18c <__gethex+0xa8>
 800b19a:	2220      	movs	r2, #32
 800b19c:	7823      	ldrb	r3, [r4, #0]
 800b19e:	0026      	movs	r6, r4
 800b1a0:	4393      	bics	r3, r2
 800b1a2:	2b50      	cmp	r3, #80	@ 0x50
 800b1a4:	d11d      	bne.n	800b1e2 <__gethex+0xfe>
 800b1a6:	7863      	ldrb	r3, [r4, #1]
 800b1a8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b1aa:	d02d      	beq.n	800b208 <__gethex+0x124>
 800b1ac:	2b2d      	cmp	r3, #45	@ 0x2d
 800b1ae:	d02f      	beq.n	800b210 <__gethex+0x12c>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	1c66      	adds	r6, r4, #1
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	7830      	ldrb	r0, [r6, #0]
 800b1b8:	f7ff ff7f 	bl	800b0ba <__hexdig_fun>
 800b1bc:	1e43      	subs	r3, r0, #1
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	0005      	movs	r5, r0
 800b1c2:	2b18      	cmp	r3, #24
 800b1c4:	d82a      	bhi.n	800b21c <__gethex+0x138>
 800b1c6:	7870      	ldrb	r0, [r6, #1]
 800b1c8:	f7ff ff77 	bl	800b0ba <__hexdig_fun>
 800b1cc:	1e43      	subs	r3, r0, #1
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	3d10      	subs	r5, #16
 800b1d4:	2b18      	cmp	r3, #24
 800b1d6:	d91d      	bls.n	800b214 <__gethex+0x130>
 800b1d8:	9b04      	ldr	r3, [sp, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d000      	beq.n	800b1e0 <__gethex+0xfc>
 800b1de:	426d      	negs	r5, r5
 800b1e0:	197f      	adds	r7, r7, r5
 800b1e2:	9b06      	ldr	r3, [sp, #24]
 800b1e4:	601e      	str	r6, [r3, #0]
 800b1e6:	9b02      	ldr	r3, [sp, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d019      	beq.n	800b220 <__gethex+0x13c>
 800b1ec:	9b05      	ldr	r3, [sp, #20]
 800b1ee:	2606      	movs	r6, #6
 800b1f0:	425a      	negs	r2, r3
 800b1f2:	4153      	adcs	r3, r2
 800b1f4:	425b      	negs	r3, r3
 800b1f6:	401e      	ands	r6, r3
 800b1f8:	0030      	movs	r0, r6
 800b1fa:	b009      	add	sp, #36	@ 0x24
 800b1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1fe:	2301      	movs	r3, #1
 800b200:	2700      	movs	r7, #0
 800b202:	9c00      	ldr	r4, [sp, #0]
 800b204:	9302      	str	r3, [sp, #8]
 800b206:	e7c8      	b.n	800b19a <__gethex+0xb6>
 800b208:	2300      	movs	r3, #0
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	1ca6      	adds	r6, r4, #2
 800b20e:	e7d2      	b.n	800b1b6 <__gethex+0xd2>
 800b210:	2301      	movs	r3, #1
 800b212:	e7fa      	b.n	800b20a <__gethex+0x126>
 800b214:	230a      	movs	r3, #10
 800b216:	435d      	muls	r5, r3
 800b218:	182d      	adds	r5, r5, r0
 800b21a:	e7d4      	b.n	800b1c6 <__gethex+0xe2>
 800b21c:	0026      	movs	r6, r4
 800b21e:	e7e0      	b.n	800b1e2 <__gethex+0xfe>
 800b220:	9b00      	ldr	r3, [sp, #0]
 800b222:	9902      	ldr	r1, [sp, #8]
 800b224:	1ae3      	subs	r3, r4, r3
 800b226:	3b01      	subs	r3, #1
 800b228:	2b07      	cmp	r3, #7
 800b22a:	dc0a      	bgt.n	800b242 <__gethex+0x15e>
 800b22c:	9803      	ldr	r0, [sp, #12]
 800b22e:	f000 fb19 	bl	800b864 <_Balloc>
 800b232:	1e05      	subs	r5, r0, #0
 800b234:	d108      	bne.n	800b248 <__gethex+0x164>
 800b236:	002a      	movs	r2, r5
 800b238:	21e4      	movs	r1, #228	@ 0xe4
 800b23a:	4b5f      	ldr	r3, [pc, #380]	@ (800b3b8 <__gethex+0x2d4>)
 800b23c:	485f      	ldr	r0, [pc, #380]	@ (800b3bc <__gethex+0x2d8>)
 800b23e:	f001 fa7f 	bl	800c740 <__assert_func>
 800b242:	3101      	adds	r1, #1
 800b244:	105b      	asrs	r3, r3, #1
 800b246:	e7ef      	b.n	800b228 <__gethex+0x144>
 800b248:	0003      	movs	r3, r0
 800b24a:	3314      	adds	r3, #20
 800b24c:	9302      	str	r3, [sp, #8]
 800b24e:	9305      	str	r3, [sp, #20]
 800b250:	2300      	movs	r3, #0
 800b252:	001e      	movs	r6, r3
 800b254:	9304      	str	r3, [sp, #16]
 800b256:	9b00      	ldr	r3, [sp, #0]
 800b258:	42a3      	cmp	r3, r4
 800b25a:	d338      	bcc.n	800b2ce <__gethex+0x1ea>
 800b25c:	9c05      	ldr	r4, [sp, #20]
 800b25e:	9b02      	ldr	r3, [sp, #8]
 800b260:	c440      	stmia	r4!, {r6}
 800b262:	1ae4      	subs	r4, r4, r3
 800b264:	10a4      	asrs	r4, r4, #2
 800b266:	0030      	movs	r0, r6
 800b268:	612c      	str	r4, [r5, #16]
 800b26a:	f000 fbf3 	bl	800ba54 <__hi0bits>
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	0164      	lsls	r4, r4, #5
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	1a26      	subs	r6, r4, r0
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	429e      	cmp	r6, r3
 800b27a:	dd52      	ble.n	800b322 <__gethex+0x23e>
 800b27c:	1af6      	subs	r6, r6, r3
 800b27e:	0031      	movs	r1, r6
 800b280:	0028      	movs	r0, r5
 800b282:	f000 ff96 	bl	800c1b2 <__any_on>
 800b286:	1e04      	subs	r4, r0, #0
 800b288:	d00f      	beq.n	800b2aa <__gethex+0x1c6>
 800b28a:	2401      	movs	r4, #1
 800b28c:	231f      	movs	r3, #31
 800b28e:	0020      	movs	r0, r4
 800b290:	1e72      	subs	r2, r6, #1
 800b292:	4013      	ands	r3, r2
 800b294:	4098      	lsls	r0, r3
 800b296:	0003      	movs	r3, r0
 800b298:	1151      	asrs	r1, r2, #5
 800b29a:	9802      	ldr	r0, [sp, #8]
 800b29c:	0089      	lsls	r1, r1, #2
 800b29e:	5809      	ldr	r1, [r1, r0]
 800b2a0:	4219      	tst	r1, r3
 800b2a2:	d002      	beq.n	800b2aa <__gethex+0x1c6>
 800b2a4:	42a2      	cmp	r2, r4
 800b2a6:	dc34      	bgt.n	800b312 <__gethex+0x22e>
 800b2a8:	2402      	movs	r4, #2
 800b2aa:	0031      	movs	r1, r6
 800b2ac:	0028      	movs	r0, r5
 800b2ae:	f7ff feb1 	bl	800b014 <rshift>
 800b2b2:	19bf      	adds	r7, r7, r6
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	42bb      	cmp	r3, r7
 800b2ba:	da42      	bge.n	800b342 <__gethex+0x25e>
 800b2bc:	0029      	movs	r1, r5
 800b2be:	9803      	ldr	r0, [sp, #12]
 800b2c0:	f000 fb14 	bl	800b8ec <_Bfree>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2c8:	26a3      	movs	r6, #163	@ 0xa3
 800b2ca:	6013      	str	r3, [r2, #0]
 800b2cc:	e794      	b.n	800b1f8 <__gethex+0x114>
 800b2ce:	3c01      	subs	r4, #1
 800b2d0:	7823      	ldrb	r3, [r4, #0]
 800b2d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2d4:	d012      	beq.n	800b2fc <__gethex+0x218>
 800b2d6:	9b04      	ldr	r3, [sp, #16]
 800b2d8:	2b20      	cmp	r3, #32
 800b2da:	d104      	bne.n	800b2e6 <__gethex+0x202>
 800b2dc:	9b05      	ldr	r3, [sp, #20]
 800b2de:	c340      	stmia	r3!, {r6}
 800b2e0:	2600      	movs	r6, #0
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	9604      	str	r6, [sp, #16]
 800b2e6:	7820      	ldrb	r0, [r4, #0]
 800b2e8:	f7ff fee7 	bl	800b0ba <__hexdig_fun>
 800b2ec:	230f      	movs	r3, #15
 800b2ee:	4018      	ands	r0, r3
 800b2f0:	9b04      	ldr	r3, [sp, #16]
 800b2f2:	4098      	lsls	r0, r3
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	4306      	orrs	r6, r0
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	e7ac      	b.n	800b256 <__gethex+0x172>
 800b2fc:	9b00      	ldr	r3, [sp, #0]
 800b2fe:	42a3      	cmp	r3, r4
 800b300:	d8e9      	bhi.n	800b2d6 <__gethex+0x1f2>
 800b302:	2201      	movs	r2, #1
 800b304:	0020      	movs	r0, r4
 800b306:	492b      	ldr	r1, [pc, #172]	@ (800b3b4 <__gethex+0x2d0>)
 800b308:	f7fe ff0c 	bl	800a124 <strncmp>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d1e2      	bne.n	800b2d6 <__gethex+0x1f2>
 800b310:	e7a1      	b.n	800b256 <__gethex+0x172>
 800b312:	0028      	movs	r0, r5
 800b314:	1eb1      	subs	r1, r6, #2
 800b316:	f000 ff4c 	bl	800c1b2 <__any_on>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d0c4      	beq.n	800b2a8 <__gethex+0x1c4>
 800b31e:	2403      	movs	r4, #3
 800b320:	e7c3      	b.n	800b2aa <__gethex+0x1c6>
 800b322:	9b00      	ldr	r3, [sp, #0]
 800b324:	2400      	movs	r4, #0
 800b326:	429e      	cmp	r6, r3
 800b328:	dac4      	bge.n	800b2b4 <__gethex+0x1d0>
 800b32a:	1b9e      	subs	r6, r3, r6
 800b32c:	0029      	movs	r1, r5
 800b32e:	0032      	movs	r2, r6
 800b330:	9803      	ldr	r0, [sp, #12]
 800b332:	f000 fd05 	bl	800bd40 <__lshift>
 800b336:	0003      	movs	r3, r0
 800b338:	3314      	adds	r3, #20
 800b33a:	0005      	movs	r5, r0
 800b33c:	1bbf      	subs	r7, r7, r6
 800b33e:	9302      	str	r3, [sp, #8]
 800b340:	e7b8      	b.n	800b2b4 <__gethex+0x1d0>
 800b342:	9b01      	ldr	r3, [sp, #4]
 800b344:	685e      	ldr	r6, [r3, #4]
 800b346:	42be      	cmp	r6, r7
 800b348:	dd6f      	ble.n	800b42a <__gethex+0x346>
 800b34a:	9b00      	ldr	r3, [sp, #0]
 800b34c:	1bf6      	subs	r6, r6, r7
 800b34e:	42b3      	cmp	r3, r6
 800b350:	dc36      	bgt.n	800b3c0 <__gethex+0x2dc>
 800b352:	9b01      	ldr	r3, [sp, #4]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	2b02      	cmp	r3, #2
 800b358:	d024      	beq.n	800b3a4 <__gethex+0x2c0>
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d026      	beq.n	800b3ac <__gethex+0x2c8>
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d117      	bne.n	800b392 <__gethex+0x2ae>
 800b362:	9b00      	ldr	r3, [sp, #0]
 800b364:	42b3      	cmp	r3, r6
 800b366:	d114      	bne.n	800b392 <__gethex+0x2ae>
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d10b      	bne.n	800b384 <__gethex+0x2a0>
 800b36c:	9b01      	ldr	r3, [sp, #4]
 800b36e:	9a07      	ldr	r2, [sp, #28]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	2662      	movs	r6, #98	@ 0x62
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	2301      	movs	r3, #1
 800b378:	9a02      	ldr	r2, [sp, #8]
 800b37a:	612b      	str	r3, [r5, #16]
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b380:	601d      	str	r5, [r3, #0]
 800b382:	e739      	b.n	800b1f8 <__gethex+0x114>
 800b384:	9900      	ldr	r1, [sp, #0]
 800b386:	0028      	movs	r0, r5
 800b388:	3901      	subs	r1, #1
 800b38a:	f000 ff12 	bl	800c1b2 <__any_on>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d1ec      	bne.n	800b36c <__gethex+0x288>
 800b392:	0029      	movs	r1, r5
 800b394:	9803      	ldr	r0, [sp, #12]
 800b396:	f000 faa9 	bl	800b8ec <_Bfree>
 800b39a:	2300      	movs	r3, #0
 800b39c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b39e:	2650      	movs	r6, #80	@ 0x50
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	e729      	b.n	800b1f8 <__gethex+0x114>
 800b3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1f3      	bne.n	800b392 <__gethex+0x2ae>
 800b3aa:	e7df      	b.n	800b36c <__gethex+0x288>
 800b3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1dc      	bne.n	800b36c <__gethex+0x288>
 800b3b2:	e7ee      	b.n	800b392 <__gethex+0x2ae>
 800b3b4:	0800ce28 	.word	0x0800ce28
 800b3b8:	0800d039 	.word	0x0800d039
 800b3bc:	0800d04a 	.word	0x0800d04a
 800b3c0:	1e77      	subs	r7, r6, #1
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	d12f      	bne.n	800b426 <__gethex+0x342>
 800b3c6:	2f00      	cmp	r7, #0
 800b3c8:	d004      	beq.n	800b3d4 <__gethex+0x2f0>
 800b3ca:	0039      	movs	r1, r7
 800b3cc:	0028      	movs	r0, r5
 800b3ce:	f000 fef0 	bl	800c1b2 <__any_on>
 800b3d2:	0004      	movs	r4, r0
 800b3d4:	231f      	movs	r3, #31
 800b3d6:	117a      	asrs	r2, r7, #5
 800b3d8:	401f      	ands	r7, r3
 800b3da:	3b1e      	subs	r3, #30
 800b3dc:	40bb      	lsls	r3, r7
 800b3de:	9902      	ldr	r1, [sp, #8]
 800b3e0:	0092      	lsls	r2, r2, #2
 800b3e2:	5852      	ldr	r2, [r2, r1]
 800b3e4:	421a      	tst	r2, r3
 800b3e6:	d001      	beq.n	800b3ec <__gethex+0x308>
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	431c      	orrs	r4, r3
 800b3ec:	9b00      	ldr	r3, [sp, #0]
 800b3ee:	0031      	movs	r1, r6
 800b3f0:	1b9b      	subs	r3, r3, r6
 800b3f2:	2602      	movs	r6, #2
 800b3f4:	0028      	movs	r0, r5
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	f7ff fe0c 	bl	800b014 <rshift>
 800b3fc:	9b01      	ldr	r3, [sp, #4]
 800b3fe:	685f      	ldr	r7, [r3, #4]
 800b400:	2c00      	cmp	r4, #0
 800b402:	d03f      	beq.n	800b484 <__gethex+0x3a0>
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d010      	beq.n	800b42e <__gethex+0x34a>
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	d012      	beq.n	800b436 <__gethex+0x352>
 800b410:	2b01      	cmp	r3, #1
 800b412:	d106      	bne.n	800b422 <__gethex+0x33e>
 800b414:	07a2      	lsls	r2, r4, #30
 800b416:	d504      	bpl.n	800b422 <__gethex+0x33e>
 800b418:	9a02      	ldr	r2, [sp, #8]
 800b41a:	6812      	ldr	r2, [r2, #0]
 800b41c:	4314      	orrs	r4, r2
 800b41e:	421c      	tst	r4, r3
 800b420:	d10c      	bne.n	800b43c <__gethex+0x358>
 800b422:	2310      	movs	r3, #16
 800b424:	e02d      	b.n	800b482 <__gethex+0x39e>
 800b426:	2401      	movs	r4, #1
 800b428:	e7d4      	b.n	800b3d4 <__gethex+0x2f0>
 800b42a:	2601      	movs	r6, #1
 800b42c:	e7e8      	b.n	800b400 <__gethex+0x31c>
 800b42e:	2301      	movs	r3, #1
 800b430:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b432:	1a9b      	subs	r3, r3, r2
 800b434:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d0f2      	beq.n	800b422 <__gethex+0x33e>
 800b43c:	692b      	ldr	r3, [r5, #16]
 800b43e:	2000      	movs	r0, #0
 800b440:	9302      	str	r3, [sp, #8]
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	9304      	str	r3, [sp, #16]
 800b446:	002b      	movs	r3, r5
 800b448:	9a04      	ldr	r2, [sp, #16]
 800b44a:	3314      	adds	r3, #20
 800b44c:	1899      	adds	r1, r3, r2
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	1c54      	adds	r4, r2, #1
 800b452:	d01c      	beq.n	800b48e <__gethex+0x3aa>
 800b454:	3201      	adds	r2, #1
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	002b      	movs	r3, r5
 800b45a:	3314      	adds	r3, #20
 800b45c:	2e02      	cmp	r6, #2
 800b45e:	d13f      	bne.n	800b4e0 <__gethex+0x3fc>
 800b460:	9a01      	ldr	r2, [sp, #4]
 800b462:	9900      	ldr	r1, [sp, #0]
 800b464:	6812      	ldr	r2, [r2, #0]
 800b466:	3a01      	subs	r2, #1
 800b468:	428a      	cmp	r2, r1
 800b46a:	d109      	bne.n	800b480 <__gethex+0x39c>
 800b46c:	000a      	movs	r2, r1
 800b46e:	201f      	movs	r0, #31
 800b470:	4010      	ands	r0, r2
 800b472:	2201      	movs	r2, #1
 800b474:	4082      	lsls	r2, r0
 800b476:	1149      	asrs	r1, r1, #5
 800b478:	0089      	lsls	r1, r1, #2
 800b47a:	58cb      	ldr	r3, [r1, r3]
 800b47c:	4213      	tst	r3, r2
 800b47e:	d13d      	bne.n	800b4fc <__gethex+0x418>
 800b480:	2320      	movs	r3, #32
 800b482:	431e      	orrs	r6, r3
 800b484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b486:	601d      	str	r5, [r3, #0]
 800b488:	9b07      	ldr	r3, [sp, #28]
 800b48a:	601f      	str	r7, [r3, #0]
 800b48c:	e6b4      	b.n	800b1f8 <__gethex+0x114>
 800b48e:	c301      	stmia	r3!, {r0}
 800b490:	4299      	cmp	r1, r3
 800b492:	d8dc      	bhi.n	800b44e <__gethex+0x36a>
 800b494:	68ab      	ldr	r3, [r5, #8]
 800b496:	9a02      	ldr	r2, [sp, #8]
 800b498:	429a      	cmp	r2, r3
 800b49a:	db18      	blt.n	800b4ce <__gethex+0x3ea>
 800b49c:	6869      	ldr	r1, [r5, #4]
 800b49e:	9803      	ldr	r0, [sp, #12]
 800b4a0:	3101      	adds	r1, #1
 800b4a2:	f000 f9df 	bl	800b864 <_Balloc>
 800b4a6:	1e04      	subs	r4, r0, #0
 800b4a8:	d104      	bne.n	800b4b4 <__gethex+0x3d0>
 800b4aa:	0022      	movs	r2, r4
 800b4ac:	2184      	movs	r1, #132	@ 0x84
 800b4ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b524 <__gethex+0x440>)
 800b4b0:	481d      	ldr	r0, [pc, #116]	@ (800b528 <__gethex+0x444>)
 800b4b2:	e6c4      	b.n	800b23e <__gethex+0x15a>
 800b4b4:	0029      	movs	r1, r5
 800b4b6:	692a      	ldr	r2, [r5, #16]
 800b4b8:	310c      	adds	r1, #12
 800b4ba:	3202      	adds	r2, #2
 800b4bc:	0092      	lsls	r2, r2, #2
 800b4be:	300c      	adds	r0, #12
 800b4c0:	f7fe fecc 	bl	800a25c <memcpy>
 800b4c4:	0029      	movs	r1, r5
 800b4c6:	9803      	ldr	r0, [sp, #12]
 800b4c8:	f000 fa10 	bl	800b8ec <_Bfree>
 800b4cc:	0025      	movs	r5, r4
 800b4ce:	692b      	ldr	r3, [r5, #16]
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	612a      	str	r2, [r5, #16]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	18eb      	adds	r3, r5, r3
 800b4dc:	605a      	str	r2, [r3, #4]
 800b4de:	e7bb      	b.n	800b458 <__gethex+0x374>
 800b4e0:	692a      	ldr	r2, [r5, #16]
 800b4e2:	9902      	ldr	r1, [sp, #8]
 800b4e4:	428a      	cmp	r2, r1
 800b4e6:	dd0b      	ble.n	800b500 <__gethex+0x41c>
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	0028      	movs	r0, r5
 800b4ec:	f7ff fd92 	bl	800b014 <rshift>
 800b4f0:	9b01      	ldr	r3, [sp, #4]
 800b4f2:	3701      	adds	r7, #1
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	42bb      	cmp	r3, r7
 800b4f8:	da00      	bge.n	800b4fc <__gethex+0x418>
 800b4fa:	e6df      	b.n	800b2bc <__gethex+0x1d8>
 800b4fc:	2601      	movs	r6, #1
 800b4fe:	e7bf      	b.n	800b480 <__gethex+0x39c>
 800b500:	221f      	movs	r2, #31
 800b502:	9c00      	ldr	r4, [sp, #0]
 800b504:	9900      	ldr	r1, [sp, #0]
 800b506:	4014      	ands	r4, r2
 800b508:	4211      	tst	r1, r2
 800b50a:	d0f7      	beq.n	800b4fc <__gethex+0x418>
 800b50c:	9a04      	ldr	r2, [sp, #16]
 800b50e:	189b      	adds	r3, r3, r2
 800b510:	3b04      	subs	r3, #4
 800b512:	6818      	ldr	r0, [r3, #0]
 800b514:	f000 fa9e 	bl	800ba54 <__hi0bits>
 800b518:	2320      	movs	r3, #32
 800b51a:	1b1b      	subs	r3, r3, r4
 800b51c:	4298      	cmp	r0, r3
 800b51e:	dbe3      	blt.n	800b4e8 <__gethex+0x404>
 800b520:	e7ec      	b.n	800b4fc <__gethex+0x418>
 800b522:	46c0      	nop			@ (mov r8, r8)
 800b524:	0800d039 	.word	0x0800d039
 800b528:	0800d04a 	.word	0x0800d04a

0800b52c <L_shift>:
 800b52c:	2308      	movs	r3, #8
 800b52e:	b570      	push	{r4, r5, r6, lr}
 800b530:	2520      	movs	r5, #32
 800b532:	1a9a      	subs	r2, r3, r2
 800b534:	0092      	lsls	r2, r2, #2
 800b536:	1aad      	subs	r5, r5, r2
 800b538:	6843      	ldr	r3, [r0, #4]
 800b53a:	6804      	ldr	r4, [r0, #0]
 800b53c:	001e      	movs	r6, r3
 800b53e:	40ae      	lsls	r6, r5
 800b540:	40d3      	lsrs	r3, r2
 800b542:	4334      	orrs	r4, r6
 800b544:	6004      	str	r4, [r0, #0]
 800b546:	6043      	str	r3, [r0, #4]
 800b548:	3004      	adds	r0, #4
 800b54a:	4288      	cmp	r0, r1
 800b54c:	d3f4      	bcc.n	800b538 <L_shift+0xc>
 800b54e:	bd70      	pop	{r4, r5, r6, pc}

0800b550 <__match>:
 800b550:	b530      	push	{r4, r5, lr}
 800b552:	6803      	ldr	r3, [r0, #0]
 800b554:	780c      	ldrb	r4, [r1, #0]
 800b556:	3301      	adds	r3, #1
 800b558:	2c00      	cmp	r4, #0
 800b55a:	d102      	bne.n	800b562 <__match+0x12>
 800b55c:	6003      	str	r3, [r0, #0]
 800b55e:	2001      	movs	r0, #1
 800b560:	bd30      	pop	{r4, r5, pc}
 800b562:	781a      	ldrb	r2, [r3, #0]
 800b564:	0015      	movs	r5, r2
 800b566:	3d41      	subs	r5, #65	@ 0x41
 800b568:	2d19      	cmp	r5, #25
 800b56a:	d800      	bhi.n	800b56e <__match+0x1e>
 800b56c:	3220      	adds	r2, #32
 800b56e:	3101      	adds	r1, #1
 800b570:	42a2      	cmp	r2, r4
 800b572:	d0ef      	beq.n	800b554 <__match+0x4>
 800b574:	2000      	movs	r0, #0
 800b576:	e7f3      	b.n	800b560 <__match+0x10>

0800b578 <__hexnan>:
 800b578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b57a:	680b      	ldr	r3, [r1, #0]
 800b57c:	b08b      	sub	sp, #44	@ 0x2c
 800b57e:	9201      	str	r2, [sp, #4]
 800b580:	9901      	ldr	r1, [sp, #4]
 800b582:	115a      	asrs	r2, r3, #5
 800b584:	0092      	lsls	r2, r2, #2
 800b586:	188a      	adds	r2, r1, r2
 800b588:	9202      	str	r2, [sp, #8]
 800b58a:	0019      	movs	r1, r3
 800b58c:	221f      	movs	r2, #31
 800b58e:	4011      	ands	r1, r2
 800b590:	9008      	str	r0, [sp, #32]
 800b592:	9106      	str	r1, [sp, #24]
 800b594:	4213      	tst	r3, r2
 800b596:	d002      	beq.n	800b59e <__hexnan+0x26>
 800b598:	9b02      	ldr	r3, [sp, #8]
 800b59a:	3304      	adds	r3, #4
 800b59c:	9302      	str	r3, [sp, #8]
 800b59e:	9b02      	ldr	r3, [sp, #8]
 800b5a0:	2500      	movs	r5, #0
 800b5a2:	1f1f      	subs	r7, r3, #4
 800b5a4:	003e      	movs	r6, r7
 800b5a6:	003c      	movs	r4, r7
 800b5a8:	9b08      	ldr	r3, [sp, #32]
 800b5aa:	603d      	str	r5, [r7, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	9507      	str	r5, [sp, #28]
 800b5b0:	9305      	str	r3, [sp, #20]
 800b5b2:	9503      	str	r5, [sp, #12]
 800b5b4:	9b05      	ldr	r3, [sp, #20]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ba:	9b05      	ldr	r3, [sp, #20]
 800b5bc:	785b      	ldrb	r3, [r3, #1]
 800b5be:	9304      	str	r3, [sp, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d028      	beq.n	800b616 <__hexnan+0x9e>
 800b5c4:	9804      	ldr	r0, [sp, #16]
 800b5c6:	f7ff fd78 	bl	800b0ba <__hexdig_fun>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d155      	bne.n	800b67a <__hexnan+0x102>
 800b5ce:	9b04      	ldr	r3, [sp, #16]
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	d819      	bhi.n	800b608 <__hexnan+0x90>
 800b5d4:	9b03      	ldr	r3, [sp, #12]
 800b5d6:	9a07      	ldr	r2, [sp, #28]
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	dd12      	ble.n	800b602 <__hexnan+0x8a>
 800b5dc:	42b4      	cmp	r4, r6
 800b5de:	d206      	bcs.n	800b5ee <__hexnan+0x76>
 800b5e0:	2d07      	cmp	r5, #7
 800b5e2:	dc04      	bgt.n	800b5ee <__hexnan+0x76>
 800b5e4:	002a      	movs	r2, r5
 800b5e6:	0031      	movs	r1, r6
 800b5e8:	0020      	movs	r0, r4
 800b5ea:	f7ff ff9f 	bl	800b52c <L_shift>
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	2508      	movs	r5, #8
 800b5f2:	429c      	cmp	r4, r3
 800b5f4:	d905      	bls.n	800b602 <__hexnan+0x8a>
 800b5f6:	1f26      	subs	r6, r4, #4
 800b5f8:	2500      	movs	r5, #0
 800b5fa:	0034      	movs	r4, r6
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	6035      	str	r5, [r6, #0]
 800b600:	9307      	str	r3, [sp, #28]
 800b602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b604:	9305      	str	r3, [sp, #20]
 800b606:	e7d5      	b.n	800b5b4 <__hexnan+0x3c>
 800b608:	9b04      	ldr	r3, [sp, #16]
 800b60a:	2b29      	cmp	r3, #41	@ 0x29
 800b60c:	d15a      	bne.n	800b6c4 <__hexnan+0x14c>
 800b60e:	9b05      	ldr	r3, [sp, #20]
 800b610:	9a08      	ldr	r2, [sp, #32]
 800b612:	3302      	adds	r3, #2
 800b614:	6013      	str	r3, [r2, #0]
 800b616:	9b03      	ldr	r3, [sp, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d053      	beq.n	800b6c4 <__hexnan+0x14c>
 800b61c:	42b4      	cmp	r4, r6
 800b61e:	d206      	bcs.n	800b62e <__hexnan+0xb6>
 800b620:	2d07      	cmp	r5, #7
 800b622:	dc04      	bgt.n	800b62e <__hexnan+0xb6>
 800b624:	002a      	movs	r2, r5
 800b626:	0031      	movs	r1, r6
 800b628:	0020      	movs	r0, r4
 800b62a:	f7ff ff7f 	bl	800b52c <L_shift>
 800b62e:	9b01      	ldr	r3, [sp, #4]
 800b630:	429c      	cmp	r4, r3
 800b632:	d936      	bls.n	800b6a2 <__hexnan+0x12a>
 800b634:	001a      	movs	r2, r3
 800b636:	0023      	movs	r3, r4
 800b638:	cb02      	ldmia	r3!, {r1}
 800b63a:	c202      	stmia	r2!, {r1}
 800b63c:	429f      	cmp	r7, r3
 800b63e:	d2fb      	bcs.n	800b638 <__hexnan+0xc0>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	1c61      	adds	r1, r4, #1
 800b644:	1eda      	subs	r2, r3, #3
 800b646:	2304      	movs	r3, #4
 800b648:	4291      	cmp	r1, r2
 800b64a:	d805      	bhi.n	800b658 <__hexnan+0xe0>
 800b64c:	9b02      	ldr	r3, [sp, #8]
 800b64e:	3b04      	subs	r3, #4
 800b650:	1b1b      	subs	r3, r3, r4
 800b652:	089b      	lsrs	r3, r3, #2
 800b654:	3301      	adds	r3, #1
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	9a01      	ldr	r2, [sp, #4]
 800b65a:	18d3      	adds	r3, r2, r3
 800b65c:	2200      	movs	r2, #0
 800b65e:	c304      	stmia	r3!, {r2}
 800b660:	429f      	cmp	r7, r3
 800b662:	d2fc      	bcs.n	800b65e <__hexnan+0xe6>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d104      	bne.n	800b674 <__hexnan+0xfc>
 800b66a:	9b01      	ldr	r3, [sp, #4]
 800b66c:	429f      	cmp	r7, r3
 800b66e:	d127      	bne.n	800b6c0 <__hexnan+0x148>
 800b670:	2301      	movs	r3, #1
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	2005      	movs	r0, #5
 800b676:	b00b      	add	sp, #44	@ 0x2c
 800b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	3501      	adds	r5, #1
 800b67e:	3301      	adds	r3, #1
 800b680:	9303      	str	r3, [sp, #12]
 800b682:	2d08      	cmp	r5, #8
 800b684:	dd06      	ble.n	800b694 <__hexnan+0x11c>
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	429c      	cmp	r4, r3
 800b68a:	d9ba      	bls.n	800b602 <__hexnan+0x8a>
 800b68c:	2300      	movs	r3, #0
 800b68e:	2501      	movs	r5, #1
 800b690:	3c04      	subs	r4, #4
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	220f      	movs	r2, #15
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	4010      	ands	r0, r2
 800b69a:	011b      	lsls	r3, r3, #4
 800b69c:	4303      	orrs	r3, r0
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	e7af      	b.n	800b602 <__hexnan+0x8a>
 800b6a2:	9b06      	ldr	r3, [sp, #24]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0dd      	beq.n	800b664 <__hexnan+0xec>
 800b6a8:	2320      	movs	r3, #32
 800b6aa:	9a06      	ldr	r2, [sp, #24]
 800b6ac:	9902      	ldr	r1, [sp, #8]
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	4252      	negs	r2, r2
 800b6b4:	40da      	lsrs	r2, r3
 800b6b6:	3904      	subs	r1, #4
 800b6b8:	680b      	ldr	r3, [r1, #0]
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	600b      	str	r3, [r1, #0]
 800b6be:	e7d1      	b.n	800b664 <__hexnan+0xec>
 800b6c0:	3f04      	subs	r7, #4
 800b6c2:	e7cf      	b.n	800b664 <__hexnan+0xec>
 800b6c4:	2004      	movs	r0, #4
 800b6c6:	e7d6      	b.n	800b676 <__hexnan+0xfe>

0800b6c8 <malloc>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	4b03      	ldr	r3, [pc, #12]	@ (800b6d8 <malloc+0x10>)
 800b6cc:	0001      	movs	r1, r0
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	f000 f826 	bl	800b720 <_malloc_r>
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	46c0      	nop			@ (mov r8, r8)
 800b6d8:	20000188 	.word	0x20000188

0800b6dc <sbrk_aligned>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	4e0f      	ldr	r6, [pc, #60]	@ (800b71c <sbrk_aligned+0x40>)
 800b6e0:	000d      	movs	r5, r1
 800b6e2:	6831      	ldr	r1, [r6, #0]
 800b6e4:	0004      	movs	r4, r0
 800b6e6:	2900      	cmp	r1, #0
 800b6e8:	d102      	bne.n	800b6f0 <sbrk_aligned+0x14>
 800b6ea:	f001 f817 	bl	800c71c <_sbrk_r>
 800b6ee:	6030      	str	r0, [r6, #0]
 800b6f0:	0029      	movs	r1, r5
 800b6f2:	0020      	movs	r0, r4
 800b6f4:	f001 f812 	bl	800c71c <_sbrk_r>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d103      	bne.n	800b704 <sbrk_aligned+0x28>
 800b6fc:	2501      	movs	r5, #1
 800b6fe:	426d      	negs	r5, r5
 800b700:	0028      	movs	r0, r5
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	2303      	movs	r3, #3
 800b706:	1cc5      	adds	r5, r0, #3
 800b708:	439d      	bics	r5, r3
 800b70a:	42a8      	cmp	r0, r5
 800b70c:	d0f8      	beq.n	800b700 <sbrk_aligned+0x24>
 800b70e:	1a29      	subs	r1, r5, r0
 800b710:	0020      	movs	r0, r4
 800b712:	f001 f803 	bl	800c71c <_sbrk_r>
 800b716:	3001      	adds	r0, #1
 800b718:	d1f2      	bne.n	800b700 <sbrk_aligned+0x24>
 800b71a:	e7ef      	b.n	800b6fc <sbrk_aligned+0x20>
 800b71c:	20000728 	.word	0x20000728

0800b720 <_malloc_r>:
 800b720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b722:	2203      	movs	r2, #3
 800b724:	1ccb      	adds	r3, r1, #3
 800b726:	4393      	bics	r3, r2
 800b728:	3308      	adds	r3, #8
 800b72a:	0005      	movs	r5, r0
 800b72c:	001f      	movs	r7, r3
 800b72e:	2b0c      	cmp	r3, #12
 800b730:	d234      	bcs.n	800b79c <_malloc_r+0x7c>
 800b732:	270c      	movs	r7, #12
 800b734:	42b9      	cmp	r1, r7
 800b736:	d833      	bhi.n	800b7a0 <_malloc_r+0x80>
 800b738:	0028      	movs	r0, r5
 800b73a:	f000 f883 	bl	800b844 <__malloc_lock>
 800b73e:	4e37      	ldr	r6, [pc, #220]	@ (800b81c <_malloc_r+0xfc>)
 800b740:	6833      	ldr	r3, [r6, #0]
 800b742:	001c      	movs	r4, r3
 800b744:	2c00      	cmp	r4, #0
 800b746:	d12f      	bne.n	800b7a8 <_malloc_r+0x88>
 800b748:	0039      	movs	r1, r7
 800b74a:	0028      	movs	r0, r5
 800b74c:	f7ff ffc6 	bl	800b6dc <sbrk_aligned>
 800b750:	0004      	movs	r4, r0
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	d15f      	bne.n	800b816 <_malloc_r+0xf6>
 800b756:	6834      	ldr	r4, [r6, #0]
 800b758:	9400      	str	r4, [sp, #0]
 800b75a:	9b00      	ldr	r3, [sp, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d14a      	bne.n	800b7f6 <_malloc_r+0xd6>
 800b760:	2c00      	cmp	r4, #0
 800b762:	d052      	beq.n	800b80a <_malloc_r+0xea>
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	0028      	movs	r0, r5
 800b768:	18e3      	adds	r3, r4, r3
 800b76a:	9900      	ldr	r1, [sp, #0]
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	f000 ffd5 	bl	800c71c <_sbrk_r>
 800b772:	9b01      	ldr	r3, [sp, #4]
 800b774:	4283      	cmp	r3, r0
 800b776:	d148      	bne.n	800b80a <_malloc_r+0xea>
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	0028      	movs	r0, r5
 800b77c:	1aff      	subs	r7, r7, r3
 800b77e:	0039      	movs	r1, r7
 800b780:	f7ff ffac 	bl	800b6dc <sbrk_aligned>
 800b784:	3001      	adds	r0, #1
 800b786:	d040      	beq.n	800b80a <_malloc_r+0xea>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	19db      	adds	r3, r3, r7
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	6833      	ldr	r3, [r6, #0]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	2a00      	cmp	r2, #0
 800b794:	d133      	bne.n	800b7fe <_malloc_r+0xde>
 800b796:	9b00      	ldr	r3, [sp, #0]
 800b798:	6033      	str	r3, [r6, #0]
 800b79a:	e019      	b.n	800b7d0 <_malloc_r+0xb0>
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dac9      	bge.n	800b734 <_malloc_r+0x14>
 800b7a0:	230c      	movs	r3, #12
 800b7a2:	602b      	str	r3, [r5, #0]
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7a8:	6821      	ldr	r1, [r4, #0]
 800b7aa:	1bc9      	subs	r1, r1, r7
 800b7ac:	d420      	bmi.n	800b7f0 <_malloc_r+0xd0>
 800b7ae:	290b      	cmp	r1, #11
 800b7b0:	d90a      	bls.n	800b7c8 <_malloc_r+0xa8>
 800b7b2:	19e2      	adds	r2, r4, r7
 800b7b4:	6027      	str	r7, [r4, #0]
 800b7b6:	42a3      	cmp	r3, r4
 800b7b8:	d104      	bne.n	800b7c4 <_malloc_r+0xa4>
 800b7ba:	6032      	str	r2, [r6, #0]
 800b7bc:	6863      	ldr	r3, [r4, #4]
 800b7be:	6011      	str	r1, [r2, #0]
 800b7c0:	6053      	str	r3, [r2, #4]
 800b7c2:	e005      	b.n	800b7d0 <_malloc_r+0xb0>
 800b7c4:	605a      	str	r2, [r3, #4]
 800b7c6:	e7f9      	b.n	800b7bc <_malloc_r+0x9c>
 800b7c8:	6862      	ldr	r2, [r4, #4]
 800b7ca:	42a3      	cmp	r3, r4
 800b7cc:	d10e      	bne.n	800b7ec <_malloc_r+0xcc>
 800b7ce:	6032      	str	r2, [r6, #0]
 800b7d0:	0028      	movs	r0, r5
 800b7d2:	f000 f83f 	bl	800b854 <__malloc_unlock>
 800b7d6:	0020      	movs	r0, r4
 800b7d8:	2207      	movs	r2, #7
 800b7da:	300b      	adds	r0, #11
 800b7dc:	1d23      	adds	r3, r4, #4
 800b7de:	4390      	bics	r0, r2
 800b7e0:	1ac2      	subs	r2, r0, r3
 800b7e2:	4298      	cmp	r0, r3
 800b7e4:	d0df      	beq.n	800b7a6 <_malloc_r+0x86>
 800b7e6:	1a1b      	subs	r3, r3, r0
 800b7e8:	50a3      	str	r3, [r4, r2]
 800b7ea:	e7dc      	b.n	800b7a6 <_malloc_r+0x86>
 800b7ec:	605a      	str	r2, [r3, #4]
 800b7ee:	e7ef      	b.n	800b7d0 <_malloc_r+0xb0>
 800b7f0:	0023      	movs	r3, r4
 800b7f2:	6864      	ldr	r4, [r4, #4]
 800b7f4:	e7a6      	b.n	800b744 <_malloc_r+0x24>
 800b7f6:	9c00      	ldr	r4, [sp, #0]
 800b7f8:	6863      	ldr	r3, [r4, #4]
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	e7ad      	b.n	800b75a <_malloc_r+0x3a>
 800b7fe:	001a      	movs	r2, r3
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	42a3      	cmp	r3, r4
 800b804:	d1fb      	bne.n	800b7fe <_malloc_r+0xde>
 800b806:	2300      	movs	r3, #0
 800b808:	e7da      	b.n	800b7c0 <_malloc_r+0xa0>
 800b80a:	230c      	movs	r3, #12
 800b80c:	0028      	movs	r0, r5
 800b80e:	602b      	str	r3, [r5, #0]
 800b810:	f000 f820 	bl	800b854 <__malloc_unlock>
 800b814:	e7c6      	b.n	800b7a4 <_malloc_r+0x84>
 800b816:	6007      	str	r7, [r0, #0]
 800b818:	e7da      	b.n	800b7d0 <_malloc_r+0xb0>
 800b81a:	46c0      	nop			@ (mov r8, r8)
 800b81c:	2000072c 	.word	0x2000072c

0800b820 <__ascii_mbtowc>:
 800b820:	b082      	sub	sp, #8
 800b822:	2900      	cmp	r1, #0
 800b824:	d100      	bne.n	800b828 <__ascii_mbtowc+0x8>
 800b826:	a901      	add	r1, sp, #4
 800b828:	1e10      	subs	r0, r2, #0
 800b82a:	d006      	beq.n	800b83a <__ascii_mbtowc+0x1a>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d006      	beq.n	800b83e <__ascii_mbtowc+0x1e>
 800b830:	7813      	ldrb	r3, [r2, #0]
 800b832:	600b      	str	r3, [r1, #0]
 800b834:	7810      	ldrb	r0, [r2, #0]
 800b836:	1e43      	subs	r3, r0, #1
 800b838:	4198      	sbcs	r0, r3
 800b83a:	b002      	add	sp, #8
 800b83c:	4770      	bx	lr
 800b83e:	2002      	movs	r0, #2
 800b840:	4240      	negs	r0, r0
 800b842:	e7fa      	b.n	800b83a <__ascii_mbtowc+0x1a>

0800b844 <__malloc_lock>:
 800b844:	b510      	push	{r4, lr}
 800b846:	4802      	ldr	r0, [pc, #8]	@ (800b850 <__malloc_lock+0xc>)
 800b848:	f7fe fcfb 	bl	800a242 <__retarget_lock_acquire_recursive>
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	46c0      	nop			@ (mov r8, r8)
 800b850:	20000724 	.word	0x20000724

0800b854 <__malloc_unlock>:
 800b854:	b510      	push	{r4, lr}
 800b856:	4802      	ldr	r0, [pc, #8]	@ (800b860 <__malloc_unlock+0xc>)
 800b858:	f7fe fcf4 	bl	800a244 <__retarget_lock_release_recursive>
 800b85c:	bd10      	pop	{r4, pc}
 800b85e:	46c0      	nop			@ (mov r8, r8)
 800b860:	20000724 	.word	0x20000724

0800b864 <_Balloc>:
 800b864:	b570      	push	{r4, r5, r6, lr}
 800b866:	69c5      	ldr	r5, [r0, #28]
 800b868:	0006      	movs	r6, r0
 800b86a:	000c      	movs	r4, r1
 800b86c:	2d00      	cmp	r5, #0
 800b86e:	d10e      	bne.n	800b88e <_Balloc+0x2a>
 800b870:	2010      	movs	r0, #16
 800b872:	f7ff ff29 	bl	800b6c8 <malloc>
 800b876:	1e02      	subs	r2, r0, #0
 800b878:	61f0      	str	r0, [r6, #28]
 800b87a:	d104      	bne.n	800b886 <_Balloc+0x22>
 800b87c:	216b      	movs	r1, #107	@ 0x6b
 800b87e:	4b19      	ldr	r3, [pc, #100]	@ (800b8e4 <_Balloc+0x80>)
 800b880:	4819      	ldr	r0, [pc, #100]	@ (800b8e8 <_Balloc+0x84>)
 800b882:	f000 ff5d 	bl	800c740 <__assert_func>
 800b886:	6045      	str	r5, [r0, #4]
 800b888:	6085      	str	r5, [r0, #8]
 800b88a:	6005      	str	r5, [r0, #0]
 800b88c:	60c5      	str	r5, [r0, #12]
 800b88e:	69f5      	ldr	r5, [r6, #28]
 800b890:	68eb      	ldr	r3, [r5, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d013      	beq.n	800b8be <_Balloc+0x5a>
 800b896:	69f3      	ldr	r3, [r6, #28]
 800b898:	00a2      	lsls	r2, r4, #2
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	189b      	adds	r3, r3, r2
 800b89e:	6818      	ldr	r0, [r3, #0]
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d118      	bne.n	800b8d6 <_Balloc+0x72>
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	000d      	movs	r5, r1
 800b8a8:	40a5      	lsls	r5, r4
 800b8aa:	1d6a      	adds	r2, r5, #5
 800b8ac:	0030      	movs	r0, r6
 800b8ae:	0092      	lsls	r2, r2, #2
 800b8b0:	f000 ff64 	bl	800c77c <_calloc_r>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d00c      	beq.n	800b8d2 <_Balloc+0x6e>
 800b8b8:	6044      	str	r4, [r0, #4]
 800b8ba:	6085      	str	r5, [r0, #8]
 800b8bc:	e00d      	b.n	800b8da <_Balloc+0x76>
 800b8be:	2221      	movs	r2, #33	@ 0x21
 800b8c0:	2104      	movs	r1, #4
 800b8c2:	0030      	movs	r0, r6
 800b8c4:	f000 ff5a 	bl	800c77c <_calloc_r>
 800b8c8:	69f3      	ldr	r3, [r6, #28]
 800b8ca:	60e8      	str	r0, [r5, #12]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1e1      	bne.n	800b896 <_Balloc+0x32>
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	bd70      	pop	{r4, r5, r6, pc}
 800b8d6:	6802      	ldr	r2, [r0, #0]
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	6103      	str	r3, [r0, #16]
 800b8de:	60c3      	str	r3, [r0, #12]
 800b8e0:	e7f8      	b.n	800b8d4 <_Balloc+0x70>
 800b8e2:	46c0      	nop			@ (mov r8, r8)
 800b8e4:	0800cfca 	.word	0x0800cfca
 800b8e8:	0800d0aa 	.word	0x0800d0aa

0800b8ec <_Bfree>:
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	69c6      	ldr	r6, [r0, #28]
 800b8f0:	0005      	movs	r5, r0
 800b8f2:	000c      	movs	r4, r1
 800b8f4:	2e00      	cmp	r6, #0
 800b8f6:	d10e      	bne.n	800b916 <_Bfree+0x2a>
 800b8f8:	2010      	movs	r0, #16
 800b8fa:	f7ff fee5 	bl	800b6c8 <malloc>
 800b8fe:	1e02      	subs	r2, r0, #0
 800b900:	61e8      	str	r0, [r5, #28]
 800b902:	d104      	bne.n	800b90e <_Bfree+0x22>
 800b904:	218f      	movs	r1, #143	@ 0x8f
 800b906:	4b09      	ldr	r3, [pc, #36]	@ (800b92c <_Bfree+0x40>)
 800b908:	4809      	ldr	r0, [pc, #36]	@ (800b930 <_Bfree+0x44>)
 800b90a:	f000 ff19 	bl	800c740 <__assert_func>
 800b90e:	6046      	str	r6, [r0, #4]
 800b910:	6086      	str	r6, [r0, #8]
 800b912:	6006      	str	r6, [r0, #0]
 800b914:	60c6      	str	r6, [r0, #12]
 800b916:	2c00      	cmp	r4, #0
 800b918:	d007      	beq.n	800b92a <_Bfree+0x3e>
 800b91a:	69eb      	ldr	r3, [r5, #28]
 800b91c:	6862      	ldr	r2, [r4, #4]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	0092      	lsls	r2, r2, #2
 800b922:	189b      	adds	r3, r3, r2
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	6022      	str	r2, [r4, #0]
 800b928:	601c      	str	r4, [r3, #0]
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	0800cfca 	.word	0x0800cfca
 800b930:	0800d0aa 	.word	0x0800d0aa

0800b934 <__multadd>:
 800b934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b936:	000f      	movs	r7, r1
 800b938:	9001      	str	r0, [sp, #4]
 800b93a:	000c      	movs	r4, r1
 800b93c:	001e      	movs	r6, r3
 800b93e:	2000      	movs	r0, #0
 800b940:	690d      	ldr	r5, [r1, #16]
 800b942:	3714      	adds	r7, #20
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	3001      	adds	r0, #1
 800b948:	b299      	uxth	r1, r3
 800b94a:	4351      	muls	r1, r2
 800b94c:	0c1b      	lsrs	r3, r3, #16
 800b94e:	4353      	muls	r3, r2
 800b950:	1989      	adds	r1, r1, r6
 800b952:	0c0e      	lsrs	r6, r1, #16
 800b954:	199b      	adds	r3, r3, r6
 800b956:	0c1e      	lsrs	r6, r3, #16
 800b958:	b289      	uxth	r1, r1
 800b95a:	041b      	lsls	r3, r3, #16
 800b95c:	185b      	adds	r3, r3, r1
 800b95e:	c708      	stmia	r7!, {r3}
 800b960:	4285      	cmp	r5, r0
 800b962:	dcef      	bgt.n	800b944 <__multadd+0x10>
 800b964:	2e00      	cmp	r6, #0
 800b966:	d022      	beq.n	800b9ae <__multadd+0x7a>
 800b968:	68a3      	ldr	r3, [r4, #8]
 800b96a:	42ab      	cmp	r3, r5
 800b96c:	dc19      	bgt.n	800b9a2 <__multadd+0x6e>
 800b96e:	6861      	ldr	r1, [r4, #4]
 800b970:	9801      	ldr	r0, [sp, #4]
 800b972:	3101      	adds	r1, #1
 800b974:	f7ff ff76 	bl	800b864 <_Balloc>
 800b978:	1e07      	subs	r7, r0, #0
 800b97a:	d105      	bne.n	800b988 <__multadd+0x54>
 800b97c:	003a      	movs	r2, r7
 800b97e:	21ba      	movs	r1, #186	@ 0xba
 800b980:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b4 <__multadd+0x80>)
 800b982:	480d      	ldr	r0, [pc, #52]	@ (800b9b8 <__multadd+0x84>)
 800b984:	f000 fedc 	bl	800c740 <__assert_func>
 800b988:	0021      	movs	r1, r4
 800b98a:	6922      	ldr	r2, [r4, #16]
 800b98c:	310c      	adds	r1, #12
 800b98e:	3202      	adds	r2, #2
 800b990:	0092      	lsls	r2, r2, #2
 800b992:	300c      	adds	r0, #12
 800b994:	f7fe fc62 	bl	800a25c <memcpy>
 800b998:	0021      	movs	r1, r4
 800b99a:	9801      	ldr	r0, [sp, #4]
 800b99c:	f7ff ffa6 	bl	800b8ec <_Bfree>
 800b9a0:	003c      	movs	r4, r7
 800b9a2:	1d2b      	adds	r3, r5, #4
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	18e3      	adds	r3, r4, r3
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	605e      	str	r6, [r3, #4]
 800b9ac:	6125      	str	r5, [r4, #16]
 800b9ae:	0020      	movs	r0, r4
 800b9b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b9b2:	46c0      	nop			@ (mov r8, r8)
 800b9b4:	0800d039 	.word	0x0800d039
 800b9b8:	0800d0aa 	.word	0x0800d0aa

0800b9bc <__s2b>:
 800b9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9be:	0007      	movs	r7, r0
 800b9c0:	0018      	movs	r0, r3
 800b9c2:	000c      	movs	r4, r1
 800b9c4:	3008      	adds	r0, #8
 800b9c6:	2109      	movs	r1, #9
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	0015      	movs	r5, r2
 800b9cc:	f7f4 fc3e 	bl	800024c <__divsi3>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4283      	cmp	r3, r0
 800b9d6:	db0a      	blt.n	800b9ee <__s2b+0x32>
 800b9d8:	0038      	movs	r0, r7
 800b9da:	f7ff ff43 	bl	800b864 <_Balloc>
 800b9de:	1e01      	subs	r1, r0, #0
 800b9e0:	d108      	bne.n	800b9f4 <__s2b+0x38>
 800b9e2:	000a      	movs	r2, r1
 800b9e4:	4b19      	ldr	r3, [pc, #100]	@ (800ba4c <__s2b+0x90>)
 800b9e6:	481a      	ldr	r0, [pc, #104]	@ (800ba50 <__s2b+0x94>)
 800b9e8:	31d3      	adds	r1, #211	@ 0xd3
 800b9ea:	f000 fea9 	bl	800c740 <__assert_func>
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	3101      	adds	r1, #1
 800b9f2:	e7ef      	b.n	800b9d4 <__s2b+0x18>
 800b9f4:	9b08      	ldr	r3, [sp, #32]
 800b9f6:	6143      	str	r3, [r0, #20]
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	6103      	str	r3, [r0, #16]
 800b9fc:	2d09      	cmp	r5, #9
 800b9fe:	dd18      	ble.n	800ba32 <__s2b+0x76>
 800ba00:	0023      	movs	r3, r4
 800ba02:	3309      	adds	r3, #9
 800ba04:	001e      	movs	r6, r3
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	1964      	adds	r4, r4, r5
 800ba0a:	7833      	ldrb	r3, [r6, #0]
 800ba0c:	220a      	movs	r2, #10
 800ba0e:	0038      	movs	r0, r7
 800ba10:	3b30      	subs	r3, #48	@ 0x30
 800ba12:	f7ff ff8f 	bl	800b934 <__multadd>
 800ba16:	3601      	adds	r6, #1
 800ba18:	0001      	movs	r1, r0
 800ba1a:	42a6      	cmp	r6, r4
 800ba1c:	d1f5      	bne.n	800ba0a <__s2b+0x4e>
 800ba1e:	002c      	movs	r4, r5
 800ba20:	9b00      	ldr	r3, [sp, #0]
 800ba22:	3c08      	subs	r4, #8
 800ba24:	191c      	adds	r4, r3, r4
 800ba26:	002e      	movs	r6, r5
 800ba28:	9b01      	ldr	r3, [sp, #4]
 800ba2a:	429e      	cmp	r6, r3
 800ba2c:	db04      	blt.n	800ba38 <__s2b+0x7c>
 800ba2e:	0008      	movs	r0, r1
 800ba30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba32:	2509      	movs	r5, #9
 800ba34:	340a      	adds	r4, #10
 800ba36:	e7f6      	b.n	800ba26 <__s2b+0x6a>
 800ba38:	1b63      	subs	r3, r4, r5
 800ba3a:	5d9b      	ldrb	r3, [r3, r6]
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	0038      	movs	r0, r7
 800ba40:	3b30      	subs	r3, #48	@ 0x30
 800ba42:	f7ff ff77 	bl	800b934 <__multadd>
 800ba46:	3601      	adds	r6, #1
 800ba48:	0001      	movs	r1, r0
 800ba4a:	e7ed      	b.n	800ba28 <__s2b+0x6c>
 800ba4c:	0800d039 	.word	0x0800d039
 800ba50:	0800d0aa 	.word	0x0800d0aa

0800ba54 <__hi0bits>:
 800ba54:	2280      	movs	r2, #128	@ 0x80
 800ba56:	0003      	movs	r3, r0
 800ba58:	0252      	lsls	r2, r2, #9
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d201      	bcs.n	800ba64 <__hi0bits+0x10>
 800ba60:	041b      	lsls	r3, r3, #16
 800ba62:	3010      	adds	r0, #16
 800ba64:	2280      	movs	r2, #128	@ 0x80
 800ba66:	0452      	lsls	r2, r2, #17
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d201      	bcs.n	800ba70 <__hi0bits+0x1c>
 800ba6c:	3008      	adds	r0, #8
 800ba6e:	021b      	lsls	r3, r3, #8
 800ba70:	2280      	movs	r2, #128	@ 0x80
 800ba72:	0552      	lsls	r2, r2, #21
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d201      	bcs.n	800ba7c <__hi0bits+0x28>
 800ba78:	3004      	adds	r0, #4
 800ba7a:	011b      	lsls	r3, r3, #4
 800ba7c:	2280      	movs	r2, #128	@ 0x80
 800ba7e:	05d2      	lsls	r2, r2, #23
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d201      	bcs.n	800ba88 <__hi0bits+0x34>
 800ba84:	3002      	adds	r0, #2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	db03      	blt.n	800ba94 <__hi0bits+0x40>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	4213      	tst	r3, r2
 800ba90:	d100      	bne.n	800ba94 <__hi0bits+0x40>
 800ba92:	2020      	movs	r0, #32
 800ba94:	4770      	bx	lr

0800ba96 <__lo0bits>:
 800ba96:	6803      	ldr	r3, [r0, #0]
 800ba98:	0001      	movs	r1, r0
 800ba9a:	2207      	movs	r2, #7
 800ba9c:	0018      	movs	r0, r3
 800ba9e:	4010      	ands	r0, r2
 800baa0:	4213      	tst	r3, r2
 800baa2:	d00d      	beq.n	800bac0 <__lo0bits+0x2a>
 800baa4:	3a06      	subs	r2, #6
 800baa6:	2000      	movs	r0, #0
 800baa8:	4213      	tst	r3, r2
 800baaa:	d105      	bne.n	800bab8 <__lo0bits+0x22>
 800baac:	3002      	adds	r0, #2
 800baae:	4203      	tst	r3, r0
 800bab0:	d003      	beq.n	800baba <__lo0bits+0x24>
 800bab2:	40d3      	lsrs	r3, r2
 800bab4:	0010      	movs	r0, r2
 800bab6:	600b      	str	r3, [r1, #0]
 800bab8:	4770      	bx	lr
 800baba:	089b      	lsrs	r3, r3, #2
 800babc:	600b      	str	r3, [r1, #0]
 800babe:	e7fb      	b.n	800bab8 <__lo0bits+0x22>
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	2a00      	cmp	r2, #0
 800bac4:	d101      	bne.n	800baca <__lo0bits+0x34>
 800bac6:	2010      	movs	r0, #16
 800bac8:	0c1b      	lsrs	r3, r3, #16
 800baca:	b2da      	uxtb	r2, r3
 800bacc:	2a00      	cmp	r2, #0
 800bace:	d101      	bne.n	800bad4 <__lo0bits+0x3e>
 800bad0:	3008      	adds	r0, #8
 800bad2:	0a1b      	lsrs	r3, r3, #8
 800bad4:	071a      	lsls	r2, r3, #28
 800bad6:	d101      	bne.n	800badc <__lo0bits+0x46>
 800bad8:	3004      	adds	r0, #4
 800bada:	091b      	lsrs	r3, r3, #4
 800badc:	079a      	lsls	r2, r3, #30
 800bade:	d101      	bne.n	800bae4 <__lo0bits+0x4e>
 800bae0:	3002      	adds	r0, #2
 800bae2:	089b      	lsrs	r3, r3, #2
 800bae4:	07da      	lsls	r2, r3, #31
 800bae6:	d4e9      	bmi.n	800babc <__lo0bits+0x26>
 800bae8:	3001      	adds	r0, #1
 800baea:	085b      	lsrs	r3, r3, #1
 800baec:	d1e6      	bne.n	800babc <__lo0bits+0x26>
 800baee:	2020      	movs	r0, #32
 800baf0:	e7e2      	b.n	800bab8 <__lo0bits+0x22>
	...

0800baf4 <__i2b>:
 800baf4:	b510      	push	{r4, lr}
 800baf6:	000c      	movs	r4, r1
 800baf8:	2101      	movs	r1, #1
 800bafa:	f7ff feb3 	bl	800b864 <_Balloc>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d107      	bne.n	800bb12 <__i2b+0x1e>
 800bb02:	2146      	movs	r1, #70	@ 0x46
 800bb04:	4c05      	ldr	r4, [pc, #20]	@ (800bb1c <__i2b+0x28>)
 800bb06:	0002      	movs	r2, r0
 800bb08:	4b05      	ldr	r3, [pc, #20]	@ (800bb20 <__i2b+0x2c>)
 800bb0a:	0020      	movs	r0, r4
 800bb0c:	31ff      	adds	r1, #255	@ 0xff
 800bb0e:	f000 fe17 	bl	800c740 <__assert_func>
 800bb12:	2301      	movs	r3, #1
 800bb14:	6144      	str	r4, [r0, #20]
 800bb16:	6103      	str	r3, [r0, #16]
 800bb18:	bd10      	pop	{r4, pc}
 800bb1a:	46c0      	nop			@ (mov r8, r8)
 800bb1c:	0800d0aa 	.word	0x0800d0aa
 800bb20:	0800d039 	.word	0x0800d039

0800bb24 <__multiply>:
 800bb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb26:	0014      	movs	r4, r2
 800bb28:	690a      	ldr	r2, [r1, #16]
 800bb2a:	6923      	ldr	r3, [r4, #16]
 800bb2c:	000d      	movs	r5, r1
 800bb2e:	b08b      	sub	sp, #44	@ 0x2c
 800bb30:	429a      	cmp	r2, r3
 800bb32:	db02      	blt.n	800bb3a <__multiply+0x16>
 800bb34:	0023      	movs	r3, r4
 800bb36:	000c      	movs	r4, r1
 800bb38:	001d      	movs	r5, r3
 800bb3a:	6927      	ldr	r7, [r4, #16]
 800bb3c:	692e      	ldr	r6, [r5, #16]
 800bb3e:	6861      	ldr	r1, [r4, #4]
 800bb40:	19bb      	adds	r3, r7, r6
 800bb42:	9303      	str	r3, [sp, #12]
 800bb44:	68a3      	ldr	r3, [r4, #8]
 800bb46:	19ba      	adds	r2, r7, r6
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	da00      	bge.n	800bb4e <__multiply+0x2a>
 800bb4c:	3101      	adds	r1, #1
 800bb4e:	f7ff fe89 	bl	800b864 <_Balloc>
 800bb52:	9002      	str	r0, [sp, #8]
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d106      	bne.n	800bb66 <__multiply+0x42>
 800bb58:	21b1      	movs	r1, #177	@ 0xb1
 800bb5a:	4b49      	ldr	r3, [pc, #292]	@ (800bc80 <__multiply+0x15c>)
 800bb5c:	4849      	ldr	r0, [pc, #292]	@ (800bc84 <__multiply+0x160>)
 800bb5e:	9a02      	ldr	r2, [sp, #8]
 800bb60:	0049      	lsls	r1, r1, #1
 800bb62:	f000 fded 	bl	800c740 <__assert_func>
 800bb66:	9b02      	ldr	r3, [sp, #8]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	3314      	adds	r3, #20
 800bb6c:	469c      	mov	ip, r3
 800bb6e:	19bb      	adds	r3, r7, r6
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4463      	add	r3, ip
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	4663      	mov	r3, ip
 800bb78:	9904      	ldr	r1, [sp, #16]
 800bb7a:	428b      	cmp	r3, r1
 800bb7c:	d32a      	bcc.n	800bbd4 <__multiply+0xb0>
 800bb7e:	0023      	movs	r3, r4
 800bb80:	00bf      	lsls	r7, r7, #2
 800bb82:	3314      	adds	r3, #20
 800bb84:	3514      	adds	r5, #20
 800bb86:	9308      	str	r3, [sp, #32]
 800bb88:	00b6      	lsls	r6, r6, #2
 800bb8a:	19db      	adds	r3, r3, r7
 800bb8c:	9305      	str	r3, [sp, #20]
 800bb8e:	19ab      	adds	r3, r5, r6
 800bb90:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb92:	2304      	movs	r3, #4
 800bb94:	9306      	str	r3, [sp, #24]
 800bb96:	0023      	movs	r3, r4
 800bb98:	9a05      	ldr	r2, [sp, #20]
 800bb9a:	3315      	adds	r3, #21
 800bb9c:	9501      	str	r5, [sp, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d305      	bcc.n	800bbae <__multiply+0x8a>
 800bba2:	1b13      	subs	r3, r2, r4
 800bba4:	3b15      	subs	r3, #21
 800bba6:	089b      	lsrs	r3, r3, #2
 800bba8:	3301      	adds	r3, #1
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	9306      	str	r3, [sp, #24]
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d310      	bcc.n	800bbd8 <__multiply+0xb4>
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	dd05      	ble.n	800bbc8 <__multiply+0xa4>
 800bbbc:	9b04      	ldr	r3, [sp, #16]
 800bbbe:	3b04      	subs	r3, #4
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d056      	beq.n	800bc76 <__multiply+0x152>
 800bbc8:	9b02      	ldr	r3, [sp, #8]
 800bbca:	9a03      	ldr	r2, [sp, #12]
 800bbcc:	0018      	movs	r0, r3
 800bbce:	611a      	str	r2, [r3, #16]
 800bbd0:	b00b      	add	sp, #44	@ 0x2c
 800bbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd4:	c304      	stmia	r3!, {r2}
 800bbd6:	e7cf      	b.n	800bb78 <__multiply+0x54>
 800bbd8:	9b01      	ldr	r3, [sp, #4]
 800bbda:	6818      	ldr	r0, [r3, #0]
 800bbdc:	b280      	uxth	r0, r0
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d01e      	beq.n	800bc20 <__multiply+0xfc>
 800bbe2:	4667      	mov	r7, ip
 800bbe4:	2500      	movs	r5, #0
 800bbe6:	9e08      	ldr	r6, [sp, #32]
 800bbe8:	ce02      	ldmia	r6!, {r1}
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	9307      	str	r3, [sp, #28]
 800bbee:	b28b      	uxth	r3, r1
 800bbf0:	4343      	muls	r3, r0
 800bbf2:	001a      	movs	r2, r3
 800bbf4:	466b      	mov	r3, sp
 800bbf6:	0c09      	lsrs	r1, r1, #16
 800bbf8:	8b9b      	ldrh	r3, [r3, #28]
 800bbfa:	4341      	muls	r1, r0
 800bbfc:	18d3      	adds	r3, r2, r3
 800bbfe:	9a07      	ldr	r2, [sp, #28]
 800bc00:	195b      	adds	r3, r3, r5
 800bc02:	0c12      	lsrs	r2, r2, #16
 800bc04:	1889      	adds	r1, r1, r2
 800bc06:	0c1a      	lsrs	r2, r3, #16
 800bc08:	188a      	adds	r2, r1, r2
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	0c15      	lsrs	r5, r2, #16
 800bc0e:	0412      	lsls	r2, r2, #16
 800bc10:	431a      	orrs	r2, r3
 800bc12:	9b05      	ldr	r3, [sp, #20]
 800bc14:	c704      	stmia	r7!, {r2}
 800bc16:	42b3      	cmp	r3, r6
 800bc18:	d8e6      	bhi.n	800bbe8 <__multiply+0xc4>
 800bc1a:	4663      	mov	r3, ip
 800bc1c:	9a06      	ldr	r2, [sp, #24]
 800bc1e:	509d      	str	r5, [r3, r2]
 800bc20:	9b01      	ldr	r3, [sp, #4]
 800bc22:	6818      	ldr	r0, [r3, #0]
 800bc24:	0c00      	lsrs	r0, r0, #16
 800bc26:	d020      	beq.n	800bc6a <__multiply+0x146>
 800bc28:	4663      	mov	r3, ip
 800bc2a:	0025      	movs	r5, r4
 800bc2c:	4661      	mov	r1, ip
 800bc2e:	2700      	movs	r7, #0
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3514      	adds	r5, #20
 800bc34:	682a      	ldr	r2, [r5, #0]
 800bc36:	680e      	ldr	r6, [r1, #0]
 800bc38:	b292      	uxth	r2, r2
 800bc3a:	4342      	muls	r2, r0
 800bc3c:	0c36      	lsrs	r6, r6, #16
 800bc3e:	1992      	adds	r2, r2, r6
 800bc40:	19d2      	adds	r2, r2, r7
 800bc42:	0416      	lsls	r6, r2, #16
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	431e      	orrs	r6, r3
 800bc48:	600e      	str	r6, [r1, #0]
 800bc4a:	cd40      	ldmia	r5!, {r6}
 800bc4c:	684b      	ldr	r3, [r1, #4]
 800bc4e:	0c36      	lsrs	r6, r6, #16
 800bc50:	4346      	muls	r6, r0
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	0c12      	lsrs	r2, r2, #16
 800bc56:	18f3      	adds	r3, r6, r3
 800bc58:	189b      	adds	r3, r3, r2
 800bc5a:	9a05      	ldr	r2, [sp, #20]
 800bc5c:	0c1f      	lsrs	r7, r3, #16
 800bc5e:	3104      	adds	r1, #4
 800bc60:	42aa      	cmp	r2, r5
 800bc62:	d8e7      	bhi.n	800bc34 <__multiply+0x110>
 800bc64:	4662      	mov	r2, ip
 800bc66:	9906      	ldr	r1, [sp, #24]
 800bc68:	5053      	str	r3, [r2, r1]
 800bc6a:	9b01      	ldr	r3, [sp, #4]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	2304      	movs	r3, #4
 800bc72:	449c      	add	ip, r3
 800bc74:	e79b      	b.n	800bbae <__multiply+0x8a>
 800bc76:	9b03      	ldr	r3, [sp, #12]
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	9303      	str	r3, [sp, #12]
 800bc7c:	e79b      	b.n	800bbb6 <__multiply+0x92>
 800bc7e:	46c0      	nop			@ (mov r8, r8)
 800bc80:	0800d039 	.word	0x0800d039
 800bc84:	0800d0aa 	.word	0x0800d0aa

0800bc88 <__pow5mult>:
 800bc88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	0015      	movs	r5, r2
 800bc8e:	0007      	movs	r7, r0
 800bc90:	000e      	movs	r6, r1
 800bc92:	401a      	ands	r2, r3
 800bc94:	421d      	tst	r5, r3
 800bc96:	d008      	beq.n	800bcaa <__pow5mult+0x22>
 800bc98:	4925      	ldr	r1, [pc, #148]	@ (800bd30 <__pow5mult+0xa8>)
 800bc9a:	3a01      	subs	r2, #1
 800bc9c:	0092      	lsls	r2, r2, #2
 800bc9e:	5852      	ldr	r2, [r2, r1]
 800bca0:	2300      	movs	r3, #0
 800bca2:	0031      	movs	r1, r6
 800bca4:	f7ff fe46 	bl	800b934 <__multadd>
 800bca8:	0006      	movs	r6, r0
 800bcaa:	10ad      	asrs	r5, r5, #2
 800bcac:	d03d      	beq.n	800bd2a <__pow5mult+0xa2>
 800bcae:	69fc      	ldr	r4, [r7, #28]
 800bcb0:	2c00      	cmp	r4, #0
 800bcb2:	d10f      	bne.n	800bcd4 <__pow5mult+0x4c>
 800bcb4:	2010      	movs	r0, #16
 800bcb6:	f7ff fd07 	bl	800b6c8 <malloc>
 800bcba:	1e02      	subs	r2, r0, #0
 800bcbc:	61f8      	str	r0, [r7, #28]
 800bcbe:	d105      	bne.n	800bccc <__pow5mult+0x44>
 800bcc0:	21b4      	movs	r1, #180	@ 0xb4
 800bcc2:	4b1c      	ldr	r3, [pc, #112]	@ (800bd34 <__pow5mult+0xac>)
 800bcc4:	481c      	ldr	r0, [pc, #112]	@ (800bd38 <__pow5mult+0xb0>)
 800bcc6:	31ff      	adds	r1, #255	@ 0xff
 800bcc8:	f000 fd3a 	bl	800c740 <__assert_func>
 800bccc:	6044      	str	r4, [r0, #4]
 800bcce:	6084      	str	r4, [r0, #8]
 800bcd0:	6004      	str	r4, [r0, #0]
 800bcd2:	60c4      	str	r4, [r0, #12]
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	689c      	ldr	r4, [r3, #8]
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	2c00      	cmp	r4, #0
 800bcdc:	d108      	bne.n	800bcf0 <__pow5mult+0x68>
 800bcde:	0038      	movs	r0, r7
 800bce0:	4916      	ldr	r1, [pc, #88]	@ (800bd3c <__pow5mult+0xb4>)
 800bce2:	f7ff ff07 	bl	800baf4 <__i2b>
 800bce6:	9b01      	ldr	r3, [sp, #4]
 800bce8:	0004      	movs	r4, r0
 800bcea:	6098      	str	r0, [r3, #8]
 800bcec:	2300      	movs	r3, #0
 800bcee:	6003      	str	r3, [r0, #0]
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	421d      	tst	r5, r3
 800bcf4:	d00a      	beq.n	800bd0c <__pow5mult+0x84>
 800bcf6:	0031      	movs	r1, r6
 800bcf8:	0022      	movs	r2, r4
 800bcfa:	0038      	movs	r0, r7
 800bcfc:	f7ff ff12 	bl	800bb24 <__multiply>
 800bd00:	0031      	movs	r1, r6
 800bd02:	9001      	str	r0, [sp, #4]
 800bd04:	0038      	movs	r0, r7
 800bd06:	f7ff fdf1 	bl	800b8ec <_Bfree>
 800bd0a:	9e01      	ldr	r6, [sp, #4]
 800bd0c:	106d      	asrs	r5, r5, #1
 800bd0e:	d00c      	beq.n	800bd2a <__pow5mult+0xa2>
 800bd10:	6820      	ldr	r0, [r4, #0]
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d107      	bne.n	800bd26 <__pow5mult+0x9e>
 800bd16:	0022      	movs	r2, r4
 800bd18:	0021      	movs	r1, r4
 800bd1a:	0038      	movs	r0, r7
 800bd1c:	f7ff ff02 	bl	800bb24 <__multiply>
 800bd20:	2300      	movs	r3, #0
 800bd22:	6020      	str	r0, [r4, #0]
 800bd24:	6003      	str	r3, [r0, #0]
 800bd26:	0004      	movs	r4, r0
 800bd28:	e7e2      	b.n	800bcf0 <__pow5mult+0x68>
 800bd2a:	0030      	movs	r0, r6
 800bd2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	0800d104 	.word	0x0800d104
 800bd34:	0800cfca 	.word	0x0800cfca
 800bd38:	0800d0aa 	.word	0x0800d0aa
 800bd3c:	00000271 	.word	0x00000271

0800bd40 <__lshift>:
 800bd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd42:	000c      	movs	r4, r1
 800bd44:	0016      	movs	r6, r2
 800bd46:	6923      	ldr	r3, [r4, #16]
 800bd48:	1157      	asrs	r7, r2, #5
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	18fb      	adds	r3, r7, r3
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	3301      	adds	r3, #1
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	6849      	ldr	r1, [r1, #4]
 800bd56:	68a3      	ldr	r3, [r4, #8]
 800bd58:	9002      	str	r0, [sp, #8]
 800bd5a:	9a00      	ldr	r2, [sp, #0]
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	db10      	blt.n	800bd82 <__lshift+0x42>
 800bd60:	9802      	ldr	r0, [sp, #8]
 800bd62:	f7ff fd7f 	bl	800b864 <_Balloc>
 800bd66:	2300      	movs	r3, #0
 800bd68:	0001      	movs	r1, r0
 800bd6a:	0005      	movs	r5, r0
 800bd6c:	001a      	movs	r2, r3
 800bd6e:	3114      	adds	r1, #20
 800bd70:	4298      	cmp	r0, r3
 800bd72:	d10c      	bne.n	800bd8e <__lshift+0x4e>
 800bd74:	21ef      	movs	r1, #239	@ 0xef
 800bd76:	002a      	movs	r2, r5
 800bd78:	4b25      	ldr	r3, [pc, #148]	@ (800be10 <__lshift+0xd0>)
 800bd7a:	4826      	ldr	r0, [pc, #152]	@ (800be14 <__lshift+0xd4>)
 800bd7c:	0049      	lsls	r1, r1, #1
 800bd7e:	f000 fcdf 	bl	800c740 <__assert_func>
 800bd82:	3101      	adds	r1, #1
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	e7e8      	b.n	800bd5a <__lshift+0x1a>
 800bd88:	0098      	lsls	r0, r3, #2
 800bd8a:	500a      	str	r2, [r1, r0]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	42bb      	cmp	r3, r7
 800bd90:	dbfa      	blt.n	800bd88 <__lshift+0x48>
 800bd92:	43fb      	mvns	r3, r7
 800bd94:	17db      	asrs	r3, r3, #31
 800bd96:	401f      	ands	r7, r3
 800bd98:	00bf      	lsls	r7, r7, #2
 800bd9a:	0023      	movs	r3, r4
 800bd9c:	201f      	movs	r0, #31
 800bd9e:	19c9      	adds	r1, r1, r7
 800bda0:	0037      	movs	r7, r6
 800bda2:	6922      	ldr	r2, [r4, #16]
 800bda4:	3314      	adds	r3, #20
 800bda6:	0092      	lsls	r2, r2, #2
 800bda8:	189a      	adds	r2, r3, r2
 800bdaa:	4007      	ands	r7, r0
 800bdac:	4206      	tst	r6, r0
 800bdae:	d029      	beq.n	800be04 <__lshift+0xc4>
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	1bc0      	subs	r0, r0, r7
 800bdb4:	9003      	str	r0, [sp, #12]
 800bdb6:	468c      	mov	ip, r1
 800bdb8:	2000      	movs	r0, #0
 800bdba:	681e      	ldr	r6, [r3, #0]
 800bdbc:	40be      	lsls	r6, r7
 800bdbe:	4306      	orrs	r6, r0
 800bdc0:	4660      	mov	r0, ip
 800bdc2:	c040      	stmia	r0!, {r6}
 800bdc4:	4684      	mov	ip, r0
 800bdc6:	9e03      	ldr	r6, [sp, #12]
 800bdc8:	cb01      	ldmia	r3!, {r0}
 800bdca:	40f0      	lsrs	r0, r6
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d8f4      	bhi.n	800bdba <__lshift+0x7a>
 800bdd0:	0026      	movs	r6, r4
 800bdd2:	3615      	adds	r6, #21
 800bdd4:	2304      	movs	r3, #4
 800bdd6:	42b2      	cmp	r2, r6
 800bdd8:	d304      	bcc.n	800bde4 <__lshift+0xa4>
 800bdda:	1b13      	subs	r3, r2, r4
 800bddc:	3b15      	subs	r3, #21
 800bdde:	089b      	lsrs	r3, r3, #2
 800bde0:	3301      	adds	r3, #1
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	50c8      	str	r0, [r1, r3]
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d002      	beq.n	800bdf0 <__lshift+0xb0>
 800bdea:	9b01      	ldr	r3, [sp, #4]
 800bdec:	3302      	adds	r3, #2
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	9b00      	ldr	r3, [sp, #0]
 800bdf2:	9802      	ldr	r0, [sp, #8]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	0021      	movs	r1, r4
 800bdf8:	612b      	str	r3, [r5, #16]
 800bdfa:	f7ff fd77 	bl	800b8ec <_Bfree>
 800bdfe:	0028      	movs	r0, r5
 800be00:	b005      	add	sp, #20
 800be02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be04:	cb01      	ldmia	r3!, {r0}
 800be06:	c101      	stmia	r1!, {r0}
 800be08:	429a      	cmp	r2, r3
 800be0a:	d8fb      	bhi.n	800be04 <__lshift+0xc4>
 800be0c:	e7f0      	b.n	800bdf0 <__lshift+0xb0>
 800be0e:	46c0      	nop			@ (mov r8, r8)
 800be10:	0800d039 	.word	0x0800d039
 800be14:	0800d0aa 	.word	0x0800d0aa

0800be18 <__mcmp>:
 800be18:	b530      	push	{r4, r5, lr}
 800be1a:	690b      	ldr	r3, [r1, #16]
 800be1c:	6904      	ldr	r4, [r0, #16]
 800be1e:	0002      	movs	r2, r0
 800be20:	1ae0      	subs	r0, r4, r3
 800be22:	429c      	cmp	r4, r3
 800be24:	d10f      	bne.n	800be46 <__mcmp+0x2e>
 800be26:	3214      	adds	r2, #20
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	3114      	adds	r1, #20
 800be2c:	0014      	movs	r4, r2
 800be2e:	18c9      	adds	r1, r1, r3
 800be30:	18d2      	adds	r2, r2, r3
 800be32:	3a04      	subs	r2, #4
 800be34:	3904      	subs	r1, #4
 800be36:	6815      	ldr	r5, [r2, #0]
 800be38:	680b      	ldr	r3, [r1, #0]
 800be3a:	429d      	cmp	r5, r3
 800be3c:	d004      	beq.n	800be48 <__mcmp+0x30>
 800be3e:	2001      	movs	r0, #1
 800be40:	429d      	cmp	r5, r3
 800be42:	d200      	bcs.n	800be46 <__mcmp+0x2e>
 800be44:	3802      	subs	r0, #2
 800be46:	bd30      	pop	{r4, r5, pc}
 800be48:	4294      	cmp	r4, r2
 800be4a:	d3f2      	bcc.n	800be32 <__mcmp+0x1a>
 800be4c:	e7fb      	b.n	800be46 <__mcmp+0x2e>
	...

0800be50 <__mdiff>:
 800be50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be52:	000c      	movs	r4, r1
 800be54:	b087      	sub	sp, #28
 800be56:	9000      	str	r0, [sp, #0]
 800be58:	0011      	movs	r1, r2
 800be5a:	0020      	movs	r0, r4
 800be5c:	0017      	movs	r7, r2
 800be5e:	f7ff ffdb 	bl	800be18 <__mcmp>
 800be62:	1e05      	subs	r5, r0, #0
 800be64:	d110      	bne.n	800be88 <__mdiff+0x38>
 800be66:	0001      	movs	r1, r0
 800be68:	9800      	ldr	r0, [sp, #0]
 800be6a:	f7ff fcfb 	bl	800b864 <_Balloc>
 800be6e:	1e02      	subs	r2, r0, #0
 800be70:	d104      	bne.n	800be7c <__mdiff+0x2c>
 800be72:	4b40      	ldr	r3, [pc, #256]	@ (800bf74 <__mdiff+0x124>)
 800be74:	4840      	ldr	r0, [pc, #256]	@ (800bf78 <__mdiff+0x128>)
 800be76:	4941      	ldr	r1, [pc, #260]	@ (800bf7c <__mdiff+0x12c>)
 800be78:	f000 fc62 	bl	800c740 <__assert_func>
 800be7c:	2301      	movs	r3, #1
 800be7e:	6145      	str	r5, [r0, #20]
 800be80:	6103      	str	r3, [r0, #16]
 800be82:	0010      	movs	r0, r2
 800be84:	b007      	add	sp, #28
 800be86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be88:	2600      	movs	r6, #0
 800be8a:	42b0      	cmp	r0, r6
 800be8c:	da03      	bge.n	800be96 <__mdiff+0x46>
 800be8e:	0023      	movs	r3, r4
 800be90:	003c      	movs	r4, r7
 800be92:	001f      	movs	r7, r3
 800be94:	3601      	adds	r6, #1
 800be96:	6861      	ldr	r1, [r4, #4]
 800be98:	9800      	ldr	r0, [sp, #0]
 800be9a:	f7ff fce3 	bl	800b864 <_Balloc>
 800be9e:	1e02      	subs	r2, r0, #0
 800bea0:	d103      	bne.n	800beaa <__mdiff+0x5a>
 800bea2:	4b34      	ldr	r3, [pc, #208]	@ (800bf74 <__mdiff+0x124>)
 800bea4:	4834      	ldr	r0, [pc, #208]	@ (800bf78 <__mdiff+0x128>)
 800bea6:	4936      	ldr	r1, [pc, #216]	@ (800bf80 <__mdiff+0x130>)
 800bea8:	e7e6      	b.n	800be78 <__mdiff+0x28>
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	3414      	adds	r4, #20
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	18e3      	adds	r3, r4, r3
 800beb4:	0021      	movs	r1, r4
 800beb6:	9401      	str	r4, [sp, #4]
 800beb8:	003c      	movs	r4, r7
 800beba:	9302      	str	r3, [sp, #8]
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	3414      	adds	r4, #20
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	18e3      	adds	r3, r4, r3
 800bec4:	9303      	str	r3, [sp, #12]
 800bec6:	0003      	movs	r3, r0
 800bec8:	60c6      	str	r6, [r0, #12]
 800beca:	468c      	mov	ip, r1
 800becc:	2000      	movs	r0, #0
 800bece:	3314      	adds	r3, #20
 800bed0:	9304      	str	r3, [sp, #16]
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	4663      	mov	r3, ip
 800bed6:	cb20      	ldmia	r3!, {r5}
 800bed8:	b2a9      	uxth	r1, r5
 800beda:	000e      	movs	r6, r1
 800bedc:	469c      	mov	ip, r3
 800bede:	cc08      	ldmia	r4!, {r3}
 800bee0:	0c2d      	lsrs	r5, r5, #16
 800bee2:	b299      	uxth	r1, r3
 800bee4:	1a71      	subs	r1, r6, r1
 800bee6:	1809      	adds	r1, r1, r0
 800bee8:	0c1b      	lsrs	r3, r3, #16
 800beea:	1408      	asrs	r0, r1, #16
 800beec:	1aeb      	subs	r3, r5, r3
 800beee:	181b      	adds	r3, r3, r0
 800bef0:	1418      	asrs	r0, r3, #16
 800bef2:	b289      	uxth	r1, r1
 800bef4:	041b      	lsls	r3, r3, #16
 800bef6:	4319      	orrs	r1, r3
 800bef8:	9b05      	ldr	r3, [sp, #20]
 800befa:	c302      	stmia	r3!, {r1}
 800befc:	9305      	str	r3, [sp, #20]
 800befe:	9b03      	ldr	r3, [sp, #12]
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d8e7      	bhi.n	800bed4 <__mdiff+0x84>
 800bf04:	0039      	movs	r1, r7
 800bf06:	9c03      	ldr	r4, [sp, #12]
 800bf08:	3115      	adds	r1, #21
 800bf0a:	2304      	movs	r3, #4
 800bf0c:	428c      	cmp	r4, r1
 800bf0e:	d304      	bcc.n	800bf1a <__mdiff+0xca>
 800bf10:	1be3      	subs	r3, r4, r7
 800bf12:	3b15      	subs	r3, #21
 800bf14:	089b      	lsrs	r3, r3, #2
 800bf16:	3301      	adds	r3, #1
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	9901      	ldr	r1, [sp, #4]
 800bf1c:	18cd      	adds	r5, r1, r3
 800bf1e:	9904      	ldr	r1, [sp, #16]
 800bf20:	002e      	movs	r6, r5
 800bf22:	18cb      	adds	r3, r1, r3
 800bf24:	001f      	movs	r7, r3
 800bf26:	9902      	ldr	r1, [sp, #8]
 800bf28:	428e      	cmp	r6, r1
 800bf2a:	d311      	bcc.n	800bf50 <__mdiff+0x100>
 800bf2c:	9c02      	ldr	r4, [sp, #8]
 800bf2e:	1ee9      	subs	r1, r5, #3
 800bf30:	2000      	movs	r0, #0
 800bf32:	428c      	cmp	r4, r1
 800bf34:	d304      	bcc.n	800bf40 <__mdiff+0xf0>
 800bf36:	0021      	movs	r1, r4
 800bf38:	3103      	adds	r1, #3
 800bf3a:	1b49      	subs	r1, r1, r5
 800bf3c:	0889      	lsrs	r1, r1, #2
 800bf3e:	0088      	lsls	r0, r1, #2
 800bf40:	181b      	adds	r3, r3, r0
 800bf42:	3b04      	subs	r3, #4
 800bf44:	6819      	ldr	r1, [r3, #0]
 800bf46:	2900      	cmp	r1, #0
 800bf48:	d010      	beq.n	800bf6c <__mdiff+0x11c>
 800bf4a:	9b00      	ldr	r3, [sp, #0]
 800bf4c:	6113      	str	r3, [r2, #16]
 800bf4e:	e798      	b.n	800be82 <__mdiff+0x32>
 800bf50:	4684      	mov	ip, r0
 800bf52:	ce02      	ldmia	r6!, {r1}
 800bf54:	b288      	uxth	r0, r1
 800bf56:	4460      	add	r0, ip
 800bf58:	1400      	asrs	r0, r0, #16
 800bf5a:	0c0c      	lsrs	r4, r1, #16
 800bf5c:	1904      	adds	r4, r0, r4
 800bf5e:	4461      	add	r1, ip
 800bf60:	1420      	asrs	r0, r4, #16
 800bf62:	b289      	uxth	r1, r1
 800bf64:	0424      	lsls	r4, r4, #16
 800bf66:	4321      	orrs	r1, r4
 800bf68:	c702      	stmia	r7!, {r1}
 800bf6a:	e7dc      	b.n	800bf26 <__mdiff+0xd6>
 800bf6c:	9900      	ldr	r1, [sp, #0]
 800bf6e:	3901      	subs	r1, #1
 800bf70:	9100      	str	r1, [sp, #0]
 800bf72:	e7e6      	b.n	800bf42 <__mdiff+0xf2>
 800bf74:	0800d039 	.word	0x0800d039
 800bf78:	0800d0aa 	.word	0x0800d0aa
 800bf7c:	00000237 	.word	0x00000237
 800bf80:	00000245 	.word	0x00000245

0800bf84 <__ulp>:
 800bf84:	b510      	push	{r4, lr}
 800bf86:	2400      	movs	r4, #0
 800bf88:	4b0c      	ldr	r3, [pc, #48]	@ (800bfbc <__ulp+0x38>)
 800bf8a:	4a0d      	ldr	r2, [pc, #52]	@ (800bfc0 <__ulp+0x3c>)
 800bf8c:	400b      	ands	r3, r1
 800bf8e:	189b      	adds	r3, r3, r2
 800bf90:	42a3      	cmp	r3, r4
 800bf92:	dc06      	bgt.n	800bfa2 <__ulp+0x1e>
 800bf94:	425b      	negs	r3, r3
 800bf96:	151a      	asrs	r2, r3, #20
 800bf98:	2a13      	cmp	r2, #19
 800bf9a:	dc05      	bgt.n	800bfa8 <__ulp+0x24>
 800bf9c:	2380      	movs	r3, #128	@ 0x80
 800bf9e:	031b      	lsls	r3, r3, #12
 800bfa0:	4113      	asrs	r3, r2
 800bfa2:	0019      	movs	r1, r3
 800bfa4:	0020      	movs	r0, r4
 800bfa6:	bd10      	pop	{r4, pc}
 800bfa8:	3a14      	subs	r2, #20
 800bfaa:	2401      	movs	r4, #1
 800bfac:	2a1e      	cmp	r2, #30
 800bfae:	dc02      	bgt.n	800bfb6 <__ulp+0x32>
 800bfb0:	2480      	movs	r4, #128	@ 0x80
 800bfb2:	0624      	lsls	r4, r4, #24
 800bfb4:	40d4      	lsrs	r4, r2
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	e7f3      	b.n	800bfa2 <__ulp+0x1e>
 800bfba:	46c0      	nop			@ (mov r8, r8)
 800bfbc:	7ff00000 	.word	0x7ff00000
 800bfc0:	fcc00000 	.word	0xfcc00000

0800bfc4 <__b2d>:
 800bfc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfc6:	0006      	movs	r6, r0
 800bfc8:	6903      	ldr	r3, [r0, #16]
 800bfca:	3614      	adds	r6, #20
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	18f3      	adds	r3, r6, r3
 800bfd0:	1f1d      	subs	r5, r3, #4
 800bfd2:	682c      	ldr	r4, [r5, #0]
 800bfd4:	000f      	movs	r7, r1
 800bfd6:	0020      	movs	r0, r4
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	f7ff fd3b 	bl	800ba54 <__hi0bits>
 800bfde:	2220      	movs	r2, #32
 800bfe0:	1a12      	subs	r2, r2, r0
 800bfe2:	603a      	str	r2, [r7, #0]
 800bfe4:	0003      	movs	r3, r0
 800bfe6:	4a1c      	ldr	r2, [pc, #112]	@ (800c058 <__b2d+0x94>)
 800bfe8:	280a      	cmp	r0, #10
 800bfea:	dc15      	bgt.n	800c018 <__b2d+0x54>
 800bfec:	210b      	movs	r1, #11
 800bfee:	0027      	movs	r7, r4
 800bff0:	1a09      	subs	r1, r1, r0
 800bff2:	40cf      	lsrs	r7, r1
 800bff4:	433a      	orrs	r2, r7
 800bff6:	468c      	mov	ip, r1
 800bff8:	0011      	movs	r1, r2
 800bffa:	2200      	movs	r2, #0
 800bffc:	42ae      	cmp	r6, r5
 800bffe:	d202      	bcs.n	800c006 <__b2d+0x42>
 800c000:	9a01      	ldr	r2, [sp, #4]
 800c002:	3a08      	subs	r2, #8
 800c004:	6812      	ldr	r2, [r2, #0]
 800c006:	3315      	adds	r3, #21
 800c008:	409c      	lsls	r4, r3
 800c00a:	4663      	mov	r3, ip
 800c00c:	0027      	movs	r7, r4
 800c00e:	40da      	lsrs	r2, r3
 800c010:	4317      	orrs	r7, r2
 800c012:	0038      	movs	r0, r7
 800c014:	b003      	add	sp, #12
 800c016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c018:	2700      	movs	r7, #0
 800c01a:	42ae      	cmp	r6, r5
 800c01c:	d202      	bcs.n	800c024 <__b2d+0x60>
 800c01e:	9d01      	ldr	r5, [sp, #4]
 800c020:	3d08      	subs	r5, #8
 800c022:	682f      	ldr	r7, [r5, #0]
 800c024:	210b      	movs	r1, #11
 800c026:	4249      	negs	r1, r1
 800c028:	468c      	mov	ip, r1
 800c02a:	449c      	add	ip, r3
 800c02c:	2b0b      	cmp	r3, #11
 800c02e:	d010      	beq.n	800c052 <__b2d+0x8e>
 800c030:	4661      	mov	r1, ip
 800c032:	2320      	movs	r3, #32
 800c034:	408c      	lsls	r4, r1
 800c036:	1a5b      	subs	r3, r3, r1
 800c038:	0039      	movs	r1, r7
 800c03a:	40d9      	lsrs	r1, r3
 800c03c:	430c      	orrs	r4, r1
 800c03e:	4322      	orrs	r2, r4
 800c040:	0011      	movs	r1, r2
 800c042:	2200      	movs	r2, #0
 800c044:	42b5      	cmp	r5, r6
 800c046:	d901      	bls.n	800c04c <__b2d+0x88>
 800c048:	3d04      	subs	r5, #4
 800c04a:	682a      	ldr	r2, [r5, #0]
 800c04c:	4664      	mov	r4, ip
 800c04e:	40a7      	lsls	r7, r4
 800c050:	e7dd      	b.n	800c00e <__b2d+0x4a>
 800c052:	4322      	orrs	r2, r4
 800c054:	0011      	movs	r1, r2
 800c056:	e7dc      	b.n	800c012 <__b2d+0x4e>
 800c058:	3ff00000 	.word	0x3ff00000

0800c05c <__d2b>:
 800c05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c05e:	2101      	movs	r1, #1
 800c060:	0016      	movs	r6, r2
 800c062:	001f      	movs	r7, r3
 800c064:	f7ff fbfe 	bl	800b864 <_Balloc>
 800c068:	1e04      	subs	r4, r0, #0
 800c06a:	d105      	bne.n	800c078 <__d2b+0x1c>
 800c06c:	0022      	movs	r2, r4
 800c06e:	4b25      	ldr	r3, [pc, #148]	@ (800c104 <__d2b+0xa8>)
 800c070:	4825      	ldr	r0, [pc, #148]	@ (800c108 <__d2b+0xac>)
 800c072:	4926      	ldr	r1, [pc, #152]	@ (800c10c <__d2b+0xb0>)
 800c074:	f000 fb64 	bl	800c740 <__assert_func>
 800c078:	033b      	lsls	r3, r7, #12
 800c07a:	007d      	lsls	r5, r7, #1
 800c07c:	0b1b      	lsrs	r3, r3, #12
 800c07e:	0d6d      	lsrs	r5, r5, #21
 800c080:	d002      	beq.n	800c088 <__d2b+0x2c>
 800c082:	2280      	movs	r2, #128	@ 0x80
 800c084:	0352      	lsls	r2, r2, #13
 800c086:	4313      	orrs	r3, r2
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	2e00      	cmp	r6, #0
 800c08c:	d025      	beq.n	800c0da <__d2b+0x7e>
 800c08e:	4668      	mov	r0, sp
 800c090:	9600      	str	r6, [sp, #0]
 800c092:	f7ff fd00 	bl	800ba96 <__lo0bits>
 800c096:	9b01      	ldr	r3, [sp, #4]
 800c098:	9900      	ldr	r1, [sp, #0]
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d01b      	beq.n	800c0d6 <__d2b+0x7a>
 800c09e:	2220      	movs	r2, #32
 800c0a0:	001e      	movs	r6, r3
 800c0a2:	1a12      	subs	r2, r2, r0
 800c0a4:	4096      	lsls	r6, r2
 800c0a6:	0032      	movs	r2, r6
 800c0a8:	40c3      	lsrs	r3, r0
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	6162      	str	r2, [r4, #20]
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	9e01      	ldr	r6, [sp, #4]
 800c0b2:	61a6      	str	r6, [r4, #24]
 800c0b4:	1e73      	subs	r3, r6, #1
 800c0b6:	419e      	sbcs	r6, r3
 800c0b8:	3601      	adds	r6, #1
 800c0ba:	6126      	str	r6, [r4, #16]
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	d014      	beq.n	800c0ea <__d2b+0x8e>
 800c0c0:	2635      	movs	r6, #53	@ 0x35
 800c0c2:	4b13      	ldr	r3, [pc, #76]	@ (800c110 <__d2b+0xb4>)
 800c0c4:	18ed      	adds	r5, r5, r3
 800c0c6:	9b08      	ldr	r3, [sp, #32]
 800c0c8:	182d      	adds	r5, r5, r0
 800c0ca:	601d      	str	r5, [r3, #0]
 800c0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ce:	1a36      	subs	r6, r6, r0
 800c0d0:	601e      	str	r6, [r3, #0]
 800c0d2:	0020      	movs	r0, r4
 800c0d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0d6:	6161      	str	r1, [r4, #20]
 800c0d8:	e7ea      	b.n	800c0b0 <__d2b+0x54>
 800c0da:	a801      	add	r0, sp, #4
 800c0dc:	f7ff fcdb 	bl	800ba96 <__lo0bits>
 800c0e0:	9b01      	ldr	r3, [sp, #4]
 800c0e2:	2601      	movs	r6, #1
 800c0e4:	6163      	str	r3, [r4, #20]
 800c0e6:	3020      	adds	r0, #32
 800c0e8:	e7e7      	b.n	800c0ba <__d2b+0x5e>
 800c0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c114 <__d2b+0xb8>)
 800c0ec:	18c0      	adds	r0, r0, r3
 800c0ee:	9b08      	ldr	r3, [sp, #32]
 800c0f0:	6018      	str	r0, [r3, #0]
 800c0f2:	4b09      	ldr	r3, [pc, #36]	@ (800c118 <__d2b+0xbc>)
 800c0f4:	18f3      	adds	r3, r6, r3
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	18e3      	adds	r3, r4, r3
 800c0fa:	6958      	ldr	r0, [r3, #20]
 800c0fc:	f7ff fcaa 	bl	800ba54 <__hi0bits>
 800c100:	0176      	lsls	r6, r6, #5
 800c102:	e7e3      	b.n	800c0cc <__d2b+0x70>
 800c104:	0800d039 	.word	0x0800d039
 800c108:	0800d0aa 	.word	0x0800d0aa
 800c10c:	0000030f 	.word	0x0000030f
 800c110:	fffffbcd 	.word	0xfffffbcd
 800c114:	fffffbce 	.word	0xfffffbce
 800c118:	3fffffff 	.word	0x3fffffff

0800c11c <__ratio>:
 800c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c11e:	b087      	sub	sp, #28
 800c120:	000f      	movs	r7, r1
 800c122:	a904      	add	r1, sp, #16
 800c124:	0006      	movs	r6, r0
 800c126:	f7ff ff4d 	bl	800bfc4 <__b2d>
 800c12a:	9000      	str	r0, [sp, #0]
 800c12c:	9101      	str	r1, [sp, #4]
 800c12e:	9b00      	ldr	r3, [sp, #0]
 800c130:	9c01      	ldr	r4, [sp, #4]
 800c132:	0038      	movs	r0, r7
 800c134:	a905      	add	r1, sp, #20
 800c136:	9302      	str	r3, [sp, #8]
 800c138:	9403      	str	r4, [sp, #12]
 800c13a:	f7ff ff43 	bl	800bfc4 <__b2d>
 800c13e:	000d      	movs	r5, r1
 800c140:	0002      	movs	r2, r0
 800c142:	000b      	movs	r3, r1
 800c144:	6930      	ldr	r0, [r6, #16]
 800c146:	6939      	ldr	r1, [r7, #16]
 800c148:	9e04      	ldr	r6, [sp, #16]
 800c14a:	1a40      	subs	r0, r0, r1
 800c14c:	9905      	ldr	r1, [sp, #20]
 800c14e:	0140      	lsls	r0, r0, #5
 800c150:	1a71      	subs	r1, r6, r1
 800c152:	1841      	adds	r1, r0, r1
 800c154:	0508      	lsls	r0, r1, #20
 800c156:	2900      	cmp	r1, #0
 800c158:	dd08      	ble.n	800c16c <__ratio+0x50>
 800c15a:	9901      	ldr	r1, [sp, #4]
 800c15c:	1841      	adds	r1, r0, r1
 800c15e:	9103      	str	r1, [sp, #12]
 800c160:	9802      	ldr	r0, [sp, #8]
 800c162:	9903      	ldr	r1, [sp, #12]
 800c164:	f7f5 fdac 	bl	8001cc0 <__aeabi_ddiv>
 800c168:	b007      	add	sp, #28
 800c16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c16c:	1a2b      	subs	r3, r5, r0
 800c16e:	e7f7      	b.n	800c160 <__ratio+0x44>

0800c170 <__copybits>:
 800c170:	b570      	push	{r4, r5, r6, lr}
 800c172:	0014      	movs	r4, r2
 800c174:	0005      	movs	r5, r0
 800c176:	3901      	subs	r1, #1
 800c178:	6913      	ldr	r3, [r2, #16]
 800c17a:	1149      	asrs	r1, r1, #5
 800c17c:	3101      	adds	r1, #1
 800c17e:	0089      	lsls	r1, r1, #2
 800c180:	3414      	adds	r4, #20
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	1841      	adds	r1, r0, r1
 800c186:	18e3      	adds	r3, r4, r3
 800c188:	42a3      	cmp	r3, r4
 800c18a:	d80d      	bhi.n	800c1a8 <__copybits+0x38>
 800c18c:	0014      	movs	r4, r2
 800c18e:	3411      	adds	r4, #17
 800c190:	2500      	movs	r5, #0
 800c192:	429c      	cmp	r4, r3
 800c194:	d803      	bhi.n	800c19e <__copybits+0x2e>
 800c196:	1a9b      	subs	r3, r3, r2
 800c198:	3b11      	subs	r3, #17
 800c19a:	089b      	lsrs	r3, r3, #2
 800c19c:	009d      	lsls	r5, r3, #2
 800c19e:	2300      	movs	r3, #0
 800c1a0:	1940      	adds	r0, r0, r5
 800c1a2:	4281      	cmp	r1, r0
 800c1a4:	d803      	bhi.n	800c1ae <__copybits+0x3e>
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}
 800c1a8:	cc40      	ldmia	r4!, {r6}
 800c1aa:	c540      	stmia	r5!, {r6}
 800c1ac:	e7ec      	b.n	800c188 <__copybits+0x18>
 800c1ae:	c008      	stmia	r0!, {r3}
 800c1b0:	e7f7      	b.n	800c1a2 <__copybits+0x32>

0800c1b2 <__any_on>:
 800c1b2:	0002      	movs	r2, r0
 800c1b4:	6900      	ldr	r0, [r0, #16]
 800c1b6:	b510      	push	{r4, lr}
 800c1b8:	3214      	adds	r2, #20
 800c1ba:	114b      	asrs	r3, r1, #5
 800c1bc:	4298      	cmp	r0, r3
 800c1be:	db13      	blt.n	800c1e8 <__any_on+0x36>
 800c1c0:	dd0c      	ble.n	800c1dc <__any_on+0x2a>
 800c1c2:	241f      	movs	r4, #31
 800c1c4:	0008      	movs	r0, r1
 800c1c6:	4020      	ands	r0, r4
 800c1c8:	4221      	tst	r1, r4
 800c1ca:	d007      	beq.n	800c1dc <__any_on+0x2a>
 800c1cc:	0099      	lsls	r1, r3, #2
 800c1ce:	588c      	ldr	r4, [r1, r2]
 800c1d0:	0021      	movs	r1, r4
 800c1d2:	40c1      	lsrs	r1, r0
 800c1d4:	4081      	lsls	r1, r0
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	428c      	cmp	r4, r1
 800c1da:	d104      	bne.n	800c1e6 <__any_on+0x34>
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	18d3      	adds	r3, r2, r3
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d803      	bhi.n	800c1ec <__any_on+0x3a>
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	bd10      	pop	{r4, pc}
 800c1e8:	0003      	movs	r3, r0
 800c1ea:	e7f7      	b.n	800c1dc <__any_on+0x2a>
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	6819      	ldr	r1, [r3, #0]
 800c1f0:	2900      	cmp	r1, #0
 800c1f2:	d0f5      	beq.n	800c1e0 <__any_on+0x2e>
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	e7f6      	b.n	800c1e6 <__any_on+0x34>

0800c1f8 <__ascii_wctomb>:
 800c1f8:	0003      	movs	r3, r0
 800c1fa:	1e08      	subs	r0, r1, #0
 800c1fc:	d005      	beq.n	800c20a <__ascii_wctomb+0x12>
 800c1fe:	2aff      	cmp	r2, #255	@ 0xff
 800c200:	d904      	bls.n	800c20c <__ascii_wctomb+0x14>
 800c202:	228a      	movs	r2, #138	@ 0x8a
 800c204:	2001      	movs	r0, #1
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	4240      	negs	r0, r0
 800c20a:	4770      	bx	lr
 800c20c:	2001      	movs	r0, #1
 800c20e:	700a      	strb	r2, [r1, #0]
 800c210:	e7fb      	b.n	800c20a <__ascii_wctomb+0x12>

0800c212 <__sfputc_r>:
 800c212:	6893      	ldr	r3, [r2, #8]
 800c214:	b510      	push	{r4, lr}
 800c216:	3b01      	subs	r3, #1
 800c218:	6093      	str	r3, [r2, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	da04      	bge.n	800c228 <__sfputc_r+0x16>
 800c21e:	6994      	ldr	r4, [r2, #24]
 800c220:	42a3      	cmp	r3, r4
 800c222:	db07      	blt.n	800c234 <__sfputc_r+0x22>
 800c224:	290a      	cmp	r1, #10
 800c226:	d005      	beq.n	800c234 <__sfputc_r+0x22>
 800c228:	6813      	ldr	r3, [r2, #0]
 800c22a:	1c58      	adds	r0, r3, #1
 800c22c:	6010      	str	r0, [r2, #0]
 800c22e:	7019      	strb	r1, [r3, #0]
 800c230:	0008      	movs	r0, r1
 800c232:	bd10      	pop	{r4, pc}
 800c234:	f7fd fece 	bl	8009fd4 <__swbuf_r>
 800c238:	0001      	movs	r1, r0
 800c23a:	e7f9      	b.n	800c230 <__sfputc_r+0x1e>

0800c23c <__sfputs_r>:
 800c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23e:	0006      	movs	r6, r0
 800c240:	000f      	movs	r7, r1
 800c242:	0014      	movs	r4, r2
 800c244:	18d5      	adds	r5, r2, r3
 800c246:	42ac      	cmp	r4, r5
 800c248:	d101      	bne.n	800c24e <__sfputs_r+0x12>
 800c24a:	2000      	movs	r0, #0
 800c24c:	e007      	b.n	800c25e <__sfputs_r+0x22>
 800c24e:	7821      	ldrb	r1, [r4, #0]
 800c250:	003a      	movs	r2, r7
 800c252:	0030      	movs	r0, r6
 800c254:	f7ff ffdd 	bl	800c212 <__sfputc_r>
 800c258:	3401      	adds	r4, #1
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	d1f3      	bne.n	800c246 <__sfputs_r+0xa>
 800c25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c260 <_vfiprintf_r>:
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c262:	b0a1      	sub	sp, #132	@ 0x84
 800c264:	000f      	movs	r7, r1
 800c266:	0015      	movs	r5, r2
 800c268:	001e      	movs	r6, r3
 800c26a:	9003      	str	r0, [sp, #12]
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d004      	beq.n	800c27a <_vfiprintf_r+0x1a>
 800c270:	6a03      	ldr	r3, [r0, #32]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <_vfiprintf_r+0x1a>
 800c276:	f7fd fdbd 	bl	8009df4 <__sinit>
 800c27a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c27c:	07db      	lsls	r3, r3, #31
 800c27e:	d405      	bmi.n	800c28c <_vfiprintf_r+0x2c>
 800c280:	89bb      	ldrh	r3, [r7, #12]
 800c282:	059b      	lsls	r3, r3, #22
 800c284:	d402      	bmi.n	800c28c <_vfiprintf_r+0x2c>
 800c286:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c288:	f7fd ffdb 	bl	800a242 <__retarget_lock_acquire_recursive>
 800c28c:	89bb      	ldrh	r3, [r7, #12]
 800c28e:	071b      	lsls	r3, r3, #28
 800c290:	d502      	bpl.n	800c298 <_vfiprintf_r+0x38>
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d113      	bne.n	800c2c0 <_vfiprintf_r+0x60>
 800c298:	0039      	movs	r1, r7
 800c29a:	9803      	ldr	r0, [sp, #12]
 800c29c:	f7fd fedc 	bl	800a058 <__swsetup_r>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d00d      	beq.n	800c2c0 <_vfiprintf_r+0x60>
 800c2a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c2a6:	07db      	lsls	r3, r3, #31
 800c2a8:	d503      	bpl.n	800c2b2 <_vfiprintf_r+0x52>
 800c2aa:	2001      	movs	r0, #1
 800c2ac:	4240      	negs	r0, r0
 800c2ae:	b021      	add	sp, #132	@ 0x84
 800c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b2:	89bb      	ldrh	r3, [r7, #12]
 800c2b4:	059b      	lsls	r3, r3, #22
 800c2b6:	d4f8      	bmi.n	800c2aa <_vfiprintf_r+0x4a>
 800c2b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c2ba:	f7fd ffc3 	bl	800a244 <__retarget_lock_release_recursive>
 800c2be:	e7f4      	b.n	800c2aa <_vfiprintf_r+0x4a>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	ac08      	add	r4, sp, #32
 800c2c4:	6163      	str	r3, [r4, #20]
 800c2c6:	3320      	adds	r3, #32
 800c2c8:	7663      	strb	r3, [r4, #25]
 800c2ca:	3310      	adds	r3, #16
 800c2cc:	76a3      	strb	r3, [r4, #26]
 800c2ce:	9607      	str	r6, [sp, #28]
 800c2d0:	002e      	movs	r6, r5
 800c2d2:	7833      	ldrb	r3, [r6, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d001      	beq.n	800c2dc <_vfiprintf_r+0x7c>
 800c2d8:	2b25      	cmp	r3, #37	@ 0x25
 800c2da:	d148      	bne.n	800c36e <_vfiprintf_r+0x10e>
 800c2dc:	1b73      	subs	r3, r6, r5
 800c2de:	9305      	str	r3, [sp, #20]
 800c2e0:	42ae      	cmp	r6, r5
 800c2e2:	d00b      	beq.n	800c2fc <_vfiprintf_r+0x9c>
 800c2e4:	002a      	movs	r2, r5
 800c2e6:	0039      	movs	r1, r7
 800c2e8:	9803      	ldr	r0, [sp, #12]
 800c2ea:	f7ff ffa7 	bl	800c23c <__sfputs_r>
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	d100      	bne.n	800c2f4 <_vfiprintf_r+0x94>
 800c2f2:	e0ae      	b.n	800c452 <_vfiprintf_r+0x1f2>
 800c2f4:	6963      	ldr	r3, [r4, #20]
 800c2f6:	9a05      	ldr	r2, [sp, #20]
 800c2f8:	189b      	adds	r3, r3, r2
 800c2fa:	6163      	str	r3, [r4, #20]
 800c2fc:	7833      	ldrb	r3, [r6, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d100      	bne.n	800c304 <_vfiprintf_r+0xa4>
 800c302:	e0a6      	b.n	800c452 <_vfiprintf_r+0x1f2>
 800c304:	2201      	movs	r2, #1
 800c306:	2300      	movs	r3, #0
 800c308:	4252      	negs	r2, r2
 800c30a:	6062      	str	r2, [r4, #4]
 800c30c:	a904      	add	r1, sp, #16
 800c30e:	3254      	adds	r2, #84	@ 0x54
 800c310:	1852      	adds	r2, r2, r1
 800c312:	1c75      	adds	r5, r6, #1
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	60e3      	str	r3, [r4, #12]
 800c318:	60a3      	str	r3, [r4, #8]
 800c31a:	7013      	strb	r3, [r2, #0]
 800c31c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c31e:	4b59      	ldr	r3, [pc, #356]	@ (800c484 <_vfiprintf_r+0x224>)
 800c320:	2205      	movs	r2, #5
 800c322:	0018      	movs	r0, r3
 800c324:	7829      	ldrb	r1, [r5, #0]
 800c326:	9305      	str	r3, [sp, #20]
 800c328:	f7fd ff8d 	bl	800a246 <memchr>
 800c32c:	1c6e      	adds	r6, r5, #1
 800c32e:	2800      	cmp	r0, #0
 800c330:	d11f      	bne.n	800c372 <_vfiprintf_r+0x112>
 800c332:	6822      	ldr	r2, [r4, #0]
 800c334:	06d3      	lsls	r3, r2, #27
 800c336:	d504      	bpl.n	800c342 <_vfiprintf_r+0xe2>
 800c338:	2353      	movs	r3, #83	@ 0x53
 800c33a:	a904      	add	r1, sp, #16
 800c33c:	185b      	adds	r3, r3, r1
 800c33e:	2120      	movs	r1, #32
 800c340:	7019      	strb	r1, [r3, #0]
 800c342:	0713      	lsls	r3, r2, #28
 800c344:	d504      	bpl.n	800c350 <_vfiprintf_r+0xf0>
 800c346:	2353      	movs	r3, #83	@ 0x53
 800c348:	a904      	add	r1, sp, #16
 800c34a:	185b      	adds	r3, r3, r1
 800c34c:	212b      	movs	r1, #43	@ 0x2b
 800c34e:	7019      	strb	r1, [r3, #0]
 800c350:	782b      	ldrb	r3, [r5, #0]
 800c352:	2b2a      	cmp	r3, #42	@ 0x2a
 800c354:	d016      	beq.n	800c384 <_vfiprintf_r+0x124>
 800c356:	002e      	movs	r6, r5
 800c358:	2100      	movs	r1, #0
 800c35a:	200a      	movs	r0, #10
 800c35c:	68e3      	ldr	r3, [r4, #12]
 800c35e:	7832      	ldrb	r2, [r6, #0]
 800c360:	1c75      	adds	r5, r6, #1
 800c362:	3a30      	subs	r2, #48	@ 0x30
 800c364:	2a09      	cmp	r2, #9
 800c366:	d950      	bls.n	800c40a <_vfiprintf_r+0x1aa>
 800c368:	2900      	cmp	r1, #0
 800c36a:	d111      	bne.n	800c390 <_vfiprintf_r+0x130>
 800c36c:	e017      	b.n	800c39e <_vfiprintf_r+0x13e>
 800c36e:	3601      	adds	r6, #1
 800c370:	e7af      	b.n	800c2d2 <_vfiprintf_r+0x72>
 800c372:	9b05      	ldr	r3, [sp, #20]
 800c374:	6822      	ldr	r2, [r4, #0]
 800c376:	1ac0      	subs	r0, r0, r3
 800c378:	2301      	movs	r3, #1
 800c37a:	4083      	lsls	r3, r0
 800c37c:	4313      	orrs	r3, r2
 800c37e:	0035      	movs	r5, r6
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	e7cc      	b.n	800c31e <_vfiprintf_r+0xbe>
 800c384:	9b07      	ldr	r3, [sp, #28]
 800c386:	1d19      	adds	r1, r3, #4
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	9107      	str	r1, [sp, #28]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	db01      	blt.n	800c394 <_vfiprintf_r+0x134>
 800c390:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c392:	e004      	b.n	800c39e <_vfiprintf_r+0x13e>
 800c394:	425b      	negs	r3, r3
 800c396:	60e3      	str	r3, [r4, #12]
 800c398:	2302      	movs	r3, #2
 800c39a:	4313      	orrs	r3, r2
 800c39c:	6023      	str	r3, [r4, #0]
 800c39e:	7833      	ldrb	r3, [r6, #0]
 800c3a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3a2:	d10c      	bne.n	800c3be <_vfiprintf_r+0x15e>
 800c3a4:	7873      	ldrb	r3, [r6, #1]
 800c3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3a8:	d134      	bne.n	800c414 <_vfiprintf_r+0x1b4>
 800c3aa:	9b07      	ldr	r3, [sp, #28]
 800c3ac:	3602      	adds	r6, #2
 800c3ae:	1d1a      	adds	r2, r3, #4
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	9207      	str	r2, [sp, #28]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	da01      	bge.n	800c3bc <_vfiprintf_r+0x15c>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	425b      	negs	r3, r3
 800c3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3be:	4d32      	ldr	r5, [pc, #200]	@ (800c488 <_vfiprintf_r+0x228>)
 800c3c0:	2203      	movs	r2, #3
 800c3c2:	0028      	movs	r0, r5
 800c3c4:	7831      	ldrb	r1, [r6, #0]
 800c3c6:	f7fd ff3e 	bl	800a246 <memchr>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d006      	beq.n	800c3dc <_vfiprintf_r+0x17c>
 800c3ce:	2340      	movs	r3, #64	@ 0x40
 800c3d0:	1b40      	subs	r0, r0, r5
 800c3d2:	4083      	lsls	r3, r0
 800c3d4:	6822      	ldr	r2, [r4, #0]
 800c3d6:	3601      	adds	r6, #1
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	6023      	str	r3, [r4, #0]
 800c3dc:	7831      	ldrb	r1, [r6, #0]
 800c3de:	2206      	movs	r2, #6
 800c3e0:	482a      	ldr	r0, [pc, #168]	@ (800c48c <_vfiprintf_r+0x22c>)
 800c3e2:	1c75      	adds	r5, r6, #1
 800c3e4:	7621      	strb	r1, [r4, #24]
 800c3e6:	f7fd ff2e 	bl	800a246 <memchr>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d040      	beq.n	800c470 <_vfiprintf_r+0x210>
 800c3ee:	4b28      	ldr	r3, [pc, #160]	@ (800c490 <_vfiprintf_r+0x230>)
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d122      	bne.n	800c43a <_vfiprintf_r+0x1da>
 800c3f4:	2207      	movs	r2, #7
 800c3f6:	9b07      	ldr	r3, [sp, #28]
 800c3f8:	3307      	adds	r3, #7
 800c3fa:	4393      	bics	r3, r2
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	6963      	ldr	r3, [r4, #20]
 800c402:	9a04      	ldr	r2, [sp, #16]
 800c404:	189b      	adds	r3, r3, r2
 800c406:	6163      	str	r3, [r4, #20]
 800c408:	e762      	b.n	800c2d0 <_vfiprintf_r+0x70>
 800c40a:	4343      	muls	r3, r0
 800c40c:	002e      	movs	r6, r5
 800c40e:	2101      	movs	r1, #1
 800c410:	189b      	adds	r3, r3, r2
 800c412:	e7a4      	b.n	800c35e <_vfiprintf_r+0xfe>
 800c414:	2300      	movs	r3, #0
 800c416:	200a      	movs	r0, #10
 800c418:	0019      	movs	r1, r3
 800c41a:	3601      	adds	r6, #1
 800c41c:	6063      	str	r3, [r4, #4]
 800c41e:	7832      	ldrb	r2, [r6, #0]
 800c420:	1c75      	adds	r5, r6, #1
 800c422:	3a30      	subs	r2, #48	@ 0x30
 800c424:	2a09      	cmp	r2, #9
 800c426:	d903      	bls.n	800c430 <_vfiprintf_r+0x1d0>
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d0c8      	beq.n	800c3be <_vfiprintf_r+0x15e>
 800c42c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c42e:	e7c6      	b.n	800c3be <_vfiprintf_r+0x15e>
 800c430:	4341      	muls	r1, r0
 800c432:	002e      	movs	r6, r5
 800c434:	2301      	movs	r3, #1
 800c436:	1889      	adds	r1, r1, r2
 800c438:	e7f1      	b.n	800c41e <_vfiprintf_r+0x1be>
 800c43a:	aa07      	add	r2, sp, #28
 800c43c:	9200      	str	r2, [sp, #0]
 800c43e:	0021      	movs	r1, r4
 800c440:	003a      	movs	r2, r7
 800c442:	4b14      	ldr	r3, [pc, #80]	@ (800c494 <_vfiprintf_r+0x234>)
 800c444:	9803      	ldr	r0, [sp, #12]
 800c446:	f7fd f889 	bl	800955c <_printf_float>
 800c44a:	9004      	str	r0, [sp, #16]
 800c44c:	9b04      	ldr	r3, [sp, #16]
 800c44e:	3301      	adds	r3, #1
 800c450:	d1d6      	bne.n	800c400 <_vfiprintf_r+0x1a0>
 800c452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c454:	07db      	lsls	r3, r3, #31
 800c456:	d405      	bmi.n	800c464 <_vfiprintf_r+0x204>
 800c458:	89bb      	ldrh	r3, [r7, #12]
 800c45a:	059b      	lsls	r3, r3, #22
 800c45c:	d402      	bmi.n	800c464 <_vfiprintf_r+0x204>
 800c45e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c460:	f7fd fef0 	bl	800a244 <__retarget_lock_release_recursive>
 800c464:	89bb      	ldrh	r3, [r7, #12]
 800c466:	065b      	lsls	r3, r3, #25
 800c468:	d500      	bpl.n	800c46c <_vfiprintf_r+0x20c>
 800c46a:	e71e      	b.n	800c2aa <_vfiprintf_r+0x4a>
 800c46c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c46e:	e71e      	b.n	800c2ae <_vfiprintf_r+0x4e>
 800c470:	aa07      	add	r2, sp, #28
 800c472:	9200      	str	r2, [sp, #0]
 800c474:	0021      	movs	r1, r4
 800c476:	003a      	movs	r2, r7
 800c478:	4b06      	ldr	r3, [pc, #24]	@ (800c494 <_vfiprintf_r+0x234>)
 800c47a:	9803      	ldr	r0, [sp, #12]
 800c47c:	f7fd fb1c 	bl	8009ab8 <_printf_i>
 800c480:	e7e3      	b.n	800c44a <_vfiprintf_r+0x1ea>
 800c482:	46c0      	nop			@ (mov r8, r8)
 800c484:	0800d200 	.word	0x0800d200
 800c488:	0800d206 	.word	0x0800d206
 800c48c:	0800d20a 	.word	0x0800d20a
 800c490:	0800955d 	.word	0x0800955d
 800c494:	0800c23d 	.word	0x0800c23d

0800c498 <__sflush_r>:
 800c498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c49a:	220c      	movs	r2, #12
 800c49c:	5e8b      	ldrsh	r3, [r1, r2]
 800c49e:	0005      	movs	r5, r0
 800c4a0:	000c      	movs	r4, r1
 800c4a2:	071a      	lsls	r2, r3, #28
 800c4a4:	d456      	bmi.n	800c554 <__sflush_r+0xbc>
 800c4a6:	684a      	ldr	r2, [r1, #4]
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	dc02      	bgt.n	800c4b2 <__sflush_r+0x1a>
 800c4ac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c4ae:	2a00      	cmp	r2, #0
 800c4b0:	dd4e      	ble.n	800c550 <__sflush_r+0xb8>
 800c4b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c4b4:	2f00      	cmp	r7, #0
 800c4b6:	d04b      	beq.n	800c550 <__sflush_r+0xb8>
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	2080      	movs	r0, #128	@ 0x80
 800c4bc:	682e      	ldr	r6, [r5, #0]
 800c4be:	602a      	str	r2, [r5, #0]
 800c4c0:	001a      	movs	r2, r3
 800c4c2:	0140      	lsls	r0, r0, #5
 800c4c4:	6a21      	ldr	r1, [r4, #32]
 800c4c6:	4002      	ands	r2, r0
 800c4c8:	4203      	tst	r3, r0
 800c4ca:	d033      	beq.n	800c534 <__sflush_r+0x9c>
 800c4cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	075b      	lsls	r3, r3, #29
 800c4d2:	d506      	bpl.n	800c4e2 <__sflush_r+0x4a>
 800c4d4:	6863      	ldr	r3, [r4, #4]
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <__sflush_r+0x4a>
 800c4de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4e0:	1ad2      	subs	r2, r2, r3
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	0028      	movs	r0, r5
 800c4e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c4e8:	6a21      	ldr	r1, [r4, #32]
 800c4ea:	47b8      	blx	r7
 800c4ec:	89a2      	ldrh	r2, [r4, #12]
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	d106      	bne.n	800c500 <__sflush_r+0x68>
 800c4f2:	6829      	ldr	r1, [r5, #0]
 800c4f4:	291d      	cmp	r1, #29
 800c4f6:	d846      	bhi.n	800c586 <__sflush_r+0xee>
 800c4f8:	4b29      	ldr	r3, [pc, #164]	@ (800c5a0 <__sflush_r+0x108>)
 800c4fa:	410b      	asrs	r3, r1
 800c4fc:	07db      	lsls	r3, r3, #31
 800c4fe:	d442      	bmi.n	800c586 <__sflush_r+0xee>
 800c500:	2300      	movs	r3, #0
 800c502:	6063      	str	r3, [r4, #4]
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	04d2      	lsls	r2, r2, #19
 800c50a:	d505      	bpl.n	800c518 <__sflush_r+0x80>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <__sflush_r+0x7e>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d100      	bne.n	800c518 <__sflush_r+0x80>
 800c516:	6560      	str	r0, [r4, #84]	@ 0x54
 800c518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c51a:	602e      	str	r6, [r5, #0]
 800c51c:	2900      	cmp	r1, #0
 800c51e:	d017      	beq.n	800c550 <__sflush_r+0xb8>
 800c520:	0023      	movs	r3, r4
 800c522:	3344      	adds	r3, #68	@ 0x44
 800c524:	4299      	cmp	r1, r3
 800c526:	d002      	beq.n	800c52e <__sflush_r+0x96>
 800c528:	0028      	movs	r0, r5
 800c52a:	f7fe fd29 	bl	800af80 <_free_r>
 800c52e:	2300      	movs	r3, #0
 800c530:	6363      	str	r3, [r4, #52]	@ 0x34
 800c532:	e00d      	b.n	800c550 <__sflush_r+0xb8>
 800c534:	2301      	movs	r3, #1
 800c536:	0028      	movs	r0, r5
 800c538:	47b8      	blx	r7
 800c53a:	0002      	movs	r2, r0
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d1c6      	bne.n	800c4ce <__sflush_r+0x36>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0c3      	beq.n	800c4ce <__sflush_r+0x36>
 800c546:	2b1d      	cmp	r3, #29
 800c548:	d001      	beq.n	800c54e <__sflush_r+0xb6>
 800c54a:	2b16      	cmp	r3, #22
 800c54c:	d11a      	bne.n	800c584 <__sflush_r+0xec>
 800c54e:	602e      	str	r6, [r5, #0]
 800c550:	2000      	movs	r0, #0
 800c552:	e01e      	b.n	800c592 <__sflush_r+0xfa>
 800c554:	690e      	ldr	r6, [r1, #16]
 800c556:	2e00      	cmp	r6, #0
 800c558:	d0fa      	beq.n	800c550 <__sflush_r+0xb8>
 800c55a:	680f      	ldr	r7, [r1, #0]
 800c55c:	600e      	str	r6, [r1, #0]
 800c55e:	1bba      	subs	r2, r7, r6
 800c560:	9201      	str	r2, [sp, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	079b      	lsls	r3, r3, #30
 800c566:	d100      	bne.n	800c56a <__sflush_r+0xd2>
 800c568:	694a      	ldr	r2, [r1, #20]
 800c56a:	60a2      	str	r2, [r4, #8]
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	ddee      	ble.n	800c550 <__sflush_r+0xb8>
 800c572:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c574:	0032      	movs	r2, r6
 800c576:	001f      	movs	r7, r3
 800c578:	0028      	movs	r0, r5
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	6a21      	ldr	r1, [r4, #32]
 800c57e:	47b8      	blx	r7
 800c580:	2800      	cmp	r0, #0
 800c582:	dc07      	bgt.n	800c594 <__sflush_r+0xfc>
 800c584:	89a2      	ldrh	r2, [r4, #12]
 800c586:	2340      	movs	r3, #64	@ 0x40
 800c588:	2001      	movs	r0, #1
 800c58a:	4313      	orrs	r3, r2
 800c58c:	b21b      	sxth	r3, r3
 800c58e:	81a3      	strh	r3, [r4, #12]
 800c590:	4240      	negs	r0, r0
 800c592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c594:	9b01      	ldr	r3, [sp, #4]
 800c596:	1836      	adds	r6, r6, r0
 800c598:	1a1b      	subs	r3, r3, r0
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	e7e6      	b.n	800c56c <__sflush_r+0xd4>
 800c59e:	46c0      	nop			@ (mov r8, r8)
 800c5a0:	dfbffffe 	.word	0xdfbffffe

0800c5a4 <_fflush_r>:
 800c5a4:	690b      	ldr	r3, [r1, #16]
 800c5a6:	b570      	push	{r4, r5, r6, lr}
 800c5a8:	0005      	movs	r5, r0
 800c5aa:	000c      	movs	r4, r1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d102      	bne.n	800c5b6 <_fflush_r+0x12>
 800c5b0:	2500      	movs	r5, #0
 800c5b2:	0028      	movs	r0, r5
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d004      	beq.n	800c5c4 <_fflush_r+0x20>
 800c5ba:	6a03      	ldr	r3, [r0, #32]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d101      	bne.n	800c5c4 <_fflush_r+0x20>
 800c5c0:	f7fd fc18 	bl	8009df4 <__sinit>
 800c5c4:	220c      	movs	r2, #12
 800c5c6:	5ea3      	ldrsh	r3, [r4, r2]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d0f1      	beq.n	800c5b0 <_fflush_r+0xc>
 800c5cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5ce:	07d2      	lsls	r2, r2, #31
 800c5d0:	d404      	bmi.n	800c5dc <_fflush_r+0x38>
 800c5d2:	059b      	lsls	r3, r3, #22
 800c5d4:	d402      	bmi.n	800c5dc <_fflush_r+0x38>
 800c5d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5d8:	f7fd fe33 	bl	800a242 <__retarget_lock_acquire_recursive>
 800c5dc:	0028      	movs	r0, r5
 800c5de:	0021      	movs	r1, r4
 800c5e0:	f7ff ff5a 	bl	800c498 <__sflush_r>
 800c5e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5e6:	0005      	movs	r5, r0
 800c5e8:	07db      	lsls	r3, r3, #31
 800c5ea:	d4e2      	bmi.n	800c5b2 <_fflush_r+0xe>
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	059b      	lsls	r3, r3, #22
 800c5f0:	d4df      	bmi.n	800c5b2 <_fflush_r+0xe>
 800c5f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5f4:	f7fd fe26 	bl	800a244 <__retarget_lock_release_recursive>
 800c5f8:	e7db      	b.n	800c5b2 <_fflush_r+0xe>
	...

0800c5fc <__swhatbuf_r>:
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	000e      	movs	r6, r1
 800c600:	001d      	movs	r5, r3
 800c602:	230e      	movs	r3, #14
 800c604:	5ec9      	ldrsh	r1, [r1, r3]
 800c606:	0014      	movs	r4, r2
 800c608:	b096      	sub	sp, #88	@ 0x58
 800c60a:	2900      	cmp	r1, #0
 800c60c:	da0c      	bge.n	800c628 <__swhatbuf_r+0x2c>
 800c60e:	89b2      	ldrh	r2, [r6, #12]
 800c610:	2380      	movs	r3, #128	@ 0x80
 800c612:	0011      	movs	r1, r2
 800c614:	4019      	ands	r1, r3
 800c616:	421a      	tst	r2, r3
 800c618:	d114      	bne.n	800c644 <__swhatbuf_r+0x48>
 800c61a:	2380      	movs	r3, #128	@ 0x80
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	2000      	movs	r0, #0
 800c620:	6029      	str	r1, [r5, #0]
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	b016      	add	sp, #88	@ 0x58
 800c626:	bd70      	pop	{r4, r5, r6, pc}
 800c628:	466a      	mov	r2, sp
 800c62a:	f000 f853 	bl	800c6d4 <_fstat_r>
 800c62e:	2800      	cmp	r0, #0
 800c630:	dbed      	blt.n	800c60e <__swhatbuf_r+0x12>
 800c632:	23f0      	movs	r3, #240	@ 0xf0
 800c634:	9901      	ldr	r1, [sp, #4]
 800c636:	021b      	lsls	r3, r3, #8
 800c638:	4019      	ands	r1, r3
 800c63a:	4b04      	ldr	r3, [pc, #16]	@ (800c64c <__swhatbuf_r+0x50>)
 800c63c:	18c9      	adds	r1, r1, r3
 800c63e:	424b      	negs	r3, r1
 800c640:	4159      	adcs	r1, r3
 800c642:	e7ea      	b.n	800c61a <__swhatbuf_r+0x1e>
 800c644:	2100      	movs	r1, #0
 800c646:	2340      	movs	r3, #64	@ 0x40
 800c648:	e7e9      	b.n	800c61e <__swhatbuf_r+0x22>
 800c64a:	46c0      	nop			@ (mov r8, r8)
 800c64c:	ffffe000 	.word	0xffffe000

0800c650 <__smakebuf_r>:
 800c650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c652:	2602      	movs	r6, #2
 800c654:	898b      	ldrh	r3, [r1, #12]
 800c656:	0005      	movs	r5, r0
 800c658:	000c      	movs	r4, r1
 800c65a:	b085      	sub	sp, #20
 800c65c:	4233      	tst	r3, r6
 800c65e:	d007      	beq.n	800c670 <__smakebuf_r+0x20>
 800c660:	0023      	movs	r3, r4
 800c662:	3347      	adds	r3, #71	@ 0x47
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	6123      	str	r3, [r4, #16]
 800c668:	2301      	movs	r3, #1
 800c66a:	6163      	str	r3, [r4, #20]
 800c66c:	b005      	add	sp, #20
 800c66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c670:	ab03      	add	r3, sp, #12
 800c672:	aa02      	add	r2, sp, #8
 800c674:	f7ff ffc2 	bl	800c5fc <__swhatbuf_r>
 800c678:	9f02      	ldr	r7, [sp, #8]
 800c67a:	9001      	str	r0, [sp, #4]
 800c67c:	0039      	movs	r1, r7
 800c67e:	0028      	movs	r0, r5
 800c680:	f7ff f84e 	bl	800b720 <_malloc_r>
 800c684:	2800      	cmp	r0, #0
 800c686:	d108      	bne.n	800c69a <__smakebuf_r+0x4a>
 800c688:	220c      	movs	r2, #12
 800c68a:	5ea3      	ldrsh	r3, [r4, r2]
 800c68c:	059a      	lsls	r2, r3, #22
 800c68e:	d4ed      	bmi.n	800c66c <__smakebuf_r+0x1c>
 800c690:	2203      	movs	r2, #3
 800c692:	4393      	bics	r3, r2
 800c694:	431e      	orrs	r6, r3
 800c696:	81a6      	strh	r6, [r4, #12]
 800c698:	e7e2      	b.n	800c660 <__smakebuf_r+0x10>
 800c69a:	2380      	movs	r3, #128	@ 0x80
 800c69c:	89a2      	ldrh	r2, [r4, #12]
 800c69e:	6020      	str	r0, [r4, #0]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	9b03      	ldr	r3, [sp, #12]
 800c6a6:	6120      	str	r0, [r4, #16]
 800c6a8:	6167      	str	r7, [r4, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00c      	beq.n	800c6c8 <__smakebuf_r+0x78>
 800c6ae:	0028      	movs	r0, r5
 800c6b0:	230e      	movs	r3, #14
 800c6b2:	5ee1      	ldrsh	r1, [r4, r3]
 800c6b4:	f000 f820 	bl	800c6f8 <_isatty_r>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d005      	beq.n	800c6c8 <__smakebuf_r+0x78>
 800c6bc:	2303      	movs	r3, #3
 800c6be:	89a2      	ldrh	r2, [r4, #12]
 800c6c0:	439a      	bics	r2, r3
 800c6c2:	3b02      	subs	r3, #2
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	81a3      	strh	r3, [r4, #12]
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	9a01      	ldr	r2, [sp, #4]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	81a3      	strh	r3, [r4, #12]
 800c6d0:	e7cc      	b.n	800c66c <__smakebuf_r+0x1c>
	...

0800c6d4 <_fstat_r>:
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	b570      	push	{r4, r5, r6, lr}
 800c6d8:	4d06      	ldr	r5, [pc, #24]	@ (800c6f4 <_fstat_r+0x20>)
 800c6da:	0004      	movs	r4, r0
 800c6dc:	0008      	movs	r0, r1
 800c6de:	0011      	movs	r1, r2
 800c6e0:	602b      	str	r3, [r5, #0]
 800c6e2:	f7f7 fe49 	bl	8004378 <_fstat>
 800c6e6:	1c43      	adds	r3, r0, #1
 800c6e8:	d103      	bne.n	800c6f2 <_fstat_r+0x1e>
 800c6ea:	682b      	ldr	r3, [r5, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d000      	beq.n	800c6f2 <_fstat_r+0x1e>
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	20000720 	.word	0x20000720

0800c6f8 <_isatty_r>:
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	b570      	push	{r4, r5, r6, lr}
 800c6fc:	4d06      	ldr	r5, [pc, #24]	@ (800c718 <_isatty_r+0x20>)
 800c6fe:	0004      	movs	r4, r0
 800c700:	0008      	movs	r0, r1
 800c702:	602b      	str	r3, [r5, #0]
 800c704:	f7f7 fe3e 	bl	8004384 <_isatty>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d103      	bne.n	800c714 <_isatty_r+0x1c>
 800c70c:	682b      	ldr	r3, [r5, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d000      	beq.n	800c714 <_isatty_r+0x1c>
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	bd70      	pop	{r4, r5, r6, pc}
 800c716:	46c0      	nop			@ (mov r8, r8)
 800c718:	20000720 	.word	0x20000720

0800c71c <_sbrk_r>:
 800c71c:	2300      	movs	r3, #0
 800c71e:	b570      	push	{r4, r5, r6, lr}
 800c720:	4d06      	ldr	r5, [pc, #24]	@ (800c73c <_sbrk_r+0x20>)
 800c722:	0004      	movs	r4, r0
 800c724:	0008      	movs	r0, r1
 800c726:	602b      	str	r3, [r5, #0]
 800c728:	f7f7 fe30 	bl	800438c <_sbrk>
 800c72c:	1c43      	adds	r3, r0, #1
 800c72e:	d103      	bne.n	800c738 <_sbrk_r+0x1c>
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d000      	beq.n	800c738 <_sbrk_r+0x1c>
 800c736:	6023      	str	r3, [r4, #0]
 800c738:	bd70      	pop	{r4, r5, r6, pc}
 800c73a:	46c0      	nop			@ (mov r8, r8)
 800c73c:	20000720 	.word	0x20000720

0800c740 <__assert_func>:
 800c740:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c742:	0014      	movs	r4, r2
 800c744:	001a      	movs	r2, r3
 800c746:	4b09      	ldr	r3, [pc, #36]	@ (800c76c <__assert_func+0x2c>)
 800c748:	0005      	movs	r5, r0
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	000e      	movs	r6, r1
 800c74e:	68d8      	ldr	r0, [r3, #12]
 800c750:	4b07      	ldr	r3, [pc, #28]	@ (800c770 <__assert_func+0x30>)
 800c752:	2c00      	cmp	r4, #0
 800c754:	d101      	bne.n	800c75a <__assert_func+0x1a>
 800c756:	4b07      	ldr	r3, [pc, #28]	@ (800c774 <__assert_func+0x34>)
 800c758:	001c      	movs	r4, r3
 800c75a:	4907      	ldr	r1, [pc, #28]	@ (800c778 <__assert_func+0x38>)
 800c75c:	9301      	str	r3, [sp, #4]
 800c75e:	9402      	str	r4, [sp, #8]
 800c760:	002b      	movs	r3, r5
 800c762:	9600      	str	r6, [sp, #0]
 800c764:	f000 f838 	bl	800c7d8 <fiprintf>
 800c768:	f000 f846 	bl	800c7f8 <abort>
 800c76c:	20000188 	.word	0x20000188
 800c770:	0800d211 	.word	0x0800d211
 800c774:	0800d24c 	.word	0x0800d24c
 800c778:	0800d21e 	.word	0x0800d21e

0800c77c <_calloc_r>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	0c0b      	lsrs	r3, r1, #16
 800c780:	0c15      	lsrs	r5, r2, #16
 800c782:	2b00      	cmp	r3, #0
 800c784:	d11e      	bne.n	800c7c4 <_calloc_r+0x48>
 800c786:	2d00      	cmp	r5, #0
 800c788:	d10c      	bne.n	800c7a4 <_calloc_r+0x28>
 800c78a:	b289      	uxth	r1, r1
 800c78c:	b294      	uxth	r4, r2
 800c78e:	434c      	muls	r4, r1
 800c790:	0021      	movs	r1, r4
 800c792:	f7fe ffc5 	bl	800b720 <_malloc_r>
 800c796:	1e05      	subs	r5, r0, #0
 800c798:	d01a      	beq.n	800c7d0 <_calloc_r+0x54>
 800c79a:	0022      	movs	r2, r4
 800c79c:	2100      	movs	r1, #0
 800c79e:	f7fd fcb9 	bl	800a114 <memset>
 800c7a2:	e016      	b.n	800c7d2 <_calloc_r+0x56>
 800c7a4:	1c2b      	adds	r3, r5, #0
 800c7a6:	1c0c      	adds	r4, r1, #0
 800c7a8:	b289      	uxth	r1, r1
 800c7aa:	b292      	uxth	r2, r2
 800c7ac:	434a      	muls	r2, r1
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	b2a1      	uxth	r1, r4
 800c7b2:	4359      	muls	r1, r3
 800c7b4:	0c14      	lsrs	r4, r2, #16
 800c7b6:	190c      	adds	r4, r1, r4
 800c7b8:	0c23      	lsrs	r3, r4, #16
 800c7ba:	d107      	bne.n	800c7cc <_calloc_r+0x50>
 800c7bc:	0424      	lsls	r4, r4, #16
 800c7be:	b292      	uxth	r2, r2
 800c7c0:	4314      	orrs	r4, r2
 800c7c2:	e7e5      	b.n	800c790 <_calloc_r+0x14>
 800c7c4:	2d00      	cmp	r5, #0
 800c7c6:	d101      	bne.n	800c7cc <_calloc_r+0x50>
 800c7c8:	1c14      	adds	r4, r2, #0
 800c7ca:	e7ed      	b.n	800c7a8 <_calloc_r+0x2c>
 800c7cc:	230c      	movs	r3, #12
 800c7ce:	6003      	str	r3, [r0, #0]
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	0028      	movs	r0, r5
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c7d8 <fiprintf>:
 800c7d8:	b40e      	push	{r1, r2, r3}
 800c7da:	b517      	push	{r0, r1, r2, r4, lr}
 800c7dc:	4c05      	ldr	r4, [pc, #20]	@ (800c7f4 <fiprintf+0x1c>)
 800c7de:	ab05      	add	r3, sp, #20
 800c7e0:	cb04      	ldmia	r3!, {r2}
 800c7e2:	0001      	movs	r1, r0
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	9301      	str	r3, [sp, #4]
 800c7e8:	f7ff fd3a 	bl	800c260 <_vfiprintf_r>
 800c7ec:	bc1e      	pop	{r1, r2, r3, r4}
 800c7ee:	bc08      	pop	{r3}
 800c7f0:	b003      	add	sp, #12
 800c7f2:	4718      	bx	r3
 800c7f4:	20000188 	.word	0x20000188

0800c7f8 <abort>:
 800c7f8:	2006      	movs	r0, #6
 800c7fa:	b510      	push	{r4, lr}
 800c7fc:	f000 f82c 	bl	800c858 <raise>
 800c800:	2001      	movs	r0, #1
 800c802:	f7f7 fda1 	bl	8004348 <_exit>

0800c806 <_raise_r>:
 800c806:	b570      	push	{r4, r5, r6, lr}
 800c808:	0004      	movs	r4, r0
 800c80a:	000d      	movs	r5, r1
 800c80c:	291f      	cmp	r1, #31
 800c80e:	d904      	bls.n	800c81a <_raise_r+0x14>
 800c810:	2316      	movs	r3, #22
 800c812:	6003      	str	r3, [r0, #0]
 800c814:	2001      	movs	r0, #1
 800c816:	4240      	negs	r0, r0
 800c818:	bd70      	pop	{r4, r5, r6, pc}
 800c81a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d004      	beq.n	800c82a <_raise_r+0x24>
 800c820:	008a      	lsls	r2, r1, #2
 800c822:	189b      	adds	r3, r3, r2
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	2a00      	cmp	r2, #0
 800c828:	d108      	bne.n	800c83c <_raise_r+0x36>
 800c82a:	0020      	movs	r0, r4
 800c82c:	f000 f830 	bl	800c890 <_getpid_r>
 800c830:	002a      	movs	r2, r5
 800c832:	0001      	movs	r1, r0
 800c834:	0020      	movs	r0, r4
 800c836:	f000 f819 	bl	800c86c <_kill_r>
 800c83a:	e7ed      	b.n	800c818 <_raise_r+0x12>
 800c83c:	2a01      	cmp	r2, #1
 800c83e:	d009      	beq.n	800c854 <_raise_r+0x4e>
 800c840:	1c51      	adds	r1, r2, #1
 800c842:	d103      	bne.n	800c84c <_raise_r+0x46>
 800c844:	2316      	movs	r3, #22
 800c846:	6003      	str	r3, [r0, #0]
 800c848:	2001      	movs	r0, #1
 800c84a:	e7e5      	b.n	800c818 <_raise_r+0x12>
 800c84c:	2100      	movs	r1, #0
 800c84e:	0028      	movs	r0, r5
 800c850:	6019      	str	r1, [r3, #0]
 800c852:	4790      	blx	r2
 800c854:	2000      	movs	r0, #0
 800c856:	e7df      	b.n	800c818 <_raise_r+0x12>

0800c858 <raise>:
 800c858:	b510      	push	{r4, lr}
 800c85a:	4b03      	ldr	r3, [pc, #12]	@ (800c868 <raise+0x10>)
 800c85c:	0001      	movs	r1, r0
 800c85e:	6818      	ldr	r0, [r3, #0]
 800c860:	f7ff ffd1 	bl	800c806 <_raise_r>
 800c864:	bd10      	pop	{r4, pc}
 800c866:	46c0      	nop			@ (mov r8, r8)
 800c868:	20000188 	.word	0x20000188

0800c86c <_kill_r>:
 800c86c:	2300      	movs	r3, #0
 800c86e:	b570      	push	{r4, r5, r6, lr}
 800c870:	4d06      	ldr	r5, [pc, #24]	@ (800c88c <_kill_r+0x20>)
 800c872:	0004      	movs	r4, r0
 800c874:	0008      	movs	r0, r1
 800c876:	0011      	movs	r1, r2
 800c878:	602b      	str	r3, [r5, #0]
 800c87a:	f7f7 fd5d 	bl	8004338 <_kill>
 800c87e:	1c43      	adds	r3, r0, #1
 800c880:	d103      	bne.n	800c88a <_kill_r+0x1e>
 800c882:	682b      	ldr	r3, [r5, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d000      	beq.n	800c88a <_kill_r+0x1e>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd70      	pop	{r4, r5, r6, pc}
 800c88c:	20000720 	.word	0x20000720

0800c890 <_getpid_r>:
 800c890:	b510      	push	{r4, lr}
 800c892:	f7f7 fd4f 	bl	8004334 <_getpid>
 800c896:	bd10      	pop	{r4, pc}

0800c898 <_init>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	46c0      	nop			@ (mov r8, r8)
 800c89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89e:	bc08      	pop	{r3}
 800c8a0:	469e      	mov	lr, r3
 800c8a2:	4770      	bx	lr

0800c8a4 <_fini>:
 800c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a6:	46c0      	nop			@ (mov r8, r8)
 800c8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8aa:	bc08      	pop	{r3}
 800c8ac:	469e      	mov	lr, r3
 800c8ae:	4770      	bx	lr
